
DA16k-PMOD-demo-B-U585I-IOT02A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000138f4  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010b4  08013b30  08013b30  00014b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014be4  08014be4  00015be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08014bec  08014bec  00015bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08014bf4  08014bf4  00015bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000700  20000000  08014bf8  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000016b0  20000700  080152f8  00016700  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001db0  080152f8  00016db0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00016700  2**0
                  CONTENTS, READONLY
 10 .debug_info   000262f2  00000000  00000000  00016736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004e47  00000000  00000000  0003ca28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d18  00000000  00000000  00041870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001670  00000000  00000000  00043588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b7dc  00000000  00000000  00044bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002704b  00000000  00000000  000803d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00162af0  00000000  00000000  000a741f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00209f0f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009160  00000000  00000000  00209f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005f  00000000  00000000  002130b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000700 	.word	0x20000700
 8000254:	00000000 	.word	0x00000000
 8000258:	08013b14 	.word	0x08013b14

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000704 	.word	0x20000704
 8000274:	08013b14 	.word	0x08013b14

08000278 <strcmp>:
 8000278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800027c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000280:	2a01      	cmp	r2, #1
 8000282:	bf28      	it	cs
 8000284:	429a      	cmpcs	r2, r3
 8000286:	d0f7      	beq.n	8000278 <strcmp>
 8000288:	1ad0      	subs	r0, r2, r3
 800028a:	4770      	bx	lr

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_drsub>:
 800029c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	e002      	b.n	80002a8 <__adddf3>
 80002a2:	bf00      	nop

080002a4 <__aeabi_dsub>:
 80002a4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002a8 <__adddf3>:
 80002a8:	b530      	push	{r4, r5, lr}
 80002aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b2:	ea94 0f05 	teq	r4, r5
 80002b6:	bf08      	it	eq
 80002b8:	ea90 0f02 	teqeq	r0, r2
 80002bc:	bf1f      	itttt	ne
 80002be:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ce:	f000 80e2 	beq.w	8000496 <__adddf3+0x1ee>
 80002d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002da:	bfb8      	it	lt
 80002dc:	426d      	neglt	r5, r5
 80002de:	dd0c      	ble.n	80002fa <__adddf3+0x52>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea80 0202 	eor.w	r2, r0, r2
 80002e6:	ea81 0303 	eor.w	r3, r1, r3
 80002ea:	ea82 0000 	eor.w	r0, r2, r0
 80002ee:	ea83 0101 	eor.w	r1, r3, r1
 80002f2:	ea80 0202 	eor.w	r2, r0, r2
 80002f6:	ea81 0303 	eor.w	r3, r1, r3
 80002fa:	2d36      	cmp	r5, #54	@ 0x36
 80002fc:	bf88      	it	hi
 80002fe:	bd30      	pophi	{r4, r5, pc}
 8000300:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000304:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000308:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800030c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x70>
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800031c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000320:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x84>
 8000326:	4252      	negs	r2, r2
 8000328:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032c:	ea94 0f05 	teq	r4, r5
 8000330:	f000 80a7 	beq.w	8000482 <__adddf3+0x1da>
 8000334:	f1a4 0401 	sub.w	r4, r4, #1
 8000338:	f1d5 0e20 	rsbs	lr, r5, #32
 800033c:	db0d      	blt.n	800035a <__adddf3+0xb2>
 800033e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000342:	fa22 f205 	lsr.w	r2, r2, r5
 8000346:	1880      	adds	r0, r0, r2
 8000348:	f141 0100 	adc.w	r1, r1, #0
 800034c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000350:	1880      	adds	r0, r0, r2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	4159      	adcs	r1, r3
 8000358:	e00e      	b.n	8000378 <__adddf3+0xd0>
 800035a:	f1a5 0520 	sub.w	r5, r5, #32
 800035e:	f10e 0e20 	add.w	lr, lr, #32
 8000362:	2a01      	cmp	r2, #1
 8000364:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000368:	bf28      	it	cs
 800036a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	18c0      	adds	r0, r0, r3
 8000374:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000378:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800037c:	d507      	bpl.n	800038e <__adddf3+0xe6>
 800037e:	f04f 0e00 	mov.w	lr, #0
 8000382:	f1dc 0c00 	rsbs	ip, ip, #0
 8000386:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038a:	eb6e 0101 	sbc.w	r1, lr, r1
 800038e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000392:	d31b      	bcc.n	80003cc <__adddf3+0x124>
 8000394:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000398:	d30c      	bcc.n	80003b4 <__adddf3+0x10c>
 800039a:	0849      	lsrs	r1, r1, #1
 800039c:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a4:	f104 0401 	add.w	r4, r4, #1
 80003a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ac:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b0:	f080 809a 	bcs.w	80004e8 <__adddf3+0x240>
 80003b4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003b8:	bf08      	it	eq
 80003ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003be:	f150 0000 	adcs.w	r0, r0, #0
 80003c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003c6:	ea41 0105 	orr.w	r1, r1, r5
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d0:	4140      	adcs	r0, r0
 80003d2:	eb41 0101 	adc.w	r1, r1, r1
 80003d6:	3c01      	subs	r4, #1
 80003d8:	bf28      	it	cs
 80003da:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003de:	d2e9      	bcs.n	80003b4 <__adddf3+0x10c>
 80003e0:	f091 0f00 	teq	r1, #0
 80003e4:	bf04      	itt	eq
 80003e6:	4601      	moveq	r1, r0
 80003e8:	2000      	moveq	r0, #0
 80003ea:	fab1 f381 	clz	r3, r1
 80003ee:	bf08      	it	eq
 80003f0:	3320      	addeq	r3, #32
 80003f2:	f1a3 030b 	sub.w	r3, r3, #11
 80003f6:	f1b3 0220 	subs.w	r2, r3, #32
 80003fa:	da0c      	bge.n	8000416 <__adddf3+0x16e>
 80003fc:	320c      	adds	r2, #12
 80003fe:	dd08      	ble.n	8000412 <__adddf3+0x16a>
 8000400:	f102 0c14 	add.w	ip, r2, #20
 8000404:	f1c2 020c 	rsb	r2, r2, #12
 8000408:	fa01 f00c 	lsl.w	r0, r1, ip
 800040c:	fa21 f102 	lsr.w	r1, r1, r2
 8000410:	e00c      	b.n	800042c <__adddf3+0x184>
 8000412:	f102 0214 	add.w	r2, r2, #20
 8000416:	bfd8      	it	le
 8000418:	f1c2 0c20 	rsble	ip, r2, #32
 800041c:	fa01 f102 	lsl.w	r1, r1, r2
 8000420:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000424:	bfdc      	itt	le
 8000426:	ea41 010c 	orrle.w	r1, r1, ip
 800042a:	4090      	lslle	r0, r2
 800042c:	1ae4      	subs	r4, r4, r3
 800042e:	bfa2      	ittt	ge
 8000430:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000434:	4329      	orrge	r1, r5
 8000436:	bd30      	popge	{r4, r5, pc}
 8000438:	ea6f 0404 	mvn.w	r4, r4
 800043c:	3c1f      	subs	r4, #31
 800043e:	da1c      	bge.n	800047a <__adddf3+0x1d2>
 8000440:	340c      	adds	r4, #12
 8000442:	dc0e      	bgt.n	8000462 <__adddf3+0x1ba>
 8000444:	f104 0414 	add.w	r4, r4, #20
 8000448:	f1c4 0220 	rsb	r2, r4, #32
 800044c:	fa20 f004 	lsr.w	r0, r0, r4
 8000450:	fa01 f302 	lsl.w	r3, r1, r2
 8000454:	ea40 0003 	orr.w	r0, r0, r3
 8000458:	fa21 f304 	lsr.w	r3, r1, r4
 800045c:	ea45 0103 	orr.w	r1, r5, r3
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	f1c4 040c 	rsb	r4, r4, #12
 8000466:	f1c4 0220 	rsb	r2, r4, #32
 800046a:	fa20 f002 	lsr.w	r0, r0, r2
 800046e:	fa01 f304 	lsl.w	r3, r1, r4
 8000472:	ea40 0003 	orr.w	r0, r0, r3
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	fa21 f004 	lsr.w	r0, r1, r4
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	f094 0f00 	teq	r4, #0
 8000486:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048a:	bf06      	itte	eq
 800048c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000490:	3401      	addeq	r4, #1
 8000492:	3d01      	subne	r5, #1
 8000494:	e74e      	b.n	8000334 <__adddf3+0x8c>
 8000496:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049a:	bf18      	it	ne
 800049c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a0:	d029      	beq.n	80004f6 <__adddf3+0x24e>
 80004a2:	ea94 0f05 	teq	r4, r5
 80004a6:	bf08      	it	eq
 80004a8:	ea90 0f02 	teqeq	r0, r2
 80004ac:	d005      	beq.n	80004ba <__adddf3+0x212>
 80004ae:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b2:	bf04      	itt	eq
 80004b4:	4619      	moveq	r1, r3
 80004b6:	4610      	moveq	r0, r2
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	ea91 0f03 	teq	r1, r3
 80004be:	bf1e      	ittt	ne
 80004c0:	2100      	movne	r1, #0
 80004c2:	2000      	movne	r0, #0
 80004c4:	bd30      	popne	{r4, r5, pc}
 80004c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ca:	d105      	bne.n	80004d8 <__adddf3+0x230>
 80004cc:	0040      	lsls	r0, r0, #1
 80004ce:	4149      	adcs	r1, r1
 80004d0:	bf28      	it	cs
 80004d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004d6:	bd30      	pop	{r4, r5, pc}
 80004d8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004dc:	bf3c      	itt	cc
 80004de:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e2:	bd30      	popcc	{r4, r5, pc}
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004ec:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f0:	f04f 0000 	mov.w	r0, #0
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fa:	bf1a      	itte	ne
 80004fc:	4619      	movne	r1, r3
 80004fe:	4610      	movne	r0, r2
 8000500:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000504:	bf1c      	itt	ne
 8000506:	460b      	movne	r3, r1
 8000508:	4602      	movne	r2, r0
 800050a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800050e:	bf06      	itte	eq
 8000510:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000514:	ea91 0f03 	teqeq	r1, r3
 8000518:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	bf00      	nop

08000520 <__aeabi_ui2d>:
 8000520:	f090 0f00 	teq	r0, #0
 8000524:	bf04      	itt	eq
 8000526:	2100      	moveq	r1, #0
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000530:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000534:	f04f 0500 	mov.w	r5, #0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e750      	b.n	80003e0 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_i2d>:
 8000540:	f090 0f00 	teq	r0, #0
 8000544:	bf04      	itt	eq
 8000546:	2100      	moveq	r1, #0
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000550:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000554:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000558:	bf48      	it	mi
 800055a:	4240      	negmi	r0, r0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e73e      	b.n	80003e0 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_f2d>:
 8000564:	0042      	lsls	r2, r0, #1
 8000566:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056a:	ea4f 0131 	mov.w	r1, r1, rrx
 800056e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000572:	bf1f      	itttt	ne
 8000574:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000578:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800057c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000580:	4770      	bxne	lr
 8000582:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000586:	bf08      	it	eq
 8000588:	4770      	bxeq	lr
 800058a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800058e:	bf04      	itt	eq
 8000590:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800059c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a4:	e71c      	b.n	80003e0 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_ul2d>:
 80005a8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ac:	bf08      	it	eq
 80005ae:	4770      	bxeq	lr
 80005b0:	b530      	push	{r4, r5, lr}
 80005b2:	f04f 0500 	mov.w	r5, #0
 80005b6:	e00a      	b.n	80005ce <__aeabi_l2d+0x16>

080005b8 <__aeabi_l2d>:
 80005b8:	ea50 0201 	orrs.w	r2, r0, r1
 80005bc:	bf08      	it	eq
 80005be:	4770      	bxeq	lr
 80005c0:	b530      	push	{r4, r5, lr}
 80005c2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005c6:	d502      	bpl.n	80005ce <__aeabi_l2d+0x16>
 80005c8:	4240      	negs	r0, r0
 80005ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ce:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005da:	f43f aed8 	beq.w	800038e <__adddf3+0xe6>
 80005de:	f04f 0203 	mov.w	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f6:	f1c2 0320 	rsb	r3, r2, #32
 80005fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000602:	fa01 fe03 	lsl.w	lr, r1, r3
 8000606:	ea40 000e 	orr.w	r0, r0, lr
 800060a:	fa21 f102 	lsr.w	r1, r1, r2
 800060e:	4414      	add	r4, r2
 8000610:	e6bd      	b.n	800038e <__adddf3+0xe6>
 8000612:	bf00      	nop

08000614 <__aeabi_dmul>:
 8000614:	b570      	push	{r4, r5, r6, lr}
 8000616:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800061e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000622:	bf1d      	ittte	ne
 8000624:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000628:	ea94 0f0c 	teqne	r4, ip
 800062c:	ea95 0f0c 	teqne	r5, ip
 8000630:	f000 f8de 	bleq	80007f0 <__aeabi_dmul+0x1dc>
 8000634:	442c      	add	r4, r5
 8000636:	ea81 0603 	eor.w	r6, r1, r3
 800063a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000642:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000646:	bf18      	it	ne
 8000648:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000650:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000654:	d038      	beq.n	80006c8 <__aeabi_dmul+0xb4>
 8000656:	fba0 ce02 	umull	ip, lr, r0, r2
 800065a:	f04f 0500 	mov.w	r5, #0
 800065e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000662:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000666:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066a:	f04f 0600 	mov.w	r6, #0
 800066e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000672:	f09c 0f00 	teq	ip, #0
 8000676:	bf18      	it	ne
 8000678:	f04e 0e01 	orrne.w	lr, lr, #1
 800067c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000680:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000684:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000688:	d204      	bcs.n	8000694 <__aeabi_dmul+0x80>
 800068a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068e:	416d      	adcs	r5, r5
 8000690:	eb46 0606 	adc.w	r6, r6, r6
 8000694:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000698:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800069c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006ac:	bf88      	it	hi
 80006ae:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b2:	d81e      	bhi.n	80006f2 <__aeabi_dmul+0xde>
 80006b4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006b8:	bf08      	it	eq
 80006ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006be:	f150 0000 	adcs.w	r0, r0, #0
 80006c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006cc:	ea46 0101 	orr.w	r1, r6, r1
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006dc:	bfc2      	ittt	gt
 80006de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e6:	bd70      	popgt	{r4, r5, r6, pc}
 80006e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006ec:	f04f 0e00 	mov.w	lr, #0
 80006f0:	3c01      	subs	r4, #1
 80006f2:	f300 80ab 	bgt.w	800084c <__aeabi_dmul+0x238>
 80006f6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fa:	bfde      	ittt	le
 80006fc:	2000      	movle	r0, #0
 80006fe:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000702:	bd70      	pople	{r4, r5, r6, pc}
 8000704:	f1c4 0400 	rsb	r4, r4, #0
 8000708:	3c20      	subs	r4, #32
 800070a:	da35      	bge.n	8000778 <__aeabi_dmul+0x164>
 800070c:	340c      	adds	r4, #12
 800070e:	dc1b      	bgt.n	8000748 <__aeabi_dmul+0x134>
 8000710:	f104 0414 	add.w	r4, r4, #20
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f305 	lsl.w	r3, r0, r5
 800071c:	fa20 f004 	lsr.w	r0, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800072c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	fa21 f604 	lsr.w	r6, r1, r4
 8000738:	eb42 0106 	adc.w	r1, r2, r6
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f1c4 040c 	rsb	r4, r4, #12
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f304 	lsl.w	r3, r0, r4
 8000754:	fa20 f005 	lsr.w	r0, r0, r5
 8000758:	fa01 f204 	lsl.w	r2, r1, r4
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	f141 0100 	adc.w	r1, r1, #0
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f205 	lsl.w	r2, r0, r5
 8000780:	ea4e 0e02 	orr.w	lr, lr, r2
 8000784:	fa20 f304 	lsr.w	r3, r0, r4
 8000788:	fa01 f205 	lsl.w	r2, r1, r5
 800078c:	ea43 0302 	orr.w	r3, r3, r2
 8000790:	fa21 f004 	lsr.w	r0, r1, r4
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	fa21 f204 	lsr.w	r2, r1, r4
 800079c:	ea20 0002 	bic.w	r0, r0, r2
 80007a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f094 0f00 	teq	r4, #0
 80007b4:	d10f      	bne.n	80007d6 <__aeabi_dmul+0x1c2>
 80007b6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ba:	0040      	lsls	r0, r0, #1
 80007bc:	eb41 0101 	adc.w	r1, r1, r1
 80007c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c4:	bf08      	it	eq
 80007c6:	3c01      	subeq	r4, #1
 80007c8:	d0f7      	beq.n	80007ba <__aeabi_dmul+0x1a6>
 80007ca:	ea41 0106 	orr.w	r1, r1, r6
 80007ce:	f095 0f00 	teq	r5, #0
 80007d2:	bf18      	it	ne
 80007d4:	4770      	bxne	lr
 80007d6:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007da:	0052      	lsls	r2, r2, #1
 80007dc:	eb43 0303 	adc.w	r3, r3, r3
 80007e0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e4:	bf08      	it	eq
 80007e6:	3d01      	subeq	r5, #1
 80007e8:	d0f7      	beq.n	80007da <__aeabi_dmul+0x1c6>
 80007ea:	ea43 0306 	orr.w	r3, r3, r6
 80007ee:	4770      	bx	lr
 80007f0:	ea94 0f0c 	teq	r4, ip
 80007f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f8:	bf18      	it	ne
 80007fa:	ea95 0f0c 	teqne	r5, ip
 80007fe:	d00c      	beq.n	800081a <__aeabi_dmul+0x206>
 8000800:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000804:	bf18      	it	ne
 8000806:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080a:	d1d1      	bne.n	80007b0 <__aeabi_dmul+0x19c>
 800080c:	ea81 0103 	eor.w	r1, r1, r3
 8000810:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	bd70      	pop	{r4, r5, r6, pc}
 800081a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081e:	bf06      	itte	eq
 8000820:	4610      	moveq	r0, r2
 8000822:	4619      	moveq	r1, r3
 8000824:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000828:	d019      	beq.n	800085e <__aeabi_dmul+0x24a>
 800082a:	ea94 0f0c 	teq	r4, ip
 800082e:	d102      	bne.n	8000836 <__aeabi_dmul+0x222>
 8000830:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000834:	d113      	bne.n	800085e <__aeabi_dmul+0x24a>
 8000836:	ea95 0f0c 	teq	r5, ip
 800083a:	d105      	bne.n	8000848 <__aeabi_dmul+0x234>
 800083c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000840:	bf1c      	itt	ne
 8000842:	4610      	movne	r0, r2
 8000844:	4619      	movne	r1, r3
 8000846:	d10a      	bne.n	800085e <__aeabi_dmul+0x24a>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000850:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000854:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000862:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000866:	bd70      	pop	{r4, r5, r6, pc}

08000868 <__aeabi_ddiv>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800086e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000872:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000876:	bf1d      	ittte	ne
 8000878:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800087c:	ea94 0f0c 	teqne	r4, ip
 8000880:	ea95 0f0c 	teqne	r5, ip
 8000884:	f000 f8a7 	bleq	80009d6 <__aeabi_ddiv+0x16e>
 8000888:	eba4 0405 	sub.w	r4, r4, r5
 800088c:	ea81 0e03 	eor.w	lr, r1, r3
 8000890:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000894:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000898:	f000 8088 	beq.w	80009ac <__aeabi_ddiv+0x144>
 800089c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008bc:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c0:	429d      	cmp	r5, r3
 80008c2:	bf08      	it	eq
 80008c4:	4296      	cmpeq	r6, r2
 80008c6:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ca:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ce:	d202      	bcs.n	80008d6 <__aeabi_ddiv+0x6e>
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	1ab6      	subs	r6, r6, r2
 80008d8:	eb65 0503 	sbc.w	r5, r5, r3
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008e6:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000944:	ea55 0e06 	orrs.w	lr, r5, r6
 8000948:	d018      	beq.n	800097c <__aeabi_ddiv+0x114>
 800094a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000952:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000956:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000962:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000966:	d1c0      	bne.n	80008ea <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	d10b      	bne.n	8000986 <__aeabi_ddiv+0x11e>
 800096e:	ea41 0100 	orr.w	r1, r1, r0
 8000972:	f04f 0000 	mov.w	r0, #0
 8000976:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097a:	e7b6      	b.n	80008ea <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	bf04      	itt	eq
 8000982:	4301      	orreq	r1, r0
 8000984:	2000      	moveq	r0, #0
 8000986:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098a:	bf88      	it	hi
 800098c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000990:	f63f aeaf 	bhi.w	80006f2 <__aeabi_dmul+0xde>
 8000994:	ebb5 0c03 	subs.w	ip, r5, r3
 8000998:	bf04      	itt	eq
 800099a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a2:	f150 0000 	adcs.w	r0, r0, #0
 80009a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009aa:	bd70      	pop	{r4, r5, r6, pc}
 80009ac:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b8:	bfc2      	ittt	gt
 80009ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	popgt	{r4, r5, r6, pc}
 80009c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009c8:	f04f 0e00 	mov.w	lr, #0
 80009cc:	3c01      	subs	r4, #1
 80009ce:	e690      	b.n	80006f2 <__aeabi_dmul+0xde>
 80009d0:	ea45 0e06 	orr.w	lr, r5, r6
 80009d4:	e68d      	b.n	80006f2 <__aeabi_dmul+0xde>
 80009d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009da:	ea94 0f0c 	teq	r4, ip
 80009de:	bf08      	it	eq
 80009e0:	ea95 0f0c 	teqeq	r5, ip
 80009e4:	f43f af3b 	beq.w	800085e <__aeabi_dmul+0x24a>
 80009e8:	ea94 0f0c 	teq	r4, ip
 80009ec:	d10a      	bne.n	8000a04 <__aeabi_ddiv+0x19c>
 80009ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f2:	f47f af34 	bne.w	800085e <__aeabi_dmul+0x24a>
 80009f6:	ea95 0f0c 	teq	r5, ip
 80009fa:	f47f af25 	bne.w	8000848 <__aeabi_dmul+0x234>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e72c      	b.n	800085e <__aeabi_dmul+0x24a>
 8000a04:	ea95 0f0c 	teq	r5, ip
 8000a08:	d106      	bne.n	8000a18 <__aeabi_ddiv+0x1b0>
 8000a0a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0e:	f43f aefd 	beq.w	800080c <__aeabi_dmul+0x1f8>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e722      	b.n	800085e <__aeabi_dmul+0x24a>
 8000a18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a1c:	bf18      	it	ne
 8000a1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a22:	f47f aec5 	bne.w	80007b0 <__aeabi_dmul+0x19c>
 8000a26:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2a:	f47f af0d 	bne.w	8000848 <__aeabi_dmul+0x234>
 8000a2e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a32:	f47f aeeb 	bne.w	800080c <__aeabi_dmul+0x1f8>
 8000a36:	e712      	b.n	800085e <__aeabi_dmul+0x24a>

08000a38 <__gedf2>:
 8000a38:	f04f 3cff 	mov.w	ip, #4294967295
 8000a3c:	e006      	b.n	8000a4c <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__ledf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	e002      	b.n	8000a4c <__cmpdf2+0x4>
 8000a46:	bf00      	nop

08000a48 <__cmpdf2>:
 8000a48:	f04f 0c01 	mov.w	ip, #1
 8000a4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a62:	d01b      	beq.n	8000a9c <__cmpdf2+0x54>
 8000a64:	b001      	add	sp, #4
 8000a66:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6a:	bf0c      	ite	eq
 8000a6c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a70:	ea91 0f03 	teqne	r1, r3
 8000a74:	bf02      	ittt	eq
 8000a76:	ea90 0f02 	teqeq	r0, r2
 8000a7a:	2000      	moveq	r0, #0
 8000a7c:	4770      	bxeq	lr
 8000a7e:	f110 0f00 	cmn.w	r0, #0
 8000a82:	ea91 0f03 	teq	r1, r3
 8000a86:	bf58      	it	pl
 8000a88:	4299      	cmppl	r1, r3
 8000a8a:	bf08      	it	eq
 8000a8c:	4290      	cmpeq	r0, r2
 8000a8e:	bf2c      	ite	cs
 8000a90:	17d8      	asrcs	r0, r3, #31
 8000a92:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a96:	f040 0001 	orr.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__cmpdf2+0x64>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d107      	bne.n	8000abc <__cmpdf2+0x74>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d1d6      	bne.n	8000a64 <__cmpdf2+0x1c>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d0d3      	beq.n	8000a64 <__cmpdf2+0x1c>
 8000abc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_cdrcmple>:
 8000ac4:	4684      	mov	ip, r0
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4662      	mov	r2, ip
 8000aca:	468c      	mov	ip, r1
 8000acc:	4619      	mov	r1, r3
 8000ace:	4663      	mov	r3, ip
 8000ad0:	e000      	b.n	8000ad4 <__aeabi_cdcmpeq>
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_cdcmpeq>:
 8000ad4:	b501      	push	{r0, lr}
 8000ad6:	f7ff ffb7 	bl	8000a48 <__cmpdf2>
 8000ada:	2800      	cmp	r0, #0
 8000adc:	bf48      	it	mi
 8000ade:	f110 0f00 	cmnmi.w	r0, #0
 8000ae2:	bd01      	pop	{r0, pc}

08000ae4 <__aeabi_dcmpeq>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff fff4 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000aec:	bf0c      	ite	eq
 8000aee:	2001      	moveq	r0, #1
 8000af0:	2000      	movne	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmplt>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffea 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000b00:	bf34      	ite	cc
 8000b02:	2001      	movcc	r0, #1
 8000b04:	2000      	movcs	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmple>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffe0 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpge>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffce 	bl	8000ac4 <__aeabi_cdrcmple>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpgt>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffc4 	bl	8000ac4 <__aeabi_cdrcmple>
 8000b3c:	bf34      	ite	cc
 8000b3e:	2001      	movcc	r0, #1
 8000b40:	2000      	movcs	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpun>:
 8000b48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b50:	d102      	bne.n	8000b58 <__aeabi_dcmpun+0x10>
 8000b52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b56:	d10a      	bne.n	8000b6e <__aeabi_dcmpun+0x26>
 8000b58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b60:	d102      	bne.n	8000b68 <__aeabi_dcmpun+0x20>
 8000b62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_dcmpun+0x26>
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0001 	mov.w	r0, #1
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_d2iz>:
 8000b74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b7c:	d215      	bcs.n	8000baa <__aeabi_d2iz+0x36>
 8000b7e:	d511      	bpl.n	8000ba4 <__aeabi_d2iz+0x30>
 8000b80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d912      	bls.n	8000bb0 <__aeabi_d2iz+0x3c>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	4240      	negne	r0, r0
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d105      	bne.n	8000bbc <__aeabi_d2iz+0x48>
 8000bb0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb4:	bf08      	it	eq
 8000bb6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_uldivmod>:
 8000bc4:	b953      	cbnz	r3, 8000bdc <__aeabi_uldivmod+0x18>
 8000bc6:	b94a      	cbnz	r2, 8000bdc <__aeabi_uldivmod+0x18>
 8000bc8:	2900      	cmp	r1, #0
 8000bca:	bf08      	it	eq
 8000bcc:	2800      	cmpeq	r0, #0
 8000bce:	bf1c      	itt	ne
 8000bd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd8:	f000 b97e 	b.w	8000ed8 <__aeabi_idiv0>
 8000bdc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be4:	f000 f806 	bl	8000bf4 <__udivmoddi4>
 8000be8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf0:	b004      	add	sp, #16
 8000bf2:	4770      	bx	lr

08000bf4 <__udivmoddi4>:
 8000bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bf8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000bfa:	460c      	mov	r4, r1
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d14d      	bne.n	8000c9c <__udivmoddi4+0xa8>
 8000c00:	428a      	cmp	r2, r1
 8000c02:	460f      	mov	r7, r1
 8000c04:	4684      	mov	ip, r0
 8000c06:	4696      	mov	lr, r2
 8000c08:	fab2 f382 	clz	r3, r2
 8000c0c:	d960      	bls.n	8000cd0 <__udivmoddi4+0xdc>
 8000c0e:	b14b      	cbz	r3, 8000c24 <__udivmoddi4+0x30>
 8000c10:	fa02 fe03 	lsl.w	lr, r2, r3
 8000c14:	f1c3 0220 	rsb	r2, r3, #32
 8000c18:	409f      	lsls	r7, r3
 8000c1a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c28:	fa1f f48e 	uxth.w	r4, lr
 8000c2c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c30:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c34:	fb06 7711 	mls	r7, r6, r1, r7
 8000c38:	fb01 f004 	mul.w	r0, r1, r4
 8000c3c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x62>
 8000c44:	eb1e 0202 	adds.w	r2, lr, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	d202      	bcs.n	8000c54 <__udivmoddi4+0x60>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f200 812d 	bhi.w	8000eae <__udivmoddi4+0x2ba>
 8000c54:	4639      	mov	r1, r7
 8000c56:	1a12      	subs	r2, r2, r0
 8000c58:	fa1f fc8c 	uxth.w	ip, ip
 8000c5c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000c60:	fb06 2210 	mls	r2, r6, r0, r2
 8000c64:	fb00 f404 	mul.w	r4, r0, r4
 8000c68:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c6c:	4564      	cmp	r4, ip
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x8e>
 8000c70:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c78:	d202      	bcs.n	8000c80 <__udivmoddi4+0x8c>
 8000c7a:	4564      	cmp	r4, ip
 8000c7c:	f200 811a 	bhi.w	8000eb4 <__udivmoddi4+0x2c0>
 8000c80:	4610      	mov	r0, r2
 8000c82:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c86:	ebac 0c04 	sub.w	ip, ip, r4
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	b125      	cbz	r5, 8000c98 <__udivmoddi4+0xa4>
 8000c8e:	fa2c f303 	lsr.w	r3, ip, r3
 8000c92:	2200      	movs	r2, #0
 8000c94:	e9c5 3200 	strd	r3, r2, [r5]
 8000c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d905      	bls.n	8000cac <__udivmoddi4+0xb8>
 8000ca0:	b10d      	cbz	r5, 8000ca6 <__udivmoddi4+0xb2>
 8000ca2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4608      	mov	r0, r1
 8000caa:	e7f5      	b.n	8000c98 <__udivmoddi4+0xa4>
 8000cac:	fab3 f183 	clz	r1, r3
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	d14d      	bne.n	8000d50 <__udivmoddi4+0x15c>
 8000cb4:	42a3      	cmp	r3, r4
 8000cb6:	f0c0 80f2 	bcc.w	8000e9e <__udivmoddi4+0x2aa>
 8000cba:	4290      	cmp	r0, r2
 8000cbc:	f080 80ef 	bcs.w	8000e9e <__udivmoddi4+0x2aa>
 8000cc0:	4606      	mov	r6, r0
 8000cc2:	4623      	mov	r3, r4
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e6      	beq.n	8000c98 <__udivmoddi4+0xa4>
 8000cca:	e9c5 6300 	strd	r6, r3, [r5]
 8000cce:	e7e3      	b.n	8000c98 <__udivmoddi4+0xa4>
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f040 80a2 	bne.w	8000e1a <__udivmoddi4+0x226>
 8000cd6:	1a8a      	subs	r2, r1, r2
 8000cd8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000cdc:	fa1f f68e 	uxth.w	r6, lr
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 f4f7 	udiv	r4, r2, r7
 8000ce6:	fb07 2014 	mls	r0, r7, r4, r2
 8000cea:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb06 f004 	mul.w	r0, r6, r4
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d90f      	bls.n	8000d1a <__udivmoddi4+0x126>
 8000cfa:	eb1e 0202 	adds.w	r2, lr, r2
 8000cfe:	f104 38ff 	add.w	r8, r4, #4294967295
 8000d02:	bf2c      	ite	cs
 8000d04:	f04f 0901 	movcs.w	r9, #1
 8000d08:	f04f 0900 	movcc.w	r9, #0
 8000d0c:	4290      	cmp	r0, r2
 8000d0e:	d903      	bls.n	8000d18 <__udivmoddi4+0x124>
 8000d10:	f1b9 0f00 	cmp.w	r9, #0
 8000d14:	f000 80c8 	beq.w	8000ea8 <__udivmoddi4+0x2b4>
 8000d18:	4644      	mov	r4, r8
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	fa1f fc8c 	uxth.w	ip, ip
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	fb00 f606 	mul.w	r6, r0, r6
 8000d2c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d30:	4566      	cmp	r6, ip
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x152>
 8000d34:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x150>
 8000d3e:	4566      	cmp	r6, ip
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c6>
 8000d44:	4610      	mov	r0, r2
 8000d46:	ebac 0c06 	sub.w	ip, ip, r6
 8000d4a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d4e:	e79d      	b.n	8000c8c <__udivmoddi4+0x98>
 8000d50:	f1c1 0620 	rsb	r6, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d62:	40f4      	lsrs	r4, r6
 8000d64:	408a      	lsls	r2, r1
 8000d66:	431f      	orrs	r7, r3
 8000d68:	ea4e 030c 	orr.w	r3, lr, ip
 8000d6c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000d70:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d80:	fb08 4410 	mls	r4, r8, r0, r4
 8000d84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d88:	fb00 f90c 	mul.w	r9, r0, ip
 8000d8c:	45a1      	cmp	r9, r4
 8000d8e:	d90e      	bls.n	8000dae <__udivmoddi4+0x1ba>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d96:	bf2c      	ite	cs
 8000d98:	f04f 0b01 	movcs.w	fp, #1
 8000d9c:	f04f 0b00 	movcc.w	fp, #0
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	d903      	bls.n	8000dac <__udivmoddi4+0x1b8>
 8000da4:	f1bb 0f00 	cmp.w	fp, #0
 8000da8:	f000 8093 	beq.w	8000ed2 <__udivmoddi4+0x2de>
 8000dac:	4650      	mov	r0, sl
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f8 	udiv	r3, r4, r8
 8000dba:	fb08 4413 	mls	r4, r8, r3, r4
 8000dbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d906      	bls.n	8000dd8 <__udivmoddi4+0x1e4>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dd0:	d201      	bcs.n	8000dd6 <__udivmoddi4+0x1e2>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d87a      	bhi.n	8000ecc <__udivmoddi4+0x2d8>
 8000dd6:	4643      	mov	r3, r8
 8000dd8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ddc:	eba4 040c 	sub.w	r4, r4, ip
 8000de0:	fba0 9802 	umull	r9, r8, r0, r2
 8000de4:	4544      	cmp	r4, r8
 8000de6:	46cc      	mov	ip, r9
 8000de8:	4643      	mov	r3, r8
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0x1fe>
 8000dec:	d106      	bne.n	8000dfc <__udivmoddi4+0x208>
 8000dee:	45ce      	cmp	lr, r9
 8000df0:	d204      	bcs.n	8000dfc <__udivmoddi4+0x208>
 8000df2:	3801      	subs	r0, #1
 8000df4:	ebb9 0c02 	subs.w	ip, r9, r2
 8000df8:	eb68 0307 	sbc.w	r3, r8, r7
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x222>
 8000dfe:	ebbe 020c 	subs.w	r2, lr, ip
 8000e02:	eb64 0403 	sbc.w	r4, r4, r3
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	40cc      	lsrs	r4, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e73e      	b.n	8000c98 <__udivmoddi4+0xa4>
 8000e1a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e1e:	f1c3 0120 	rsb	r1, r3, #32
 8000e22:	fa04 f203 	lsl.w	r2, r4, r3
 8000e26:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e2a:	40cc      	lsrs	r4, r1
 8000e2c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e30:	fa20 f101 	lsr.w	r1, r0, r1
 8000e34:	fa1f f68e 	uxth.w	r6, lr
 8000e38:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	fb07 4410 	mls	r4, r7, r0, r4
 8000e42:	0c11      	lsrs	r1, r2, #16
 8000e44:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e48:	fb00 f406 	mul.w	r4, r0, r6
 8000e4c:	428c      	cmp	r4, r1
 8000e4e:	d90e      	bls.n	8000e6e <__udivmoddi4+0x27a>
 8000e50:	eb1e 0101 	adds.w	r1, lr, r1
 8000e54:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e58:	bf2c      	ite	cs
 8000e5a:	f04f 0901 	movcs.w	r9, #1
 8000e5e:	f04f 0900 	movcc.w	r9, #0
 8000e62:	428c      	cmp	r4, r1
 8000e64:	d902      	bls.n	8000e6c <__udivmoddi4+0x278>
 8000e66:	f1b9 0f00 	cmp.w	r9, #0
 8000e6a:	d02c      	beq.n	8000ec6 <__udivmoddi4+0x2d2>
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	1b09      	subs	r1, r1, r4
 8000e70:	b292      	uxth	r2, r2
 8000e72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e76:	fb07 1114 	mls	r1, r7, r4, r1
 8000e7a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e7e:	fb04 f106 	mul.w	r1, r4, r6
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x2a2>
 8000e86:	eb1e 0202 	adds.w	r2, lr, r2
 8000e8a:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e8e:	d201      	bcs.n	8000e94 <__udivmoddi4+0x2a0>
 8000e90:	4291      	cmp	r1, r2
 8000e92:	d815      	bhi.n	8000ec0 <__udivmoddi4+0x2cc>
 8000e94:	4644      	mov	r4, r8
 8000e96:	1a52      	subs	r2, r2, r1
 8000e98:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000e9c:	e721      	b.n	8000ce2 <__udivmoddi4+0xee>
 8000e9e:	1a86      	subs	r6, r0, r2
 8000ea0:	eb64 0303 	sbc.w	r3, r4, r3
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	e70e      	b.n	8000cc6 <__udivmoddi4+0xd2>
 8000ea8:	3c02      	subs	r4, #2
 8000eaa:	4472      	add	r2, lr
 8000eac:	e735      	b.n	8000d1a <__udivmoddi4+0x126>
 8000eae:	3902      	subs	r1, #2
 8000eb0:	4472      	add	r2, lr
 8000eb2:	e6d0      	b.n	8000c56 <__udivmoddi4+0x62>
 8000eb4:	44f4      	add	ip, lr
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	e6e3      	b.n	8000c82 <__udivmoddi4+0x8e>
 8000eba:	44f4      	add	ip, lr
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x152>
 8000ec0:	3c02      	subs	r4, #2
 8000ec2:	4472      	add	r2, lr
 8000ec4:	e7e7      	b.n	8000e96 <__udivmoddi4+0x2a2>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4471      	add	r1, lr
 8000eca:	e7d0      	b.n	8000e6e <__udivmoddi4+0x27a>
 8000ecc:	3b02      	subs	r3, #2
 8000ece:	443c      	add	r4, r7
 8000ed0:	e782      	b.n	8000dd8 <__udivmoddi4+0x1e4>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	443c      	add	r4, r7
 8000ed6:	e76a      	b.n	8000dae <__udivmoddi4+0x1ba>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <head_to_tail_buf_write>:
	int head, tail;
}headToTailBuf_t;

static struct HEAD_TO_TAIL_BUF rx_buf = {{0},0,0};

int head_to_tail_buf_write (struct HEAD_TO_TAIL_BUF * b, char data) {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	70fb      	strb	r3, [r7, #3]
	b->buf[b->head] = data;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	78f9      	ldrb	r1, [r7, #3]
 8000ef2:	54d1      	strb	r1, [r2, r3]
		if(++b->head >= DEBUG_LINE_SIZE)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000f08:	2bff      	cmp	r3, #255	@ 0xff
 8000f0a:	dd03      	ble.n	8000f14 <head_to_tail_buf_write+0x38>
			b->head = 0;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	return 0;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <head_to_tail_buf_read>:

int head_to_tail_buf_read (struct HEAD_TO_TAIL_BUF * b, char * data) {
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	6039      	str	r1, [r7, #0]

	if(b->tail != b->head) {
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d019      	beq.n	8000f70 <head_to_tail_buf_read+0x4e>
		*data = (int)b->buf[b->tail];
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	5cd3      	ldrb	r3, [r2, r3]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	701a      	strb	r2, [r3, #0]
		if(++b->tail >= DEBUG_LINE_SIZE)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8000f60:	2bff      	cmp	r3, #255	@ 0xff
 8000f62:	dd03      	ble.n	8000f6c <head_to_tail_buf_read+0x4a>
			b->tail = 0;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
		return 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e001      	b.n	8000f74 <head_to_tail_buf_read+0x52>
	}
	else {
		return -1;
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <HAL_DEBUG_UART_TxCpltCallback>:
static char rx_byte;

/*
 * Callback that occurs at the end of a transmission. Clears the txDmaInUse flag to allow subsequent transmissions.
 */
void HAL_DEBUG_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	;
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <HAL_DEBUG_UART_RxCpltCallback>:

/*
 * Callback that happens when characters are received via interrupt one at a time. The function places each byte in a
 * buffer to be processed when the system can.
 */
void HAL_DEBUG_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	if(huart == DEBUG_UART_P) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a09      	ldr	r2, [pc, #36]	@ (8000fc4 <HAL_DEBUG_UART_RxCpltCallback+0x30>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d10a      	bne.n	8000fba <HAL_DEBUG_UART_RxCpltCallback+0x26>
		HAL_UART_Receive_IT(DEBUG_UART_P, (uint8_t *) &rx_byte, 1);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4908      	ldr	r1, [pc, #32]	@ (8000fc8 <HAL_DEBUG_UART_RxCpltCallback+0x34>)
 8000fa8:	4806      	ldr	r0, [pc, #24]	@ (8000fc4 <HAL_DEBUG_UART_RxCpltCallback+0x30>)
 8000faa:	f009 fd8d 	bl	800aac8 <HAL_UART_Receive_IT>
		head_to_tail_buf_write(&rx_buf, rx_byte);
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_DEBUG_UART_RxCpltCallback+0x34>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <HAL_DEBUG_UART_RxCpltCallback+0x38>)
 8000fb6:	f7ff ff91 	bl	8000edc <head_to_tail_buf_write>
	}
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000ad8 	.word	0x20000ad8
 8000fc8:	20000824 	.word	0x20000824
 8000fcc:	2000071c 	.word	0x2000071c

08000fd0 <__io_putchar>:

int __io_putchar(int ch) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	int err=0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef s;
	do
		s = HAL_UART_Transmit_IT(DEBUG_UART_P, (uint8_t *)&ch, 1);
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4806      	ldr	r0, [pc, #24]	@ (8000ffc <__io_putchar+0x2c>)
 8000fe4:	f009 fccc 	bl	800a980 <HAL_UART_Transmit_IT>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	72fb      	strb	r3, [r7, #11]
	while(s != HAL_OK);
 8000fec:	7afb      	ldrb	r3, [r7, #11]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f4      	bne.n	8000fdc <__io_putchar+0xc>

	return err;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000ad8 	.word	0x20000ad8

08001000 <__io_getchar>:

int __io_getchar(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
	char c;

	while(0 != head_to_tail_buf_read(&rx_buf, &c));
 8001006:	bf00      	nop
 8001008:	1dfb      	adds	r3, r7, #7
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	@ (8001024 <__io_getchar+0x24>)
 800100e:	f7ff ff88 	bl	8000f22 <head_to_tail_buf_read>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1f7      	bne.n	8001008 <__io_getchar+0x8>

	return (int)c;
 8001018:	79fb      	ldrb	r3, [r7, #7]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000071c 	.word	0x2000071c

08001028 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8001030:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <LL_AHB2_GRP1_EnableClock+0x34>)
 8001032:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001036:	4909      	ldr	r1, [pc, #36]	@ (800105c <LL_AHB2_GRP1_EnableClock+0x34>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4313      	orrs	r3, r2
 800103c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <LL_AHB2_GRP1_EnableClock+0x34>)
 8001042:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800104c:	68fb      	ldr	r3, [r7, #12]
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	46020c00 	.word	0x46020c00

08001060 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001068:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <LL_APB1_GRP2_EnableClock+0x34>)
 800106a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800106e:	4909      	ldr	r1, [pc, #36]	@ (8001094 <LL_APB1_GRP2_EnableClock+0x34>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4313      	orrs	r3, r2
 8001074:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <LL_APB1_GRP2_EnableClock+0x34>)
 800107a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4013      	ands	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001084:	68fb      	ldr	r3, [r7, #12]
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	46020c00 	.word	0x46020c00

08001098 <HAL_GPIO_EXTI_Rising_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int button_pressed = 0;

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010a8:	d108      	bne.n	80010bc <HAL_GPIO_EXTI_Rising_Callback+0x24>
	case USER_Button_Pin:
		button_pressed = 1;
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_GPIO_EXTI_Rising_Callback+0x2c>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2140      	movs	r1, #64	@ 0x40
 80010b4:	4804      	ldr	r0, [pc, #16]	@ (80010c8 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 80010b6:	f003 fc95 	bl	80049e4 <HAL_GPIO_WritePin>
		break;
 80010ba:	bf00      	nop
	default:
	}
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2000114c 	.word	0x2000114c
 80010c8:	42021c00 	.word	0x42021c00

080010cc <da16k_cmd_handler>:

void da16k_cmd_handler(da16k_cmd_t * cmd) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    printf("Command received: %s, parameters: %s\r\n",
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6819      	ldr	r1, [r3, #0]
        cmd->command, cmd->parameters ? cmd->parameters : "<none>" );
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
    printf("Command received: %s, parameters: %s\r\n",
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <da16k_cmd_handler+0x1a>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	e000      	b.n	80010e8 <da16k_cmd_handler+0x1c>
 80010e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <da16k_cmd_handler+0x4c>)
 80010e8:	461a      	mov	r2, r3
 80010ea:	480c      	ldr	r0, [pc, #48]	@ (800111c <da16k_cmd_handler+0x50>)
 80010ec:	f00c ff7e 	bl	800dfec <printf>

    if(strcmp(cmd->command, "test")==0) {
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	490a      	ldr	r1, [pc, #40]	@ (8001120 <da16k_cmd_handler+0x54>)
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f8be 	bl	8000278 <strcmp>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d106      	bne.n	8001110 <da16k_cmd_handler+0x44>
    	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001102:	2180      	movs	r1, #128	@ 0x80
 8001104:	4807      	ldr	r0, [pc, #28]	@ (8001124 <da16k_cmd_handler+0x58>)
 8001106:	f003 fc85 	bl	8004a14 <HAL_GPIO_TogglePin>
    	  printf("Toggling Green LED\r\n");
 800110a:	4807      	ldr	r0, [pc, #28]	@ (8001128 <da16k_cmd_handler+0x5c>)
 800110c:	f00c ffc6 	bl	800e09c <puts>
    }
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	08013b30 	.word	0x08013b30
 800111c:	08013b38 	.word	0x08013b38
 8001120:	08013b60 	.word	0x08013b60
 8001124:	42021c00 	.word	0x42021c00
 8001128:	08013b68 	.word	0x08013b68

0800112c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800112c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001130:	b092      	sub	sp, #72	@ 0x48
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  int64_t box_x=0,
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	f04f 0300 	mov.w	r3, #0
 800113c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    box_y=0,
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    box_w=0,
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    box_h=0,
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    infer_t=0,
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	f04f 0300 	mov.w	r3, #0
 800116c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    nb_detect=0;
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	f04f 0300 	mov.w	r3, #0
 8001178:	e9c7 2306 	strd	r2, r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117c:	f002 fe26 	bl	8003dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001180:	f000 f892 	bl	80012a8 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8001184:	f000 f8f4 	bl	8001370 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001188:	f000 fc90 	bl	8001aac <MX_GPIO_Init>
  MX_ADF1_Init();
 800118c:	f000 f8fe 	bl	800138c <MX_ADF1_Init>
  MX_I2C1_Init();
 8001190:	f000 f94a 	bl	8001428 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001194:	f000 f988 	bl	80014a8 <MX_I2C2_Init>
  MX_ICACHE_Init();
 8001198:	f000 f9c6 	bl	8001528 <MX_ICACHE_Init>
  MX_OCTOSPI1_Init();
 800119c:	f000 f9d8 	bl	8001550 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 80011a0:	f000 fa50 	bl	8001644 <MX_OCTOSPI2_Init>
  MX_SPI2_Init();
 80011a4:	f000 faca 	bl	800173c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80011a8:	f000 fb6c 	bl	8001884 <MX_USART1_UART_Init>
  MX_UCPD1_Init();
 80011ac:	f000 fb34 	bl	8001818 <MX_UCPD1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80011b0:	f000 fc4a 	bl	8001a48 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 80011b4:	f000 fbce 	bl	8001954 <MX_USART3_UART_Init>
  MX_iotc_da16k_pmod_Init();
 80011b8:	f00c fa46 	bl	800d648 <MX_iotc_da16k_pmod_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_iotc_da16k_pmod_Process();
 80011bc:	f00c fa60 	bl	800d680 <MX_iotc_da16k_pmod_Process>
    /* USER CODE BEGIN 3 */
    if(button_pressed) {
 80011c0:	4b2e      	ldr	r3, [pc, #184]	@ (800127c <main+0x150>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f9      	beq.n	80011bc <main+0x90>
      printf("\n\rButton pressed\n\r");
 80011c8:	482d      	ldr	r0, [pc, #180]	@ (8001280 <main+0x154>)
 80011ca:	f00c ff0f 	bl	800dfec <printf>
      da16k_send_msg_direct_int("box_x",box_x++);
 80011ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80011d2:	1c54      	adds	r4, r2, #1
 80011d4:	f143 0500 	adc.w	r5, r3, #0
 80011d8:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 80011dc:	4829      	ldr	r0, [pc, #164]	@ (8001284 <main+0x158>)
 80011de:	f002 fb41 	bl	8003864 <da16k_send_msg_direct_int>
      da16k_send_msg_direct_int("box_y",box_y++);
 80011e2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80011e6:	f112 0801 	adds.w	r8, r2, #1
 80011ea:	f143 0900 	adc.w	r9, r3, #0
 80011ee:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
 80011f2:	4825      	ldr	r0, [pc, #148]	@ (8001288 <main+0x15c>)
 80011f4:	f002 fb36 	bl	8003864 <da16k_send_msg_direct_int>
      da16k_send_msg_direct_int("box_w",box_w++);
 80011f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80011fc:	f112 0a01 	adds.w	sl, r2, #1
 8001200:	f143 0b00 	adc.w	fp, r3, #0
 8001204:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
 8001208:	4820      	ldr	r0, [pc, #128]	@ (800128c <main+0x160>)
 800120a:	f002 fb2b 	bl	8003864 <da16k_send_msg_direct_int>
      da16k_send_msg_direct_int("box_h",box_h++);
 800120e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001212:	1c51      	adds	r1, r2, #1
 8001214:	6139      	str	r1, [r7, #16]
 8001216:	f143 0100 	adc.w	r1, r3, #0
 800121a:	6179      	str	r1, [r7, #20]
 800121c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001220:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8001224:	481a      	ldr	r0, [pc, #104]	@ (8001290 <main+0x164>)
 8001226:	f002 fb1d 	bl	8003864 <da16k_send_msg_direct_int>
      da16k_send_msg_direct_int("infer_t",infer_t++);
 800122a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800122e:	1c51      	adds	r1, r2, #1
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	f143 0100 	adc.w	r1, r3, #0
 8001236:	60f9      	str	r1, [r7, #12]
 8001238:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800123c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001240:	4814      	ldr	r0, [pc, #80]	@ (8001294 <main+0x168>)
 8001242:	f002 fb0f 	bl	8003864 <da16k_send_msg_direct_int>
      da16k_send_msg_direct_int("nb_detect",nb_detect++);
 8001246:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800124a:	1c51      	adds	r1, r2, #1
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	f143 0100 	adc.w	r1, r3, #0
 8001252:	6079      	str	r1, [r7, #4]
 8001254:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001258:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800125c:	480e      	ldr	r0, [pc, #56]	@ (8001298 <main+0x16c>)
 800125e:	f002 fb01 	bl	8003864 <da16k_send_msg_direct_int>
      da16k_send_msg_direct_str("version", "str2");
 8001262:	490e      	ldr	r1, [pc, #56]	@ (800129c <main+0x170>)
 8001264:	480e      	ldr	r0, [pc, #56]	@ (80012a0 <main+0x174>)
 8001266:	f002 fad1 	bl	800380c <da16k_send_msg_direct_str>
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800126a:	2201      	movs	r2, #1
 800126c:	2140      	movs	r1, #64	@ 0x40
 800126e:	480d      	ldr	r0, [pc, #52]	@ (80012a4 <main+0x178>)
 8001270:	f003 fbb8 	bl	80049e4 <HAL_GPIO_WritePin>
      button_pressed = 0;
 8001274:	4b01      	ldr	r3, [pc, #4]	@ (800127c <main+0x150>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
  MX_iotc_da16k_pmod_Process();
 800127a:	e79f      	b.n	80011bc <main+0x90>
 800127c:	2000114c 	.word	0x2000114c
 8001280:	08013b7c 	.word	0x08013b7c
 8001284:	08013b90 	.word	0x08013b90
 8001288:	08013b98 	.word	0x08013b98
 800128c:	08013ba0 	.word	0x08013ba0
 8001290:	08013ba8 	.word	0x08013ba8
 8001294:	08013bb0 	.word	0x08013bb0
 8001298:	08013bb8 	.word	0x08013bb8
 800129c:	08013bc4 	.word	0x08013bc4
 80012a0:	08013bcc 	.word	0x08013bcc
 80012a4:	42021c00 	.word	0x42021c00

080012a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b09e      	sub	sp, #120	@ 0x78
 80012ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ae:	f107 0318 	add.w	r3, r7, #24
 80012b2:	2260      	movs	r2, #96	@ 0x60
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f00c ffe2 	bl	800e280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012bc:	463b      	mov	r3, r7
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]
 80012ca:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012cc:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80012d0:	f004 ffaa 	bl	8006228 <HAL_PWREx_ControlVoltageScaling>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0x36>
  {
    Error_Handler();
 80012da:	f000 fd6b 	bl	8001db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80012de:	2332      	movs	r3, #50	@ 0x32
 80012e0:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012e6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80012e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ee:	2310      	movs	r3, #16
 80012f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012f2:	2301      	movs	r3, #1
 80012f4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80012f6:	2310      	movs	r3, #16
 80012f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80012fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001300:	2302      	movs	r3, #2
 8001302:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001304:	2301      	movs	r3, #1
 8001306:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800130c:	2301      	movs	r3, #1
 800130e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001310:	2350      	movs	r3, #80	@ 0x50
 8001312:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001314:	2302      	movs	r3, #2
 8001316:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001318:	2302      	movs	r3, #2
 800131a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800131c:	2302      	movs	r3, #2
 800131e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8001320:	2300      	movs	r3, #0
 8001322:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	4618      	mov	r0, r3
 800132e:	f005 f877 	bl	8006420 <HAL_RCC_OscConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001338:	f000 fd3c 	bl	8001db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133c:	231f      	movs	r3, #31
 800133e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001340:	2303      	movs	r3, #3
 8001342:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001354:	463b      	mov	r3, r7
 8001356:	2104      	movs	r1, #4
 8001358:	4618      	mov	r0, r3
 800135a:	f005 ff3d 	bl	80071d8 <HAL_RCC_ClockConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001364:	f000 fd26 	bl	8001db4 <Error_Handler>
  }
}
 8001368:	bf00      	nop
 800136a:	3778      	adds	r7, #120	@ 0x78
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8001374:	f005 f844 	bl	8006400 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001378:	2002      	movs	r0, #2
 800137a:	f004 ffe1 	bl	8006340 <HAL_PWREx_ConfigSupply>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8001384:	f000 fd16 	bl	8001db4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 8001390:	4b22      	ldr	r3, [pc, #136]	@ (800141c <MX_ADF1_Init+0x90>)
 8001392:	4a23      	ldr	r2, [pc, #140]	@ (8001420 <MX_ADF1_Init+0x94>)
 8001394:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 8001396:	4b21      	ldr	r3, [pc, #132]	@ (800141c <MX_ADF1_Init+0x90>)
 8001398:	2201      	movs	r2, #1
 800139a:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 800139c:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <MX_ADF1_Init+0x90>)
 800139e:	2200      	movs	r2, #0
 80013a0:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 80013a2:	4b1e      	ldr	r3, [pc, #120]	@ (800141c <MX_ADF1_Init+0x90>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_LF_MASTER_SPI_MODE;
 80013aa:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <MX_ADF1_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	629a      	str	r2, [r3, #40]	@ 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <MX_ADF1_Init+0x90>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 80013b6:	4b19      	ldr	r3, [pc, #100]	@ (800141c <MX_ADF1_Init+0x90>)
 80013b8:	2204      	movs	r2, #4
 80013ba:	631a      	str	r2, [r3, #48]	@ 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 80013bc:	4b17      	ldr	r3, [pc, #92]	@ (800141c <MX_ADF1_Init+0x90>)
 80013be:	2201      	movs	r2, #1
 80013c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 80013c2:	4816      	ldr	r0, [pc, #88]	@ (800141c <MX_ADF1_Init+0x90>)
 80013c4:	f003 fcd4 	bl	8004d70 <HAL_MDF_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_ADF1_Init+0x46>
  {
    Error_Handler();
 80013ce:	f000 fcf1 	bl	8001db4 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 80013d2:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <MX_ADF1_Init+0x98>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 80013d8:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <MX_ADF1_Init+0x98>)
 80013da:	2200      	movs	r2, #0
 80013dc:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 80013de:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <MX_ADF1_Init+0x98>)
 80013e0:	2240      	movs	r2, #64	@ 0x40
 80013e2:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <MX_ADF1_Init+0x98>)
 80013e6:	2202      	movs	r2, #2
 80013e8:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <MX_ADF1_Init+0x98>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <MX_ADF1_Init+0x98>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <MX_ADF1_Init+0x98>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <MX_ADF1_Init+0x98>)
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 8001406:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <MX_ADF1_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	665a      	str	r2, [r3, #100]	@ 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 800140c:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <MX_ADF1_Init+0x98>)
 800140e:	2200      	movs	r2, #0
 8001410:	669a      	str	r2, [r3, #104]	@ 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 8001412:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <MX_ADF1_Init+0x98>)
 8001414:	2200      	movs	r2, #0
 8001416:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000828 	.word	0x20000828
 8001420:	46024080 	.word	0x46024080
 8001424:	2000086c 	.word	0x2000086c

08001428 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800142c:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <MX_I2C1_Init+0x74>)
 800142e:	4a1c      	ldr	r2, [pc, #112]	@ (80014a0 <MX_I2C1_Init+0x78>)
 8001430:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8001432:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <MX_I2C1_Init+0x74>)
 8001434:	4a1b      	ldr	r2, [pc, #108]	@ (80014a4 <MX_I2C1_Init+0x7c>)
 8001436:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001438:	4b18      	ldr	r3, [pc, #96]	@ (800149c <MX_I2C1_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143e:	4b17      	ldr	r3, [pc, #92]	@ (800149c <MX_I2C1_Init+0x74>)
 8001440:	2201      	movs	r2, #1
 8001442:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001444:	4b15      	ldr	r3, [pc, #84]	@ (800149c <MX_I2C1_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800144a:	4b14      	ldr	r3, [pc, #80]	@ (800149c <MX_I2C1_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <MX_I2C1_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001456:	4b11      	ldr	r3, [pc, #68]	@ (800149c <MX_I2C1_Init+0x74>)
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800145c:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <MX_I2C1_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001462:	480e      	ldr	r0, [pc, #56]	@ (800149c <MX_I2C1_Init+0x74>)
 8001464:	f003 fb21 	bl	8004aaa <HAL_I2C_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800146e:	f000 fca1 	bl	8001db4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001472:	2100      	movs	r1, #0
 8001474:	4809      	ldr	r0, [pc, #36]	@ (800149c <MX_I2C1_Init+0x74>)
 8001476:	f003 fbb3 	bl	8004be0 <HAL_I2CEx_ConfigAnalogFilter>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001480:	f000 fc98 	bl	8001db4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001484:	2100      	movs	r1, #0
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_I2C1_Init+0x74>)
 8001488:	f003 fbf5 	bl	8004c76 <HAL_I2CEx_ConfigDigitalFilter>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001492:	f000 fc8f 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200008e8 	.word	0x200008e8
 80014a0:	40005400 	.word	0x40005400
 80014a4:	30909dec 	.word	0x30909dec

080014a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <MX_I2C2_Init+0x74>)
 80014ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001520 <MX_I2C2_Init+0x78>)
 80014b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 80014b2:	4b1a      	ldr	r3, [pc, #104]	@ (800151c <MX_I2C2_Init+0x74>)
 80014b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001524 <MX_I2C2_Init+0x7c>)
 80014b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80014b8:	4b18      	ldr	r3, [pc, #96]	@ (800151c <MX_I2C2_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014be:	4b17      	ldr	r3, [pc, #92]	@ (800151c <MX_I2C2_Init+0x74>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c4:	4b15      	ldr	r3, [pc, #84]	@ (800151c <MX_I2C2_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80014ca:	4b14      	ldr	r3, [pc, #80]	@ (800151c <MX_I2C2_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014d0:	4b12      	ldr	r3, [pc, #72]	@ (800151c <MX_I2C2_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d6:	4b11      	ldr	r3, [pc, #68]	@ (800151c <MX_I2C2_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <MX_I2C2_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014e2:	480e      	ldr	r0, [pc, #56]	@ (800151c <MX_I2C2_Init+0x74>)
 80014e4:	f003 fae1 	bl	8004aaa <HAL_I2C_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80014ee:	f000 fc61 	bl	8001db4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014f2:	2100      	movs	r1, #0
 80014f4:	4809      	ldr	r0, [pc, #36]	@ (800151c <MX_I2C2_Init+0x74>)
 80014f6:	f003 fb73 	bl	8004be0 <HAL_I2CEx_ConfigAnalogFilter>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001500:	f000 fc58 	bl	8001db4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001504:	2100      	movs	r1, #0
 8001506:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_I2C2_Init+0x74>)
 8001508:	f003 fbb5 	bl	8004c76 <HAL_I2CEx_ConfigDigitalFilter>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001512:	f000 fc4f 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000093c 	.word	0x2000093c
 8001520:	40005800 	.word	0x40005800
 8001524:	30909dec 	.word	0x30909dec

08001528 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800152c:	2000      	movs	r0, #0
 800152e:	f003 fbef 	bl	8004d10 <HAL_ICACHE_ConfigAssociativityMode>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001538:	f000 fc3c 	bl	8001db4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800153c:	f003 fc08 	bl	8004d50 <HAL_ICACHE_Enable>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001546:	f000 fc35 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8001568:	463b      	mov	r3, r7
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001570:	4b31      	ldr	r3, [pc, #196]	@ (8001638 <MX_OCTOSPI1_Init+0xe8>)
 8001572:	4a32      	ldr	r2, [pc, #200]	@ (800163c <MX_OCTOSPI1_Init+0xec>)
 8001574:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001576:	4b30      	ldr	r3, [pc, #192]	@ (8001638 <MX_OCTOSPI1_Init+0xe8>)
 8001578:	2201      	movs	r2, #1
 800157a:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800157c:	4b2e      	ldr	r3, [pc, #184]	@ (8001638 <MX_OCTOSPI1_Init+0xe8>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 8001582:	4b2d      	ldr	r3, [pc, #180]	@ (8001638 <MX_OCTOSPI1_Init+0xe8>)
 8001584:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001588:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 800158a:	4b2b      	ldr	r3, [pc, #172]	@ (8001638 <MX_OCTOSPI1_Init+0xe8>)
 800158c:	2217      	movs	r2, #23
 800158e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001590:	4b29      	ldr	r3, [pc, #164]	@ (8001638 <MX_OCTOSPI1_Init+0xe8>)
 8001592:	2201      	movs	r2, #1
 8001594:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001596:	4b28      	ldr	r3, [pc, #160]	@ (8001638 <MX_OCTOSPI1_Init+0xe8>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800159c:	4b26      	ldr	r3, [pc, #152]	@ (8001638 <MX_OCTOSPI1_Init+0xe8>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80015a2:	4b25      	ldr	r3, [pc, #148]	@ (8001638 <MX_OCTOSPI1_Init+0xe8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 80015a8:	4b23      	ldr	r3, [pc, #140]	@ (8001638 <MX_OCTOSPI1_Init+0xe8>)
 80015aa:	2202      	movs	r2, #2
 80015ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80015ae:	4b22      	ldr	r3, [pc, #136]	@ (8001638 <MX_OCTOSPI1_Init+0xe8>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80015b4:	4b20      	ldr	r3, [pc, #128]	@ (8001638 <MX_OCTOSPI1_Init+0xe8>)
 80015b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 10;
 80015bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001638 <MX_OCTOSPI1_Init+0xe8>)
 80015be:	220a      	movs	r2, #10
 80015c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 80015c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <MX_OCTOSPI1_Init+0xe8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <MX_OCTOSPI1_Init+0xe8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 100;
 80015ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <MX_OCTOSPI1_Init+0xe8>)
 80015d0:	2264      	movs	r2, #100	@ 0x64
 80015d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80015d4:	4818      	ldr	r0, [pc, #96]	@ (8001638 <MX_OCTOSPI1_Init+0xe8>)
 80015d6:	f003 fd77 	bl	80050c8 <HAL_OSPI_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_OCTOSPI1_Init+0x94>
  {
    Error_Handler();
 80015e0:	f000 fbe8 	bl	8001db4 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 1;
 80015e8:	2301      	movs	r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 1;
 80015ec:	2301      	movs	r3, #1
 80015ee:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80015f0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80015f4:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 80015f6:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <MX_OCTOSPI1_Init+0xf0>)
 80015f8:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001602:	4619      	mov	r1, r3
 8001604:	480c      	ldr	r0, [pc, #48]	@ (8001638 <MX_OCTOSPI1_Init+0xe8>)
 8001606:	f003 fe9f 	bl	8005348 <HAL_OSPIM_Config>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_OCTOSPI1_Init+0xc4>
  {
    Error_Handler();
 8001610:	f000 fbd0 	bl	8001db4 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 800161c:	463b      	mov	r3, r7
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	@ (8001638 <MX_OCTOSPI1_Init+0xe8>)
 8001622:	f004 fc7d 	bl	8005f20 <HAL_OSPI_DLYB_SetConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_OCTOSPI1_Init+0xe0>
  {
    Error_Handler();
 800162c:	f000 fbc2 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	3720      	adds	r7, #32
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000990 	.word	0x20000990
 800163c:	420d1400 	.word	0x420d1400
 8001640:	01000001 	.word	0x01000001

08001644 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]
 800165a:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 800165c:	463b      	mov	r3, r7
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8001664:	4b31      	ldr	r3, [pc, #196]	@ (800172c <MX_OCTOSPI2_Init+0xe8>)
 8001666:	4a32      	ldr	r2, [pc, #200]	@ (8001730 <MX_OCTOSPI2_Init+0xec>)
 8001668:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 800166a:	4b30      	ldr	r3, [pc, #192]	@ (800172c <MX_OCTOSPI2_Init+0xe8>)
 800166c:	2204      	movs	r2, #4
 800166e:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001670:	4b2e      	ldr	r3, [pc, #184]	@ (800172c <MX_OCTOSPI2_Init+0xe8>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001676:	4b2d      	ldr	r3, [pc, #180]	@ (800172c <MX_OCTOSPI2_Init+0xe8>)
 8001678:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800167c:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 26;
 800167e:	4b2b      	ldr	r3, [pc, #172]	@ (800172c <MX_OCTOSPI2_Init+0xe8>)
 8001680:	221a      	movs	r2, #26
 8001682:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 2;
 8001684:	4b29      	ldr	r3, [pc, #164]	@ (800172c <MX_OCTOSPI2_Init+0xe8>)
 8001686:	2202      	movs	r2, #2
 8001688:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800168a:	4b28      	ldr	r3, [pc, #160]	@ (800172c <MX_OCTOSPI2_Init+0xe8>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001690:	4b26      	ldr	r3, [pc, #152]	@ (800172c <MX_OCTOSPI2_Init+0xe8>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001696:	4b25      	ldr	r3, [pc, #148]	@ (800172c <MX_OCTOSPI2_Init+0xe8>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 4;
 800169c:	4b23      	ldr	r3, [pc, #140]	@ (800172c <MX_OCTOSPI2_Init+0xe8>)
 800169e:	2204      	movs	r2, #4
 80016a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80016a2:	4b22      	ldr	r3, [pc, #136]	@ (800172c <MX_OCTOSPI2_Init+0xe8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80016a8:	4b20      	ldr	r3, [pc, #128]	@ (800172c <MX_OCTOSPI2_Init+0xe8>)
 80016aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80016ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 80016b0:	4b1e      	ldr	r3, [pc, #120]	@ (800172c <MX_OCTOSPI2_Init+0xe8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 80016b6:	4b1d      	ldr	r3, [pc, #116]	@ (800172c <MX_OCTOSPI2_Init+0xe8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 80016bc:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <MX_OCTOSPI2_Init+0xe8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 0;
 80016c2:	4b1a      	ldr	r3, [pc, #104]	@ (800172c <MX_OCTOSPI2_Init+0xe8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 80016c8:	4818      	ldr	r0, [pc, #96]	@ (800172c <MX_OCTOSPI2_Init+0xe8>)
 80016ca:	f003 fcfd 	bl	80050c8 <HAL_OSPI_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_OCTOSPI2_Init+0x94>
  {
    Error_Handler();
 80016d4:	f000 fb6e 	bl	8001db4 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 80016d8:	2302      	movs	r3, #2
 80016da:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 2;
 80016dc:	2302      	movs	r3, #2
 80016de:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 2;
 80016e0:	2302      	movs	r3, #2
 80016e2:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 80016e4:	4b13      	ldr	r3, [pc, #76]	@ (8001734 <MX_OCTOSPI2_Init+0xf0>)
 80016e6:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 80016e8:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <MX_OCTOSPI2_Init+0xf4>)
 80016ea:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016ec:	f107 0308 	add.w	r3, r7, #8
 80016f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f4:	4619      	mov	r1, r3
 80016f6:	480d      	ldr	r0, [pc, #52]	@ (800172c <MX_OCTOSPI2_Init+0xe8>)
 80016f8:	f003 fe26 	bl	8005348 <HAL_OSPIM_Config>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_OCTOSPI2_Init+0xc2>
  {
    Error_Handler();
 8001702:	f000 fb57 	bl	8001db4 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 800170e:	463b      	mov	r3, r7
 8001710:	4619      	mov	r1, r3
 8001712:	4806      	ldr	r0, [pc, #24]	@ (800172c <MX_OCTOSPI2_Init+0xe8>)
 8001714:	f004 fc04 	bl	8005f20 <HAL_OSPI_DLYB_SetConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_OCTOSPI2_Init+0xde>
  {
    Error_Handler();
 800171e:	f000 fb49 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	3720      	adds	r7, #32
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200009ec 	.word	0x200009ec
 8001730:	420d2400 	.word	0x420d2400
 8001734:	00010002 	.word	0x00010002
 8001738:	01000002 	.word	0x01000002

0800173c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800174c:	4b30      	ldr	r3, [pc, #192]	@ (8001810 <MX_SPI2_Init+0xd4>)
 800174e:	4a31      	ldr	r2, [pc, #196]	@ (8001814 <MX_SPI2_Init+0xd8>)
 8001750:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001752:	4b2f      	ldr	r3, [pc, #188]	@ (8001810 <MX_SPI2_Init+0xd4>)
 8001754:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001758:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800175a:	4b2d      	ldr	r3, [pc, #180]	@ (8001810 <MX_SPI2_Init+0xd4>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001760:	4b2b      	ldr	r3, [pc, #172]	@ (8001810 <MX_SPI2_Init+0xd4>)
 8001762:	2203      	movs	r2, #3
 8001764:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001766:	4b2a      	ldr	r3, [pc, #168]	@ (8001810 <MX_SPI2_Init+0xd4>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800176c:	4b28      	ldr	r3, [pc, #160]	@ (8001810 <MX_SPI2_Init+0xd4>)
 800176e:	2200      	movs	r2, #0
 8001770:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001772:	4b27      	ldr	r3, [pc, #156]	@ (8001810 <MX_SPI2_Init+0xd4>)
 8001774:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001778:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800177a:	4b25      	ldr	r3, [pc, #148]	@ (8001810 <MX_SPI2_Init+0xd4>)
 800177c:	2200      	movs	r2, #0
 800177e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001780:	4b23      	ldr	r3, [pc, #140]	@ (8001810 <MX_SPI2_Init+0xd4>)
 8001782:	2200      	movs	r2, #0
 8001784:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001786:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <MX_SPI2_Init+0xd4>)
 8001788:	2200      	movs	r2, #0
 800178a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800178c:	4b20      	ldr	r3, [pc, #128]	@ (8001810 <MX_SPI2_Init+0xd4>)
 800178e:	2200      	movs	r2, #0
 8001790:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8001792:	4b1f      	ldr	r3, [pc, #124]	@ (8001810 <MX_SPI2_Init+0xd4>)
 8001794:	2207      	movs	r2, #7
 8001796:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001798:	4b1d      	ldr	r3, [pc, #116]	@ (8001810 <MX_SPI2_Init+0xd4>)
 800179a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800179e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001810 <MX_SPI2_Init+0xd4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <MX_SPI2_Init+0xd4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017ac:	4b18      	ldr	r3, [pc, #96]	@ (8001810 <MX_SPI2_Init+0xd4>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017b2:	4b17      	ldr	r3, [pc, #92]	@ (8001810 <MX_SPI2_Init+0xd4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017b8:	4b15      	ldr	r3, [pc, #84]	@ (8001810 <MX_SPI2_Init+0xd4>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017be:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <MX_SPI2_Init+0xd4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017c4:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <MX_SPI2_Init+0xd4>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80017ca:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <MX_SPI2_Init+0xd4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <MX_SPI2_Init+0xd4>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017d6:	480e      	ldr	r0, [pc, #56]	@ (8001810 <MX_SPI2_Init+0xd4>)
 80017d8:	f008 fdae 	bl	800a338 <HAL_SPI_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 80017e2:	f000 fae7 	bl	8001db4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80017ea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80017ee:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	@ (8001810 <MX_SPI2_Init+0xd4>)
 80017fa:	f008 fece 	bl	800a59a <HAL_SPIEx_SetConfigAutonomousMode>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8001804:	f000 fad6 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000a48 	.word	0x20000a48
 8001814:	40003800 	.word	0x40003800

08001818 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181e:	463b      	mov	r3, r7
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
 800182c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800182e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001832:	f7ff fc15 	bl	8001060 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001836:	2001      	movs	r0, #1
 8001838:	f7ff fbf6 	bl	8001028 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800183c:	2002      	movs	r0, #2
 800183e:	f7ff fbf3 	bl	8001028 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001846:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001848:	2303      	movs	r3, #3
 800184a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001850:	463b      	mov	r3, r7
 8001852:	4619      	mov	r1, r3
 8001854:	4809      	ldr	r0, [pc, #36]	@ (800187c <MX_UCPD1_Init+0x64>)
 8001856:	f00b fbbf 	bl	800cfd8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800185a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800185e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001860:	2303      	movs	r3, #3
 8001862:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001868:	463b      	mov	r3, r7
 800186a:	4619      	mov	r1, r3
 800186c:	4804      	ldr	r0, [pc, #16]	@ (8001880 <MX_UCPD1_Init+0x68>)
 800186e:	f00b fbb3 	bl	800cfd8 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	42020000 	.word	0x42020000
 8001880:	42020400 	.word	0x42020400

08001884 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001888:	4b2d      	ldr	r3, [pc, #180]	@ (8001940 <MX_USART1_UART_Init+0xbc>)
 800188a:	4a2e      	ldr	r2, [pc, #184]	@ (8001944 <MX_USART1_UART_Init+0xc0>)
 800188c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800188e:	4b2c      	ldr	r3, [pc, #176]	@ (8001940 <MX_USART1_UART_Init+0xbc>)
 8001890:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001894:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001896:	4b2a      	ldr	r3, [pc, #168]	@ (8001940 <MX_USART1_UART_Init+0xbc>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800189c:	4b28      	ldr	r3, [pc, #160]	@ (8001940 <MX_USART1_UART_Init+0xbc>)
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018a2:	4b27      	ldr	r3, [pc, #156]	@ (8001940 <MX_USART1_UART_Init+0xbc>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018a8:	4b25      	ldr	r3, [pc, #148]	@ (8001940 <MX_USART1_UART_Init+0xbc>)
 80018aa:	220c      	movs	r2, #12
 80018ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ae:	4b24      	ldr	r3, [pc, #144]	@ (8001940 <MX_USART1_UART_Init+0xbc>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b4:	4b22      	ldr	r3, [pc, #136]	@ (8001940 <MX_USART1_UART_Init+0xbc>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ba:	4b21      	ldr	r3, [pc, #132]	@ (8001940 <MX_USART1_UART_Init+0xbc>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001940 <MX_USART1_UART_Init+0xbc>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001940 <MX_USART1_UART_Init+0xbc>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018cc:	481c      	ldr	r0, [pc, #112]	@ (8001940 <MX_USART1_UART_Init+0xbc>)
 80018ce:	f008 fea5 	bl	800a61c <HAL_UART_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80018d8:	f000 fa6c 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018dc:	2100      	movs	r1, #0
 80018de:	4818      	ldr	r0, [pc, #96]	@ (8001940 <MX_USART1_UART_Init+0xbc>)
 80018e0:	f00b f945 	bl	800cb6e <HAL_UARTEx_SetTxFifoThreshold>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80018ea:	f000 fa63 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ee:	2100      	movs	r1, #0
 80018f0:	4813      	ldr	r0, [pc, #76]	@ (8001940 <MX_USART1_UART_Init+0xbc>)
 80018f2:	f00b f97a 	bl	800cbea <HAL_UARTEx_SetRxFifoThreshold>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80018fc:	f000 fa5a 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001900:	480f      	ldr	r0, [pc, #60]	@ (8001940 <MX_USART1_UART_Init+0xbc>)
 8001902:	f00b f8fb 	bl	800cafc <HAL_UARTEx_DisableFifoMode>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800190c:	f000 fa52 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  if(HAL_OK != HAL_UART_RegisterCallback(&huart1, HAL_UART_TX_COMPLETE_CB_ID,
 8001910:	4a0d      	ldr	r2, [pc, #52]	@ (8001948 <MX_USART1_UART_Init+0xc4>)
 8001912:	2101      	movs	r1, #1
 8001914:	480a      	ldr	r0, [pc, #40]	@ (8001940 <MX_USART1_UART_Init+0xbc>)
 8001916:	f008 fee1 	bl	800a6dc <HAL_UART_RegisterCallback>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10b      	bne.n	8001938 <MX_USART1_UART_Init+0xb4>
		  &HAL_DEBUG_UART_TxCpltCallback) ) {
	  return;
  }

  if(HAL_OK != HAL_UART_RegisterCallback(&huart1, HAL_UART_RX_COMPLETE_CB_ID,
 8001920:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <MX_USART1_UART_Init+0xc8>)
 8001922:	2103      	movs	r1, #3
 8001924:	4806      	ldr	r0, [pc, #24]	@ (8001940 <MX_USART1_UART_Init+0xbc>)
 8001926:	f008 fed9 	bl	800a6dc <HAL_UART_RegisterCallback>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d105      	bne.n	800193c <MX_USART1_UART_Init+0xb8>
		  &HAL_DEBUG_UART_RxCpltCallback) ) {
	  return;
  }
#endif
  printf("\f\n\rDA16k-PMOD-Demo-B-U585I-IOT02A Start...\n\r");
 8001930:	4807      	ldr	r0, [pc, #28]	@ (8001950 <MX_USART1_UART_Init+0xcc>)
 8001932:	f00c fb5b 	bl	800dfec <printf>
 8001936:	e002      	b.n	800193e <MX_USART1_UART_Init+0xba>
	  return;
 8001938:	bf00      	nop
 800193a:	e000      	b.n	800193e <MX_USART1_UART_Init+0xba>
	  return;
 800193c:	bf00      	nop
  /* USER CODE END USART1_Init 2 */

}
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000ad8 	.word	0x20000ad8
 8001944:	40013800 	.word	0x40013800
 8001948:	08000f81 	.word	0x08000f81
 800194c:	08000f95 	.word	0x08000f95
 8001950:	08013bd4 	.word	0x08013bd4

08001954 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800195a:	4b38      	ldr	r3, [pc, #224]	@ (8001a3c <MX_USART3_UART_Init+0xe8>)
 800195c:	4a38      	ldr	r2, [pc, #224]	@ (8001a40 <MX_USART3_UART_Init+0xec>)
 800195e:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001960:	4b36      	ldr	r3, [pc, #216]	@ (8001a3c <MX_USART3_UART_Init+0xe8>)
 8001962:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001966:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001968:	4b34      	ldr	r3, [pc, #208]	@ (8001a3c <MX_USART3_UART_Init+0xe8>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800196e:	4b33      	ldr	r3, [pc, #204]	@ (8001a3c <MX_USART3_UART_Init+0xe8>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001974:	4b31      	ldr	r3, [pc, #196]	@ (8001a3c <MX_USART3_UART_Init+0xe8>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800197a:	4b30      	ldr	r3, [pc, #192]	@ (8001a3c <MX_USART3_UART_Init+0xe8>)
 800197c:	220c      	movs	r2, #12
 800197e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001980:	4b2e      	ldr	r3, [pc, #184]	@ (8001a3c <MX_USART3_UART_Init+0xe8>)
 8001982:	2200      	movs	r2, #0
 8001984:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001986:	4b2d      	ldr	r3, [pc, #180]	@ (8001a3c <MX_USART3_UART_Init+0xe8>)
 8001988:	2200      	movs	r2, #0
 800198a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800198c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a3c <MX_USART3_UART_Init+0xe8>)
 800198e:	2200      	movs	r2, #0
 8001990:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001992:	4b2a      	ldr	r3, [pc, #168]	@ (8001a3c <MX_USART3_UART_Init+0xe8>)
 8001994:	2200      	movs	r2, #0
 8001996:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001998:	4b28      	ldr	r3, [pc, #160]	@ (8001a3c <MX_USART3_UART_Init+0xe8>)
 800199a:	2200      	movs	r2, #0
 800199c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800199e:	4827      	ldr	r0, [pc, #156]	@ (8001a3c <MX_USART3_UART_Init+0xe8>)
 80019a0:	f008 fe3c 	bl	800a61c <HAL_UART_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 80019aa:	f000 fa03 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ae:	2100      	movs	r1, #0
 80019b0:	4822      	ldr	r0, [pc, #136]	@ (8001a3c <MX_USART3_UART_Init+0xe8>)
 80019b2:	f00b f8dc 	bl	800cb6e <HAL_UARTEx_SetTxFifoThreshold>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 80019bc:	f000 f9fa 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c0:	2100      	movs	r1, #0
 80019c2:	481e      	ldr	r0, [pc, #120]	@ (8001a3c <MX_USART3_UART_Init+0xe8>)
 80019c4:	f00b f911 	bl	800cbea <HAL_UARTEx_SetRxFifoThreshold>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 80019ce:	f000 f9f1 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019d2:	481a      	ldr	r0, [pc, #104]	@ (8001a3c <MX_USART3_UART_Init+0xe8>)
 80019d4:	f00b f892 	bl	800cafc <HAL_UARTEx_DisableFifoMode>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 80019de:	f000 f9e9 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* wait a short period before releasing the PMOD from reset */
  for(int32_t i=HAL_GetTick()+200,j=0;
 80019e2:	f002 faad 	bl	8003f40 <HAL_GetTick>
 80019e6:	4603      	mov	r3, r0
 80019e8:	33c8      	adds	r3, #200	@ 0xc8
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e003      	b.n	80019fa <MX_USART3_UART_Init+0xa6>
		  j<i;
		  j = HAL_GetTick()){
 80019f2:	f002 faa5 	bl	8003f40 <HAL_GetTick>
 80019f6:	4603      	mov	r3, r0
 80019f8:	60fb      	str	r3, [r7, #12]
		  j<i;
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	dbf7      	blt.n	80019f2 <MX_USART3_UART_Init+0x9e>
	  ;
  }
  HAL_GPIO_WritePin(PMOD_RST_GPIO_Port, PMOD_RST_Pin, GPIO_PIN_SET);
 8001a02:	2201      	movs	r2, #1
 8001a04:	2180      	movs	r1, #128	@ 0x80
 8001a06:	480f      	ldr	r0, [pc, #60]	@ (8001a44 <MX_USART3_UART_Init+0xf0>)
 8001a08:	f002 ffec 	bl	80049e4 <HAL_GPIO_WritePin>
  /* wait a period for the PMOD to complete booting then continue with host initialization. */
  for(int32_t i=HAL_GetTick()+6000,j=0;
 8001a0c:	f002 fa98 	bl	8003f40 <HAL_GetTick>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f503 53bb 	add.w	r3, r3, #5984	@ 0x1760
 8001a16:	3310      	adds	r3, #16
 8001a18:	603b      	str	r3, [r7, #0]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	e003      	b.n	8001a28 <MX_USART3_UART_Init+0xd4>
 		  j<i;
 		  j = HAL_GetTick()){
 8001a20:	f002 fa8e 	bl	8003f40 <HAL_GetTick>
 8001a24:	4603      	mov	r3, r0
 8001a26:	60bb      	str	r3, [r7, #8]
 		  j<i;
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dbf7      	blt.n	8001a20 <MX_USART3_UART_Init+0xcc>
 	  ;
   }
  /* USER CODE END USART3_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000ba0 	.word	0x20000ba0
 8001a40:	40004800 	.word	0x40004800
 8001a44:	42021800 	.word	0x42021800

08001a48 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a4e:	4a16      	ldr	r2, [pc, #88]	@ (8001aa8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001a50:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001a52:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a54:	2206      	movs	r2, #6
 8001a56:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a58:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a60:	2202      	movs	r2, #2
 8001a62:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001a76:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001a82:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a88:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a8e:	4805      	ldr	r0, [pc, #20]	@ (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a90:	f004 fa8e 	bl	8005fb0 <HAL_PCD_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001a9a:	f000 f98b 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000c68 	.word	0x20000c68
 8001aa8:	42040000 	.word	0x42040000

08001aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08e      	sub	sp, #56	@ 0x38
 8001ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ac2:	4bb3      	ldr	r3, [pc, #716]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ac8:	4ab1      	ldr	r2, [pc, #708]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ace:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ad2:	4baf      	ldr	r3, [pc, #700]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001adc:	623b      	str	r3, [r7, #32]
 8001ade:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae0:	4bab      	ldr	r3, [pc, #684]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ae6:	4aaa      	ldr	r2, [pc, #680]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001af0:	4ba7      	ldr	r3, [pc, #668]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	61fb      	str	r3, [r7, #28]
 8001afc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	4ba4      	ldr	r3, [pc, #656]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b04:	4aa2      	ldr	r2, [pc, #648]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b0e:	4ba0      	ldr	r3, [pc, #640]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b1c:	4b9c      	ldr	r3, [pc, #624]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b22:	4a9b      	ldr	r2, [pc, #620]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001b24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b28:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b2c:	4b98      	ldr	r3, [pc, #608]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b3a:	4b95      	ldr	r3, [pc, #596]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b40:	4a93      	ldr	r2, [pc, #588]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b4a:	4b91      	ldr	r3, [pc, #580]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b58:	4b8d      	ldr	r3, [pc, #564]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b5e:	4a8c      	ldr	r2, [pc, #560]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b68:	4b89      	ldr	r3, [pc, #548]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b76:	4b86      	ldr	r3, [pc, #536]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b7c:	4a84      	ldr	r2, [pc, #528]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001b7e:	f043 0308 	orr.w	r3, r3, #8
 8001b82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b86:	4b82      	ldr	r3, [pc, #520]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b94:	4b7e      	ldr	r3, [pc, #504]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b9a:	4a7d      	ldr	r2, [pc, #500]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001b9c:	f043 0310 	orr.w	r3, r3, #16
 8001ba0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ba4:	4b7a      	ldr	r3, [pc, #488]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bb2:	4b77      	ldr	r3, [pc, #476]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bb8:	4a75      	ldr	r2, [pc, #468]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001bba:	f043 0320 	orr.w	r3, r3, #32
 8001bbe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bc2:	4b73      	ldr	r3, [pc, #460]	@ (8001d90 <MX_GPIO_Init+0x2e4>)
 8001bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bc8:	f003 0320 	and.w	r3, r3, #32
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_15|GPIO_PIN_13|LED_RED_Pin, GPIO_PIN_SET);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f24a 0140 	movw	r1, #41024	@ 0xa040
 8001bd6:	486f      	ldr	r0, [pc, #444]	@ (8001d94 <MX_GPIO_Init+0x2e8>)
 8001bd8:	f002 ff04 	bl	80049e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2120      	movs	r1, #32
 8001be0:	486d      	ldr	r0, [pc, #436]	@ (8001d98 <MX_GPIO_Init+0x2ec>)
 8001be2:	f002 feff 	bl	80049e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2182      	movs	r1, #130	@ 0x82
 8001bea:	486a      	ldr	r0, [pc, #424]	@ (8001d94 <MX_GPIO_Init+0x2e8>)
 8001bec:	f002 fefa 	bl	80049e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PMOD_RST_Pin|WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	21c0      	movs	r1, #192	@ 0xc0
 8001bf4:	4869      	ldr	r0, [pc, #420]	@ (8001d9c <MX_GPIO_Init+0x2f0>)
 8001bf6:	f002 fef5 	bl	80049e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8001c00:	4867      	ldr	r0, [pc, #412]	@ (8001da0 <MX_GPIO_Init+0x2f4>)
 8001c02:	f002 feef 	bl	80049e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WRLS_FLOW_Pin Mems_VLX_GPIO_Pin Mems_INT_LPS22HH_Pin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 8001c06:	f248 0324 	movw	r3, #32804	@ 0x8024
 8001c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4860      	ldr	r0, [pc, #384]	@ (8001d9c <MX_GPIO_Init+0x2f0>)
 8001c1c:	f002 fc2c 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_UART4_RX_Pin WRLS_UART4_TX_Pin */
  GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 8001c20:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001c24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c32:	2308      	movs	r3, #8
 8001c34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4859      	ldr	r0, [pc, #356]	@ (8001da4 <MX_GPIO_Init+0x2f8>)
 8001c3e:	f002 fc1b 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 LED_RED_Pin LED_GREEN_Pin
                           Mems_VL53_xshut_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|LED_RED_Pin|LED_GREEN_Pin
 8001c42:	f24a 03c2 	movw	r3, #41154	@ 0xa0c2
 8001c46:	627b      	str	r3, [r7, #36]	@ 0x24
                          |Mems_VL53_xshut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c58:	4619      	mov	r1, r3
 8001c5a:	484e      	ldr	r0, [pc, #312]	@ (8001d94 <MX_GPIO_Init+0x2e8>)
 8001c5c:	f002 fc0c 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3_BOOT0_Pin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 8001c60:	2308      	movs	r3, #8
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 8001c6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c70:	4619      	mov	r1, r3
 8001c72:	4848      	ldr	r0, [pc, #288]	@ (8001d94 <MX_GPIO_Init+0x2e8>)
 8001c74:	f002 fc00 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_PWR_Pin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 8001c78:	2320      	movs	r3, #32
 8001c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 8001c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4842      	ldr	r0, [pc, #264]	@ (8001d98 <MX_GPIO_Init+0x2ec>)
 8001c90:	f002 fbf2 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8001c94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c9a:	4b43      	ldr	r3, [pc, #268]	@ (8001da8 <MX_GPIO_Init+0x2fc>)
 8001c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8001ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	483e      	ldr	r0, [pc, #248]	@ (8001da4 <MX_GPIO_Init+0x2f8>)
 8001caa:	f002 fbe5 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_RST_Pin WRLS_WKUP_B_Pin */
  GPIO_InitStruct.Pin = PMOD_RST_Pin|WRLS_WKUP_B_Pin;
 8001cae:	23c0      	movs	r3, #192	@ 0xc0
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4835      	ldr	r0, [pc, #212]	@ (8001d9c <MX_GPIO_Init+0x2f0>)
 8001cc6:	f002 fbd7 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CCK1_Pin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 8001cca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001cdc:	2306      	movs	r3, #6
 8001cde:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 8001ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	482e      	ldr	r0, [pc, #184]	@ (8001da0 <MX_GPIO_Init+0x2f4>)
 8001ce8:	f002 fbc6 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_NOTIFY_Pin Mems_INT_IIS2MDC_Pin USB_IANA_Pin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin;
 8001cec:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cfe:	4619      	mov	r1, r3
 8001d00:	482a      	ldr	r0, [pc, #168]	@ (8001dac <MX_GPIO_Init+0x300>)
 8001d02:	f002 fbb9 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_UCPD_FLT_Pin Mems_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 8001d06:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8001d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4825      	ldr	r0, [pc, #148]	@ (8001db0 <MX_GPIO_Init+0x304>)
 8001d1c:	f002 fbac 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 8001d20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d26:	2300      	movs	r3, #0
 8001d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d32:	4619      	mov	r1, r3
 8001d34:	481a      	ldr	r0, [pc, #104]	@ (8001da0 <MX_GPIO_Init+0x2f4>)
 8001d36:	f002 fb9f 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mems_STSAFE_RESET_Pin WRLS_WKUP_W_Pin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 8001d3a:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d40:	2301      	movs	r3, #1
 8001d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d50:	4619      	mov	r1, r3
 8001d52:	4813      	ldr	r0, [pc, #76]	@ (8001da0 <MX_GPIO_Init+0x2f4>)
 8001d54:	f002 fb90 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_SDIN0_Pin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d64:	2300      	movs	r3, #0
 8001d66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001d68:	2306      	movs	r3, #6
 8001d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 8001d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d70:	4619      	mov	r1, r3
 8001d72:	4809      	ldr	r0, [pc, #36]	@ (8001d98 <MX_GPIO_Init+0x2ec>)
 8001d74:	f002 fb80 	bl	8004478 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2018      	movs	r0, #24
 8001d7e:	f002 f9eb 	bl	8004158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8001d82:	2018      	movs	r0, #24
 8001d84:	f002 fa02 	bl	800418c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d88:	bf00      	nop
 8001d8a:	3738      	adds	r7, #56	@ 0x38
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	46020c00 	.word	0x46020c00
 8001d94:	42021c00 	.word	0x42021c00
 8001d98:	42020400 	.word	0x42020400
 8001d9c:	42021800 	.word	0x42021800
 8001da0:	42021400 	.word	0x42021400
 8001da4:	42020800 	.word	0x42020800
 8001da8:	10110000 	.word	0x10110000
 8001dac:	42020c00 	.word	0x42020c00
 8001db0:	42021000 	.word	0x42021000

08001db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db8:	b672      	cpsid	i
}
 8001dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <Error_Handler+0x8>

08001dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <HAL_MspInit+0x30>)
 8001dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dcc:	4a08      	ldr	r2, [pc, #32]	@ (8001df0 <HAL_MspInit+0x30>)
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_MspInit+0x30>)
 8001dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	46020c00 	.word	0x46020c00

08001df4 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b0bc      	sub	sp, #240	@ 0xf0
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e0c:	f107 0310 	add.w	r3, r7, #16
 8001e10:	22c8      	movs	r2, #200	@ 0xc8
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f00c fa33 	bl	800e280 <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a27      	ldr	r2, [pc, #156]	@ (8001ebc <HAL_MDF_MspInit+0xc8>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d146      	bne.n	8001eb2 <HAL_MDF_MspInit+0xbe>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8001e24:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e36:	f107 0310 	add.w	r3, r7, #16
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f005 fd9c 	bl	8007978 <HAL_RCCEx_PeriphCLKConfig>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_MDF_MspInit+0x56>
    {
      Error_Handler();
 8001e46:	f7ff ffb5 	bl	8001db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec0 <HAL_MDF_MspInit+0xcc>)
 8001e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e50:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec0 <HAL_MDF_MspInit+0xcc>)
 8001e52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001e5a:	4b19      	ldr	r3, [pc, #100]	@ (8001ec0 <HAL_MDF_MspInit+0xcc>)
 8001e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e68:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <HAL_MDF_MspInit+0xcc>)
 8001e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e6e:	4a14      	ldr	r2, [pc, #80]	@ (8001ec0 <HAL_MDF_MspInit+0xcc>)
 8001e70:	f043 0310 	orr.w	r3, r3, #16
 8001e74:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e78:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <HAL_MDF_MspInit+0xcc>)
 8001e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
    /**ADF1 GPIO Configuration
    PE10     ------> ADF1_SDI0
    PE9     ------> ADF1_CCK0
    */
    GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 8001e86:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ea6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4805      	ldr	r0, [pc, #20]	@ (8001ec4 <HAL_MDF_MspInit+0xd0>)
 8001eae:	f002 fae3 	bl	8004478 <HAL_GPIO_Init>

  /* USER CODE END ADF1_MspInit 1 */

  }

}
 8001eb2:	bf00      	nop
 8001eb4:	37f0      	adds	r7, #240	@ 0xf0
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	46024080 	.word	0x46024080
 8001ec0:	46020c00 	.word	0x46020c00
 8001ec4:	42021000 	.word	0x42021000

08001ec8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b0be      	sub	sp, #248	@ 0xf8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ee0:	f107 0318 	add.w	r3, r7, #24
 8001ee4:	22c8      	movs	r2, #200	@ 0xc8
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f00c f9c9 	bl	800e280 <memset>
  if(hi2c->Instance==I2C1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a4d      	ldr	r2, [pc, #308]	@ (8002028 <HAL_I2C_MspInit+0x160>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d147      	bne.n	8001f88 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ef8:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f0a:	f107 0318 	add.w	r3, r7, #24
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f005 fd32 	bl	8007978 <HAL_RCCEx_PeriphCLKConfig>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001f1a:	f7ff ff4b 	bl	8001db4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1e:	4b43      	ldr	r3, [pc, #268]	@ (800202c <HAL_I2C_MspInit+0x164>)
 8001f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f24:	4a41      	ldr	r2, [pc, #260]	@ (800202c <HAL_I2C_MspInit+0x164>)
 8001f26:	f043 0302 	orr.w	r3, r3, #2
 8001f2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800202c <HAL_I2C_MspInit+0x164>)
 8001f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001f3c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f44:	2312      	movs	r3, #18
 8001f46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f56:	2304      	movs	r3, #4
 8001f58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f60:	4619      	mov	r1, r3
 8001f62:	4833      	ldr	r0, [pc, #204]	@ (8002030 <HAL_I2C_MspInit+0x168>)
 8001f64:	f002 fa88 	bl	8004478 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f68:	4b30      	ldr	r3, [pc, #192]	@ (800202c <HAL_I2C_MspInit+0x164>)
 8001f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f6e:	4a2f      	ldr	r2, [pc, #188]	@ (800202c <HAL_I2C_MspInit+0x164>)
 8001f70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f74:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001f78:	4b2c      	ldr	r3, [pc, #176]	@ (800202c <HAL_I2C_MspInit+0x164>)
 8001f7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f86:	e04a      	b.n	800201e <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a29      	ldr	r2, [pc, #164]	@ (8002034 <HAL_I2C_MspInit+0x16c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d145      	bne.n	800201e <HAL_I2C_MspInit+0x156>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f92:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fa4:	f107 0318 	add.w	r3, r7, #24
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f005 fce5 	bl	8007978 <HAL_RCCEx_PeriphCLKConfig>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8001fb4:	f7ff fefe 	bl	8001db4 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800202c <HAL_I2C_MspInit+0x164>)
 8001fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fbe:	4a1b      	ldr	r2, [pc, #108]	@ (800202c <HAL_I2C_MspInit+0x164>)
 8001fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fc4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fc8:	4b18      	ldr	r3, [pc, #96]	@ (800202c <HAL_I2C_MspInit+0x164>)
 8001fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001fd6:	2330      	movs	r3, #48	@ 0x30
 8001fd8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fdc:	2312      	movs	r3, #18
 8001fde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ff4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	480f      	ldr	r0, [pc, #60]	@ (8002038 <HAL_I2C_MspInit+0x170>)
 8001ffc:	f002 fa3c 	bl	8004478 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002000:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <HAL_I2C_MspInit+0x164>)
 8002002:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002006:	4a09      	ldr	r2, [pc, #36]	@ (800202c <HAL_I2C_MspInit+0x164>)
 8002008:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800200c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002010:	4b06      	ldr	r3, [pc, #24]	@ (800202c <HAL_I2C_MspInit+0x164>)
 8002012:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
}
 800201e:	bf00      	nop
 8002020:	37f8      	adds	r7, #248	@ 0xf8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40005400 	.word	0x40005400
 800202c:	46020c00 	.word	0x46020c00
 8002030:	42020400 	.word	0x42020400
 8002034:	40005800 	.word	0x40005800
 8002038:	42021c00 	.word	0x42021c00

0800203c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b0c8      	sub	sp, #288	@ 0x120
 8002040:	af00      	add	r7, sp, #0
 8002042:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002046:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800204a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800205c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002060:	22c8      	movs	r2, #200	@ 0xc8
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f00c f90b 	bl	800e280 <memset>
  if(hospi->Instance==OCTOSPI1)
 800206a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800206e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4aa6      	ldr	r2, [pc, #664]	@ (8002310 <HAL_OSPI_MspInit+0x2d4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	f040 815d 	bne.w	8002338 <HAL_OSPI_MspInit+0x2fc>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800207e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002090:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002094:	4618      	mov	r0, r3
 8002096:	f005 fc6f 	bl	8007978 <HAL_RCCEx_PeriphCLKConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 80020a0:	f7ff fe88 	bl	8001db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 80020a4:	4b9b      	ldr	r3, [pc, #620]	@ (8002314 <HAL_OSPI_MspInit+0x2d8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3301      	adds	r3, #1
 80020aa:	4a9a      	ldr	r2, [pc, #616]	@ (8002314 <HAL_OSPI_MspInit+0x2d8>)
 80020ac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 80020ae:	4b99      	ldr	r3, [pc, #612]	@ (8002314 <HAL_OSPI_MspInit+0x2d8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d10e      	bne.n	80020d4 <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 80020b6:	4b98      	ldr	r3, [pc, #608]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 80020b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020bc:	4a96      	ldr	r2, [pc, #600]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 80020be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020c6:	4b94      	ldr	r3, [pc, #592]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 80020c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80020d4:	4b90      	ldr	r3, [pc, #576]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 80020d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020da:	4a8f      	ldr	r2, [pc, #572]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 80020dc:	f043 0310 	orr.w	r3, r3, #16
 80020e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020e4:	4b8c      	ldr	r3, [pc, #560]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 80020e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80020f2:	4b89      	ldr	r3, [pc, #548]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 80020f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020f8:	4a87      	ldr	r2, [pc, #540]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 80020fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002102:	4b85      	ldr	r3, [pc, #532]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 8002104:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210c:	637b      	str	r3, [r7, #52]	@ 0x34
 800210e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002110:	4b81      	ldr	r3, [pc, #516]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 8002112:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002116:	4a80      	ldr	r2, [pc, #512]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 8002118:	f043 0310 	orr.w	r3, r3, #16
 800211c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002120:	4b7d      	ldr	r3, [pc, #500]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 8002122:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	633b      	str	r3, [r7, #48]	@ 0x30
 800212c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800212e:	4b7a      	ldr	r3, [pc, #488]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 8002130:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002134:	4a78      	ldr	r2, [pc, #480]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800213e:	4b76      	ldr	r3, [pc, #472]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 8002140:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800214a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800214c:	4b72      	ldr	r3, [pc, #456]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 800214e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002152:	4a71      	ldr	r2, [pc, #452]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 8002154:	f043 0320 	orr.w	r3, r3, #32
 8002158:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800215c:	4b6e      	ldr	r3, [pc, #440]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 800215e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800216a:	4b6b      	ldr	r3, [pc, #428]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 800216c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002170:	4a69      	ldr	r2, [pc, #420]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 8002172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002176:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800217a:	4b67      	ldr	r3, [pc, #412]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 800217c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002184:	627b      	str	r3, [r7, #36]	@ 0x24
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002188:	4b63      	ldr	r3, [pc, #396]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 800218a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800218e:	4a62      	ldr	r2, [pc, #392]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002198:	4b5f      	ldr	r3, [pc, #380]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 800219a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800219e:	f003 0204 	and.w	r2, r3, #4
 80021a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80021a6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80021b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021b4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b6:	4b58      	ldr	r3, [pc, #352]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 80021b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021bc:	4a56      	ldr	r2, [pc, #344]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 80021be:	f043 0302 	orr.w	r3, r3, #2
 80021c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021c6:	4b54      	ldr	r3, [pc, #336]	@ (8002318 <HAL_OSPI_MspInit+0x2dc>)
 80021c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021cc:	f003 0202 	and.w	r2, r3, #2
 80021d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80021d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80021de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021e2:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PC3     ------> OCTOSPIM_P1_IO6
    PB10     ------> OCTOSPIM_P1_CLK
    PB11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 80021e4:	2301      	movs	r3, #1
 80021e6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f6:	2303      	movs	r3, #3
 80021f8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80021fc:	2303      	movs	r3, #3
 80021fe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 8002202:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002206:	4619      	mov	r1, r3
 8002208:	4844      	ldr	r0, [pc, #272]	@ (800231c <HAL_OSPI_MspInit+0x2e0>)
 800220a:	f002 f935 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 800220e:	2308      	movs	r3, #8
 8002210:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002220:	2303      	movs	r3, #3
 8002222:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8002226:	2303      	movs	r3, #3
 8002228:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 800222c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002230:	4619      	mov	r1, r3
 8002232:	483b      	ldr	r0, [pc, #236]	@ (8002320 <HAL_OSPI_MspInit+0x2e4>)
 8002234:	f002 f920 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 8002238:	2380      	movs	r3, #128	@ 0x80
 800223a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	2302      	movs	r3, #2
 8002240:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224a:	2303      	movs	r3, #3
 800224c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002250:	230a      	movs	r3, #10
 8002252:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 8002256:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800225a:	4619      	mov	r1, r3
 800225c:	4831      	ldr	r0, [pc, #196]	@ (8002324 <HAL_OSPI_MspInit+0x2e8>)
 800225e:	f002 f90b 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 8002262:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002266:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800227c:	230a      	movs	r3, #10
 800227e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002282:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002286:	4619      	mov	r1, r3
 8002288:	4827      	ldr	r0, [pc, #156]	@ (8002328 <HAL_OSPI_MspInit+0x2ec>)
 800228a:	f002 f8f5 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 800228e:	2304      	movs	r3, #4
 8002290:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a0:	2303      	movs	r3, #3
 80022a2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80022a6:	2303      	movs	r3, #3
 80022a8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 80022ac:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80022b0:	4619      	mov	r1, r3
 80022b2:	481e      	ldr	r0, [pc, #120]	@ (800232c <HAL_OSPI_MspInit+0x2f0>)
 80022b4:	f002 f8e0 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 80022b8:	2308      	movs	r3, #8
 80022ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ca:	2303      	movs	r3, #3
 80022cc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80022d0:	230a      	movs	r3, #10
 80022d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 80022d6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80022da:	4619      	mov	r1, r3
 80022dc:	4814      	ldr	r0, [pc, #80]	@ (8002330 <HAL_OSPI_MspInit+0x2f4>)
 80022de:	f002 f8cb 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 80022e2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80022e6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f6:	2303      	movs	r3, #3
 80022f8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80022fc:	230a      	movs	r3, #10
 80022fe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002302:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002306:	4619      	mov	r1, r3
 8002308:	480a      	ldr	r0, [pc, #40]	@ (8002334 <HAL_OSPI_MspInit+0x2f8>)
 800230a:	f002 f8b5 	bl	8004478 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 800230e:	e0ed      	b.n	80024ec <HAL_OSPI_MspInit+0x4b0>
 8002310:	420d1400 	.word	0x420d1400
 8002314:	20001150 	.word	0x20001150
 8002318:	46020c00 	.word	0x46020c00
 800231c:	42022000 	.word	0x42022000
 8002320:	42021000 	.word	0x42021000
 8002324:	42020c00 	.word	0x42020c00
 8002328:	42021400 	.word	0x42021400
 800232c:	42021c00 	.word	0x42021c00
 8002330:	42020800 	.word	0x42020800
 8002334:	42020400 	.word	0x42020400
  else if(hospi->Instance==OCTOSPI2)
 8002338:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800233c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a6c      	ldr	r2, [pc, #432]	@ (80024f8 <HAL_OSPI_MspInit+0x4bc>)
 8002346:	4293      	cmp	r3, r2
 8002348:	f040 80d0 	bne.w	80024ec <HAL_OSPI_MspInit+0x4b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800234c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002358:	2300      	movs	r3, #0
 800235a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800235e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002362:	4618      	mov	r0, r3
 8002364:	f005 fb08 	bl	8007978 <HAL_RCCEx_PeriphCLKConfig>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_OSPI_MspInit+0x336>
      Error_Handler();
 800236e:	f7ff fd21 	bl	8001db4 <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8002372:	4b62      	ldr	r3, [pc, #392]	@ (80024fc <HAL_OSPI_MspInit+0x4c0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	3301      	adds	r3, #1
 8002378:	4a60      	ldr	r2, [pc, #384]	@ (80024fc <HAL_OSPI_MspInit+0x4c0>)
 800237a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 800237c:	4b5f      	ldr	r3, [pc, #380]	@ (80024fc <HAL_OSPI_MspInit+0x4c0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d116      	bne.n	80023b2 <HAL_OSPI_MspInit+0x376>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8002384:	4b5e      	ldr	r3, [pc, #376]	@ (8002500 <HAL_OSPI_MspInit+0x4c4>)
 8002386:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800238a:	4a5d      	ldr	r2, [pc, #372]	@ (8002500 <HAL_OSPI_MspInit+0x4c4>)
 800238c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002390:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002394:	4b5a      	ldr	r3, [pc, #360]	@ (8002500 <HAL_OSPI_MspInit+0x4c4>)
 8002396:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800239a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800239e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80023a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80023ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023b0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80023b2:	4b53      	ldr	r3, [pc, #332]	@ (8002500 <HAL_OSPI_MspInit+0x4c4>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b8:	4a51      	ldr	r2, [pc, #324]	@ (8002500 <HAL_OSPI_MspInit+0x4c4>)
 80023ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023c2:	4b4f      	ldr	r3, [pc, #316]	@ (8002500 <HAL_OSPI_MspInit+0x4c4>)
 80023c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80023cc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80023d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80023da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80023de:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80023e0:	4b47      	ldr	r3, [pc, #284]	@ (8002500 <HAL_OSPI_MspInit+0x4c4>)
 80023e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023e6:	4a46      	ldr	r2, [pc, #280]	@ (8002500 <HAL_OSPI_MspInit+0x4c4>)
 80023e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023f0:	4b43      	ldr	r3, [pc, #268]	@ (8002500 <HAL_OSPI_MspInit+0x4c4>)
 80023f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023f6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80023fa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80023fe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002408:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800240c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800240e:	4b3c      	ldr	r3, [pc, #240]	@ (8002500 <HAL_OSPI_MspInit+0x4c4>)
 8002410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002414:	4a3a      	ldr	r2, [pc, #232]	@ (8002500 <HAL_OSPI_MspInit+0x4c4>)
 8002416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800241a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800241e:	4b38      	ldr	r3, [pc, #224]	@ (8002500 <HAL_OSPI_MspInit+0x4c4>)
 8002420:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002424:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002428:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800242c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002436:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800243a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800243c:	4b30      	ldr	r3, [pc, #192]	@ (8002500 <HAL_OSPI_MspInit+0x4c4>)
 800243e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002442:	4a2f      	ldr	r2, [pc, #188]	@ (8002500 <HAL_OSPI_MspInit+0x4c4>)
 8002444:	f043 0320 	orr.w	r3, r3, #32
 8002448:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800244c:	4b2c      	ldr	r3, [pc, #176]	@ (8002500 <HAL_OSPI_MspInit+0x4c4>)
 800244e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002452:	f003 0220 	and.w	r2, r3, #32
 8002456:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800245a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002464:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002468:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 800246a:	2320      	movs	r3, #32
 800246c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247c:	2303      	movs	r3, #3
 800247e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8002482:	2305      	movs	r3, #5
 8002484:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 8002488:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800248c:	4619      	mov	r1, r3
 800248e:	481d      	ldr	r0, [pc, #116]	@ (8002504 <HAL_OSPI_MspInit+0x4c8>)
 8002490:	f001 fff2 	bl	8004478 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 8002494:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8002498:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249c:	2302      	movs	r3, #2
 800249e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80024ae:	2305      	movs	r3, #5
 80024b0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024b4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80024b8:	4619      	mov	r1, r3
 80024ba:	4813      	ldr	r0, [pc, #76]	@ (8002508 <HAL_OSPI_MspInit+0x4cc>)
 80024bc:	f001 ffdc 	bl	8004478 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 80024c0:	f241 031f 	movw	r3, #4127	@ 0x101f
 80024c4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c8:	2302      	movs	r3, #2
 80024ca:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d4:	2303      	movs	r3, #3
 80024d6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80024da:	2305      	movs	r3, #5
 80024dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024e0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80024e4:	4619      	mov	r1, r3
 80024e6:	4809      	ldr	r0, [pc, #36]	@ (800250c <HAL_OSPI_MspInit+0x4d0>)
 80024e8:	f001 ffc6 	bl	8004478 <HAL_GPIO_Init>
}
 80024ec:	bf00      	nop
 80024ee:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	420d2400 	.word	0x420d2400
 80024fc:	20001150 	.word	0x20001150
 8002500:	46020c00 	.word	0x46020c00
 8002504:	42022000 	.word	0x42022000
 8002508:	42021c00 	.word	0x42021c00
 800250c:	42021400 	.word	0x42021400

08002510 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b0be      	sub	sp, #248	@ 0xf8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002528:	f107 0318 	add.w	r3, r7, #24
 800252c:	22c8      	movs	r2, #200	@ 0xc8
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f00b fea5 	bl	800e280 <memset>
  if(hspi->Instance==SPI2)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a39      	ldr	r2, [pc, #228]	@ (8002620 <HAL_SPI_MspInit+0x110>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d16b      	bne.n	8002618 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002540:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 800254c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002550:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002554:	f107 0318 	add.w	r3, r7, #24
 8002558:	4618      	mov	r0, r3
 800255a:	f005 fa0d 	bl	8007978 <HAL_RCCEx_PeriphCLKConfig>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8002564:	f7ff fc26 	bl	8001db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002568:	4b2e      	ldr	r3, [pc, #184]	@ (8002624 <HAL_SPI_MspInit+0x114>)
 800256a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800256e:	4a2d      	ldr	r2, [pc, #180]	@ (8002624 <HAL_SPI_MspInit+0x114>)
 8002570:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002574:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002578:	4b2a      	ldr	r3, [pc, #168]	@ (8002624 <HAL_SPI_MspInit+0x114>)
 800257a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800257e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002586:	4b27      	ldr	r3, [pc, #156]	@ (8002624 <HAL_SPI_MspInit+0x114>)
 8002588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800258c:	4a25      	ldr	r2, [pc, #148]	@ (8002624 <HAL_SPI_MspInit+0x114>)
 800258e:	f043 0308 	orr.w	r3, r3, #8
 8002592:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002596:	4b23      	ldr	r3, [pc, #140]	@ (8002624 <HAL_SPI_MspInit+0x114>)
 8002598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002624 <HAL_SPI_MspInit+0x114>)
 80025a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002624 <HAL_SPI_MspInit+0x114>)
 80025ac:	f043 0302 	orr.w	r3, r3, #2
 80025b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002624 <HAL_SPI_MspInit+0x114>)
 80025b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 80025c2:	231a      	movs	r3, #26
 80025c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c8:	2302      	movs	r3, #2
 80025ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025da:	2305      	movs	r3, #5
 80025dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025e0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80025e4:	4619      	mov	r1, r3
 80025e6:	4810      	ldr	r0, [pc, #64]	@ (8002628 <HAL_SPI_MspInit+0x118>)
 80025e8:	f001 ff46 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 80025ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2300      	movs	r3, #0
 8002602:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002606:	2305      	movs	r3, #5
 8002608:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 800260c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002610:	4619      	mov	r1, r3
 8002612:	4806      	ldr	r0, [pc, #24]	@ (800262c <HAL_SPI_MspInit+0x11c>)
 8002614:	f001 ff30 	bl	8004478 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002618:	bf00      	nop
 800261a:	37f8      	adds	r7, #248	@ 0xf8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40003800 	.word	0x40003800
 8002624:	46020c00 	.word	0x46020c00
 8002628:	42020c00 	.word	0x42020c00
 800262c:	42020400 	.word	0x42020400

08002630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b0be      	sub	sp, #248	@ 0xf8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002648:	f107 0318 	add.w	r3, r7, #24
 800264c:	22c8      	movs	r2, #200	@ 0xc8
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f00b fe15 	bl	800e280 <memset>
  if(huart->Instance==USART1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a54      	ldr	r2, [pc, #336]	@ (80027ac <HAL_UART_MspInit+0x17c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d14e      	bne.n	80026fe <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002660:	f04f 0201 	mov.w	r2, #1
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800266c:	2300      	movs	r3, #0
 800266e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002670:	f107 0318 	add.w	r3, r7, #24
 8002674:	4618      	mov	r0, r3
 8002676:	f005 f97f 	bl	8007978 <HAL_RCCEx_PeriphCLKConfig>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8002680:	f7ff fb98 	bl	8001db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002684:	4b4a      	ldr	r3, [pc, #296]	@ (80027b0 <HAL_UART_MspInit+0x180>)
 8002686:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800268a:	4a49      	ldr	r2, [pc, #292]	@ (80027b0 <HAL_UART_MspInit+0x180>)
 800268c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002690:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002694:	4b46      	ldr	r3, [pc, #280]	@ (80027b0 <HAL_UART_MspInit+0x180>)
 8002696:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800269a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	4b43      	ldr	r3, [pc, #268]	@ (80027b0 <HAL_UART_MspInit+0x180>)
 80026a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026a8:	4a41      	ldr	r2, [pc, #260]	@ (80027b0 <HAL_UART_MspInit+0x180>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026b2:	4b3f      	ldr	r3, [pc, #252]	@ (80027b0 <HAL_UART_MspInit+0x180>)
 80026b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 80026c0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80026c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	2302      	movs	r3, #2
 80026ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026da:	2307      	movs	r3, #7
 80026dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80026e4:	4619      	mov	r1, r3
 80026e6:	4833      	ldr	r0, [pc, #204]	@ (80027b4 <HAL_UART_MspInit+0x184>)
 80026e8:	f001 fec6 	bl	8004478 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026ec:	2200      	movs	r2, #0
 80026ee:	2100      	movs	r1, #0
 80026f0:	203d      	movs	r0, #61	@ 0x3d
 80026f2:	f001 fd31 	bl	8004158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026f6:	203d      	movs	r0, #61	@ 0x3d
 80026f8:	f001 fd48 	bl	800418c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80026fc:	e052      	b.n	80027a4 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a2d      	ldr	r2, [pc, #180]	@ (80027b8 <HAL_UART_MspInit+0x188>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d14d      	bne.n	80027a4 <HAL_UART_MspInit+0x174>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002708:	f04f 0204 	mov.w	r2, #4
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002714:	2300      	movs	r3, #0
 8002716:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002718:	f107 0318 	add.w	r3, r7, #24
 800271c:	4618      	mov	r0, r3
 800271e:	f005 f92b 	bl	8007978 <HAL_RCCEx_PeriphCLKConfig>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_UART_MspInit+0xfc>
      Error_Handler();
 8002728:	f7ff fb44 	bl	8001db4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800272c:	4b20      	ldr	r3, [pc, #128]	@ (80027b0 <HAL_UART_MspInit+0x180>)
 800272e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002732:	4a1f      	ldr	r2, [pc, #124]	@ (80027b0 <HAL_UART_MspInit+0x180>)
 8002734:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002738:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800273c:	4b1c      	ldr	r3, [pc, #112]	@ (80027b0 <HAL_UART_MspInit+0x180>)
 800273e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002742:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800274a:	4b19      	ldr	r3, [pc, #100]	@ (80027b0 <HAL_UART_MspInit+0x180>)
 800274c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002750:	4a17      	ldr	r2, [pc, #92]	@ (80027b0 <HAL_UART_MspInit+0x180>)
 8002752:	f043 0308 	orr.w	r3, r3, #8
 8002756:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800275a:	4b15      	ldr	r3, [pc, #84]	@ (80027b0 <HAL_UART_MspInit+0x180>)
 800275c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002768:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800276c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002770:	2302      	movs	r3, #2
 8002772:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002782:	2307      	movs	r3, #7
 8002784:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002788:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800278c:	4619      	mov	r1, r3
 800278e:	480b      	ldr	r0, [pc, #44]	@ (80027bc <HAL_UART_MspInit+0x18c>)
 8002790:	f001 fe72 	bl	8004478 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002794:	2200      	movs	r2, #0
 8002796:	2100      	movs	r1, #0
 8002798:	203f      	movs	r0, #63	@ 0x3f
 800279a:	f001 fcdd 	bl	8004158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800279e:	203f      	movs	r0, #63	@ 0x3f
 80027a0:	f001 fcf4 	bl	800418c <HAL_NVIC_EnableIRQ>
}
 80027a4:	bf00      	nop
 80027a6:	37f8      	adds	r7, #248	@ 0xf8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40013800 	.word	0x40013800
 80027b0:	46020c00 	.word	0x46020c00
 80027b4:	42020000 	.word	0x42020000
 80027b8:	40004800 	.word	0x40004800
 80027bc:	42020c00 	.word	0x42020c00

080027c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b0be      	sub	sp, #248	@ 0xf8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027d8:	f107 0318 	add.w	r3, r7, #24
 80027dc:	22c8      	movs	r2, #200	@ 0xc8
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f00b fd4d 	bl	800e280 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a38      	ldr	r2, [pc, #224]	@ (80028cc <HAL_PCD_MspInit+0x10c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d169      	bne.n	80028c4 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80027f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002802:	f107 0318 	add.w	r3, r7, #24
 8002806:	4618      	mov	r0, r3
 8002808:	f005 f8b6 	bl	8007978 <HAL_RCCEx_PeriphCLKConfig>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8002812:	f7ff facf 	bl	8001db4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002816:	4b2e      	ldr	r3, [pc, #184]	@ (80028d0 <HAL_PCD_MspInit+0x110>)
 8002818:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800281c:	4a2c      	ldr	r2, [pc, #176]	@ (80028d0 <HAL_PCD_MspInit+0x110>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002826:	4b2a      	ldr	r3, [pc, #168]	@ (80028d0 <HAL_PCD_MspInit+0x110>)
 8002828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 8002834:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002838:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	2300      	movs	r3, #0
 800284a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800284e:	230a      	movs	r3, #10
 8002850:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002854:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002858:	4619      	mov	r1, r3
 800285a:	481e      	ldr	r0, [pc, #120]	@ (80028d4 <HAL_PCD_MspInit+0x114>)
 800285c:	f001 fe0c 	bl	8004478 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002860:	4b1b      	ldr	r3, [pc, #108]	@ (80028d0 <HAL_PCD_MspInit+0x110>)
 8002862:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002866:	4a1a      	ldr	r2, [pc, #104]	@ (80028d0 <HAL_PCD_MspInit+0x110>)
 8002868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800286c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002870:	4b17      	ldr	r3, [pc, #92]	@ (80028d0 <HAL_PCD_MspInit+0x110>)
 8002872:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800287e:	4b14      	ldr	r3, [pc, #80]	@ (80028d0 <HAL_PCD_MspInit+0x110>)
 8002880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d119      	bne.n	80028c0 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288c:	4b10      	ldr	r3, [pc, #64]	@ (80028d0 <HAL_PCD_MspInit+0x110>)
 800288e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002892:	4a0f      	ldr	r2, [pc, #60]	@ (80028d0 <HAL_PCD_MspInit+0x110>)
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800289c:	4b0c      	ldr	r3, [pc, #48]	@ (80028d0 <HAL_PCD_MspInit+0x110>)
 800289e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80028aa:	f003 fd99 	bl	80063e0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ae:	4b08      	ldr	r3, [pc, #32]	@ (80028d0 <HAL_PCD_MspInit+0x110>)
 80028b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028b4:	4a06      	ldr	r2, [pc, #24]	@ (80028d0 <HAL_PCD_MspInit+0x110>)
 80028b6:	f023 0304 	bic.w	r3, r3, #4
 80028ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80028be:	e001      	b.n	80028c4 <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 80028c0:	f003 fd8e 	bl	80063e0 <HAL_PWREx_EnableVddUSB>
}
 80028c4:	bf00      	nop
 80028c6:	37f8      	adds	r7, #248	@ 0xf8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	42040000 	.word	0x42040000
 80028d0:	46020c00 	.word	0x46020c00
 80028d4:	42020000 	.word	0x42020000

080028d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <NMI_Handler+0x4>

080028e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e4:	bf00      	nop
 80028e6:	e7fd      	b.n	80028e4 <HardFault_Handler+0x4>

080028e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028ec:	bf00      	nop
 80028ee:	e7fd      	b.n	80028ec <MemManage_Handler+0x4>

080028f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028f4:	bf00      	nop
 80028f6:	e7fd      	b.n	80028f4 <BusFault_Handler+0x4>

080028f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028fc:	bf00      	nop
 80028fe:	e7fd      	b.n	80028fc <UsageFault_Handler+0x4>

08002900 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800292e:	f001 faf3 	bl	8003f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}

08002936 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Button_Pin);
 800293a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800293e:	f002 f883 	bl	8004a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800294c:	4802      	ldr	r0, [pc, #8]	@ (8002958 <USART1_IRQHandler+0x10>)
 800294e:	f008 f91d 	bl	800ab8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000ad8 	.word	0x20000ad8

0800295c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002960:	4802      	ldr	r0, [pc, #8]	@ (800296c <USART2_IRQHandler+0x10>)
 8002962:	f008 f913 	bl	800ab8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20001158 	.word	0x20001158

08002970 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002974:	4802      	ldr	r0, [pc, #8]	@ (8002980 <USART3_IRQHandler+0x10>)
 8002976:	f008 f909 	bl	800ab8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000ba0 	.word	0x20000ba0

08002984 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return 1;
 8002988:	2301      	movs	r3, #1
}
 800298a:	4618      	mov	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <_kill>:

int _kill(int pid, int sig)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800299e:	f00b fcf1 	bl	800e384 <__errno>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2216      	movs	r2, #22
 80029a6:	601a      	str	r2, [r3, #0]
  return -1;
 80029a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <_exit>:

void _exit (int status)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029bc:	f04f 31ff 	mov.w	r1, #4294967295
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ffe7 	bl	8002994 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029c6:	bf00      	nop
 80029c8:	e7fd      	b.n	80029c6 <_exit+0x12>

080029ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b086      	sub	sp, #24
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	e00a      	b.n	80029f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029dc:	f7fe fb10 	bl	8001000 <__io_getchar>
 80029e0:	4601      	mov	r1, r0
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	60ba      	str	r2, [r7, #8]
 80029e8:	b2ca      	uxtb	r2, r1
 80029ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	3301      	adds	r3, #1
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	dbf0      	blt.n	80029dc <_read+0x12>
  }

  return len;
 80029fa:	687b      	ldr	r3, [r7, #4]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	e009      	b.n	8002a2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	60ba      	str	r2, [r7, #8]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe fad6 	bl	8000fd0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	3301      	adds	r3, #1
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	dbf1      	blt.n	8002a16 <_write+0x12>
  }
  return len;
 8002a32:	687b      	ldr	r3, [r7, #4]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <_close>:

int _close(int file)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a64:	605a      	str	r2, [r3, #4]
  return 0;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <_isatty>:

int _isatty(int file)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a7c:	2301      	movs	r3, #1
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b085      	sub	sp, #20
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aac:	4a14      	ldr	r2, [pc, #80]	@ (8002b00 <_sbrk+0x5c>)
 8002aae:	4b15      	ldr	r3, [pc, #84]	@ (8002b04 <_sbrk+0x60>)
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ab8:	4b13      	ldr	r3, [pc, #76]	@ (8002b08 <_sbrk+0x64>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d102      	bne.n	8002ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ac0:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <_sbrk+0x64>)
 8002ac2:	4a12      	ldr	r2, [pc, #72]	@ (8002b0c <_sbrk+0x68>)
 8002ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ac6:	4b10      	ldr	r3, [pc, #64]	@ (8002b08 <_sbrk+0x64>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d207      	bcs.n	8002ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ad4:	f00b fc56 	bl	800e384 <__errno>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	220c      	movs	r2, #12
 8002adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae2:	e009      	b.n	8002af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ae4:	4b08      	ldr	r3, [pc, #32]	@ (8002b08 <_sbrk+0x64>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aea:	4b07      	ldr	r3, [pc, #28]	@ (8002b08 <_sbrk+0x64>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4413      	add	r3, r2
 8002af2:	4a05      	ldr	r2, [pc, #20]	@ (8002b08 <_sbrk+0x64>)
 8002af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002af6:	68fb      	ldr	r3, [r7, #12]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	200c0000 	.word	0x200c0000
 8002b04:	00000400 	.word	0x00000400
 8002b08:	20001154 	.word	0x20001154
 8002b0c:	20001db0 	.word	0x20001db0

08002b10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b14:	4b18      	ldr	r3, [pc, #96]	@ (8002b78 <SystemInit+0x68>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1a:	4a17      	ldr	r2, [pc, #92]	@ (8002b78 <SystemInit+0x68>)
 8002b1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002b24:	4b15      	ldr	r3, [pc, #84]	@ (8002b7c <SystemInit+0x6c>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002b2a:	4b14      	ldr	r3, [pc, #80]	@ (8002b7c <SystemInit+0x6c>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002b30:	4b12      	ldr	r3, [pc, #72]	@ (8002b7c <SystemInit+0x6c>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002b36:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <SystemInit+0x6c>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b7c <SystemInit+0x6c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a0e      	ldr	r2, [pc, #56]	@ (8002b7c <SystemInit+0x6c>)
 8002b42:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002b46:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002b4a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <SystemInit+0x6c>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002b52:	4b0a      	ldr	r3, [pc, #40]	@ (8002b7c <SystemInit+0x6c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a09      	ldr	r2, [pc, #36]	@ (8002b7c <SystemInit+0x6c>)
 8002b58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002b5e:	4b07      	ldr	r3, [pc, #28]	@ (8002b7c <SystemInit+0x6c>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b64:	4b04      	ldr	r3, [pc, #16]	@ (8002b78 <SystemInit+0x68>)
 8002b66:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b6a:	609a      	str	r2, [r3, #8]
  #endif
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e000ed00 	.word	0xe000ed00
 8002b7c:	46020c00 	.word	0x46020c00

08002b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002b80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bb8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b84:	f7ff ffc4 	bl	8002b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002b88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002b8a:	e003      	b.n	8002b94 <LoopCopyDataInit>

08002b8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bbc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002b8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002b90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002b92:	3104      	adds	r1, #4

08002b94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002b94:	480a      	ldr	r0, [pc, #40]	@ (8002bc0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002b96:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002b98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002b9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002b9c:	d3f6      	bcc.n	8002b8c <CopyDataInit>
	ldr	r2, =_sbss
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ba0:	e002      	b.n	8002ba8 <LoopFillZerobss>

08002ba2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002ba2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ba4:	f842 3b04 	str.w	r3, [r2], #4

08002ba8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ba8:	4b08      	ldr	r3, [pc, #32]	@ (8002bcc <LoopForever+0x16>)
	cmp	r2, r3
 8002baa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002bac:	d3f9      	bcc.n	8002ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bae:	f00b fbef 	bl	800e390 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bb2:	f7fe fabb 	bl	800112c <main>

08002bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8002bb6:	e7fe      	b.n	8002bb6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002bb8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002bbc:	08014bf8 	.word	0x08014bf8
	ldr	r0, =_sdata
 8002bc0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002bc4:	20000700 	.word	0x20000700
	ldr	r2, =_sbss
 8002bc8:	20000700 	.word	0x20000700
	ldr	r3, = _ebss
 8002bcc:	20001db0 	.word	0x20001db0

08002bd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bd0:	e7fe      	b.n	8002bd0 <ADC1_IRQHandler>
	...

08002bd4 <BSP_USART2_Init>:
  * @brief  Initializes USART HAL.
  * @param  Init : UART initialization parameters
  * @retval BSP status
  */
int32_t BSP_USART2_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	607b      	str	r3, [r7, #4]

  huart2.Instance  = USART2;
 8002bde:	4b16      	ldr	r3, [pc, #88]	@ (8002c38 <BSP_USART2_Init+0x64>)
 8002be0:	4a16      	ldr	r2, [pc, #88]	@ (8002c3c <BSP_USART2_Init+0x68>)
 8002be2:	601a      	str	r2, [r3, #0]

  if(USART2InitCounter++ == 0)
 8002be4:	4b16      	ldr	r3, [pc, #88]	@ (8002c40 <BSP_USART2_Init+0x6c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	4915      	ldr	r1, [pc, #84]	@ (8002c40 <BSP_USART2_Init+0x6c>)
 8002bec:	600a      	str	r2, [r1, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d11d      	bne.n	8002c2e <BSP_USART2_Init+0x5a>
  {
    if (HAL_UART_GetState(&huart2) == HAL_UART_STATE_RESET)
 8002bf2:	4811      	ldr	r0, [pc, #68]	@ (8002c38 <BSP_USART2_Init+0x64>)
 8002bf4:	f008 faf4 	bl	800b1e0 <HAL_UART_GetState>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d117      	bne.n	8002c2e <BSP_USART2_Init+0x5a>
    {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
      /* Init the UART Msp */
      USART2_MspInit(&huart2);
#else
      if(IsUSART2MspCbValid == 0U)
 8002bfe:	4b11      	ldr	r3, [pc, #68]	@ (8002c44 <BSP_USART2_Init+0x70>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d107      	bne.n	8002c16 <BSP_USART2_Init+0x42>
      {
        if(BSP_USART2_RegisterDefaultMspCallbacks() != BSP_ERROR_NONE)
 8002c06:	f000 f81f 	bl	8002c48 <BSP_USART2_RegisterDefaultMspCallbacks>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <BSP_USART2_Init+0x42>
        {
          return BSP_ERROR_MSP_FAILURE;
 8002c10:	f06f 0309 	mvn.w	r3, #9
 8002c14:	e00c      	b.n	8002c30 <BSP_USART2_Init+0x5c>
        }
      }
#endif
      if(ret == BSP_ERROR_NONE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d108      	bne.n	8002c2e <BSP_USART2_Init+0x5a>
      {
        /* Init the UART */
        if (MX_USART2_UART_Init(&huart2) != HAL_OK)
 8002c1c:	4806      	ldr	r0, [pc, #24]	@ (8002c38 <BSP_USART2_Init+0x64>)
 8002c1e:	f000 f849 	bl	8002cb4 <MX_USART2_UART_Init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <BSP_USART2_Init+0x5a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002c28:	f06f 0307 	mvn.w	r3, #7
 8002c2c:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002c2e:	687b      	ldr	r3, [r7, #4]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20001158 	.word	0x20001158
 8002c3c:	40004400 	.word	0x40004400
 8002c40:	20001224 	.word	0x20001224
 8002c44:	20001220 	.word	0x20001220

08002c48 <BSP_USART2_RegisterDefaultMspCallbacks>:
/**
  * @brief Register Default BSP USART2 Bus Msp Callbacks
  * @retval BSP status
  */
int32_t BSP_USART2_RegisterDefaultMspCallbacks (void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0

  __HAL_UART_RESET_HANDLE_STATE(&huart2);
 8002c4c:	4b15      	ldr	r3, [pc, #84]	@ (8002ca4 <BSP_USART2_RegisterDefaultMspCallbacks+0x5c>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8002c54:	4b13      	ldr	r3, [pc, #76]	@ (8002ca4 <BSP_USART2_RegisterDefaultMspCallbacks+0x5c>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8002c5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <BSP_USART2_RegisterDefaultMspCallbacks+0x5c>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8002c64:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca4 <BSP_USART2_RegisterDefaultMspCallbacks+0x5c>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

  /* Register MspInit Callback */
  if (HAL_UART_RegisterCallback(&huart2, HAL_UART_MSPINIT_CB_ID, USART2_MspInit)  != HAL_OK)
 8002c6c:	4a0e      	ldr	r2, [pc, #56]	@ (8002ca8 <BSP_USART2_RegisterDefaultMspCallbacks+0x60>)
 8002c6e:	210b      	movs	r1, #11
 8002c70:	480c      	ldr	r0, [pc, #48]	@ (8002ca4 <BSP_USART2_RegisterDefaultMspCallbacks+0x5c>)
 8002c72:	f007 fd33 	bl	800a6dc <HAL_UART_RegisterCallback>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <BSP_USART2_RegisterDefaultMspCallbacks+0x3a>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8002c7c:	f06f 0303 	mvn.w	r3, #3
 8002c80:	e00e      	b.n	8002ca0 <BSP_USART2_RegisterDefaultMspCallbacks+0x58>
  }

  /* Register MspDeInit Callback */
  if (HAL_UART_RegisterCallback(&huart2, HAL_UART_MSPDEINIT_CB_ID, USART2_MspDeInit) != HAL_OK)
 8002c82:	4a0a      	ldr	r2, [pc, #40]	@ (8002cac <BSP_USART2_RegisterDefaultMspCallbacks+0x64>)
 8002c84:	210c      	movs	r1, #12
 8002c86:	4807      	ldr	r0, [pc, #28]	@ (8002ca4 <BSP_USART2_RegisterDefaultMspCallbacks+0x5c>)
 8002c88:	f007 fd28 	bl	800a6dc <HAL_UART_RegisterCallback>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <BSP_USART2_RegisterDefaultMspCallbacks+0x50>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8002c92:	f06f 0303 	mvn.w	r3, #3
 8002c96:	e003      	b.n	8002ca0 <BSP_USART2_RegisterDefaultMspCallbacks+0x58>
  }
  IsUSART2MspCbValid = 1;
 8002c98:	4b05      	ldr	r3, [pc, #20]	@ (8002cb0 <BSP_USART2_RegisterDefaultMspCallbacks+0x68>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20001158 	.word	0x20001158
 8002ca8:	08002d59 	.word	0x08002d59
 8002cac:	08002e39 	.word	0x08002e39
 8002cb0:	20001220 	.word	0x20001220

08002cb4 <MX_USART2_UART_Init>:
}

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a24      	ldr	r2, [pc, #144]	@ (8002d54 <MX_USART2_UART_Init+0xa0>)
 8002cc4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ccc:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f007 fc89 	bl	800a61c <HAL_UART_Init>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_USART2_UART_Init+0x60>
  {
    ret = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d14:	2100      	movs	r1, #0
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f009 ff29 	bl	800cb6e <HAL_UARTEx_SetTxFifoThreshold>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_USART2_UART_Init+0x72>
  {
    ret = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d26:	2100      	movs	r1, #0
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f009 ff5e 	bl	800cbea <HAL_UARTEx_SetRxFifoThreshold>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_USART2_UART_Init+0x84>
  {
    ret = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f009 fedf 	bl	800cafc <HAL_UARTEx_DisableFifoMode>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_USART2_UART_Init+0x94>
  {
    ret = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40004400 	.word	0x40004400

08002d58 <USART2_MspInit>:

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b0bc      	sub	sp, #240	@ 0xf0
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d60:	f107 0310 	add.w	r3, r7, #16
 8002d64:	22c8      	movs	r2, #200	@ 0xc8
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f00b fa89 	bl	800e280 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d6e:	f04f 0202 	mov.w	r2, #2
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002d7e:	f107 0310 	add.w	r3, r7, #16
 8002d82:	4618      	mov	r0, r3
 8002d84:	f004 fdf8 	bl	8007978 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d88:	4b29      	ldr	r3, [pc, #164]	@ (8002e30 <USART2_MspInit+0xd8>)
 8002d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d8e:	4a28      	ldr	r2, [pc, #160]	@ (8002e30 <USART2_MspInit+0xd8>)
 8002d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d94:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002d98:	4b25      	ldr	r3, [pc, #148]	@ (8002e30 <USART2_MspInit+0xd8>)
 8002d9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da6:	4b22      	ldr	r3, [pc, #136]	@ (8002e30 <USART2_MspInit+0xd8>)
 8002da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dac:	4a20      	ldr	r2, [pc, #128]	@ (8002e30 <USART2_MspInit+0xd8>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002db6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e30 <USART2_MspInit+0xd8>)
 8002db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8002ddc:	2307      	movs	r3, #7
 8002dde:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8002de2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002de6:	4619      	mov	r1, r3
 8002de8:	4812      	ldr	r0, [pc, #72]	@ (8002e34 <USART2_MspInit+0xdc>)
 8002dea:	f001 fb45 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8002dee:	2308      	movs	r3, #8
 8002df0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df4:	2302      	movs	r3, #2
 8002df6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e00:	2300      	movs	r3, #0
 8002e02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8002e06:	2307      	movs	r3, #7
 8002e08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8002e0c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002e10:	4619      	mov	r1, r3
 8002e12:	4808      	ldr	r0, [pc, #32]	@ (8002e34 <USART2_MspInit+0xdc>)
 8002e14:	f001 fb30 	bl	8004478 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	203e      	movs	r0, #62	@ 0x3e
 8002e1e:	f001 f99b 	bl	8004158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e22:	203e      	movs	r0, #62	@ 0x3e
 8002e24:	f001 f9b2 	bl	800418c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8002e28:	bf00      	nop
 8002e2a:	37f0      	adds	r7, #240	@ 0xf0
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	46020c00 	.word	0x46020c00
 8002e34:	42020000 	.word	0x42020000

08002e38 <USART2_MspDeInit>:

static void USART2_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8002e40:	4b0b      	ldr	r3, [pc, #44]	@ (8002e70 <USART2_MspDeInit+0x38>)
 8002e42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e46:	4a0a      	ldr	r2, [pc, #40]	@ (8002e70 <USART2_MspDeInit+0x38>)
 8002e48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002e4c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(BUS_USART2_TX_GPIO_PORT, BUS_USART2_TX_GPIO_PIN);
 8002e50:	2104      	movs	r1, #4
 8002e52:	4808      	ldr	r0, [pc, #32]	@ (8002e74 <USART2_MspDeInit+0x3c>)
 8002e54:	f001 fce8 	bl	8004828 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_USART2_RX_GPIO_PORT, BUS_USART2_RX_GPIO_PIN);
 8002e58:	2108      	movs	r1, #8
 8002e5a:	4806      	ldr	r0, [pc, #24]	@ (8002e74 <USART2_MspDeInit+0x3c>)
 8002e5c:	f001 fce4 	bl	8004828 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002e60:	203e      	movs	r0, #62	@ 0x3e
 8002e62:	f001 f9a1 	bl	80041a8 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	46020c00 	.word	0x46020c00
 8002e74:	42020000 	.word	0x42020000

08002e78 <da16k_at_get_response_line>:
   DA16K_TIMEOUT - The specified timeout was reached before another character could be fetched. There may be response data in the buffer.

   The function will fetch at most buf_size - 1 characters and the retreived data is guaranteed to be null-terminated, even in case of errors.

   Other errors should not occur in normal operation. */
static da16k_err_t da16k_at_get_response_line(char *buf, size_t buf_size, uint32_t timeout_ms) {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
    char       *write_ptr   = buf;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	61fb      	str	r3, [r7, #28]
    char       *upper_bound = buf + buf_size - 1;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]
    char        last_char   = 0x00;
 8002e92:	2300      	movs	r3, #0
 8002e94:	76fb      	strb	r3, [r7, #27]
    da16k_err_t ret         = DA16K_SUCCESS;
 8002e96:	2300      	movs	r3, #0
 8002e98:	74fb      	strb	r3, [r7, #19]

    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, buf);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d106      	bne.n	8002eae <da16k_at_get_response_line+0x36>
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	491f      	ldr	r1, [pc, #124]	@ (8002f20 <da16k_at_get_response_line+0xa8>)
 8002ea4:	481f      	ldr	r0, [pc, #124]	@ (8002f24 <da16k_at_get_response_line+0xac>)
 8002ea6:	f00b f8a1 	bl	800dfec <printf>
 8002eaa:	230b      	movs	r3, #11
 8002eac:	e034      	b.n	8002f18 <da16k_at_get_response_line+0xa0>

    if (buf_size == 0) {
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <da16k_at_get_response_line+0x40>
        return DA16K_INVALID_PARAMETER;
 8002eb4:	230b      	movs	r3, #11
 8002eb6:	e02f      	b.n	8002f18 <da16k_at_get_response_line+0xa0>
    }

    memset(buf, 0, buf_size);
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	2100      	movs	r1, #0
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f00b f9df 	bl	800e280 <memset>

    while (true) {
        /* Buffer is full, return & inform */

        if (write_ptr >= upper_bound) {
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d301      	bcc.n	8002ece <da16k_at_get_response_line+0x56>
            return DA16K_AT_RESPONSE_TOO_LONG;
 8002eca:	2307      	movs	r3, #7
 8002ecc:	e024      	b.n	8002f18 <da16k_at_get_response_line+0xa0>
        }

        /* Get next uart char */
        ret = da16k_uart_get_char(write_ptr, timeout_ms);
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	69f8      	ldr	r0, [r7, #28]
 8002ed2:	f00a fcaf 	bl	800d834 <da16k_uart_get_char>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	74fb      	strb	r3, [r7, #19]

        if ((last_char == '\r') && (*write_ptr == '\n')) {
 8002eda:	7efb      	ldrb	r3, [r7, #27]
 8002edc:	2b0d      	cmp	r3, #13
 8002ede:	d10f      	bne.n	8002f00 <da16k_at_get_response_line+0x88>
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b0a      	cmp	r3, #10
 8002ee6:	d10b      	bne.n	8002f00 <da16k_at_get_response_line+0x88>
            /* We received a full line ended by \r\n */
            write_ptr--;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	61fb      	str	r3, [r7, #28]
            write_ptr[0] = 0x00;    /* Replace \r */
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]
            write_ptr[1] = 0x00;    /* Replace \n */
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	2200      	movs	r2, #0
 8002efa:	701a      	strb	r2, [r3, #0]
            return DA16K_SUCCESS;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e00b      	b.n	8002f18 <da16k_at_get_response_line+0xa0>
        }

        /* Error */

        if (ret != DA16K_SUCCESS) {
 8002f00:	7cfb      	ldrb	r3, [r7, #19]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <da16k_at_get_response_line+0x92>
            return ret;
 8002f06:	7cfb      	ldrb	r3, [r7, #19]
 8002f08:	e006      	b.n	8002f18 <da16k_at_get_response_line+0xa0>
        }

        last_char = *write_ptr;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	76fb      	strb	r3, [r7, #27]
        write_ptr++;
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	3301      	adds	r3, #1
 8002f14:	61fb      	str	r3, [r7, #28]
        if (write_ptr >= upper_bound) {
 8002f16:	e7d4      	b.n	8002ec2 <da16k_at_get_response_line+0x4a>
    }

    return ret;
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3720      	adds	r7, #32
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	08014550 	.word	0x08014550
 8002f24:	08013c04 	.word	0x08013c04

08002f28 <da16k_at_get_start_of_response_data>:

/*  Gets a pointer to the start of AT response data following the colon character. 
    E.g. for ERROR:<x> or +SOMECOMMAND:<x>) it would return a pointer to <x> given the appropriate start_of_response character, if ERROR or +SOMECOMMAND are given in start_of_response.
    Returns NULL if not found or out of bounds.
*/
static char *da16k_at_get_start_of_response_data(char *buf, size_t buf_size, const char *start_of_response) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
    char *ret           = NULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
    char *upper_bound   = buf + buf_size;
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]

    DA16K_RETURN_ON_NULL(NULL, buf);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <da16k_at_get_start_of_response_data+0x2c>
 8002f46:	224f      	movs	r2, #79	@ 0x4f
 8002f48:	4918      	ldr	r1, [pc, #96]	@ (8002fac <da16k_at_get_start_of_response_data+0x84>)
 8002f4a:	4819      	ldr	r0, [pc, #100]	@ (8002fb0 <da16k_at_get_start_of_response_data+0x88>)
 8002f4c:	f00b f84e 	bl	800dfec <printf>
 8002f50:	2300      	movs	r3, #0
 8002f52:	e027      	b.n	8002fa4 <da16k_at_get_start_of_response_data+0x7c>
    DA16K_RETURN_ON_NULL(NULL, start_of_response);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <da16k_at_get_start_of_response_data+0x40>
 8002f5a:	2250      	movs	r2, #80	@ 0x50
 8002f5c:	4913      	ldr	r1, [pc, #76]	@ (8002fac <da16k_at_get_start_of_response_data+0x84>)
 8002f5e:	4815      	ldr	r0, [pc, #84]	@ (8002fb4 <da16k_at_get_start_of_response_data+0x8c>)
 8002f60:	f00b f844 	bl	800dfec <printf>
 8002f64:	2300      	movs	r3, #0
 8002f66:	e01d      	b.n	8002fa4 <da16k_at_get_start_of_response_data+0x7c>

    ret = strstr(buf, start_of_response);
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f00b f99d 	bl	800e2aa <strstr>
 8002f70:	6178      	str	r0, [r7, #20]

    if (ret == NULL) {
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <da16k_at_get_start_of_response_data+0x54>
        return NULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	e013      	b.n	8002fa4 <da16k_at_get_start_of_response_data+0x7c>
    }

    ret += strlen(start_of_response);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7fd f985 	bl	800028c <strlen>
 8002f82:	4602      	mov	r2, r0
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	4413      	add	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]
    
    /* Final check: colon character & bounds check */
    if (((ret + 1) >= upper_bound) || (*ret != ':')) {
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d903      	bls.n	8002f9c <da16k_at_get_start_of_response_data+0x74>
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b3a      	cmp	r3, #58	@ 0x3a
 8002f9a:	d001      	beq.n	8002fa0 <da16k_at_get_start_of_response_data+0x78>
        return NULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e001      	b.n	8002fa4 <da16k_at_get_start_of_response_data+0x7c>
    }

    return ret + 1;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	3301      	adds	r3, #1
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	0801456c 	.word	0x0801456c
 8002fb0:	08013c04 	.word	0x08013c04
 8002fb4:	08013c30 	.word	0x08013c30

08002fb8 <da16k_at_send_formatted_valist>:

/*  analogous to vprintf, this is like da16k_at_send_formatted_msg but takes va_list as parameter to reduce
    code duplication for other funcs that allow formatted messages to be sent */
static da16k_err_t da16k_at_send_formatted_valist(const char *format, va_list args) {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
    int at_msg_length;
    
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, format);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d106      	bne.n	8002fd6 <da16k_at_send_formatted_valist+0x1e>
 8002fc8:	2267      	movs	r2, #103	@ 0x67
 8002fca:	491c      	ldr	r1, [pc, #112]	@ (800303c <da16k_at_send_formatted_valist+0x84>)
 8002fcc:	481c      	ldr	r0, [pc, #112]	@ (8003040 <da16k_at_send_formatted_valist+0x88>)
 8002fce:	f00b f80d 	bl	800dfec <printf>
 8002fd2:	230b      	movs	r3, #11
 8002fd4:	e02e      	b.n	8003034 <da16k_at_send_formatted_valist+0x7c>

    at_msg_length = vsnprintf(da16k_at_send_buffer, sizeof(da16k_at_send_buffer), format, args);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fde:	4819      	ldr	r0, [pc, #100]	@ (8003044 <da16k_at_send_formatted_valist+0x8c>)
 8002fe0:	f00b f926 	bl	800e230 <vsnprintf>
 8002fe4:	60f8      	str	r0, [r7, #12]

    if (at_msg_length < 0) {
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	da01      	bge.n	8002ff0 <da16k_at_send_formatted_valist+0x38>
        return DA16K_AT_INVALID_MSG;
 8002fec:	2305      	movs	r3, #5
 8002fee:	e021      	b.n	8003034 <da16k_at_send_formatted_valist+0x7c>
    }

    /* + 2 for \r\n terminator*/
    if ((size_t) (at_msg_length + 2) >= sizeof(da16k_at_send_buffer)) { 
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3302      	adds	r3, #2
 8002ff4:	2bff      	cmp	r3, #255	@ 0xff
 8002ff6:	d901      	bls.n	8002ffc <da16k_at_send_formatted_valist+0x44>
        return DA16K_AT_MESSAGE_TOO_LONG;
 8002ff8:	2306      	movs	r3, #6
 8002ffa:	e01b      	b.n	8003034 <da16k_at_send_formatted_valist+0x7c>
    }

    /* Add \r\n to terminate the message */
    at_msg_length += sprintf(&da16k_at_send_buffer[at_msg_length], "\r\n");
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4a11      	ldr	r2, [pc, #68]	@ (8003044 <da16k_at_send_formatted_valist+0x8c>)
 8003000:	4413      	add	r3, r2
 8003002:	4911      	ldr	r1, [pc, #68]	@ (8003048 <da16k_at_send_formatted_valist+0x90>)
 8003004:	4618      	mov	r0, r3
 8003006:	f00b f885 	bl	800e114 <sprintf>
 800300a:	4602      	mov	r2, r0
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4413      	add	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]

    DA16K_DEBUG("TX buffer: '%s'", da16k_at_send_buffer);
 8003012:	4b0c      	ldr	r3, [pc, #48]	@ (8003044 <da16k_at_send_formatted_valist+0x8c>)
 8003014:	2277      	movs	r2, #119	@ 0x77
 8003016:	4909      	ldr	r1, [pc, #36]	@ (800303c <da16k_at_send_formatted_valist+0x84>)
 8003018:	480c      	ldr	r0, [pc, #48]	@ (800304c <da16k_at_send_formatted_valist+0x94>)
 800301a:	f00a ffe7 	bl	800dfec <printf>

    return da16k_uart_send(da16k_at_send_buffer, (size_t) at_msg_length) ? DA16K_SUCCESS : DA16K_UART_ERROR;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4619      	mov	r1, r3
 8003022:	4808      	ldr	r0, [pc, #32]	@ (8003044 <da16k_at_send_formatted_valist+0x8c>)
 8003024:	f00a fbc8 	bl	800d7b8 <da16k_uart_send>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <da16k_at_send_formatted_valist+0x7a>
 800302e:	2300      	movs	r3, #0
 8003030:	e000      	b.n	8003034 <da16k_at_send_formatted_valist+0x7c>
 8003032:	2302      	movs	r3, #2
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	08014590 	.word	0x08014590
 8003040:	08013c68 	.word	0x08013c68
 8003044:	20001228 	.word	0x20001228
 8003048:	08013c98 	.word	0x08013c98
 800304c:	08013c9c 	.word	0x08013c9c

08003050 <da16k_at_is_line_only_whitespace>:

/* checks if any non-space or valid ascii characters are in a response string */
static bool da16k_at_is_line_only_whitespace(const char *str) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
    DA16K_RETURN_ON_NULL(true, str);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <da16k_at_is_line_only_whitespace+0x1c>
 800305e:	227e      	movs	r2, #126	@ 0x7e
 8003060:	490d      	ldr	r1, [pc, #52]	@ (8003098 <da16k_at_is_line_only_whitespace+0x48>)
 8003062:	480e      	ldr	r0, [pc, #56]	@ (800309c <da16k_at_is_line_only_whitespace+0x4c>)
 8003064:	f00a ffc2 	bl	800dfec <printf>
 8003068:	2301      	movs	r3, #1
 800306a:	e010      	b.n	800308e <da16k_at_is_line_only_whitespace+0x3e>

    if (strlen(str) == 0) {
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d107      	bne.n	8003084 <da16k_at_is_line_only_whitespace+0x34>
        return true;
 8003074:	2301      	movs	r3, #1
 8003076:	e00a      	b.n	800308e <da16k_at_is_line_only_whitespace+0x3e>
    }

    while (*str != 0x00) {
        if (*str > ' ') { /* everything above the space character makes the string valid. */
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b20      	cmp	r3, #32
 800307e:	d901      	bls.n	8003084 <da16k_at_is_line_only_whitespace+0x34>
            return false;
 8003080:	2300      	movs	r3, #0
 8003082:	e004      	b.n	800308e <da16k_at_is_line_only_whitespace+0x3e>
    while (*str != 0x00) {
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1f5      	bne.n	8003078 <da16k_at_is_line_only_whitespace+0x28>
        }
    }

    return true;
 800308c:	2301      	movs	r3, #1
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	080145b0 	.word	0x080145b0
 800309c:	08013cc0 	.word	0x08013cc0

080030a0 <da16k_at_receive_and_validate_response>:

da16k_err_t da16k_at_receive_and_validate_response(bool error_possible, const char *expected_response, uint32_t timeout_ms) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	73fb      	strb	r3, [r7, #15]
    bool error_received             = false;
 80030ae:	2300      	movs	r3, #0
 80030b0:	77fb      	strb	r3, [r7, #31]
    bool ok_received                = false;
 80030b2:	2300      	movs	r3, #0
 80030b4:	77bb      	strb	r3, [r7, #30]
    bool response_received          = false;
 80030b6:	2300      	movs	r3, #0
 80030b8:	777b      	strb	r3, [r7, #29]

    static const size_t buf_size    = sizeof(da16k_at_receive_buffer);

    char *upper_bound               = da16k_at_receive_buffer + buf_size;
 80030ba:	4b52      	ldr	r3, [pc, #328]	@ (8003204 <da16k_at_receive_and_validate_response+0x164>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a52      	ldr	r2, [pc, #328]	@ (8003208 <da16k_at_receive_and_validate_response+0x168>)
 80030c0:	4413      	add	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
    char *response_data_start       = NULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61bb      	str	r3, [r7, #24]

    da16k_err_t ret                 = DA16K_SUCCESS;
 80030c8:	2300      	movs	r3, #0
 80030ca:	75fb      	strb	r3, [r7, #23]
    
    memset(da16k_at_saved_response, 0, buf_size);
 80030cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003204 <da16k_at_receive_and_validate_response+0x164>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	2100      	movs	r1, #0
 80030d4:	484d      	ldr	r0, [pc, #308]	@ (800320c <da16k_at_receive_and_validate_response+0x16c>)
 80030d6:	f00b f8d3 	bl	800e280 <memset>

    while (ret == DA16K_SUCCESS) {
 80030da:	e076      	b.n	80031ca <da16k_at_receive_and_validate_response+0x12a>
        ret = da16k_at_get_response_line(da16k_at_receive_buffer, buf_size, timeout_ms);
 80030dc:	4b49      	ldr	r3, [pc, #292]	@ (8003204 <da16k_at_receive_and_validate_response+0x164>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	4619      	mov	r1, r3
 80030e4:	4848      	ldr	r0, [pc, #288]	@ (8003208 <da16k_at_receive_and_validate_response+0x168>)
 80030e6:	f7ff fec7 	bl	8002e78 <da16k_at_get_response_line>
 80030ea:	4603      	mov	r3, r0
 80030ec:	75fb      	strb	r3, [r7, #23]

        if (ret == DA16K_AT_RESPONSE_TOO_LONG) {
 80030ee:	7dfb      	ldrb	r3, [r7, #23]
 80030f0:	2b07      	cmp	r3, #7
 80030f2:	d105      	bne.n	8003100 <da16k_at_receive_and_validate_response+0x60>
            DA16K_WARN("WARNING! RX buffer overflow!\r\nRX Buffer contents:\r\n%s\r\n", da16k_at_receive_buffer);
 80030f4:	4b44      	ldr	r3, [pc, #272]	@ (8003208 <da16k_at_receive_and_validate_response+0x168>)
 80030f6:	229f      	movs	r2, #159	@ 0x9f
 80030f8:	4945      	ldr	r1, [pc, #276]	@ (8003210 <da16k_at_receive_and_validate_response+0x170>)
 80030fa:	4846      	ldr	r0, [pc, #280]	@ (8003214 <da16k_at_receive_and_validate_response+0x174>)
 80030fc:	f00a ff76 	bl	800dfec <printf>
        }

        /* Ignore lines that don't have anything parseable (just to clean up the output a little) */
        if (da16k_at_is_line_only_whitespace(da16k_at_receive_buffer)) {
 8003100:	4841      	ldr	r0, [pc, #260]	@ (8003208 <da16k_at_receive_and_validate_response+0x168>)
 8003102:	f7ff ffa5 	bl	8003050 <da16k_at_is_line_only_whitespace>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d15d      	bne.n	80031c8 <da16k_at_receive_and_validate_response+0x128>
            continue;
        }

        DA16K_DEBUG("Respone line received: %s\r\n", da16k_at_receive_buffer);
 800310c:	4b3e      	ldr	r3, [pc, #248]	@ (8003208 <da16k_at_receive_and_validate_response+0x168>)
 800310e:	22a7      	movs	r2, #167	@ 0xa7
 8003110:	493f      	ldr	r1, [pc, #252]	@ (8003210 <da16k_at_receive_and_validate_response+0x170>)
 8003112:	4841      	ldr	r0, [pc, #260]	@ (8003218 <da16k_at_receive_and_validate_response+0x178>)
 8003114:	f00a ff6a 	bl	800dfec <printf>

        /* Look for proper response, if one is expected */
        if (!response_received && expected_response != NULL) {
 8003118:	7f7b      	ldrb	r3, [r7, #29]
 800311a:	f083 0301 	eor.w	r3, r3, #1
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <da16k_at_receive_and_validate_response+0x9a>
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d007      	beq.n	800313a <da16k_at_receive_and_validate_response+0x9a>
            response_data_start = da16k_at_get_start_of_response_data(da16k_at_receive_buffer, buf_size, expected_response);
 800312a:	4b36      	ldr	r3, [pc, #216]	@ (8003204 <da16k_at_receive_and_validate_response+0x164>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	4619      	mov	r1, r3
 8003132:	4835      	ldr	r0, [pc, #212]	@ (8003208 <da16k_at_receive_and_validate_response+0x168>)
 8003134:	f7ff fef8 	bl	8002f28 <da16k_at_get_start_of_response_data>
 8003138:	61b8      	str	r0, [r7, #24]
        }

        /* If we can't find the expected response, but an ERROR:<x> is possible and we haven't rcv'd one yet, flag and look for the error response */
        if (error_possible && !error_received && response_data_start == NULL) {
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d015      	beq.n	800316c <da16k_at_receive_and_validate_response+0xcc>
 8003140:	7ffb      	ldrb	r3, [r7, #31]
 8003142:	f083 0301 	eor.w	r3, r3, #1
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00f      	beq.n	800316c <da16k_at_receive_and_validate_response+0xcc>
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10c      	bne.n	800316c <da16k_at_receive_and_validate_response+0xcc>
            response_data_start = da16k_at_get_start_of_response_data(da16k_at_receive_buffer, buf_size, "ERROR");
 8003152:	4b2c      	ldr	r3, [pc, #176]	@ (8003204 <da16k_at_receive_and_validate_response+0x164>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a31      	ldr	r2, [pc, #196]	@ (800321c <da16k_at_receive_and_validate_response+0x17c>)
 8003158:	4619      	mov	r1, r3
 800315a:	482b      	ldr	r0, [pc, #172]	@ (8003208 <da16k_at_receive_and_validate_response+0x168>)
 800315c:	f7ff fee4 	bl	8002f28 <da16k_at_get_start_of_response_data>
 8003160:	61b8      	str	r0, [r7, #24]
            if (response_data_start != NULL) {
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <da16k_at_receive_and_validate_response+0xcc>
                error_received = true;
 8003168:	2301      	movs	r3, #1
 800316a:	77fb      	strb	r3, [r7, #31]
            }
        }

        /* Mark whether the OK\r\n part of the response was received. */
        if (strstr(da16k_at_receive_buffer, "OK") != NULL) {
 800316c:	492c      	ldr	r1, [pc, #176]	@ (8003220 <da16k_at_receive_and_validate_response+0x180>)
 800316e:	4826      	ldr	r0, [pc, #152]	@ (8003208 <da16k_at_receive_and_validate_response+0x168>)
 8003170:	f00b f89b 	bl	800e2aa <strstr>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <da16k_at_receive_and_validate_response+0xde>
            ok_received = true;
 800317a:	2301      	movs	r3, #1
 800317c:	77bb      	strb	r3, [r7, #30]
        }

        /* We received a valid response / error response relevant to us */
        if (!response_received && response_data_start != NULL) {
 800317e:	7f7b      	ldrb	r3, [r7, #29]
 8003180:	f083 0301 	eor.w	r3, r3, #1
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00c      	beq.n	80031a4 <da16k_at_receive_and_validate_response+0x104>
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d009      	beq.n	80031a4 <da16k_at_receive_and_validate_response+0x104>
            /* Move all response data to the final response output buffer */
            memmove(da16k_at_saved_response, response_data_start, (size_t) (upper_bound - response_data_start));
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	461a      	mov	r2, r3
 8003198:	69b9      	ldr	r1, [r7, #24]
 800319a:	481c      	ldr	r0, [pc, #112]	@ (800320c <da16k_at_receive_and_validate_response+0x16c>)
 800319c:	f00b f856 	bl	800e24c <memmove>
            response_received = true;
 80031a0:	2301      	movs	r3, #1
 80031a2:	777b      	strb	r3, [r7, #29]
        }

        /* If we have no expected response, an OK is enough, so we pretend a response was received. */
        if (ok_received && expected_response == NULL) {
 80031a4:	7fbb      	ldrb	r3, [r7, #30]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d004      	beq.n	80031b4 <da16k_at_receive_and_validate_response+0x114>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <da16k_at_receive_and_validate_response+0x114>
            response_received = true;
 80031b0:	2301      	movs	r3, #1
 80031b2:	777b      	strb	r3, [r7, #29]
        }

        /* If OK *or* ERROR and the response data (if any) is received, we break. */
        if (response_received && (error_received || ok_received)) {
 80031b4:	7f7b      	ldrb	r3, [r7, #29]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <da16k_at_receive_and_validate_response+0x12a>
 80031ba:	7ffb      	ldrb	r3, [r7, #31]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d107      	bne.n	80031d0 <da16k_at_receive_and_validate_response+0x130>
 80031c0:	7fbb      	ldrb	r3, [r7, #30]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d104      	bne.n	80031d0 <da16k_at_receive_and_validate_response+0x130>
 80031c6:	e000      	b.n	80031ca <da16k_at_receive_and_validate_response+0x12a>
            continue;
 80031c8:	bf00      	nop
    while (ret == DA16K_SUCCESS) {
 80031ca:	7dfb      	ldrb	r3, [r7, #23]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d085      	beq.n	80030dc <da16k_at_receive_and_validate_response+0x3c>
            break;
        }
    }

    if (response_received) {
 80031d0:	7f7b      	ldrb	r3, [r7, #29]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d011      	beq.n	80031fa <da16k_at_receive_and_validate_response+0x15a>
        DA16K_PRINT("da16k_at_saved_response %s\r\n", da16k_at_saved_response);
 80031d6:	490d      	ldr	r1, [pc, #52]	@ (800320c <da16k_at_receive_and_validate_response+0x16c>)
 80031d8:	4812      	ldr	r0, [pc, #72]	@ (8003224 <da16k_at_receive_and_validate_response+0x184>)
 80031da:	f00a ff07 	bl	800dfec <printf>
        if (error_received) {
 80031de:	7ffb      	ldrb	r3, [r7, #31]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <da16k_at_receive_and_validate_response+0x14a>
            ret = DA16K_AT_ERROR_CODE;  /* So caller can handle this case properly */
 80031e4:	2308      	movs	r3, #8
 80031e6:	75fb      	strb	r3, [r7, #23]
 80031e8:	e007      	b.n	80031fa <da16k_at_receive_and_validate_response+0x15a>
        } else if (ok_received) {
 80031ea:	7fbb      	ldrb	r3, [r7, #30]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <da16k_at_receive_and_validate_response+0x156>
            ret = DA16K_SUCCESS;        /* Everything is OK */
 80031f0:	2300      	movs	r3, #0
 80031f2:	75fb      	strb	r3, [r7, #23]
 80031f4:	e001      	b.n	80031fa <da16k_at_receive_and_validate_response+0x15a>
        } else {
            ret = DA16K_AT_NO_OK;       /* "OK\r\n" was missing */
 80031f6:	2309      	movs	r3, #9
 80031f8:	75fb      	strb	r3, [r7, #23]
        }
    }
    
    /* In case of no response when expected, return last error code */
    return ret;
 80031fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3720      	adds	r7, #32
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	080145d4 	.word	0x080145d4
 8003208:	20001328 	.word	0x20001328
 800320c:	20001528 	.word	0x20001528
 8003210:	080145d8 	.word	0x080145d8
 8003214:	08013cec 	.word	0x08013cec
 8003218:	08013d38 	.word	0x08013d38
 800321c:	08013d68 	.word	0x08013d68
 8003220:	08013d70 	.word	0x08013d70
 8003224:	08013d74 	.word	0x08013d74

08003228 <da16k_at_send_formatted_msg>:


da16k_err_t da16k_at_send_formatted_msg(const char *format, ...) {
 8003228:	b40f      	push	{r0, r1, r2, r3}
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
    va_list args;
    da16k_err_t ret;

    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, format);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d106      	bne.n	8003244 <da16k_at_send_formatted_msg+0x1c>
 8003236:	22e1      	movs	r2, #225	@ 0xe1
 8003238:	490b      	ldr	r1, [pc, #44]	@ (8003268 <da16k_at_send_formatted_msg+0x40>)
 800323a:	480c      	ldr	r0, [pc, #48]	@ (800326c <da16k_at_send_formatted_msg+0x44>)
 800323c:	f00a fed6 	bl	800dfec <printf>
 8003240:	230b      	movs	r3, #11
 8003242:	e009      	b.n	8003258 <da16k_at_send_formatted_msg+0x30>

    va_start(args, format);
 8003244:	f107 0314 	add.w	r3, r7, #20
 8003248:	603b      	str	r3, [r7, #0]
    ret = da16k_at_send_formatted_valist(format, args);
 800324a:	6839      	ldr	r1, [r7, #0]
 800324c:	6938      	ldr	r0, [r7, #16]
 800324e:	f7ff feb3 	bl	8002fb8 <da16k_at_send_formatted_valist>
 8003252:	4603      	mov	r3, r0
 8003254:	71fb      	strb	r3, [r7, #7]
    va_end(args);

    return ret;
 8003256:	79fb      	ldrb	r3, [r7, #7]
 }
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003262:	b004      	add	sp, #16
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	08014600 	.word	0x08014600
 800326c:	08013c68 	.word	0x08013c68

08003270 <da16k_at_send_formatted_and_check_success>:

da16k_err_t da16k_at_send_formatted_and_check_success(uint32_t timeout_ms, const char *expected_response, const char *format, ...) {
 8003270:	b40c      	push	{r2, r3}
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
    da16k_err_t ret = DA16K_SUCCESS;
 800327c:	2300      	movs	r3, #0
 800327e:	73fb      	strb	r3, [r7, #15]
    va_list fmt_args;

    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, format);
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <da16k_at_send_formatted_and_check_success+0x24>
 8003286:	22ee      	movs	r2, #238	@ 0xee
 8003288:	491e      	ldr	r1, [pc, #120]	@ (8003304 <da16k_at_send_formatted_and_check_success+0x94>)
 800328a:	481f      	ldr	r0, [pc, #124]	@ (8003308 <da16k_at_send_formatted_and_check_success+0x98>)
 800328c:	f00a feae 	bl	800dfec <printf>
 8003290:	230b      	movs	r3, #11
 8003292:	e030      	b.n	80032f6 <da16k_at_send_formatted_and_check_success+0x86>

    va_start(fmt_args, format);
 8003294:	f107 031c 	add.w	r3, r7, #28
 8003298:	60bb      	str	r3, [r7, #8]
    ret = da16k_at_send_formatted_valist(format, fmt_args);
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	69b8      	ldr	r0, [r7, #24]
 800329e:	f7ff fe8b 	bl	8002fb8 <da16k_at_send_formatted_valist>
 80032a2:	4603      	mov	r3, r0
 80032a4:	73fb      	strb	r3, [r7, #15]
    va_end(fmt_args);

    if (ret != DA16K_SUCCESS) {
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d007      	beq.n	80032bc <da16k_at_send_formatted_and_check_success+0x4c>
        DA16K_ERROR("Error sending message: %d\r\n", (int) ret);
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	22f5      	movs	r2, #245	@ 0xf5
 80032b0:	4914      	ldr	r1, [pc, #80]	@ (8003304 <da16k_at_send_formatted_and_check_success+0x94>)
 80032b2:	4816      	ldr	r0, [pc, #88]	@ (800330c <da16k_at_send_formatted_and_check_success+0x9c>)
 80032b4:	f00a fe9a 	bl	800dfec <printf>
        return ret;
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	e01c      	b.n	80032f6 <da16k_at_send_formatted_and_check_success+0x86>
    }

    ret = da16k_at_receive_and_validate_response(false, expected_response, timeout_ms);
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6839      	ldr	r1, [r7, #0]
 80032c0:	2000      	movs	r0, #0
 80032c2:	f7ff feed 	bl	80030a0 <da16k_at_receive_and_validate_response>
 80032c6:	4603      	mov	r3, r0
 80032c8:	73fb      	strb	r3, [r7, #15]

    /* Only check the return code if we have an expected response. */

    if (expected_response) {
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d011      	beq.n	80032f4 <da16k_at_send_formatted_and_check_success+0x84>
        if (ret == DA16K_SUCCESS && da16k_at_get_response_code() != 1) {
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10e      	bne.n	80032f4 <da16k_at_send_formatted_and_check_success+0x84>
 80032d6:	f000 f895 	bl	8003404 <da16k_at_get_response_code>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d009      	beq.n	80032f4 <da16k_at_send_formatted_and_check_success+0x84>
            DA16K_ERROR("AT command not successful. Return code: %d\r\n", da16k_at_get_response_code());
 80032e0:	f000 f890 	bl	8003404 <da16k_at_get_response_code>
 80032e4:	4603      	mov	r3, r0
 80032e6:	22ff      	movs	r2, #255	@ 0xff
 80032e8:	4906      	ldr	r1, [pc, #24]	@ (8003304 <da16k_at_send_formatted_and_check_success+0x94>)
 80032ea:	4809      	ldr	r0, [pc, #36]	@ (8003310 <da16k_at_send_formatted_and_check_success+0xa0>)
 80032ec:	f00a fe7e 	bl	800dfec <printf>
            ret = DA16K_AT_FAIL;
 80032f0:	2304      	movs	r3, #4
 80032f2:	73fb      	strb	r3, [r7, #15]
        }
    }

    return ret;
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003300:	b002      	add	sp, #8
 8003302:	4770      	bx	lr
 8003304:	0801461c 	.word	0x0801461c
 8003308:	08013c68 	.word	0x08013c68
 800330c:	08013d94 	.word	0x08013d94
 8003310:	08013dc4 	.word	0x08013dc4

08003314 <da16k_at_send_certificate>:

da16k_err_t da16k_at_send_certificate(da16k_cert_type_t type, const char *cert) {
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	6039      	str	r1, [r7, #0]
 800331e:	71fb      	strb	r3, [r7, #7]
    char        command_sequence[]  = AT_ESC "C0,";
 8003320:	4a2f      	ldr	r2, [pc, #188]	@ (80033e0 <da16k_at_send_certificate+0xcc>)
 8003322:	f107 0308 	add.w	r3, r7, #8
 8003326:	e892 0003 	ldmia.w	r2, {r0, r1}
 800332a:	6018      	str	r0, [r3, #0]
 800332c:	3304      	adds	r3, #4
 800332e:	7019      	strb	r1, [r3, #0]
    bool        tx_success          = true;
 8003330:	2301      	movs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]

    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cert);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d107      	bne.n	800334a <da16k_at_send_certificate+0x36>
 800333a:	f240 120b 	movw	r2, #267	@ 0x10b
 800333e:	4929      	ldr	r1, [pc, #164]	@ (80033e4 <da16k_at_send_certificate+0xd0>)
 8003340:	4829      	ldr	r0, [pc, #164]	@ (80033e8 <da16k_at_send_certificate+0xd4>)
 8003342:	f00a fe53 	bl	800dfec <printf>
 8003346:	230b      	movs	r3, #11
 8003348:	e046      	b.n	80033d8 <da16k_at_send_certificate+0xc4>

    /* A bit hackish, but the number after the 'C' denotes the certificate type, so we adjust it. */
    command_sequence[2] += (char) type;
 800334a:	7aba      	ldrb	r2, [r7, #10]
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	4413      	add	r3, r2
 8003350:	b2db      	uxtb	r3, r3
 8003352:	72bb      	strb	r3, [r7, #10]

    tx_success &= da16k_uart_send(command_sequence, strlen(command_sequence));  /* Enter Certificate Command Mode */
 8003354:	f107 0308 	add.w	r3, r7, #8
 8003358:	4618      	mov	r0, r3
 800335a:	f7fc ff97 	bl	800028c <strlen>
 800335e:	4602      	mov	r2, r0
 8003360:	f107 0308 	add.w	r3, r7, #8
 8003364:	4611      	mov	r1, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f00a fa26 	bl	800d7b8 <da16k_uart_send>
 800336c:	4603      	mov	r3, r0
 800336e:	461a      	mov	r2, r3
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf14      	ite	ne
 8003378:	2301      	movne	r3, #1
 800337a:	2300      	moveq	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
    tx_success &= da16k_uart_send(cert,             strlen(cert));              /* Actual certificate */
 800337e:	6838      	ldr	r0, [r7, #0]
 8003380:	f7fc ff84 	bl	800028c <strlen>
 8003384:	4603      	mov	r3, r0
 8003386:	4619      	mov	r1, r3
 8003388:	6838      	ldr	r0, [r7, #0]
 800338a:	f00a fa15 	bl	800d7b8 <da16k_uart_send>
 800338e:	4603      	mov	r3, r0
 8003390:	461a      	mov	r2, r3
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	4013      	ands	r3, r2
 8003396:	2b00      	cmp	r3, #0
 8003398:	bf14      	ite	ne
 800339a:	2301      	movne	r3, #1
 800339c:	2300      	moveq	r3, #0
 800339e:	73fb      	strb	r3, [r7, #15]
    tx_success &= da16k_uart_send(AT_ETX,           1);                         /* End of text marker */
 80033a0:	2101      	movs	r1, #1
 80033a2:	4812      	ldr	r0, [pc, #72]	@ (80033ec <da16k_at_send_certificate+0xd8>)
 80033a4:	f00a fa08 	bl	800d7b8 <da16k_uart_send>
 80033a8:	4603      	mov	r3, r0
 80033aa:	461a      	mov	r2, r3
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf14      	ite	ne
 80033b4:	2301      	movne	r3, #1
 80033b6:	2300      	moveq	r3, #0
 80033b8:	73fb      	strb	r3, [r7, #15]

    if (!tx_success) {
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	f083 0301 	eor.w	r3, r3, #1
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <da16k_at_send_certificate+0xb6>
        return DA16K_UART_ERROR;
 80033c6:	2302      	movs	r3, #2
 80033c8:	e006      	b.n	80033d8 <da16k_at_send_certificate+0xc4>
    }

    return da16k_at_receive_and_validate_response(false, NULL, DA16K_UART_TIMEOUT_MS);
 80033ca:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80033ce:	2100      	movs	r1, #0
 80033d0:	2000      	movs	r0, #0
 80033d2:	f7ff fe65 	bl	80030a0 <da16k_at_receive_and_validate_response>
 80033d6:	4603      	mov	r3, r0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	08013e34 	.word	0x08013e34
 80033e4:	08014648 	.word	0x08014648
 80033e8:	08013e04 	.word	0x08013e04
 80033ec:	08013e30 	.word	0x08013e30

080033f0 <da16k_at_get_response_str>:

char *da16k_at_get_response_str(void) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
    return da16k_strdup(da16k_at_saved_response);
 80033f4:	4802      	ldr	r0, [pc, #8]	@ (8003400 <da16k_at_get_response_str+0x10>)
 80033f6:	f000 fccd 	bl	8003d94 <da16k_strdup>
 80033fa:	4603      	mov	r3, r0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20001528 	.word	0x20001528

08003404 <da16k_at_get_response_code>:

int da16k_at_get_response_code(void) {
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
    /* TODO: Make this less error-prone */
    return atoi(da16k_at_saved_response);
 8003408:	4802      	ldr	r0, [pc, #8]	@ (8003414 <da16k_at_get_response_code+0x10>)
 800340a:	f00a fa4f 	bl	800d8ac <atoi>
 800340e:	4603      	mov	r3, r0
}
 8003410:	4618      	mov	r0, r3
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20001528 	.word	0x20001528

08003418 <da16k_get_cmd>:
static char da16k_value_buffer[64] = {0};

static uint32_t s_network_timeout_ms        = DA16K_DEFAULT_IOTC_TIMEOUT_MS;
static uint32_t s_iotc_connect_timeout_ms   = DA16K_DEFAULT_IOTC_CONNECT_TIMEOUT_MS;

da16k_err_t da16k_get_cmd(da16k_cmd_t *cmd) {
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b08d      	sub	sp, #52	@ 0x34
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
    const char  expected_response[] = "+NWICGETCMD";
 8003420:	4a50      	ldr	r2, [pc, #320]	@ (8003564 <da16k_get_cmd+0x14c>)
 8003422:	f107 031c 	add.w	r3, r7, #28
 8003426:	ca07      	ldmia	r2, {r0, r1, r2}
 8003428:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    const char  at_message[]        = "AT+NWICGETCMD";
 800342c:	4b4e      	ldr	r3, [pc, #312]	@ (8003568 <da16k_get_cmd+0x150>)
 800342e:	f107 040c 	add.w	r4, r7, #12
 8003432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003434:	c407      	stmia	r4!, {r0, r1, r2}
 8003436:	8023      	strh	r3, [r4, #0]
    char       *param_ptr           = NULL;
 8003438:	2300      	movs	r3, #0
 800343a:	62bb      	str	r3, [r7, #40]	@ 0x28
    da16k_err_t ret                 = DA16K_SUCCESS;
 800343c:	2300      	movs	r3, #0
 800343e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cmd);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d106      	bne.n	8003456 <da16k_get_cmd+0x3e>
 8003448:	2229      	movs	r2, #41	@ 0x29
 800344a:	4948      	ldr	r1, [pc, #288]	@ (800356c <da16k_get_cmd+0x154>)
 800344c:	4848      	ldr	r0, [pc, #288]	@ (8003570 <da16k_get_cmd+0x158>)
 800344e:	f00a fdcd 	bl	800dfec <printf>
 8003452:	230b      	movs	r3, #11
 8003454:	e081      	b.n	800355a <da16k_get_cmd+0x142>

    ret = da16k_at_send_formatted_msg(at_message);
 8003456:	f107 030c 	add.w	r3, r7, #12
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fee4 	bl	8003228 <da16k_at_send_formatted_msg>
 8003460:	4603      	mov	r3, r0
 8003462:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (ret != DA16K_SUCCESS) {
 8003466:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800346a:	2b00      	cmp	r3, #0
 800346c:	d009      	beq.n	8003482 <da16k_get_cmd+0x6a>
        DA16K_ERROR("Error sending message: %d\r\n", (int) ret);
 800346e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003472:	222e      	movs	r2, #46	@ 0x2e
 8003474:	493d      	ldr	r1, [pc, #244]	@ (800356c <da16k_get_cmd+0x154>)
 8003476:	483f      	ldr	r0, [pc, #252]	@ (8003574 <da16k_get_cmd+0x15c>)
 8003478:	f00a fdb8 	bl	800dfec <printf>
        return ret;
 800347c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003480:	e06b      	b.n	800355a <da16k_get_cmd+0x142>
    }
    
    ret = da16k_at_receive_and_validate_response(true, expected_response, DA16K_UART_TIMEOUT_MS);
 8003482:	f107 031c 	add.w	r3, r7, #28
 8003486:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800348a:	4619      	mov	r1, r3
 800348c:	2001      	movs	r0, #1
 800348e:	f7ff fe07 	bl	80030a0 <da16k_at_receive_and_validate_response>
 8003492:	4603      	mov	r3, r0
 8003494:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (ret != DA16K_SUCCESS && ret != DA16K_AT_ERROR_CODE) {
 8003498:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800349c:	2b00      	cmp	r3, #0
 800349e:	d006      	beq.n	80034ae <da16k_get_cmd+0x96>
 80034a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d002      	beq.n	80034ae <da16k_get_cmd+0x96>
        return ret;
 80034a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034ac:	e055      	b.n	800355a <da16k_get_cmd+0x142>
    }

    if (ret == DA16K_AT_ERROR_CODE) {
 80034ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d116      	bne.n	80034e4 <da16k_get_cmd+0xcc>
        /* We have received an error response, which usually means there are no commands ("ERROR:7"). */

        if (da16k_at_get_response_code() == -7) {
 80034b6:	f7ff ffa5 	bl	8003404 <da16k_at_get_response_code>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f113 0f07 	cmn.w	r3, #7
 80034c0:	d106      	bne.n	80034d0 <da16k_get_cmd+0xb8>
            DA16K_DEBUG("No commands available.\r\n");
 80034c2:	223c      	movs	r2, #60	@ 0x3c
 80034c4:	4929      	ldr	r1, [pc, #164]	@ (800356c <da16k_get_cmd+0x154>)
 80034c6:	482c      	ldr	r0, [pc, #176]	@ (8003578 <da16k_get_cmd+0x160>)
 80034c8:	f00a fd90 	bl	800dfec <printf>
            return DA16K_NO_CMDS;
 80034cc:	230a      	movs	r3, #10
 80034ce:	e044      	b.n	800355a <da16k_get_cmd+0x142>
        } else {
            DA16K_ERROR("Bad response, error code %d\r\n", da16k_at_get_response_code());
 80034d0:	f7ff ff98 	bl	8003404 <da16k_at_get_response_code>
 80034d4:	4603      	mov	r3, r0
 80034d6:	223f      	movs	r2, #63	@ 0x3f
 80034d8:	4924      	ldr	r1, [pc, #144]	@ (800356c <da16k_get_cmd+0x154>)
 80034da:	4828      	ldr	r0, [pc, #160]	@ (800357c <da16k_get_cmd+0x164>)
 80034dc:	f00a fd86 	bl	800dfec <printf>
            return DA16K_AT_FAIL;
 80034e0:	2304      	movs	r3, #4
 80034e2:	e03a      	b.n	800355a <da16k_get_cmd+0x142>
        }
    }

    /* Now we need to extract the command and parameter (if applicable) */
    cmd->command = da16k_at_get_response_str();
 80034e4:	f7ff ff84 	bl	80033f0 <da16k_at_get_response_str>
 80034e8:	4602      	mov	r2, r0
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	601a      	str	r2, [r3, #0]
    DA16K_RETURN_ON_NULL(DA16K_OUT_OF_MEMORY, cmd->command);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <da16k_get_cmd+0xec>
 80034f6:	2246      	movs	r2, #70	@ 0x46
 80034f8:	491c      	ldr	r1, [pc, #112]	@ (800356c <da16k_get_cmd+0x154>)
 80034fa:	4821      	ldr	r0, [pc, #132]	@ (8003580 <da16k_get_cmd+0x168>)
 80034fc:	f00a fd76 	bl	800dfec <printf>
 8003500:	2301      	movs	r3, #1
 8003502:	e02a      	b.n	800355a <da16k_get_cmd+0x142>

    ret = DA16K_SUCCESS;
 8003504:	2300      	movs	r3, #0
 8003506:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Find space to determine whether we have params or not. We can use strchr here as we're guaranteed a null terminator within the buffer */
    param_ptr = strchr(cmd->command, ' ');
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2120      	movs	r1, #32
 8003510:	4618      	mov	r0, r3
 8003512:	f00a febd 	bl	800e290 <strchr>
 8003516:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (param_ptr != NULL) {
 8003518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351a:	2b00      	cmp	r3, #0
 800351c:	d018      	beq.n	8003550 <da16k_get_cmd+0x138>
        /* We have params, split the strings */
        *param_ptr = 0x00; /* Null terminate via the space so we can simply use strdup */
 800351e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003520:	2200      	movs	r2, #0
 8003522:	701a      	strb	r2, [r3, #0]
        param_ptr++; /* Skip space/null */
 8003524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003526:	3301      	adds	r3, #1
 8003528:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* cmd->command stays as-is and now termintes after the command itself. We *do* waste a few bytes of memory */
        cmd->parameters = da16k_strdup(param_ptr);
 800352a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800352c:	f000 fc32 	bl	8003d94 <da16k_strdup>
 8003530:	4602      	mov	r2, r0
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	605a      	str	r2, [r3, #4]

        if (cmd->parameters == NULL) {
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10b      	bne.n	8003556 <da16k_get_cmd+0x13e>
            da16k_destroy_cmd(*cmd);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003544:	f000 f81e 	bl	8003584 <da16k_destroy_cmd>
            ret = DA16K_OUT_OF_MEMORY;
 8003548:	2301      	movs	r3, #1
 800354a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800354e:	e002      	b.n	8003556 <da16k_get_cmd+0x13e>
        }
    } else {
        /* No parameter, just command */
        cmd->parameters = NULL;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	605a      	str	r2, [r3, #4]
    }

    return ret;
 8003556:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800355a:	4618      	mov	r0, r3
 800355c:	3734      	adds	r7, #52	@ 0x34
 800355e:	46bd      	mov	sp, r7
 8003560:	bd90      	pop	{r4, r7, pc}
 8003562:	bf00      	nop
 8003564:	08013f2c 	.word	0x08013f2c
 8003568:	08013f38 	.word	0x08013f38
 800356c:	08014664 	.word	0x08014664
 8003570:	08013e3c 	.word	0x08013e3c
 8003574:	08013e68 	.word	0x08013e68
 8003578:	08013e98 	.word	0x08013e98
 800357c:	08013ec4 	.word	0x08013ec4
 8003580:	08013ef8 	.word	0x08013ef8

08003584 <da16k_destroy_cmd>:

void da16k_destroy_cmd(da16k_cmd_t cmd) {
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	463b      	mov	r3, r7
 800358c:	e883 0003 	stmia.w	r3, {r0, r1}
    if (cmd.command)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <da16k_destroy_cmd+0x1a>
        da16k_free(cmd.command);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fbed 	bl	8003d78 <da16k_free>
    if (cmd.parameters)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <da16k_destroy_cmd+0x28>
        da16k_free(cmd.parameters);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fbe6 	bl	8003d78 <da16k_free>
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <da16k_init>:

da16k_err_t da16k_init(const da16k_cfg_t *cfg) {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
    da16k_err_t ret = DA16K_SUCCESS;
 80035bc:	2300      	movs	r3, #0
 80035be:	73fb      	strb	r3, [r7, #15]

    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cfg);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <da16k_init+0x20>
 80035c6:	226b      	movs	r2, #107	@ 0x6b
 80035c8:	4929      	ldr	r1, [pc, #164]	@ (8003670 <da16k_init+0xbc>)
 80035ca:	482a      	ldr	r0, [pc, #168]	@ (8003674 <da16k_init+0xc0>)
 80035cc:	f00a fd0e 	bl	800dfec <printf>
 80035d0:	230b      	movs	r3, #11
 80035d2:	e048      	b.n	8003666 <da16k_init+0xb2>

    /* UART Init */
    if (!da16k_uart_init()) {
 80035d4:	f00a f8bc 	bl	800d750 <da16k_uart_init>
 80035d8:	4603      	mov	r3, r0
 80035da:	f083 0301 	eor.w	r3, r3, #1
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <da16k_init+0x34>
        return DA16K_UART_ERROR;
 80035e4:	2302      	movs	r3, #2
 80035e6:	e03e      	b.n	8003666 <da16k_init+0xb2>
    }

    /* WiFi init (if requested) */
    if (cfg->wifi_config) {
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d011      	beq.n	8003614 <da16k_init+0x60>
        if (DA16K_SUCCESS != (ret = da16k_set_wifi_config(cfg->wifi_config))) {
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fa77 	bl	8003ae8 <da16k_set_wifi_config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	73fb      	strb	r3, [r7, #15]
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <da16k_init+0x60>
            DA16K_ERROR("WiFi connection failed (%d)\r\n", (int) ret);
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	2275      	movs	r2, #117	@ 0x75
 8003608:	4919      	ldr	r1, [pc, #100]	@ (8003670 <da16k_init+0xbc>)
 800360a:	481b      	ldr	r0, [pc, #108]	@ (8003678 <da16k_init+0xc4>)
 800360c:	f00a fcee 	bl	800dfec <printf>
            return ret;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	e028      	b.n	8003666 <da16k_init+0xb2>
        }
    }

    /* IoTC init (if requested) */
    if (cfg->iotc_config) {
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01b      	beq.n	8003654 <da16k_init+0xa0>
        if (DA16K_SUCCESS != (ret = da16k_setup_iotc_and_connect(cfg->iotc_config))) {
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f000 faf1 	bl	8003c08 <da16k_setup_iotc_and_connect>
 8003626:	4603      	mov	r3, r0
 8003628:	73fb      	strb	r3, [r7, #15]
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d007      	beq.n	8003640 <da16k_init+0x8c>
            DA16K_ERROR("IoTC connection failed (%d)\r\n", (int) ret);
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	227d      	movs	r2, #125	@ 0x7d
 8003634:	490e      	ldr	r1, [pc, #56]	@ (8003670 <da16k_init+0xbc>)
 8003636:	4811      	ldr	r0, [pc, #68]	@ (800367c <da16k_init+0xc8>)
 8003638:	f00a fcd8 	bl	800dfec <printf>
            return ret;
 800363c:	7bfb      	ldrb	r3, [r7, #15]
 800363e:	e012      	b.n	8003666 <da16k_init+0xb2>
        }
        if (cfg->iotc_config->iotc_connect_timeout_ms) {
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d004      	beq.n	8003654 <da16k_init+0xa0>
            s_iotc_connect_timeout_ms = cfg->iotc_config->iotc_connect_timeout_ms;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	4a0b      	ldr	r2, [pc, #44]	@ (8003680 <da16k_init+0xcc>)
 8003652:	6013      	str	r3, [r2, #0]
        }
    }

    /* External network timeout override */
    if (cfg->network_timeout_ms) {
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <da16k_init+0xb0>
        s_network_timeout_ms = cfg->network_timeout_ms;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4a08      	ldr	r2, [pc, #32]	@ (8003684 <da16k_init+0xd0>)
 8003662:	6013      	str	r3, [r2, #0]
    }

    return ret; /* TODO: Check if IoTC is actually connected. */
 8003664:	7bfb      	ldrb	r3, [r7, #15]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	08014674 	.word	0x08014674
 8003674:	08013f48 	.word	0x08013f48
 8003678:	08013f74 	.word	0x08013f74
 800367c:	08013fa8 	.word	0x08013fa8
 8003680:	20000008 	.word	0x20000008
 8003684:	20000004 	.word	0x20000004

08003688 <da16k_create_msg_str>:

void da16k_deinit() {
    da16k_uart_close();
}

da16k_msg_t *da16k_create_msg_str(const char *key, const char *value) {
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
    da16k_msg_t *msg = da16k_malloc(sizeof(da16k_msg_t));
 8003692:	2008      	movs	r0, #8
 8003694:	f000 fb64 	bl	8003d60 <da16k_malloc>
 8003698:	60f8      	str	r0, [r7, #12]

    DA16K_RETURN_ON_NULL(NULL, msg);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d106      	bne.n	80036ae <da16k_create_msg_str+0x26>
 80036a0:	2294      	movs	r2, #148	@ 0x94
 80036a2:	491e      	ldr	r1, [pc, #120]	@ (800371c <da16k_create_msg_str+0x94>)
 80036a4:	481e      	ldr	r0, [pc, #120]	@ (8003720 <da16k_create_msg_str+0x98>)
 80036a6:	f00a fca1 	bl	800dfec <printf>
 80036aa:	2300      	movs	r3, #0
 80036ac:	e032      	b.n	8003714 <da16k_create_msg_str+0x8c>
    DA16K_RETURN_ON_NULL(NULL, key);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d106      	bne.n	80036c2 <da16k_create_msg_str+0x3a>
 80036b4:	2295      	movs	r2, #149	@ 0x95
 80036b6:	4919      	ldr	r1, [pc, #100]	@ (800371c <da16k_create_msg_str+0x94>)
 80036b8:	481a      	ldr	r0, [pc, #104]	@ (8003724 <da16k_create_msg_str+0x9c>)
 80036ba:	f00a fc97 	bl	800dfec <printf>
 80036be:	2300      	movs	r3, #0
 80036c0:	e028      	b.n	8003714 <da16k_create_msg_str+0x8c>
    DA16K_RETURN_ON_NULL(NULL, value);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d106      	bne.n	80036d6 <da16k_create_msg_str+0x4e>
 80036c8:	2296      	movs	r2, #150	@ 0x96
 80036ca:	4914      	ldr	r1, [pc, #80]	@ (800371c <da16k_create_msg_str+0x94>)
 80036cc:	4816      	ldr	r0, [pc, #88]	@ (8003728 <da16k_create_msg_str+0xa0>)
 80036ce:	f00a fc8d 	bl	800dfec <printf>
 80036d2:	2300      	movs	r3, #0
 80036d4:	e01e      	b.n	8003714 <da16k_create_msg_str+0x8c>

    msg->key     = da16k_strdup(key);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fb5c 	bl	8003d94 <da16k_strdup>
 80036dc:	4602      	mov	r2, r0
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	601a      	str	r2, [r3, #0]
    msg->value   = da16k_strdup(value);
 80036e2:	6838      	ldr	r0, [r7, #0]
 80036e4:	f000 fb56 	bl	8003d94 <da16k_strdup>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	605a      	str	r2, [r3, #4]

    if (!msg->key || !msg->value) {
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <da16k_create_msg_str+0x76>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <da16k_create_msg_str+0x8a>
        DA16K_ERROR("DA16K: Memory allocation for key/value failed!");
 80036fe:	229c      	movs	r2, #156	@ 0x9c
 8003700:	4906      	ldr	r1, [pc, #24]	@ (800371c <da16k_create_msg_str+0x94>)
 8003702:	480a      	ldr	r0, [pc, #40]	@ (800372c <da16k_create_msg_str+0xa4>)
 8003704:	f00a fc72 	bl	800dfec <printf>
        da16k_destroy_msg(msg);
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 f82d 	bl	8003768 <da16k_destroy_msg>
        return NULL;
 800370e:	2300      	movs	r3, #0
 8003710:	e000      	b.n	8003714 <da16k_create_msg_str+0x8c>
    }

    return msg;
 8003712:	68fb      	ldr	r3, [r7, #12]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	08014680 	.word	0x08014680
 8003720:	08013fdc 	.word	0x08013fdc
 8003724:	08014008 	.word	0x08014008
 8003728:	08014034 	.word	0x08014034
 800372c:	08014060 	.word	0x08014060

08003730 <da16k_create_msg_int>:
da16k_msg_t *da16k_create_msg_uint(const char *key, uint64_t value) {
    snprintf(da16k_value_buffer, sizeof(da16k_value_buffer), "%" PRIu64, value);
    return da16k_create_msg_str(key, da16k_value_buffer);
}

da16k_msg_t *da16k_create_msg_int(const char *key, int64_t value) {
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af02      	add	r7, sp, #8
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	e9c7 2300 	strd	r2, r3, [r7]
    snprintf(da16k_value_buffer, sizeof(da16k_value_buffer), "%" PRIi64, value);
 800373c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003740:	e9cd 2300 	strd	r2, r3, [sp]
 8003744:	4a06      	ldr	r2, [pc, #24]	@ (8003760 <da16k_create_msg_int+0x30>)
 8003746:	2140      	movs	r1, #64	@ 0x40
 8003748:	4806      	ldr	r0, [pc, #24]	@ (8003764 <da16k_create_msg_int+0x34>)
 800374a:	f00a fcaf 	bl	800e0ac <snprintf>
    return da16k_create_msg_str(key, da16k_value_buffer);
 800374e:	4905      	ldr	r1, [pc, #20]	@ (8003764 <da16k_create_msg_int+0x34>)
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f7ff ff99 	bl	8003688 <da16k_create_msg_str>
 8003756:	4603      	mov	r3, r0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	080140ec 	.word	0x080140ec
 8003764:	20001728 	.word	0x20001728

08003768 <da16k_destroy_msg>:
da16k_msg_t *da16k_create_msg_bool(const char *key, bool value) {
    snprintf(da16k_value_buffer, sizeof(da16k_value_buffer), value ? "true" : "false");
    return da16k_create_msg_str(key, da16k_value_buffer);
}

void da16k_destroy_msg(da16k_msg_t *msg) {
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
    if (msg) {
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00c      	beq.n	8003790 <da16k_destroy_msg+0x28>
        da16k_free(msg->key);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fafc 	bl	8003d78 <da16k_free>
        da16k_free(msg->value);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	4618      	mov	r0, r3
 8003786:	f000 faf7 	bl	8003d78 <da16k_free>
        da16k_free(msg);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 faf4 	bl	8003d78 <da16k_free>
    }
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <da16k_check_send_and_destroy_msg>:
/* Helper functions for direct sending and destroying (for basic, non-threaded applications) */

/*  Sends a message directly and destroys it immediately after.
    Since it is used from within these wrappers after creation of msg, 
    it returns DA16K_OUT_OF_MEMORY on NULL pointers instead of DA16K_INVALID_PARAMETER as other functions. */
static da16k_err_t da16k_check_send_and_destroy_msg(da16k_msg_t *msg) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
    da16k_err_t ret;

    DA16K_RETURN_ON_NULL(DA16K_OUT_OF_MEMORY, msg);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <da16k_check_send_and_destroy_msg+0x1c>
 80037a6:	22cd      	movs	r2, #205	@ 0xcd
 80037a8:	4914      	ldr	r1, [pc, #80]	@ (80037fc <da16k_check_send_and_destroy_msg+0x64>)
 80037aa:	4815      	ldr	r0, [pc, #84]	@ (8003800 <da16k_check_send_and_destroy_msg+0x68>)
 80037ac:	f00a fc1e 	bl	800dfec <printf>
 80037b0:	2301      	movs	r3, #1
 80037b2:	e01e      	b.n	80037f2 <da16k_check_send_and_destroy_msg+0x5a>
    DA16K_RETURN_ON_NULL(DA16K_OUT_OF_MEMORY, msg->key);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d106      	bne.n	80037ca <da16k_check_send_and_destroy_msg+0x32>
 80037bc:	22ce      	movs	r2, #206	@ 0xce
 80037be:	490f      	ldr	r1, [pc, #60]	@ (80037fc <da16k_check_send_and_destroy_msg+0x64>)
 80037c0:	4810      	ldr	r0, [pc, #64]	@ (8003804 <da16k_check_send_and_destroy_msg+0x6c>)
 80037c2:	f00a fc13 	bl	800dfec <printf>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e013      	b.n	80037f2 <da16k_check_send_and_destroy_msg+0x5a>
    DA16K_RETURN_ON_NULL(DA16K_OUT_OF_MEMORY, msg->value);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <da16k_check_send_and_destroy_msg+0x48>
 80037d2:	22cf      	movs	r2, #207	@ 0xcf
 80037d4:	4909      	ldr	r1, [pc, #36]	@ (80037fc <da16k_check_send_and_destroy_msg+0x64>)
 80037d6:	480c      	ldr	r0, [pc, #48]	@ (8003808 <da16k_check_send_and_destroy_msg+0x70>)
 80037d8:	f00a fc08 	bl	800dfec <printf>
 80037dc:	2301      	movs	r3, #1
 80037de:	e008      	b.n	80037f2 <da16k_check_send_and_destroy_msg+0x5a>

    ret = da16k_send_msg(msg);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f861 	bl	80038a8 <da16k_send_msg>
 80037e6:	4603      	mov	r3, r0
 80037e8:	73fb      	strb	r3, [r7, #15]
    da16k_destroy_msg(msg);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff ffbc 	bl	8003768 <da16k_destroy_msg>
    return ret;
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	08014698 	.word	0x08014698
 8003800:	08013fdc 	.word	0x08013fdc
 8003804:	08014104 	.word	0x08014104
 8003808:	08014134 	.word	0x08014134

0800380c <da16k_send_msg_direct_str>:

da16k_err_t da16k_send_msg_direct_str(const char *key, const char *value) {
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, key);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d106      	bne.n	800382a <da16k_send_msg_direct_str+0x1e>
 800381c:	22d7      	movs	r2, #215	@ 0xd7
 800381e:	490e      	ldr	r1, [pc, #56]	@ (8003858 <da16k_send_msg_direct_str+0x4c>)
 8003820:	480e      	ldr	r0, [pc, #56]	@ (800385c <da16k_send_msg_direct_str+0x50>)
 8003822:	f00a fbe3 	bl	800dfec <printf>
 8003826:	230b      	movs	r3, #11
 8003828:	e012      	b.n	8003850 <da16k_send_msg_direct_str+0x44>
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, value);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <da16k_send_msg_direct_str+0x32>
 8003830:	22d8      	movs	r2, #216	@ 0xd8
 8003832:	4909      	ldr	r1, [pc, #36]	@ (8003858 <da16k_send_msg_direct_str+0x4c>)
 8003834:	480a      	ldr	r0, [pc, #40]	@ (8003860 <da16k_send_msg_direct_str+0x54>)
 8003836:	f00a fbd9 	bl	800dfec <printf>
 800383a:	230b      	movs	r3, #11
 800383c:	e008      	b.n	8003850 <da16k_send_msg_direct_str+0x44>
    return da16k_check_send_and_destroy_msg(da16k_create_msg_str(key, value));
 800383e:	6839      	ldr	r1, [r7, #0]
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff ff21 	bl	8003688 <da16k_create_msg_str>
 8003846:	4603      	mov	r3, r0
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ffa5 	bl	8003798 <da16k_check_send_and_destroy_msg>
 800384e:	4603      	mov	r3, r0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	080146bc 	.word	0x080146bc
 800385c:	08014008 	.word	0x08014008
 8003860:	08014034 	.word	0x08014034

08003864 <da16k_send_msg_direct_int>:
da16k_err_t da16k_send_msg_direct_uint(const char *key, uint64_t value) {
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, key);
    return da16k_check_send_and_destroy_msg(da16k_create_msg_uint(key, value));
}

da16k_err_t da16k_send_msg_direct_int(const char *key, int64_t value) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	e9c7 2300 	strd	r2, r3, [r7]
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, key);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d106      	bne.n	8003884 <da16k_send_msg_direct_int+0x20>
 8003876:	22e7      	movs	r2, #231	@ 0xe7
 8003878:	4909      	ldr	r1, [pc, #36]	@ (80038a0 <da16k_send_msg_direct_int+0x3c>)
 800387a:	480a      	ldr	r0, [pc, #40]	@ (80038a4 <da16k_send_msg_direct_int+0x40>)
 800387c:	f00a fbb6 	bl	800dfec <printf>
 8003880:	230b      	movs	r3, #11
 8003882:	e009      	b.n	8003898 <da16k_send_msg_direct_int+0x34>
    return da16k_check_send_and_destroy_msg(da16k_create_msg_int(key, value));
 8003884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f7ff ff51 	bl	8003730 <da16k_create_msg_int>
 800388e:	4603      	mov	r3, r0
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff81 	bl	8003798 <da16k_check_send_and_destroy_msg>
 8003896:	4603      	mov	r3, r0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	080146d8 	.word	0x080146d8
 80038a4:	08014008 	.word	0x08014008

080038a8 <da16k_send_msg>:
da16k_err_t da16k_send_msg_direct_bool(const char *key, bool value) {
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, key);
    return da16k_check_send_and_destroy_msg(da16k_create_msg_bool(key, value));
}

da16k_err_t da16k_send_msg(da16k_msg_t *msg) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	6078      	str	r0, [r7, #4]
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, msg);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <da16k_send_msg+0x1c>
 80038b6:	22f1      	movs	r2, #241	@ 0xf1
 80038b8:	4916      	ldr	r1, [pc, #88]	@ (8003914 <da16k_send_msg+0x6c>)
 80038ba:	4817      	ldr	r0, [pc, #92]	@ (8003918 <da16k_send_msg+0x70>)
 80038bc:	f00a fb96 	bl	800dfec <printf>
 80038c0:	230b      	movs	r3, #11
 80038c2:	e022      	b.n	800390a <da16k_send_msg+0x62>
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, msg->key);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d106      	bne.n	80038da <da16k_send_msg+0x32>
 80038cc:	22f2      	movs	r2, #242	@ 0xf2
 80038ce:	4911      	ldr	r1, [pc, #68]	@ (8003914 <da16k_send_msg+0x6c>)
 80038d0:	4812      	ldr	r0, [pc, #72]	@ (800391c <da16k_send_msg+0x74>)
 80038d2:	f00a fb8b 	bl	800dfec <printf>
 80038d6:	230b      	movs	r3, #11
 80038d8:	e017      	b.n	800390a <da16k_send_msg+0x62>
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, msg->value);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <da16k_send_msg+0x48>
 80038e2:	22f3      	movs	r2, #243	@ 0xf3
 80038e4:	490b      	ldr	r1, [pc, #44]	@ (8003914 <da16k_send_msg+0x6c>)
 80038e6:	480e      	ldr	r0, [pc, #56]	@ (8003920 <da16k_send_msg+0x78>)
 80038e8:	f00a fb80 	bl	800dfec <printf>
 80038ec:	230b      	movs	r3, #11
 80038ee:	e00c      	b.n	800390a <da16k_send_msg+0x62>

    return da16k_at_send_formatted_and_check_success(s_network_timeout_ms, NULL, "AT+NWICMSG %s,%s", msg->key, msg->value);
 80038f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003924 <da16k_send_msg+0x7c>)
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	4613      	mov	r3, r2
 8003900:	4a09      	ldr	r2, [pc, #36]	@ (8003928 <da16k_send_msg+0x80>)
 8003902:	2100      	movs	r1, #0
 8003904:	f7ff fcb4 	bl	8003270 <da16k_at_send_formatted_and_check_success>
 8003908:	4603      	mov	r3, r0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	080146f4 	.word	0x080146f4
 8003918:	08013fdc 	.word	0x08013fdc
 800391c:	08014104 	.word	0x08014104
 8003920:	08014134 	.word	0x08014134
 8003924:	20000004 	.word	0x20000004
 8003928:	08014168 	.word	0x08014168

0800392c <da16k_set_iotc_connection_type>:

da16k_err_t da16k_set_iotc_connection_type(da16k_iotc_mode_t type) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
    return da16k_at_send_formatted_and_check_success(DA16K_UART_TIMEOUT_MS, NULL, "AT+NWICCT %u", (unsigned) type);
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	4a05      	ldr	r2, [pc, #20]	@ (8003950 <da16k_set_iotc_connection_type+0x24>)
 800393a:	2100      	movs	r1, #0
 800393c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003940:	f7ff fc96 	bl	8003270 <da16k_at_send_formatted_and_check_success>
 8003944:	4603      	mov	r3, r0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	0801417c 	.word	0x0801417c

08003954 <da16k_set_iotc_auth_type>:

da16k_err_t da16k_set_iotc_auth_type(da16k_iotc_auth_type_t type) {
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
    return da16k_at_send_formatted_and_check_success(DA16K_UART_TIMEOUT_MS, NULL, "AT+NWICAT %u", (unsigned) type);
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	4a05      	ldr	r2, [pc, #20]	@ (8003978 <da16k_set_iotc_auth_type+0x24>)
 8003962:	2100      	movs	r1, #0
 8003964:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003968:	f7ff fc82 	bl	8003270 <da16k_at_send_formatted_and_check_success>
 800396c:	4603      	mov	r3, r0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	0801418c 	.word	0x0801418c

0800397c <da16k_set_iotc_cpid>:

da16k_err_t da16k_set_iotc_cpid(const char *cpid) {
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cpid);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d107      	bne.n	800399a <da16k_set_iotc_cpid+0x1e>
 800398a:	f240 1201 	movw	r2, #257	@ 0x101
 800398e:	4909      	ldr	r1, [pc, #36]	@ (80039b4 <da16k_set_iotc_cpid+0x38>)
 8003990:	4809      	ldr	r0, [pc, #36]	@ (80039b8 <da16k_set_iotc_cpid+0x3c>)
 8003992:	f00a fb2b 	bl	800dfec <printf>
 8003996:	230b      	movs	r3, #11
 8003998:	e007      	b.n	80039aa <da16k_set_iotc_cpid+0x2e>
    return da16k_at_send_formatted_and_check_success(DA16K_UART_TIMEOUT_MS, NULL, "AT+NWICCPID %s", cpid);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a07      	ldr	r2, [pc, #28]	@ (80039bc <da16k_set_iotc_cpid+0x40>)
 800399e:	2100      	movs	r1, #0
 80039a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80039a4:	f7ff fc64 	bl	8003270 <da16k_at_send_formatted_and_check_success>
 80039a8:	4603      	mov	r3, r0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	08014704 	.word	0x08014704
 80039b8:	0801419c 	.word	0x0801419c
 80039bc:	080141c8 	.word	0x080141c8

080039c0 <da16k_set_iotc_duid>:

da16k_err_t da16k_set_iotc_duid(const char *duid) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, duid);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d107      	bne.n	80039de <da16k_set_iotc_duid+0x1e>
 80039ce:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80039d2:	4909      	ldr	r1, [pc, #36]	@ (80039f8 <da16k_set_iotc_duid+0x38>)
 80039d4:	4809      	ldr	r0, [pc, #36]	@ (80039fc <da16k_set_iotc_duid+0x3c>)
 80039d6:	f00a fb09 	bl	800dfec <printf>
 80039da:	230b      	movs	r3, #11
 80039dc:	e007      	b.n	80039ee <da16k_set_iotc_duid+0x2e>
    return da16k_at_send_formatted_and_check_success(DA16K_UART_TIMEOUT_MS, NULL, "AT+NWICDUID %s", duid);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a07      	ldr	r2, [pc, #28]	@ (8003a00 <da16k_set_iotc_duid+0x40>)
 80039e2:	2100      	movs	r1, #0
 80039e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80039e8:	f7ff fc42 	bl	8003270 <da16k_at_send_formatted_and_check_success>
 80039ec:	4603      	mov	r3, r0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	08014718 	.word	0x08014718
 80039fc:	080141d8 	.word	0x080141d8
 8003a00:	08014204 	.word	0x08014204

08003a04 <da16k_set_iotc_env>:

da16k_err_t da16k_set_iotc_env(const char *env) {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, env);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d107      	bne.n	8003a22 <da16k_set_iotc_env+0x1e>
 8003a12:	f240 120b 	movw	r2, #267	@ 0x10b
 8003a16:	4909      	ldr	r1, [pc, #36]	@ (8003a3c <da16k_set_iotc_env+0x38>)
 8003a18:	4809      	ldr	r0, [pc, #36]	@ (8003a40 <da16k_set_iotc_env+0x3c>)
 8003a1a:	f00a fae7 	bl	800dfec <printf>
 8003a1e:	230b      	movs	r3, #11
 8003a20:	e007      	b.n	8003a32 <da16k_set_iotc_env+0x2e>
    return da16k_at_send_formatted_and_check_success(DA16K_UART_TIMEOUT_MS, NULL, "AT+NWICENV %s", env);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a07      	ldr	r2, [pc, #28]	@ (8003a44 <da16k_set_iotc_env+0x40>)
 8003a26:	2100      	movs	r1, #0
 8003a28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003a2c:	f7ff fc20 	bl	8003270 <da16k_at_send_formatted_and_check_success>
 8003a30:	4603      	mov	r3, r0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	0801472c 	.word	0x0801472c
 8003a40:	08014214 	.word	0x08014214
 8003a44:	08014240 	.word	0x08014240

08003a48 <da16k_iotc_start>:

da16k_err_t da16k_iotc_start(void) {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
    da16k_err_t ret = DA16K_SUCCESS;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	71fb      	strb	r3, [r7, #7]
    
    /* Starting consists of two parts: the setup and the actual start. Since decoupling the two from our POV is pointless,
       we do both of these in this wrapper. */

    ret = da16k_at_send_formatted_and_check_success(s_network_timeout_ms, "+NWICSETUPEND", "AT+NWICSETUP");
 8003a52:	4b0d      	ldr	r3, [pc, #52]	@ (8003a88 <da16k_iotc_start+0x40>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a0d      	ldr	r2, [pc, #52]	@ (8003a8c <da16k_iotc_start+0x44>)
 8003a58:	490d      	ldr	r1, [pc, #52]	@ (8003a90 <da16k_iotc_start+0x48>)
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff fc08 	bl	8003270 <da16k_at_send_formatted_and_check_success>
 8003a60:	4603      	mov	r3, r0
 8003a62:	71fb      	strb	r3, [r7, #7]
    if (ret == DA16K_SUCCESS) {
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d108      	bne.n	8003a7c <da16k_iotc_start+0x34>
        ret = da16k_at_send_formatted_and_check_success(s_iotc_connect_timeout_ms, "+NWICSTARTEND", "AT+NWICSTART");
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a94 <da16k_iotc_start+0x4c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a98 <da16k_iotc_start+0x50>)
 8003a70:	490a      	ldr	r1, [pc, #40]	@ (8003a9c <da16k_iotc_start+0x54>)
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fbfc 	bl	8003270 <da16k_at_send_formatted_and_check_success>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	71fb      	strb	r3, [r7, #7]
    }
    return ret;
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000004 	.word	0x20000004
 8003a8c:	08014250 	.word	0x08014250
 8003a90:	08014260 	.word	0x08014260
 8003a94:	20000008 	.word	0x20000008
 8003a98:	08014270 	.word	0x08014270
 8003a9c:	08014280 	.word	0x08014280

08003aa0 <da16k_iotc_stop>:

da16k_err_t da16k_iotc_stop(void) {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
    return da16k_at_send_formatted_and_check_success(s_network_timeout_ms, "+NWICSTOPEND", "AT+NWICSTOP");
 8003aa4:	4b04      	ldr	r3, [pc, #16]	@ (8003ab8 <da16k_iotc_stop+0x18>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a04      	ldr	r2, [pc, #16]	@ (8003abc <da16k_iotc_stop+0x1c>)
 8003aaa:	4905      	ldr	r1, [pc, #20]	@ (8003ac0 <da16k_iotc_stop+0x20>)
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fbdf 	bl	8003270 <da16k_at_send_formatted_and_check_success>
 8003ab2:	4603      	mov	r3, r0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000004 	.word	0x20000004
 8003abc:	08014290 	.word	0x08014290
 8003ac0:	0801429c 	.word	0x0801429c

08003ac4 <da16k_iotc_reset>:

da16k_err_t da16k_iotc_reset(void) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
    return da16k_at_send_formatted_and_check_success(s_network_timeout_ms, "+NWICRESETEND", "AT+NWICRESET");
 8003ac8:	4b04      	ldr	r3, [pc, #16]	@ (8003adc <da16k_iotc_reset+0x18>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a04      	ldr	r2, [pc, #16]	@ (8003ae0 <da16k_iotc_reset+0x1c>)
 8003ace:	4905      	ldr	r1, [pc, #20]	@ (8003ae4 <da16k_iotc_reset+0x20>)
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff fbcd 	bl	8003270 <da16k_at_send_formatted_and_check_success>
 8003ad6:	4603      	mov	r3, r0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000004 	.word	0x20000004
 8003ae0:	080142ac 	.word	0x080142ac
 8003ae4:	080142bc 	.word	0x080142bc

08003ae8 <da16k_set_wifi_config>:

da16k_err_t da16k_set_wifi_config(const da16k_wifi_cfg_t *cfg) {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	6078      	str	r0, [r7, #4]
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cfg);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d107      	bne.n	8003b06 <da16k_set_wifi_config+0x1e>
 8003af6:	f240 1225 	movw	r2, #293	@ 0x125
 8003afa:	491a      	ldr	r1, [pc, #104]	@ (8003b64 <da16k_set_wifi_config+0x7c>)
 8003afc:	481a      	ldr	r0, [pc, #104]	@ (8003b68 <da16k_set_wifi_config+0x80>)
 8003afe:	f00a fa75 	bl	800dfec <printf>
 8003b02:	230b      	movs	r3, #11
 8003b04:	e02a      	b.n	8003b5c <da16k_set_wifi_config+0x74>
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cfg->ssid);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d107      	bne.n	8003b1e <da16k_set_wifi_config+0x36>
 8003b0e:	f44f 7293 	mov.w	r2, #294	@ 0x126
 8003b12:	4914      	ldr	r1, [pc, #80]	@ (8003b64 <da16k_set_wifi_config+0x7c>)
 8003b14:	4815      	ldr	r0, [pc, #84]	@ (8003b6c <da16k_set_wifi_config+0x84>)
 8003b16:	f00a fa69 	bl	800dfec <printf>
 8003b1a:	230b      	movs	r3, #11
 8003b1c:	e01e      	b.n	8003b5c <da16k_set_wifi_config+0x74>

    /* Existing IoTC session must be stopped first to avoid reconnection attempts while wifi is connecting.
       Return codes can be ignored for this as when there is no connection in place, only "OK" will arrive. */
    da16k_iotc_stop();
 8003b1e:	f7ff ffbf 	bl	8003aa0 <da16k_iotc_stop>

    return da16k_at_send_formatted_and_check_success(
        cfg->wifi_connect_timeout_ms ? cfg->wifi_connect_timeout_ms : DA16K_DEFAULT_WIFI_TIMEOUT_MS,    /* Timeout, if present */
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
    return da16k_at_send_formatted_and_check_success(
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <da16k_set_wifi_config+0x48>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68d8      	ldr	r0, [r3, #12]
 8003b2e:	e001      	b.n	8003b34 <da16k_set_wifi_config+0x4c>
 8003b30:	f643 2098 	movw	r0, #15000	@ 0x3a98
        "+WFJAP", "AT+WFJAPA %s,%s,%d", /* AT Command*/
        cfg->ssid,                      /* SSID */
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6819      	ldr	r1, [r3, #0]
        cfg->key ? cfg->key : "",       /* Passphrase if present, blank if not */
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
    return da16k_at_send_formatted_and_check_success(
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <da16k_set_wifi_config+0x5e>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	e000      	b.n	8003b48 <da16k_set_wifi_config+0x60>
 8003b46:	4b0a      	ldr	r3, [pc, #40]	@ (8003b70 <da16k_set_wifi_config+0x88>)
        cfg->hidden ? 1 : 0);           /* Hidden network flag */
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	7a12      	ldrb	r2, [r2, #8]
    return da16k_at_send_formatted_and_check_success(
 8003b4c:	9201      	str	r2, [sp, #4]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	460b      	mov	r3, r1
 8003b52:	4a08      	ldr	r2, [pc, #32]	@ (8003b74 <da16k_set_wifi_config+0x8c>)
 8003b54:	4908      	ldr	r1, [pc, #32]	@ (8003b78 <da16k_set_wifi_config+0x90>)
 8003b56:	f7ff fb8b 	bl	8003270 <da16k_at_send_formatted_and_check_success>
 8003b5a:	4603      	mov	r3, r0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	08014740 	.word	0x08014740
 8003b68:	08013f48 	.word	0x08013f48
 8003b6c:	080142cc 	.word	0x080142cc
 8003b70:	080142fc 	.word	0x080142fc
 8003b74:	08014300 	.word	0x08014300
 8003b78:	08014314 	.word	0x08014314

08003b7c <da16k_set_device_cert>:

da16k_err_t da16k_set_device_cert(const char *cert, const char *key) {
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
    da16k_err_t ret = DA16K_SUCCESS;
 8003b86:	2300      	movs	r3, #0
 8003b88:	73fb      	strb	r3, [r7, #15]

    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cert);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d107      	bne.n	8003ba0 <da16k_set_device_cert+0x24>
 8003b90:	f240 1237 	movw	r2, #311	@ 0x137
 8003b94:	4918      	ldr	r1, [pc, #96]	@ (8003bf8 <da16k_set_device_cert+0x7c>)
 8003b96:	4819      	ldr	r0, [pc, #100]	@ (8003bfc <da16k_set_device_cert+0x80>)
 8003b98:	f00a fa28 	bl	800dfec <printf>
 8003b9c:	230b      	movs	r3, #11
 8003b9e:	e027      	b.n	8003bf0 <da16k_set_device_cert+0x74>
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, key);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d107      	bne.n	8003bb6 <da16k_set_device_cert+0x3a>
 8003ba6:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8003baa:	4913      	ldr	r1, [pc, #76]	@ (8003bf8 <da16k_set_device_cert+0x7c>)
 8003bac:	4814      	ldr	r0, [pc, #80]	@ (8003c00 <da16k_set_device_cert+0x84>)
 8003bae:	f00a fa1d 	bl	800dfec <printf>
 8003bb2:	230b      	movs	r3, #11
 8003bb4:	e01c      	b.n	8003bf0 <da16k_set_device_cert+0x74>

    DA16K_WARN("WARNING: Client certificate transmission via the AT command protocol is *INSECURE* and may ONLY be used for testing / development purposes!\r\n");
 8003bb6:	f44f 729d 	mov.w	r2, #314	@ 0x13a
 8003bba:	490f      	ldr	r1, [pc, #60]	@ (8003bf8 <da16k_set_device_cert+0x7c>)
 8003bbc:	4811      	ldr	r0, [pc, #68]	@ (8003c04 <da16k_set_device_cert+0x88>)
 8003bbe:	f00a fa15 	bl	800dfec <printf>

    /* MQTT Client Certificate */
    if (DA16K_SUCCESS != (ret = da16k_at_send_certificate(DA16K_CERT_MQTT_DEV_CERT, cert))) { return ret; }
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	f7ff fba5 	bl	8003314 <da16k_at_send_certificate>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	73fb      	strb	r3, [r7, #15]
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <da16k_set_device_cert+0x5c>
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	e00b      	b.n	8003bf0 <da16k_set_device_cert+0x74>
    /* MQTT Client Private Key */
    if (DA16K_SUCCESS != (ret = da16k_at_send_certificate(DA16K_CERT_MQTT_DEV_KEY, key)))   { return ret; }
 8003bd8:	6839      	ldr	r1, [r7, #0]
 8003bda:	2002      	movs	r0, #2
 8003bdc:	f7ff fb9a 	bl	8003314 <da16k_at_send_certificate>
 8003be0:	4603      	mov	r3, r0
 8003be2:	73fb      	strb	r3, [r7, #15]
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <da16k_set_device_cert+0x72>
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	e000      	b.n	8003bf0 <da16k_set_device_cert+0x74>

    return ret;
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	08014758 	.word	0x08014758
 8003bfc:	0801431c 	.word	0x0801431c
 8003c00:	08014008 	.word	0x08014008
 8003c04:	08014348 	.word	0x08014348

08003c08 <da16k_setup_iotc_and_connect>:

da16k_err_t da16k_setup_iotc_and_connect(const da16k_iotc_cfg_t *cfg) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
    da16k_err_t ret = DA16K_SUCCESS;
 8003c10:	2300      	movs	r3, #0
 8003c12:	73fb      	strb	r3, [r7, #15]

    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cfg);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d107      	bne.n	8003c2a <da16k_setup_iotc_and_connect+0x22>
 8003c1a:	f240 1247 	movw	r2, #327	@ 0x147
 8003c1e:	494b      	ldr	r1, [pc, #300]	@ (8003d4c <da16k_setup_iotc_and_connect+0x144>)
 8003c20:	484b      	ldr	r0, [pc, #300]	@ (8003d50 <da16k_setup_iotc_and_connect+0x148>)
 8003c22:	f00a f9e3 	bl	800dfec <printf>
 8003c26:	230b      	movs	r3, #11
 8003c28:	e08c      	b.n	8003d44 <da16k_setup_iotc_and_connect+0x13c>
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cfg->cpid);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d107      	bne.n	8003c42 <da16k_setup_iotc_and_connect+0x3a>
 8003c32:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8003c36:	4945      	ldr	r1, [pc, #276]	@ (8003d4c <da16k_setup_iotc_and_connect+0x144>)
 8003c38:	4846      	ldr	r0, [pc, #280]	@ (8003d54 <da16k_setup_iotc_and_connect+0x14c>)
 8003c3a:	f00a f9d7 	bl	800dfec <printf>
 8003c3e:	230b      	movs	r3, #11
 8003c40:	e080      	b.n	8003d44 <da16k_setup_iotc_and_connect+0x13c>
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cfg->duid);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d107      	bne.n	8003c5a <da16k_setup_iotc_and_connect+0x52>
 8003c4a:	f240 1249 	movw	r2, #329	@ 0x149
 8003c4e:	493f      	ldr	r1, [pc, #252]	@ (8003d4c <da16k_setup_iotc_and_connect+0x144>)
 8003c50:	4841      	ldr	r0, [pc, #260]	@ (8003d58 <da16k_setup_iotc_and_connect+0x150>)
 8003c52:	f00a f9cb 	bl	800dfec <printf>
 8003c56:	230b      	movs	r3, #11
 8003c58:	e074      	b.n	8003d44 <da16k_setup_iotc_and_connect+0x13c>
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cfg->env);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d107      	bne.n	8003c72 <da16k_setup_iotc_and_connect+0x6a>
 8003c62:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8003c66:	4939      	ldr	r1, [pc, #228]	@ (8003d4c <da16k_setup_iotc_and_connect+0x144>)
 8003c68:	483c      	ldr	r0, [pc, #240]	@ (8003d5c <da16k_setup_iotc_and_connect+0x154>)
 8003c6a:	f00a f9bf 	bl	800dfec <printf>
 8003c6e:	230b      	movs	r3, #11
 8003c70:	e068      	b.n	8003d44 <da16k_setup_iotc_and_connect+0x13c>

    if (DA16K_SUCCESS != (ret = da16k_iotc_stop()))                                             { return ret; }
 8003c72:	f7ff ff15 	bl	8003aa0 <da16k_iotc_stop>
 8003c76:	4603      	mov	r3, r0
 8003c78:	73fb      	strb	r3, [r7, #15]
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <da16k_setup_iotc_and_connect+0x7c>
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
 8003c82:	e05f      	b.n	8003d44 <da16k_setup_iotc_and_connect+0x13c>

    if (DA16K_SUCCESS != (ret = da16k_set_iotc_connection_type(cfg->mode)))                     { return ret; }
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff fe4f 	bl	800392c <da16k_set_iotc_connection_type>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	73fb      	strb	r3, [r7, #15]
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <da16k_setup_iotc_and_connect+0x94>
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	e053      	b.n	8003d44 <da16k_setup_iotc_and_connect+0x13c>
    if (DA16K_SUCCESS != (ret = da16k_set_iotc_cpid(cfg->cpid)))                                { return ret; }
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff fe6b 	bl	800397c <da16k_set_iotc_cpid>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	73fb      	strb	r3, [r7, #15]
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <da16k_setup_iotc_and_connect+0xac>
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	e047      	b.n	8003d44 <da16k_setup_iotc_and_connect+0x13c>
    if (DA16K_SUCCESS != (ret = da16k_set_iotc_duid(cfg->duid)))                                { return ret; }
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fe81 	bl	80039c0 <da16k_set_iotc_duid>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	73fb      	strb	r3, [r7, #15]
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <da16k_setup_iotc_and_connect+0xc4>
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
 8003cca:	e03b      	b.n	8003d44 <da16k_setup_iotc_and_connect+0x13c>
    if (DA16K_SUCCESS != (ret = da16k_set_iotc_env(cfg->env)))                                  { return ret; }
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fe97 	bl	8003a04 <da16k_set_iotc_env>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	73fb      	strb	r3, [r7, #15]
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <da16k_setup_iotc_and_connect+0xdc>
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	e02f      	b.n	8003d44 <da16k_setup_iotc_and_connect+0x13c>
    if (DA16K_SUCCESS != (ret = da16k_set_iotc_auth_type(DA16K_IOTC_AT_X509)))                  { return ret; }
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	f7ff fe35 	bl	8003954 <da16k_set_iotc_auth_type>
 8003cea:	4603      	mov	r3, r0
 8003cec:	73fb      	strb	r3, [r7, #15]
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <da16k_setup_iotc_and_connect+0xf0>
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
 8003cf6:	e025      	b.n	8003d44 <da16k_setup_iotc_and_connect+0x13c>

    if (cfg->device_cert) {
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00e      	beq.n	8003d1e <da16k_setup_iotc_and_connect+0x116>
        if (DA16K_SUCCESS != (ret = da16k_set_device_cert(cfg->device_cert, cfg->device_key)))  { return ret; }
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	f7ff ff36 	bl	8003b7c <da16k_set_device_cert>
 8003d10:	4603      	mov	r3, r0
 8003d12:	73fb      	strb	r3, [r7, #15]
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <da16k_setup_iotc_and_connect+0x116>
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
 8003d1c:	e012      	b.n	8003d44 <da16k_setup_iotc_and_connect+0x13c>
    }

    if (DA16K_SUCCESS != (ret = da16k_iotc_reset()))                                            { return ret; }
 8003d1e:	f7ff fed1 	bl	8003ac4 <da16k_iotc_reset>
 8003d22:	4603      	mov	r3, r0
 8003d24:	73fb      	strb	r3, [r7, #15]
 8003d26:	7bfb      	ldrb	r3, [r7, #15]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <da16k_setup_iotc_and_connect+0x128>
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	e009      	b.n	8003d44 <da16k_setup_iotc_and_connect+0x13c>
    if (DA16K_SUCCESS != (ret = da16k_iotc_start()))                                            { return ret; }
 8003d30:	f7ff fe8a 	bl	8003a48 <da16k_iotc_start>
 8003d34:	4603      	mov	r3, r0
 8003d36:	73fb      	strb	r3, [r7, #15]
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <da16k_setup_iotc_and_connect+0x13a>
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	e000      	b.n	8003d44 <da16k_setup_iotc_and_connect+0x13c>

    return ret;
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	08014770 	.word	0x08014770
 8003d50:	08013f48 	.word	0x08013f48
 8003d54:	080143ec 	.word	0x080143ec
 8003d58:	0801441c 	.word	0x0801441c
 8003d5c:	0801444c 	.word	0x0801444c

08003d60 <da16k_malloc>:

#include <stdio.h>

/* Wrappers for external functions that may be unreliable / redefined */

void *da16k_malloc(size_t size) {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
    return DA16K_CONFIG_MALLOC_FN(size);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f009 fda3 	bl	800d8b4 <malloc>
 8003d6e:	4603      	mov	r3, r0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <da16k_free>:

void da16k_free(void *ptr) {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
    if (ptr != NULL) {  /* some non-compliant C libraries may crash on freeing NULL pointers... */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <da16k_free+0x14>
        DA16K_CONFIG_FREE_FN(ptr);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f009 fd9c 	bl	800d8c4 <free>
    }
}
 8003d8c:	bf00      	nop
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <da16k_strdup>:

char *da16k_strdup(const char *src) {
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
    size_t str_size = strlen(src) + 1; /* + 1 for null terminator */
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7fc fa75 	bl	800028c <strlen>
 8003da2:	4603      	mov	r3, r0
 8003da4:	3301      	adds	r3, #1
 8003da6:	60fb      	str	r3, [r7, #12]
    char *ret = da16k_malloc(str_size);
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f7ff ffd9 	bl	8003d60 <da16k_malloc>
 8003dae:	60b8      	str	r0, [r7, #8]

    if (ret) {
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d004      	beq.n	8003dc0 <da16k_strdup+0x2c>
        memcpy(ret, src, str_size);
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	68b8      	ldr	r0, [r7, #8]
 8003dbc:	f00a fb1c 	bl	800e3f8 <memcpy>
    }

    return ret;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dd0:	4b12      	ldr	r3, [pc, #72]	@ (8003e1c <HAL_Init+0x50>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a11      	ldr	r2, [pc, #68]	@ (8003e1c <HAL_Init+0x50>)
 8003dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ddc:	2003      	movs	r0, #3
 8003dde:	f000 f9b0 	bl	8004142 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003de2:	f003 fbeb 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 8003de6:	4602      	mov	r2, r0
 8003de8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e20 <HAL_Init+0x54>)
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	490c      	ldr	r1, [pc, #48]	@ (8003e24 <HAL_Init+0x58>)
 8003df2:	5ccb      	ldrb	r3, [r1, r3]
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
 8003df8:	4a0b      	ldr	r2, [pc, #44]	@ (8003e28 <HAL_Init+0x5c>)
 8003dfa:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003dfc:	2004      	movs	r0, #4
 8003dfe:	f000 fa03 	bl	8004208 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e02:	200f      	movs	r0, #15
 8003e04:	f000 f812 	bl	8003e2c <HAL_InitTick>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e002      	b.n	8003e18 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e12:	f7fd ffd5 	bl	8001dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40022000 	.word	0x40022000
 8003e20:	46020c00 	.word	0x46020c00
 8003e24:	080144f8 	.word	0x080144f8
 8003e28:	20000000 	.word	0x20000000

08003e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003e38:	4b33      	ldr	r3, [pc, #204]	@ (8003f08 <HAL_InitTick+0xdc>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e05c      	b.n	8003efe <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003e44:	4b31      	ldr	r3, [pc, #196]	@ (8003f0c <HAL_InitTick+0xe0>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d10c      	bne.n	8003e6a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8003e50:	4b2f      	ldr	r3, [pc, #188]	@ (8003f10 <HAL_InitTick+0xe4>)
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	4b2c      	ldr	r3, [pc, #176]	@ (8003f08 <HAL_InitTick+0xdc>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	e037      	b.n	8003eda <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8003e6a:	f000 fa25 	bl	80042b8 <HAL_SYSTICK_GetCLKSourceConfig>
 8003e6e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d023      	beq.n	8003ebe <HAL_InitTick+0x92>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d82d      	bhi.n	8003ed8 <HAL_InitTick+0xac>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_InitTick+0x5e>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d00d      	beq.n	8003ea4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8003e88:	e026      	b.n	8003ed8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8003e8a:	4b21      	ldr	r3, [pc, #132]	@ (8003f10 <HAL_InitTick+0xe4>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f08 <HAL_InitTick+0xdc>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	4619      	mov	r1, r3
 8003e94:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003e98:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	60fb      	str	r3, [r7, #12]
        break;
 8003ea2:	e01a      	b.n	8003eda <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003ea4:	4b18      	ldr	r3, [pc, #96]	@ (8003f08 <HAL_InitTick+0xdc>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003eae:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eb2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8003eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eba:	60fb      	str	r3, [r7, #12]
        break;
 8003ebc:	e00d      	b.n	8003eda <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003ebe:	4b12      	ldr	r3, [pc, #72]	@ (8003f08 <HAL_InitTick+0xdc>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ec8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ecc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	60fb      	str	r3, [r7, #12]
        break;
 8003ed6:	e000      	b.n	8003eda <HAL_InitTick+0xae>
        break;
 8003ed8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f972 	bl	80041c4 <HAL_SYSTICK_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e009      	b.n	8003efe <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003eea:	2200      	movs	r2, #0
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef2:	f000 f931 	bl	8004158 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8003ef6:	4a07      	ldr	r2, [pc, #28]	@ (8003f14 <HAL_InitTick+0xe8>)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000010 	.word	0x20000010
 8003f0c:	e000e010 	.word	0xe000e010
 8003f10:	20000000 	.word	0x20000000
 8003f14:	2000000c 	.word	0x2000000c

08003f18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f1c:	4b06      	ldr	r3, [pc, #24]	@ (8003f38 <HAL_IncTick+0x20>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b06      	ldr	r3, [pc, #24]	@ (8003f3c <HAL_IncTick+0x24>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4413      	add	r3, r2
 8003f28:	4a04      	ldr	r2, [pc, #16]	@ (8003f3c <HAL_IncTick+0x24>)
 8003f2a:	6013      	str	r3, [r2, #0]
}
 8003f2c:	bf00      	nop
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	20000010 	.word	0x20000010
 8003f3c:	20001768 	.word	0x20001768

08003f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  return uwTick;
 8003f44:	4b03      	ldr	r3, [pc, #12]	@ (8003f54 <HAL_GetTick+0x14>)
 8003f46:	681b      	ldr	r3, [r3, #0]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20001768 	.word	0x20001768

08003f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f60:	f7ff ffee 	bl	8003f40 <HAL_GetTick>
 8003f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d005      	beq.n	8003f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f72:	4b0a      	ldr	r3, [pc, #40]	@ (8003f9c <HAL_Delay+0x44>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f7e:	bf00      	nop
 8003f80:	f7ff ffde 	bl	8003f40 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d8f7      	bhi.n	8003f80 <HAL_Delay+0x28>
  {
  }
}
 8003f90:	bf00      	nop
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000010 	.word	0x20000010

08003fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fd2:	4a04      	ldr	r2, [pc, #16]	@ (8003fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	60d3      	str	r3, [r2, #12]
}
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	e000ed00 	.word	0xe000ed00

08003fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fec:	4b04      	ldr	r3, [pc, #16]	@ (8004000 <__NVIC_GetPriorityGrouping+0x18>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	0a1b      	lsrs	r3, r3, #8
 8003ff2:	f003 0307 	and.w	r3, r3, #7
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	e000ed00 	.word	0xe000ed00

08004004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800400e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004012:	2b00      	cmp	r3, #0
 8004014:	db0b      	blt.n	800402e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004016:	79fb      	ldrb	r3, [r7, #7]
 8004018:	f003 021f 	and.w	r2, r3, #31
 800401c:	4907      	ldr	r1, [pc, #28]	@ (800403c <__NVIC_EnableIRQ+0x38>)
 800401e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	2001      	movs	r0, #1
 8004026:	fa00 f202 	lsl.w	r2, r0, r2
 800402a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	e000e100 	.word	0xe000e100

08004040 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800404a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404e:	2b00      	cmp	r3, #0
 8004050:	db12      	blt.n	8004078 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	f003 021f 	and.w	r2, r3, #31
 8004058:	490a      	ldr	r1, [pc, #40]	@ (8004084 <__NVIC_DisableIRQ+0x44>)
 800405a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	2001      	movs	r0, #1
 8004062:	fa00 f202 	lsl.w	r2, r0, r2
 8004066:	3320      	adds	r3, #32
 8004068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800406c:	f3bf 8f4f 	dsb	sy
}
 8004070:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004072:	f3bf 8f6f 	isb	sy
}
 8004076:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	e000e100 	.word	0xe000e100

08004088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	6039      	str	r1, [r7, #0]
 8004092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004098:	2b00      	cmp	r3, #0
 800409a:	db0a      	blt.n	80040b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	490c      	ldr	r1, [pc, #48]	@ (80040d4 <__NVIC_SetPriority+0x4c>)
 80040a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a6:	0112      	lsls	r2, r2, #4
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	440b      	add	r3, r1
 80040ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040b0:	e00a      	b.n	80040c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	4908      	ldr	r1, [pc, #32]	@ (80040d8 <__NVIC_SetPriority+0x50>)
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	3b04      	subs	r3, #4
 80040c0:	0112      	lsls	r2, r2, #4
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	440b      	add	r3, r1
 80040c6:	761a      	strb	r2, [r3, #24]
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	e000e100 	.word	0xe000e100
 80040d8:	e000ed00 	.word	0xe000ed00

080040dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040dc:	b480      	push	{r7}
 80040de:	b089      	sub	sp, #36	@ 0x24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f1c3 0307 	rsb	r3, r3, #7
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	bf28      	it	cs
 80040fa:	2304      	movcs	r3, #4
 80040fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3304      	adds	r3, #4
 8004102:	2b06      	cmp	r3, #6
 8004104:	d902      	bls.n	800410c <NVIC_EncodePriority+0x30>
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	3b03      	subs	r3, #3
 800410a:	e000      	b.n	800410e <NVIC_EncodePriority+0x32>
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004110:	f04f 32ff 	mov.w	r2, #4294967295
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43da      	mvns	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	401a      	ands	r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004124:	f04f 31ff 	mov.w	r1, #4294967295
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	fa01 f303 	lsl.w	r3, r1, r3
 800412e:	43d9      	mvns	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004134:	4313      	orrs	r3, r2
         );
}
 8004136:	4618      	mov	r0, r3
 8004138:	3724      	adds	r7, #36	@ 0x24
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b082      	sub	sp, #8
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff ff28 	bl	8003fa0 <__NVIC_SetPriorityGrouping>
}
 8004150:	bf00      	nop
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004166:	f7ff ff3f 	bl	8003fe8 <__NVIC_GetPriorityGrouping>
 800416a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	6978      	ldr	r0, [r7, #20]
 8004172:	f7ff ffb3 	bl	80040dc <NVIC_EncodePriority>
 8004176:	4602      	mov	r2, r0
 8004178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800417c:	4611      	mov	r1, r2
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff ff82 	bl	8004088 <__NVIC_SetPriority>
}
 8004184:	bf00      	nop
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff ff32 	bl	8004004 <__NVIC_EnableIRQ>
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80041b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff ff42 	bl	8004040 <__NVIC_DisableIRQ>
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041d4:	d301      	bcc.n	80041da <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80041d6:	2301      	movs	r3, #1
 80041d8:	e00d      	b.n	80041f6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80041da:	4a0a      	ldr	r2, [pc, #40]	@ (8004204 <HAL_SYSTICK_Config+0x40>)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3b01      	subs	r3, #1
 80041e0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80041e2:	4b08      	ldr	r3, [pc, #32]	@ (8004204 <HAL_SYSTICK_Config+0x40>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80041e8:	4b06      	ldr	r3, [pc, #24]	@ (8004204 <HAL_SYSTICK_Config+0x40>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a05      	ldr	r2, [pc, #20]	@ (8004204 <HAL_SYSTICK_Config+0x40>)
 80041ee:	f043 0303 	orr.w	r3, r3, #3
 80041f2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	e000e010 	.word	0xe000e010

08004208 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b04      	cmp	r3, #4
 8004214:	d844      	bhi.n	80042a0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004216:	a201      	add	r2, pc, #4	@ (adr r2, 800421c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421c:	0800423f 	.word	0x0800423f
 8004220:	0800425d 	.word	0x0800425d
 8004224:	0800427f 	.word	0x0800427f
 8004228:	080042a1 	.word	0x080042a1
 800422c:	08004231 	.word	0x08004231
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004230:	4b1f      	ldr	r3, [pc, #124]	@ (80042b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1e      	ldr	r2, [pc, #120]	@ (80042b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004236:	f043 0304 	orr.w	r3, r3, #4
 800423a:	6013      	str	r3, [r2, #0]
      break;
 800423c:	e031      	b.n	80042a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800423e:	4b1c      	ldr	r3, [pc, #112]	@ (80042b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a1b      	ldr	r2, [pc, #108]	@ (80042b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004244:	f023 0304 	bic.w	r3, r3, #4
 8004248:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800424a:	4b1a      	ldr	r3, [pc, #104]	@ (80042b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800424c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004250:	4a18      	ldr	r2, [pc, #96]	@ (80042b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004252:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004256:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800425a:	e022      	b.n	80042a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800425c:	4b14      	ldr	r3, [pc, #80]	@ (80042b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a13      	ldr	r2, [pc, #76]	@ (80042b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004262:	f023 0304 	bic.w	r3, r3, #4
 8004266:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8004268:	4b12      	ldr	r3, [pc, #72]	@ (80042b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800426a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800426e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004272:	4a10      	ldr	r2, [pc, #64]	@ (80042b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004274:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004278:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800427c:	e011      	b.n	80042a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800427e:	4b0c      	ldr	r3, [pc, #48]	@ (80042b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a0b      	ldr	r2, [pc, #44]	@ (80042b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004284:	f023 0304 	bic.w	r3, r3, #4
 8004288:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800428a:	4b0a      	ldr	r3, [pc, #40]	@ (80042b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800428c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004290:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004294:	4a07      	ldr	r2, [pc, #28]	@ (80042b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004296:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800429a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800429e:	e000      	b.n	80042a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80042a0:	bf00      	nop
  }
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	e000e010 	.word	0xe000e010
 80042b4:	46020c00 	.word	0x46020c00

080042b8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80042be:	4b19      	ldr	r3, [pc, #100]	@ (8004324 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80042ca:	2304      	movs	r3, #4
 80042cc:	607b      	str	r3, [r7, #4]
 80042ce:	e021      	b.n	8004314 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80042d0:	4b15      	ldr	r3, [pc, #84]	@ (8004328 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80042d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042d6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80042da:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042e2:	d011      	beq.n	8004308 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042ea:	d810      	bhi.n	800430e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d004      	beq.n	80042fc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042f8:	d003      	beq.n	8004302 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80042fa:	e008      	b.n	800430e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80042fc:	2300      	movs	r3, #0
 80042fe:	607b      	str	r3, [r7, #4]
        break;
 8004300:	e008      	b.n	8004314 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8004302:	2301      	movs	r3, #1
 8004304:	607b      	str	r3, [r7, #4]
        break;
 8004306:	e005      	b.n	8004314 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8004308:	2302      	movs	r3, #2
 800430a:	607b      	str	r3, [r7, #4]
        break;
 800430c:	e002      	b.n	8004314 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800430e:	2300      	movs	r3, #0
 8004310:	607b      	str	r3, [r7, #4]
        break;
 8004312:	bf00      	nop
    }
  }
  return systick_source;
 8004314:	687b      	ldr	r3, [r7, #4]
}
 8004316:	4618      	mov	r0, r3
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	e000e010 	.word	0xe000e010
 8004328:	46020c00 	.word	0x46020c00

0800432c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8004334:	f7ff fe04 	bl	8003f40 <HAL_GetTick>
 8004338:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e06b      	b.n	800441c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d008      	beq.n	8004362 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e05c      	b.n	800441c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695a      	ldr	r2, [r3, #20]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0204 	orr.w	r2, r2, #4
 8004370:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2205      	movs	r2, #5
 8004376:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800437a:	e020      	b.n	80043be <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800437c:	f7ff fde0 	bl	8003f40 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b05      	cmp	r3, #5
 8004388:	d919      	bls.n	80043be <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438e:	f043 0210 	orr.w	r2, r3, #16
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2203      	movs	r2, #3
 800439a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ae:	2201      	movs	r2, #1
 80043b0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e02e      	b.n	800441c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0d7      	beq.n	800437c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695a      	ldr	r2, [r3, #20]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0202 	orr.w	r2, r2, #2
 80043da:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2204      	movs	r2, #4
 80043e0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80043ec:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d007      	beq.n	8004412 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004406:	2201      	movs	r2, #1
 8004408:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2200      	movs	r2, #0
 8004410:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e019      	b.n	800446a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d004      	beq.n	800444c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e00e      	b.n	800446a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2204      	movs	r2, #4
 8004450:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004462:	f043 0304 	orr.w	r3, r3, #4
 8004466:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004478:	b480      	push	{r7}
 800447a:	b089      	sub	sp, #36	@ 0x24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800448a:	e1ba      	b.n	8004802 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	2101      	movs	r1, #1
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	fa01 f303 	lsl.w	r3, r1, r3
 8004498:	4013      	ands	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 81aa 	beq.w	80047fc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a55      	ldr	r2, [pc, #340]	@ (8004600 <HAL_GPIO_Init+0x188>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d15d      	bne.n	800456c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80044b6:	2201      	movs	r2, #1
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43db      	mvns	r3, r3
 80044c0:	69fa      	ldr	r2, [r7, #28]
 80044c2:	4013      	ands	r3, r2
 80044c4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f003 0201 	and.w	r2, r3, #1
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80044e0:	4a48      	ldr	r2, [pc, #288]	@ (8004604 <HAL_GPIO_Init+0x18c>)
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044e8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80044ea:	4a46      	ldr	r2, [pc, #280]	@ (8004604 <HAL_GPIO_Init+0x18c>)
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	4413      	add	r3, r2
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	08da      	lsrs	r2, r3, #3
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	3208      	adds	r2, #8
 80044fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004502:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	220f      	movs	r2, #15
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	43db      	mvns	r3, r3
 8004514:	69fa      	ldr	r2, [r7, #28]
 8004516:	4013      	ands	r3, r2
 8004518:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	220b      	movs	r2, #11
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	4313      	orrs	r3, r2
 800452c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	08da      	lsrs	r2, r3, #3
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	3208      	adds	r2, #8
 8004536:	69f9      	ldr	r1, [r7, #28]
 8004538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	2203      	movs	r2, #3
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	43db      	mvns	r3, r3
 800454e:	69fa      	ldr	r2, [r7, #28]
 8004550:	4013      	ands	r3, r2
 8004552:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	2202      	movs	r2, #2
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	4313      	orrs	r3, r2
 8004562:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	e067      	b.n	800463c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d003      	beq.n	800457c <HAL_GPIO_Init+0x104>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b12      	cmp	r3, #18
 800457a:	d145      	bne.n	8004608 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	08da      	lsrs	r2, r3, #3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3208      	adds	r2, #8
 8004584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004588:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	220f      	movs	r2, #15
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	69fa      	ldr	r2, [r7, #28]
 800459c:	4013      	ands	r3, r2
 800459e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f003 020f 	and.w	r2, r3, #15
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	08da      	lsrs	r2, r3, #3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3208      	adds	r2, #8
 80045c2:	69f9      	ldr	r1, [r7, #28]
 80045c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	2203      	movs	r2, #3
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	43db      	mvns	r3, r3
 80045da:	69fa      	ldr	r2, [r7, #28]
 80045dc:	4013      	ands	r3, r2
 80045de:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 0203 	and.w	r2, r3, #3
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	69fa      	ldr	r2, [r7, #28]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	69fa      	ldr	r2, [r7, #28]
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	e01e      	b.n	800463c <HAL_GPIO_Init+0x1c4>
 80045fe:	bf00      	nop
 8004600:	46020000 	.word	0x46020000
 8004604:	08014790 	.word	0x08014790
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	2203      	movs	r2, #3
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	43db      	mvns	r3, r3
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	4013      	ands	r3, r2
 800461e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f003 0203 	and.w	r2, r3, #3
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	69fa      	ldr	r2, [r7, #28]
 8004632:	4313      	orrs	r3, r2
 8004634:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d00b      	beq.n	800465c <HAL_GPIO_Init+0x1e4>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b02      	cmp	r3, #2
 800464a:	d007      	beq.n	800465c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004650:	2b11      	cmp	r3, #17
 8004652:	d003      	beq.n	800465c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b12      	cmp	r3, #18
 800465a:	d130      	bne.n	80046be <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	2203      	movs	r2, #3
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	43db      	mvns	r3, r3
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	4013      	ands	r3, r2
 8004672:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	69fa      	ldr	r2, [r7, #28]
 8004682:	4313      	orrs	r3, r2
 8004684:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	69fa      	ldr	r2, [r7, #28]
 800468a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004692:	2201      	movs	r2, #1
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	4013      	ands	r3, r2
 80046a0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	091b      	lsrs	r3, r3, #4
 80046a8:	f003 0201 	and.w	r2, r3, #1
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	69fa      	ldr	r2, [r7, #28]
 80046bc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d017      	beq.n	80046f6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	2203      	movs	r2, #3
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	43db      	mvns	r3, r3
 80046d8:	69fa      	ldr	r2, [r7, #28]
 80046da:	4013      	ands	r3, r2
 80046dc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	69fa      	ldr	r2, [r7, #28]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d07c      	beq.n	80047fc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004702:	4a47      	ldr	r2, [pc, #284]	@ (8004820 <HAL_GPIO_Init+0x3a8>)
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	089b      	lsrs	r3, r3, #2
 8004708:	3318      	adds	r3, #24
 800470a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	220f      	movs	r2, #15
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43db      	mvns	r3, r3
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	4013      	ands	r3, r2
 8004724:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	0a9a      	lsrs	r2, r3, #10
 800472a:	4b3e      	ldr	r3, [pc, #248]	@ (8004824 <HAL_GPIO_Init+0x3ac>)
 800472c:	4013      	ands	r3, r2
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	f002 0203 	and.w	r2, r2, #3
 8004734:	00d2      	lsls	r2, r2, #3
 8004736:	4093      	lsls	r3, r2
 8004738:	69fa      	ldr	r2, [r7, #28]
 800473a:	4313      	orrs	r3, r2
 800473c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800473e:	4938      	ldr	r1, [pc, #224]	@ (8004820 <HAL_GPIO_Init+0x3a8>)
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	089b      	lsrs	r3, r3, #2
 8004744:	3318      	adds	r3, #24
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800474c:	4b34      	ldr	r3, [pc, #208]	@ (8004820 <HAL_GPIO_Init+0x3a8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	43db      	mvns	r3, r3
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	4013      	ands	r3, r2
 800475a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004770:	4a2b      	ldr	r2, [pc, #172]	@ (8004820 <HAL_GPIO_Init+0x3a8>)
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004776:	4b2a      	ldr	r3, [pc, #168]	@ (8004820 <HAL_GPIO_Init+0x3a8>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	43db      	mvns	r3, r3
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	4013      	ands	r3, r2
 8004784:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004792:	69fa      	ldr	r2, [r7, #28]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800479a:	4a21      	ldr	r2, [pc, #132]	@ (8004820 <HAL_GPIO_Init+0x3a8>)
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80047a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004820 <HAL_GPIO_Init+0x3a8>)
 80047a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047a6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	43db      	mvns	r3, r3
 80047ac:	69fa      	ldr	r2, [r7, #28]
 80047ae:	4013      	ands	r3, r2
 80047b0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80047c6:	4a16      	ldr	r2, [pc, #88]	@ (8004820 <HAL_GPIO_Init+0x3a8>)
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80047ce:	4b14      	ldr	r3, [pc, #80]	@ (8004820 <HAL_GPIO_Init+0x3a8>)
 80047d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	43db      	mvns	r3, r3
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	4013      	ands	r3, r2
 80047de:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80047f4:	4a0a      	ldr	r2, [pc, #40]	@ (8004820 <HAL_GPIO_Init+0x3a8>)
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	3301      	adds	r3, #1
 8004800:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	fa22 f303 	lsr.w	r3, r2, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	f47f ae3d 	bne.w	800448c <HAL_GPIO_Init+0x14>
  }
}
 8004812:	bf00      	nop
 8004814:	bf00      	nop
 8004816:	3724      	adds	r7, #36	@ 0x24
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	46022000 	.word	0x46022000
 8004824:	002f7f7f 	.word	0x002f7f7f

08004828 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004828:	b480      	push	{r7}
 800482a:	b089      	sub	sp, #36	@ 0x24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800483a:	e0bc      	b.n	80049b6 <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800483c:	2201      	movs	r2, #1
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	4013      	ands	r3, r2
 8004848:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80ad 	beq.w	80049b0 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a5e      	ldr	r2, [pc, #376]	@ (80049d4 <HAL_GPIO_DeInit+0x1ac>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d115      	bne.n	800488a <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 800485e:	4a5e      	ldr	r2, [pc, #376]	@ (80049d8 <HAL_GPIO_DeInit+0x1b0>)
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004866:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004868:	4a5b      	ldr	r2, [pc, #364]	@ (80049d8 <HAL_GPIO_DeInit+0x1b0>)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4413      	add	r3, r2
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8004874:	4b57      	ldr	r3, [pc, #348]	@ (80049d4 <HAL_GPIO_DeInit+0x1ac>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	2101      	movs	r1, #1
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	fa01 f303 	lsl.w	r3, r1, r3
 8004880:	43db      	mvns	r3, r3
 8004882:	4954      	ldr	r1, [pc, #336]	@ (80049d4 <HAL_GPIO_DeInit+0x1ac>)
 8004884:	4013      	ands	r3, r2
 8004886:	600b      	str	r3, [r1, #0]
 8004888:	e053      	b.n	8004932 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 800488a:	4a54      	ldr	r2, [pc, #336]	@ (80049dc <HAL_GPIO_DeInit+0x1b4>)
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	089b      	lsrs	r3, r3, #2
 8004890:	3318      	adds	r3, #24
 8004892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004896:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	220f      	movs	r2, #15
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4013      	ands	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	0a9a      	lsrs	r2, r3, #10
 80048b0:	4b4b      	ldr	r3, [pc, #300]	@ (80049e0 <HAL_GPIO_DeInit+0x1b8>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	f002 0203 	and.w	r2, r2, #3
 80048ba:	00d2      	lsls	r2, r2, #3
 80048bc:	4093      	lsls	r3, r2
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d136      	bne.n	8004932 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 80048c4:	4b45      	ldr	r3, [pc, #276]	@ (80049dc <HAL_GPIO_DeInit+0x1b4>)
 80048c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	43db      	mvns	r3, r3
 80048ce:	4943      	ldr	r1, [pc, #268]	@ (80049dc <HAL_GPIO_DeInit+0x1b4>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 80048d6:	4b41      	ldr	r3, [pc, #260]	@ (80049dc <HAL_GPIO_DeInit+0x1b4>)
 80048d8:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	43db      	mvns	r3, r3
 80048e0:	493e      	ldr	r1, [pc, #248]	@ (80049dc <HAL_GPIO_DeInit+0x1b4>)
 80048e2:	4013      	ands	r3, r2
 80048e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 80048e8:	4b3c      	ldr	r3, [pc, #240]	@ (80049dc <HAL_GPIO_DeInit+0x1b4>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	43db      	mvns	r3, r3
 80048f0:	493a      	ldr	r1, [pc, #232]	@ (80049dc <HAL_GPIO_DeInit+0x1b4>)
 80048f2:	4013      	ands	r3, r2
 80048f4:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 80048f6:	4b39      	ldr	r3, [pc, #228]	@ (80049dc <HAL_GPIO_DeInit+0x1b4>)
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	43db      	mvns	r3, r3
 80048fe:	4937      	ldr	r1, [pc, #220]	@ (80049dc <HAL_GPIO_DeInit+0x1b4>)
 8004900:	4013      	ands	r3, r2
 8004902:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	220f      	movs	r2, #15
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8004914:	4a31      	ldr	r2, [pc, #196]	@ (80049dc <HAL_GPIO_DeInit+0x1b4>)
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	089b      	lsrs	r3, r3, #2
 800491a:	3318      	adds	r3, #24
 800491c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	43da      	mvns	r2, r3
 8004924:	482d      	ldr	r0, [pc, #180]	@ (80049dc <HAL_GPIO_DeInit+0x1b4>)
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	089b      	lsrs	r3, r3, #2
 800492a:	400a      	ands	r2, r1
 800492c:	3318      	adds	r3, #24
 800492e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	2103      	movs	r1, #3
 800493c:	fa01 f303 	lsl.w	r3, r1, r3
 8004940:	431a      	orrs	r2, r3
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	08da      	lsrs	r2, r3, #3
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	3208      	adds	r2, #8
 800494e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	220f      	movs	r2, #15
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	43db      	mvns	r3, r3
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	08d2      	lsrs	r2, r2, #3
 8004966:	4019      	ands	r1, r3
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	3208      	adds	r2, #8
 800496c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	2103      	movs	r1, #3
 800497a:	fa01 f303 	lsl.w	r3, r1, r3
 800497e:	43db      	mvns	r3, r3
 8004980:	401a      	ands	r2, r3
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	2101      	movs	r1, #1
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	fa01 f303 	lsl.w	r3, r1, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	401a      	ands	r2, r3
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	2103      	movs	r1, #3
 80049a4:	fa01 f303 	lsl.w	r3, r1, r3
 80049a8:	43db      	mvns	r3, r3
 80049aa:	401a      	ands	r2, r3
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	60da      	str	r2, [r3, #12]
    }

    position++;
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	3301      	adds	r3, #1
 80049b4:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	fa22 f303 	lsr.w	r3, r2, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f47f af3c 	bne.w	800483c <HAL_GPIO_DeInit+0x14>
  }
}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop
 80049c8:	3724      	adds	r7, #36	@ 0x24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	46020000 	.word	0x46020000
 80049d8:	08014790 	.word	0x08014790
 80049dc:	46022000 	.word	0x46022000
 80049e0:	002f7f7f 	.word	0x002f7f7f

080049e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	807b      	strh	r3, [r7, #2]
 80049f0:	4613      	mov	r3, r2
 80049f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049f4:	787b      	ldrb	r3, [r7, #1]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049fa:	887a      	ldrh	r2, [r7, #2]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004a00:	e002      	b.n	8004a08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004a02:	887a      	ldrh	r2, [r7, #2]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a26:	887a      	ldrh	r2, [r7, #2]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	041a      	lsls	r2, r3, #16
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	43d9      	mvns	r1, r3
 8004a32:	887b      	ldrh	r3, [r7, #2]
 8004a34:	400b      	ands	r3, r1
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	619a      	str	r2, [r3, #24]
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8004a52:	4b0f      	ldr	r3, [pc, #60]	@ (8004a90 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d006      	beq.n	8004a6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8004a90 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004a60:	88fb      	ldrh	r3, [r7, #6]
 8004a62:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004a64:	88fb      	ldrh	r3, [r7, #6]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fc fb16 	bl	8001098 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8004a6c:	4b08      	ldr	r3, [pc, #32]	@ (8004a90 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	88fb      	ldrh	r3, [r7, #6]
 8004a72:	4013      	ands	r3, r2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d006      	beq.n	8004a86 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004a78:	4a05      	ldr	r2, [pc, #20]	@ (8004a90 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004a7a:	88fb      	ldrh	r3, [r7, #6]
 8004a7c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004a7e:	88fb      	ldrh	r3, [r7, #6]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 f807 	bl	8004a94 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004a86:	bf00      	nop
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	46022000 	.word	0x46022000

08004a94 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b082      	sub	sp, #8
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e08d      	b.n	8004bd8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d106      	bne.n	8004ad6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7fd f9f9 	bl	8001ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2224      	movs	r2, #36	@ 0x24
 8004ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0201 	bic.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004afa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b0a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d107      	bne.n	8004b24 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b20:	609a      	str	r2, [r3, #8]
 8004b22:	e006      	b.n	8004b32 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004b30:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d108      	bne.n	8004b4c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b48:	605a      	str	r2, [r3, #4]
 8004b4a:	e007      	b.n	8004b5c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b5a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b6e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b7e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69d9      	ldr	r1, [r3, #28]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1a      	ldr	r2, [r3, #32]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0201 	orr.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d138      	bne.n	8004c68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e032      	b.n	8004c6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2224      	movs	r2, #36	@ 0x24
 8004c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0201 	bic.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6819      	ldr	r1, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	e000      	b.n	8004c6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c68:	2302      	movs	r3, #2
  }
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b085      	sub	sp, #20
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b20      	cmp	r3, #32
 8004c8a:	d139      	bne.n	8004d00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e033      	b.n	8004d02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2224      	movs	r2, #36	@ 0x24
 8004ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0201 	bic.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004cc8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	021b      	lsls	r3, r3, #8
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	e000      	b.n	8004d02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d00:	2302      	movs	r3, #2
  }
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
	...

08004d10 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	73fb      	strb	r3, [r7, #15]
 8004d2c:	e007      	b.n	8004d3e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004d2e:	4b07      	ldr	r3, [pc, #28]	@ (8004d4c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f023 0204 	bic.w	r2, r3, #4
 8004d36:	4905      	ldr	r1, [pc, #20]	@ (8004d4c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	40030400 	.word	0x40030400

08004d50 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004d54:	4b05      	ldr	r3, [pc, #20]	@ (8004d6c <HAL_ICACHE_Enable+0x1c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a04      	ldr	r2, [pc, #16]	@ (8004d6c <HAL_ICACHE_Enable+0x1c>)
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	40030400 	.word	0x40030400

08004d70 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d102      	bne.n	8004d88 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	73fb      	strb	r3, [r7, #15]
 8004d86:	e141      	b.n	800500c <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 f947 	bl	8005020 <MDF_GetHandleNumberFromInstance>
 8004d92:	4603      	mov	r3, r0
 8004d94:	4a86      	ldr	r2, [pc, #536]	@ (8004fb0 <HAL_MDF_Init+0x240>)
 8004d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	73fb      	strb	r3, [r7, #15]
 8004da2:	e133      	b.n	800500c <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7fd f825 	bl	8001df4 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8004daa:	4b82      	ldr	r3, [pc, #520]	@ (8004fb4 <HAL_MDF_Init+0x244>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d11d      	bne.n	8004dee <HAL_MDF_Init+0x7e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a80      	ldr	r2, [pc, #512]	@ (8004fb8 <HAL_MDF_Init+0x248>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d023      	beq.n	8004e04 <HAL_MDF_Init+0x94>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a7e      	ldr	r2, [pc, #504]	@ (8004fbc <HAL_MDF_Init+0x24c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d01e      	beq.n	8004e04 <HAL_MDF_Init+0x94>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a7d      	ldr	r2, [pc, #500]	@ (8004fc0 <HAL_MDF_Init+0x250>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d019      	beq.n	8004e04 <HAL_MDF_Init+0x94>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a7b      	ldr	r2, [pc, #492]	@ (8004fc4 <HAL_MDF_Init+0x254>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d014      	beq.n	8004e04 <HAL_MDF_Init+0x94>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a7a      	ldr	r2, [pc, #488]	@ (8004fc8 <HAL_MDF_Init+0x258>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00f      	beq.n	8004e04 <HAL_MDF_Init+0x94>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a78      	ldr	r2, [pc, #480]	@ (8004fcc <HAL_MDF_Init+0x25c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00a      	beq.n	8004e04 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8004dee:	4b78      	ldr	r3, [pc, #480]	@ (8004fd0 <HAL_MDF_Init+0x260>)
 8004df0:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f040 8090 	bne.w	8004f18 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a75      	ldr	r2, [pc, #468]	@ (8004fd4 <HAL_MDF_Init+0x264>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	f040 808a 	bne.w	8004f18 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a72      	ldr	r2, [pc, #456]	@ (8004fd4 <HAL_MDF_Init+0x264>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d101      	bne.n	8004e12 <HAL_MDF_Init+0xa2>
 8004e0e:	4b72      	ldr	r3, [pc, #456]	@ (8004fd8 <HAL_MDF_Init+0x268>)
 8004e10:	e000      	b.n	8004e14 <HAL_MDF_Init+0xa4>
 8004e12:	4b72      	ldr	r3, [pc, #456]	@ (8004fdc <HAL_MDF_Init+0x26c>)
 8004e14:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	da02      	bge.n	8004e24 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	73fb      	strb	r3, [r7, #15]
 8004e22:	e079      	b.n	8004f18 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a63      	ldr	r2, [pc, #396]	@ (8004fb8 <HAL_MDF_Init+0x248>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d018      	beq.n	8004e60 <HAL_MDF_Init+0xf0>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a62      	ldr	r2, [pc, #392]	@ (8004fbc <HAL_MDF_Init+0x24c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d013      	beq.n	8004e60 <HAL_MDF_Init+0xf0>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a60      	ldr	r2, [pc, #384]	@ (8004fc0 <HAL_MDF_Init+0x250>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00e      	beq.n	8004e60 <HAL_MDF_Init+0xf0>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a5f      	ldr	r2, [pc, #380]	@ (8004fc4 <HAL_MDF_Init+0x254>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d009      	beq.n	8004e60 <HAL_MDF_Init+0xf0>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a5d      	ldr	r2, [pc, #372]	@ (8004fc8 <HAL_MDF_Init+0x258>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d004      	beq.n	8004e60 <HAL_MDF_Init+0xf0>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a5c      	ldr	r2, [pc, #368]	@ (8004fcc <HAL_MDF_Init+0x25c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d10d      	bne.n	8004e7c <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	431a      	orrs	r2, r3
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	061b      	lsls	r3, r3, #24
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	7b1b      	ldrb	r3, [r3, #12]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d137      	bne.n	8004f0c <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8004eac:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8004eb4:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	7e1b      	ldrb	r3, [r3, #24]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d123      	bne.n	8004f0c <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a3b      	ldr	r2, [pc, #236]	@ (8004fb8 <HAL_MDF_Init+0x248>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d012      	beq.n	8004ef4 <HAL_MDF_Init+0x184>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a3a      	ldr	r2, [pc, #232]	@ (8004fbc <HAL_MDF_Init+0x24c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00d      	beq.n	8004ef4 <HAL_MDF_Init+0x184>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a38      	ldr	r2, [pc, #224]	@ (8004fc0 <HAL_MDF_Init+0x250>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d008      	beq.n	8004ef4 <HAL_MDF_Init+0x184>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a37      	ldr	r2, [pc, #220]	@ (8004fc4 <HAL_MDF_Init+0x254>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <HAL_MDF_Init+0x184>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a35      	ldr	r2, [pc, #212]	@ (8004fc8 <HAL_MDF_Init+0x258>)
 8004ef2:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8004f00:	430b      	orrs	r3, r1
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f043 0210 	orr.w	r2, r3, #16
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f043 0201 	orr.w	r2, r3, #1
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d128      	bne.n	8004f70 <HAL_MDF_Init+0x200>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d123      	bne.n	8004f70 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	da02      	bge.n	8004f38 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	73fb      	strb	r3, [r7, #15]
 8004f36:	e01b      	b.n	8004f70 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6819      	ldr	r1, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4a:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8004f50:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f56:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d14a      	bne.n	800500c <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 021f 	bic.w	r2, r2, #31
 8004f84:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6859      	ldr	r1, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8004fd4 <HAL_MDF_Init+0x264>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d11e      	bne.n	8004fe0 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 8004fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd0 <HAL_MDF_Init+0x260>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	4a09      	ldr	r2, [pc, #36]	@ (8004fd0 <HAL_MDF_Init+0x260>)
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	e01d      	b.n	8004fea <HAL_MDF_Init+0x27a>
 8004fae:	bf00      	nop
 8004fb0:	20001774 	.word	0x20001774
 8004fb4:	2000176c 	.word	0x2000176c
 8004fb8:	40025080 	.word	0x40025080
 8004fbc:	40025100 	.word	0x40025100
 8004fc0:	40025180 	.word	0x40025180
 8004fc4:	40025200 	.word	0x40025200
 8004fc8:	40025280 	.word	0x40025280
 8004fcc:	40025300 	.word	0x40025300
 8004fd0:	20001770 	.word	0x20001770
 8004fd4:	46024080 	.word	0x46024080
 8004fd8:	46024000 	.word	0x46024000
 8004fdc:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8004fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8005018 <HAL_MDF_Init+0x2a8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8005018 <HAL_MDF_Init+0x2a8>)
 8004fe8:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 f816 	bl	8005020 <MDF_GetHandleNumberFromInstance>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	4909      	ldr	r1, [pc, #36]	@ (800501c <HAL_MDF_Init+0x2ac>)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	641a      	str	r2, [r3, #64]	@ 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 800500c:	7bfb      	ldrb	r3, [r7, #15]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	2000176c 	.word	0x2000176c
 800501c:	20001774 	.word	0x20001774

08005020 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a19      	ldr	r2, [pc, #100]	@ (8005090 <MDF_GetHandleNumberFromInstance+0x70>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d102      	bne.n	8005036 <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	e024      	b.n	8005080 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a16      	ldr	r2, [pc, #88]	@ (8005094 <MDF_GetHandleNumberFromInstance+0x74>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d102      	bne.n	8005044 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 800503e:	2301      	movs	r3, #1
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	e01d      	b.n	8005080 <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a14      	ldr	r2, [pc, #80]	@ (8005098 <MDF_GetHandleNumberFromInstance+0x78>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d102      	bne.n	8005052 <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 800504c:	2302      	movs	r3, #2
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	e016      	b.n	8005080 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a11      	ldr	r2, [pc, #68]	@ (800509c <MDF_GetHandleNumberFromInstance+0x7c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d102      	bne.n	8005060 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 800505a:	2303      	movs	r3, #3
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	e00f      	b.n	8005080 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a0f      	ldr	r2, [pc, #60]	@ (80050a0 <MDF_GetHandleNumberFromInstance+0x80>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d102      	bne.n	800506e <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8005068:	2304      	movs	r3, #4
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	e008      	b.n	8005080 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a0c      	ldr	r2, [pc, #48]	@ (80050a4 <MDF_GetHandleNumberFromInstance+0x84>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d102      	bne.n	800507c <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 8005076:	2305      	movs	r3, #5
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	e001      	b.n	8005080 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 800507c:	2306      	movs	r3, #6
 800507e:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 8005080:	68fb      	ldr	r3, [r7, #12]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40025080 	.word	0x40025080
 8005094:	40025100 	.word	0x40025100
 8005098:	40025180 	.word	0x40025180
 800509c:	40025200 	.word	0x40025200
 80050a0:	40025280 	.word	0x40025280
 80050a4:	40025300 	.word	0x40025300

080050a8 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f043 0201 	orr.w	r2, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	601a      	str	r2, [r3, #0]
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80050d4:	f7fe ff34 	bl	8003f40 <HAL_GetTick>
 80050d8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d102      	bne.n	80050e6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	73fb      	strb	r3, [r7, #15]
 80050e4:	e0a5      	b.n	8005232 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f040 809e 	bne.w	8005232 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fc ffa0 	bl	800203c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80050fc:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f912 	bl	800532a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	4b4b      	ldr	r3, [pc, #300]	@ (800523c <HAL_OSPI_Init+0x174>)
 800510e:	4013      	ands	r3, r2
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	68d1      	ldr	r1, [r2, #12]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6912      	ldr	r2, [r2, #16]
 8005118:	3a01      	subs	r2, #1
 800511a:	0412      	lsls	r2, r2, #16
 800511c:	4311      	orrs	r1, r2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6952      	ldr	r2, [r2, #20]
 8005122:	3a01      	subs	r2, #1
 8005124:	0212      	lsls	r2, r2, #8
 8005126:	4311      	orrs	r1, r2
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800512c:	4311      	orrs	r1, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	69d2      	ldr	r2, [r2, #28]
 8005132:	4311      	orrs	r1, r2
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	430b      	orrs	r3, r1
 800513a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1a      	ldr	r2, [r3, #32]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005156:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800516c:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	3b01      	subs	r3, #1
 800517e:	021a      	lsls	r2, r3, #8
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2200      	movs	r2, #0
 8005192:	2120      	movs	r1, #32
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fdc9 	bl	8005d2c <OSPI_WaitFlagStateUntilTimeout>
 800519a:	4603      	mov	r3, r0
 800519c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800519e:	7bfb      	ldrb	r3, [r7, #15]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d146      	bne.n	8005232 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b2:	1e5a      	subs	r2, r3, #1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80051da:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f042 0201 	orr.w	r2, r2, #1
 8005200:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	2b02      	cmp	r3, #2
 8005208:	d107      	bne.n	800521a <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f042 0202 	orr.w	r2, r2, #2
 8005218:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005222:	d103      	bne.n	800522c <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	651a      	str	r2, [r3, #80]	@ 0x50
 800522a:	e002      	b.n	8005232 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8005232:	7bfb      	ldrb	r3, [r7, #15]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	f8e0c0f4 	.word	0xf8e0c0f4

08005240 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b088      	sub	sp, #32
 8005244:	af02      	add	r7, sp, #8
 8005246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800524c:	f7fe fe78 	bl	8003f40 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005256:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	d104      	bne.n	800526c <HAL_OSPI_Abort+0x2c>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d052      	beq.n	8005312 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	2b00      	cmp	r3, #0
 8005278:	d014      	beq.n	80052a4 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0204 	bic.w	r2, r2, #4
 8005288:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff f84c 	bl	800432c <HAL_DMA_Abort>
 8005294:	4603      	mov	r3, r0
 8005296:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8005298:	7dfb      	ldrb	r3, [r7, #23]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2204      	movs	r2, #4
 80052a2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d02b      	beq.n	800530a <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0202 	orr.w	r2, r2, #2
 80052c0:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	2201      	movs	r2, #1
 80052cc:	2102      	movs	r1, #2
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fd2c 	bl	8005d2c <OSPI_WaitFlagStateUntilTimeout>
 80052d4:	4603      	mov	r3, r0
 80052d6:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d11f      	bne.n	800531e <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2202      	movs	r2, #2
 80052e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	2200      	movs	r2, #0
 80052f0:	2120      	movs	r1, #32
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fd1a 	bl	8005d2c <OSPI_WaitFlagStateUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80052fc:	7dfb      	ldrb	r3, [r7, #23]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10d      	bne.n	800531e <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2202      	movs	r2, #2
 8005306:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005308:	e009      	b.n	800531e <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2202      	movs	r2, #2
 800530e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005310:	e005      	b.n	800531e <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2210      	movs	r2, #16
 800531a:	655a      	str	r2, [r3, #84]	@ 0x54
 800531c:	e000      	b.n	8005320 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800531e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8005320:	7dfb      	ldrb	r3, [r7, #23]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b094      	sub	sp, #80	@ 0x50
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a9d      	ldr	r2, [pc, #628]	@ (80055dc <HAL_OSPIM_Config+0x294>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d105      	bne.n	8005376 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 800536e:	2301      	movs	r3, #1
 8005370:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8005374:	e004      	b.n	8005380 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8005376:	2301      	movs	r3, #1
 8005378:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005380:	2300      	movs	r3, #0
 8005382:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005386:	e01d      	b.n	80053c4 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8005388:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800538c:	3301      	adds	r3, #1
 800538e:	b2d8      	uxtb	r0, r3
 8005390:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8005394:	f107 0114 	add.w	r1, r7, #20
 8005398:	4613      	mov	r3, r2
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	4413      	add	r3, r2
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	440b      	add	r3, r1
 80053a2:	4619      	mov	r1, r3
 80053a4:	f000 fd02 	bl	8005dac <OSPIM_GetConfig>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d005      	beq.n	80053ba <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2208      	movs	r2, #8
 80053b8:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80053ba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80053be:	3301      	adds	r3, #1
 80053c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80053c4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d9dd      	bls.n	8005388 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80053cc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f040 849e 	bne.w	8005d12 <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80053d6:	4b81      	ldr	r3, [pc, #516]	@ (80055dc <HAL_OSPIM_Config+0x294>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00b      	beq.n	80053fa <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80053e2:	4b7e      	ldr	r3, [pc, #504]	@ (80055dc <HAL_OSPIM_Config+0x294>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a7d      	ldr	r2, [pc, #500]	@ (80055dc <HAL_OSPIM_Config+0x294>)
 80053e8:	f023 0301 	bic.w	r3, r3, #1
 80053ec:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80053ee:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80053f2:	f043 0301 	orr.w	r3, r3, #1
 80053f6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80053fa:	4b79      	ldr	r3, [pc, #484]	@ (80055e0 <HAL_OSPIM_Config+0x298>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00b      	beq.n	800541e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005406:	4b76      	ldr	r3, [pc, #472]	@ (80055e0 <HAL_OSPIM_Config+0x298>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a75      	ldr	r2, [pc, #468]	@ (80055e0 <HAL_OSPIM_Config+0x298>)
 800540c:	f023 0301 	bic.w	r3, r3, #1
 8005410:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8005412:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005416:	f043 0302 	orr.w	r3, r3, #2
 800541a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800541e:	4971      	ldr	r1, [pc, #452]	@ (80055e4 <HAL_OSPIM_Config+0x29c>)
 8005420:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005422:	4613      	mov	r3, r2
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	4413      	add	r3, r2
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	3350      	adds	r3, #80	@ 0x50
 800542c:	443b      	add	r3, r7
 800542e:	3b34      	subs	r3, #52	@ 0x34
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3b01      	subs	r3, #1
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	440b      	add	r3, r1
 8005438:	6859      	ldr	r1, [r3, #4]
 800543a:	486a      	ldr	r0, [pc, #424]	@ (80055e4 <HAL_OSPIM_Config+0x29c>)
 800543c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800543e:	4613      	mov	r3, r2
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	4413      	add	r3, r2
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	3350      	adds	r3, #80	@ 0x50
 8005448:	443b      	add	r3, r7
 800544a:	3b34      	subs	r3, #52	@ 0x34
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3b01      	subs	r3, #1
 8005450:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4403      	add	r3, r0
 8005458:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800545a:	4b62      	ldr	r3, [pc, #392]	@ (80055e4 <HAL_OSPIM_Config+0x29c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 80c0 	beq.w	80055e8 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8005468:	4b5e      	ldr	r3, [pc, #376]	@ (80055e4 <HAL_OSPIM_Config+0x29c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a5d      	ldr	r2, [pc, #372]	@ (80055e4 <HAL_OSPIM_Config+0x29c>)
 800546e:	f023 0301 	bic.w	r3, r3, #1
 8005472:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8005474:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005478:	2b01      	cmp	r3, #1
 800547a:	f040 8162 	bne.w	8005742 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800547e:	4959      	ldr	r1, [pc, #356]	@ (80055e4 <HAL_OSPIM_Config+0x29c>)
 8005480:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005484:	4613      	mov	r3, r2
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	4413      	add	r3, r2
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	3350      	adds	r3, #80	@ 0x50
 800548e:	443b      	add	r3, r7
 8005490:	3b3c      	subs	r3, #60	@ 0x3c
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3b01      	subs	r3, #1
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	440b      	add	r3, r1
 800549a:	6859      	ldr	r1, [r3, #4]
 800549c:	4851      	ldr	r0, [pc, #324]	@ (80055e4 <HAL_OSPIM_Config+0x29c>)
 800549e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80054a2:	4613      	mov	r3, r2
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	4413      	add	r3, r2
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	3350      	adds	r3, #80	@ 0x50
 80054ac:	443b      	add	r3, r7
 80054ae:	3b3c      	subs	r3, #60	@ 0x3c
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	f041 0202 	orr.w	r2, r1, #2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4403      	add	r3, r0
 80054bc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80054be:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80054c2:	4613      	mov	r3, r2
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	4413      	add	r3, r2
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	3350      	adds	r3, #80	@ 0x50
 80054cc:	443b      	add	r3, r7
 80054ce:	3b38      	subs	r3, #56	@ 0x38
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d01f      	beq.n	8005516 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 80054d6:	4943      	ldr	r1, [pc, #268]	@ (80055e4 <HAL_OSPIM_Config+0x29c>)
 80054d8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80054dc:	4613      	mov	r3, r2
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	4413      	add	r3, r2
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	3350      	adds	r3, #80	@ 0x50
 80054e6:	443b      	add	r3, r7
 80054e8:	3b38      	subs	r3, #56	@ 0x38
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3b01      	subs	r3, #1
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	440b      	add	r3, r1
 80054f2:	6859      	ldr	r1, [r3, #4]
 80054f4:	483b      	ldr	r0, [pc, #236]	@ (80055e4 <HAL_OSPIM_Config+0x29c>)
 80054f6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80054fa:	4613      	mov	r3, r2
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	4413      	add	r3, r2
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	3350      	adds	r3, #80	@ 0x50
 8005504:	443b      	add	r3, r7
 8005506:	3b38      	subs	r3, #56	@ 0x38
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3b01      	subs	r3, #1
 800550c:	f041 0220 	orr.w	r2, r1, #32
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4403      	add	r3, r0
 8005514:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005516:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800551a:	4613      	mov	r3, r2
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	4413      	add	r3, r2
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	3350      	adds	r3, #80	@ 0x50
 8005524:	443b      	add	r3, r7
 8005526:	3b30      	subs	r3, #48	@ 0x30
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d023      	beq.n	8005576 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800552e:	492d      	ldr	r1, [pc, #180]	@ (80055e4 <HAL_OSPIM_Config+0x29c>)
 8005530:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005534:	4613      	mov	r3, r2
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	4413      	add	r3, r2
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	3350      	adds	r3, #80	@ 0x50
 800553e:	443b      	add	r3, r7
 8005540:	3b30      	subs	r3, #48	@ 0x30
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3b01      	subs	r3, #1
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	6859      	ldr	r1, [r3, #4]
 8005550:	4824      	ldr	r0, [pc, #144]	@ (80055e4 <HAL_OSPIM_Config+0x29c>)
 8005552:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005556:	4613      	mov	r3, r2
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	4413      	add	r3, r2
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	3350      	adds	r3, #80	@ 0x50
 8005560:	443b      	add	r3, r7
 8005562:	3b30      	subs	r3, #48	@ 0x30
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3b01      	subs	r3, #1
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4403      	add	r3, r0
 8005574:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005576:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800557a:	4613      	mov	r3, r2
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	4413      	add	r3, r2
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	3350      	adds	r3, #80	@ 0x50
 8005584:	443b      	add	r3, r7
 8005586:	3b2c      	subs	r3, #44	@ 0x2c
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 80d9 	beq.w	8005742 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8005590:	4914      	ldr	r1, [pc, #80]	@ (80055e4 <HAL_OSPIM_Config+0x29c>)
 8005592:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005596:	4613      	mov	r3, r2
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	4413      	add	r3, r2
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	3350      	adds	r3, #80	@ 0x50
 80055a0:	443b      	add	r3, r7
 80055a2:	3b2c      	subs	r3, #44	@ 0x2c
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	6859      	ldr	r1, [r3, #4]
 80055b2:	480c      	ldr	r0, [pc, #48]	@ (80055e4 <HAL_OSPIM_Config+0x29c>)
 80055b4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80055b8:	4613      	mov	r3, r2
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	4413      	add	r3, r2
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	3350      	adds	r3, #80	@ 0x50
 80055c2:	443b      	add	r3, r7
 80055c4:	3b2c      	subs	r3, #44	@ 0x2c
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4403      	add	r3, r0
 80055d6:	605a      	str	r2, [r3, #4]
 80055d8:	e0b3      	b.n	8005742 <HAL_OSPIM_Config+0x3fa>
 80055da:	bf00      	nop
 80055dc:	420d1400 	.word	0x420d1400
 80055e0:	420d2400 	.word	0x420d2400
 80055e4:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80055e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055ea:	4613      	mov	r3, r2
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	4413      	add	r3, r2
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	3350      	adds	r3, #80	@ 0x50
 80055f4:	443b      	add	r3, r7
 80055f6:	3b3c      	subs	r3, #60	@ 0x3c
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 80a1 	beq.w	8005742 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005600:	4993      	ldr	r1, [pc, #588]	@ (8005850 <HAL_OSPIM_Config+0x508>)
 8005602:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005604:	4613      	mov	r3, r2
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	4413      	add	r3, r2
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	3350      	adds	r3, #80	@ 0x50
 800560e:	443b      	add	r3, r7
 8005610:	3b3c      	subs	r3, #60	@ 0x3c
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3b01      	subs	r3, #1
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	6859      	ldr	r1, [r3, #4]
 800561c:	488c      	ldr	r0, [pc, #560]	@ (8005850 <HAL_OSPIM_Config+0x508>)
 800561e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005620:	4613      	mov	r3, r2
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	4413      	add	r3, r2
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	3350      	adds	r3, #80	@ 0x50
 800562a:	443b      	add	r3, r7
 800562c:	3b3c      	subs	r3, #60	@ 0x3c
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3b01      	subs	r3, #1
 8005632:	f021 0201 	bic.w	r2, r1, #1
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4403      	add	r3, r0
 800563a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800563c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800563e:	4613      	mov	r3, r2
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	4413      	add	r3, r2
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	3350      	adds	r3, #80	@ 0x50
 8005648:	443b      	add	r3, r7
 800564a:	3b38      	subs	r3, #56	@ 0x38
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d01d      	beq.n	800568e <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005652:	497f      	ldr	r1, [pc, #508]	@ (8005850 <HAL_OSPIM_Config+0x508>)
 8005654:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005656:	4613      	mov	r3, r2
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	4413      	add	r3, r2
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	3350      	adds	r3, #80	@ 0x50
 8005660:	443b      	add	r3, r7
 8005662:	3b38      	subs	r3, #56	@ 0x38
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3b01      	subs	r3, #1
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	440b      	add	r3, r1
 800566c:	6859      	ldr	r1, [r3, #4]
 800566e:	4878      	ldr	r0, [pc, #480]	@ (8005850 <HAL_OSPIM_Config+0x508>)
 8005670:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005672:	4613      	mov	r3, r2
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	4413      	add	r3, r2
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	3350      	adds	r3, #80	@ 0x50
 800567c:	443b      	add	r3, r7
 800567e:	3b38      	subs	r3, #56	@ 0x38
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3b01      	subs	r3, #1
 8005684:	f021 0210 	bic.w	r2, r1, #16
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4403      	add	r3, r0
 800568c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800568e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005690:	4613      	mov	r3, r2
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	4413      	add	r3, r2
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	3350      	adds	r3, #80	@ 0x50
 800569a:	443b      	add	r3, r7
 800569c:	3b30      	subs	r3, #48	@ 0x30
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d021      	beq.n	80056e8 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80056a4:	496a      	ldr	r1, [pc, #424]	@ (8005850 <HAL_OSPIM_Config+0x508>)
 80056a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056a8:	4613      	mov	r3, r2
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	4413      	add	r3, r2
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	3350      	adds	r3, #80	@ 0x50
 80056b2:	443b      	add	r3, r7
 80056b4:	3b30      	subs	r3, #48	@ 0x30
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	6859      	ldr	r1, [r3, #4]
 80056c4:	4862      	ldr	r0, [pc, #392]	@ (8005850 <HAL_OSPIM_Config+0x508>)
 80056c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056c8:	4613      	mov	r3, r2
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	4413      	add	r3, r2
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	3350      	adds	r3, #80	@ 0x50
 80056d2:	443b      	add	r3, r7
 80056d4:	3b30      	subs	r3, #48	@ 0x30
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3b01      	subs	r3, #1
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4403      	add	r3, r0
 80056e6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80056e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056ea:	4613      	mov	r3, r2
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	4413      	add	r3, r2
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	3350      	adds	r3, #80	@ 0x50
 80056f4:	443b      	add	r3, r7
 80056f6:	3b2c      	subs	r3, #44	@ 0x2c
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d021      	beq.n	8005742 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80056fe:	4954      	ldr	r1, [pc, #336]	@ (8005850 <HAL_OSPIM_Config+0x508>)
 8005700:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005702:	4613      	mov	r3, r2
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	4413      	add	r3, r2
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	3350      	adds	r3, #80	@ 0x50
 800570c:	443b      	add	r3, r7
 800570e:	3b2c      	subs	r3, #44	@ 0x2c
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3b01      	subs	r3, #1
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	440b      	add	r3, r1
 800571c:	6859      	ldr	r1, [r3, #4]
 800571e:	484c      	ldr	r0, [pc, #304]	@ (8005850 <HAL_OSPIM_Config+0x508>)
 8005720:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005722:	4613      	mov	r3, r2
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	4413      	add	r3, r2
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	3350      	adds	r3, #80	@ 0x50
 800572c:	443b      	add	r3, r7
 800572e:	3b2c      	subs	r3, #44	@ 0x2c
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3b01      	subs	r3, #1
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4403      	add	r3, r0
 8005740:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	6819      	ldr	r1, [r3, #0]
 8005746:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800574a:	4613      	mov	r3, r2
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	4413      	add	r3, r2
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	3350      	adds	r3, #80	@ 0x50
 8005754:	443b      	add	r3, r7
 8005756:	3b3c      	subs	r3, #60	@ 0x3c
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4299      	cmp	r1, r3
 800575c:	d038      	beq.n	80057d0 <HAL_OSPIM_Config+0x488>
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	6859      	ldr	r1, [r3, #4]
 8005762:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005766:	4613      	mov	r3, r2
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	4413      	add	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	3350      	adds	r3, #80	@ 0x50
 8005770:	443b      	add	r3, r7
 8005772:	3b38      	subs	r3, #56	@ 0x38
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4299      	cmp	r1, r3
 8005778:	d02a      	beq.n	80057d0 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	6899      	ldr	r1, [r3, #8]
 800577e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005782:	4613      	mov	r3, r2
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	4413      	add	r3, r2
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	3350      	adds	r3, #80	@ 0x50
 800578c:	443b      	add	r3, r7
 800578e:	3b34      	subs	r3, #52	@ 0x34
 8005790:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8005792:	4299      	cmp	r1, r3
 8005794:	d01c      	beq.n	80057d0 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	68d9      	ldr	r1, [r3, #12]
 800579a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800579e:	4613      	mov	r3, r2
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	4413      	add	r3, r2
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	3350      	adds	r3, #80	@ 0x50
 80057a8:	443b      	add	r3, r7
 80057aa:	3b30      	subs	r3, #48	@ 0x30
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4299      	cmp	r1, r3
 80057b0:	d00e      	beq.n	80057d0 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	6919      	ldr	r1, [r3, #16]
 80057b6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80057ba:	4613      	mov	r3, r2
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	4413      	add	r3, r2
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	3350      	adds	r3, #80	@ 0x50
 80057c4:	443b      	add	r3, r7
 80057c6:	3b2c      	subs	r3, #44	@ 0x2c
 80057c8:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80057ca:	4299      	cmp	r1, r3
 80057cc:	f040 810e 	bne.w	80059ec <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	6819      	ldr	r1, [r3, #0]
 80057d4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80057d8:	4613      	mov	r3, r2
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	4413      	add	r3, r2
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	3350      	adds	r3, #80	@ 0x50
 80057e2:	443b      	add	r3, r7
 80057e4:	3b3c      	subs	r3, #60	@ 0x3c
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4299      	cmp	r1, r3
 80057ea:	d133      	bne.n	8005854 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	6859      	ldr	r1, [r3, #4]
 80057f0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80057f4:	4613      	mov	r3, r2
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	4413      	add	r3, r2
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	3350      	adds	r3, #80	@ 0x50
 80057fe:	443b      	add	r3, r7
 8005800:	3b38      	subs	r3, #56	@ 0x38
 8005802:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8005804:	4299      	cmp	r1, r3
 8005806:	d125      	bne.n	8005854 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	68d9      	ldr	r1, [r3, #12]
 800580c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005810:	4613      	mov	r3, r2
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	4413      	add	r3, r2
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	3350      	adds	r3, #80	@ 0x50
 800581a:	443b      	add	r3, r7
 800581c:	3b30      	subs	r3, #48	@ 0x30
 800581e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8005820:	4299      	cmp	r1, r3
 8005822:	d117      	bne.n	8005854 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	6919      	ldr	r1, [r3, #16]
 8005828:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800582c:	4613      	mov	r3, r2
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	4413      	add	r3, r2
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	3350      	adds	r3, #80	@ 0x50
 8005836:	443b      	add	r3, r7
 8005838:	3b2c      	subs	r3, #44	@ 0x2c
 800583a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800583c:	4299      	cmp	r1, r3
 800583e:	d109      	bne.n	8005854 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8005840:	4b03      	ldr	r3, [pc, #12]	@ (8005850 <HAL_OSPIM_Config+0x508>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a02      	ldr	r2, [pc, #8]	@ (8005850 <HAL_OSPIM_Config+0x508>)
 8005846:	f043 0301 	orr.w	r3, r3, #1
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	e0ce      	b.n	80059ec <HAL_OSPIM_Config+0x6a4>
 800584e:	bf00      	nop
 8005850:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005854:	49a4      	ldr	r1, [pc, #656]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 8005856:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800585a:	4613      	mov	r3, r2
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	4413      	add	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	3350      	adds	r3, #80	@ 0x50
 8005864:	443b      	add	r3, r7
 8005866:	3b3c      	subs	r3, #60	@ 0x3c
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3b01      	subs	r3, #1
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	440b      	add	r3, r1
 8005870:	6859      	ldr	r1, [r3, #4]
 8005872:	489d      	ldr	r0, [pc, #628]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 8005874:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005878:	4613      	mov	r3, r2
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	4413      	add	r3, r2
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	3350      	adds	r3, #80	@ 0x50
 8005882:	443b      	add	r3, r7
 8005884:	3b3c      	subs	r3, #60	@ 0x3c
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3b01      	subs	r3, #1
 800588a:	f021 0201 	bic.w	r2, r1, #1
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4403      	add	r3, r0
 8005892:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005894:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005898:	4613      	mov	r3, r2
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	4413      	add	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	3350      	adds	r3, #80	@ 0x50
 80058a2:	443b      	add	r3, r7
 80058a4:	3b38      	subs	r3, #56	@ 0x38
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d01f      	beq.n	80058ec <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80058ac:	498e      	ldr	r1, [pc, #568]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 80058ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80058b2:	4613      	mov	r3, r2
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	4413      	add	r3, r2
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	3350      	adds	r3, #80	@ 0x50
 80058bc:	443b      	add	r3, r7
 80058be:	3b38      	subs	r3, #56	@ 0x38
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3b01      	subs	r3, #1
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	440b      	add	r3, r1
 80058c8:	6859      	ldr	r1, [r3, #4]
 80058ca:	4887      	ldr	r0, [pc, #540]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 80058cc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80058d0:	4613      	mov	r3, r2
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	4413      	add	r3, r2
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	3350      	adds	r3, #80	@ 0x50
 80058da:	443b      	add	r3, r7
 80058dc:	3b38      	subs	r3, #56	@ 0x38
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3b01      	subs	r3, #1
 80058e2:	f021 0210 	bic.w	r2, r1, #16
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4403      	add	r3, r0
 80058ea:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80058ec:	497e      	ldr	r1, [pc, #504]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 80058ee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80058f2:	4613      	mov	r3, r2
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	4413      	add	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	3350      	adds	r3, #80	@ 0x50
 80058fc:	443b      	add	r3, r7
 80058fe:	3b34      	subs	r3, #52	@ 0x34
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3b01      	subs	r3, #1
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	440b      	add	r3, r1
 8005908:	6859      	ldr	r1, [r3, #4]
 800590a:	4877      	ldr	r0, [pc, #476]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 800590c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005910:	4613      	mov	r3, r2
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	4413      	add	r3, r2
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	3350      	adds	r3, #80	@ 0x50
 800591a:	443b      	add	r3, r7
 800591c:	3b34      	subs	r3, #52	@ 0x34
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3b01      	subs	r3, #1
 8005922:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4403      	add	r3, r0
 800592a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800592c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005930:	4613      	mov	r3, r2
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	4413      	add	r3, r2
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	3350      	adds	r3, #80	@ 0x50
 800593a:	443b      	add	r3, r7
 800593c:	3b30      	subs	r3, #48	@ 0x30
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d023      	beq.n	800598c <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005944:	4968      	ldr	r1, [pc, #416]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 8005946:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800594a:	4613      	mov	r3, r2
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	4413      	add	r3, r2
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	3350      	adds	r3, #80	@ 0x50
 8005954:	443b      	add	r3, r7
 8005956:	3b30      	subs	r3, #48	@ 0x30
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3b01      	subs	r3, #1
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	440b      	add	r3, r1
 8005964:	6859      	ldr	r1, [r3, #4]
 8005966:	4860      	ldr	r0, [pc, #384]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 8005968:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800596c:	4613      	mov	r3, r2
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	4413      	add	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	3350      	adds	r3, #80	@ 0x50
 8005976:	443b      	add	r3, r7
 8005978:	3b30      	subs	r3, #48	@ 0x30
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3b01      	subs	r3, #1
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4403      	add	r3, r0
 800598a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800598c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005990:	4613      	mov	r3, r2
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	4413      	add	r3, r2
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	3350      	adds	r3, #80	@ 0x50
 800599a:	443b      	add	r3, r7
 800599c:	3b2c      	subs	r3, #44	@ 0x2c
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d023      	beq.n	80059ec <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80059a4:	4950      	ldr	r1, [pc, #320]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 80059a6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80059aa:	4613      	mov	r3, r2
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	4413      	add	r3, r2
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	3350      	adds	r3, #80	@ 0x50
 80059b4:	443b      	add	r3, r7
 80059b6:	3b2c      	subs	r3, #44	@ 0x2c
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	6859      	ldr	r1, [r3, #4]
 80059c6:	4848      	ldr	r0, [pc, #288]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 80059c8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80059cc:	4613      	mov	r3, r2
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	4413      	add	r3, r2
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	3350      	adds	r3, #80	@ 0x50
 80059d6:	443b      	add	r3, r7
 80059d8:	3b2c      	subs	r3, #44	@ 0x2c
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3b01      	subs	r3, #1
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4403      	add	r3, r0
 80059ea:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80059ec:	4a3e      	ldr	r2, [pc, #248]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a00:	025b      	lsls	r3, r3, #9
 8005a02:	431a      	orrs	r2, r3
 8005a04:	4938      	ldr	r1, [pc, #224]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	440b      	add	r3, r1
 8005a14:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d018      	beq.n	8005a50 <HAL_OSPIM_Config+0x708>
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a26:	d813      	bhi.n	8005a50 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	1e5a      	subs	r2, r3, #1
 8005a2e:	4b2e      	ldr	r3, [pc, #184]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	0c1b      	lsrs	r3, r3, #16
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d90a      	bls.n	8005a50 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8005a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	041b      	lsls	r3, r3, #16
 8005a4a:	4927      	ldr	r1, [pc, #156]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8005a50:	4b25      	ldr	r3, [pc, #148]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 809a 	beq.w	8005b92 <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8005a5e:	4a22      	ldr	r2, [pc, #136]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f023 0203 	bic.w	r2, r3, #3
 8005a70:	491d      	ldr	r1, [pc, #116]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	f042 0201 	orr.w	r2, r2, #1
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	440b      	add	r3, r1
 8005a80:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d011      	beq.n	8005aae <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8005a8a:	4a17      	ldr	r2, [pc, #92]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a9c:	4912      	ldr	r1, [pc, #72]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	f042 0210 	orr.w	r2, r2, #16
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	440b      	add	r3, r1
 8005aac:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d018      	beq.n	8005aec <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005aba:	4a0b      	ldr	r2, [pc, #44]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005ad0:	4905      	ldr	r1, [pc, #20]	@ (8005ae8 <HAL_OSPIM_Config+0x7a0>)
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	440b      	add	r3, r1
 8005ae4:	605a      	str	r2, [r3, #4]
 8005ae6:	e01b      	b.n	8005b20 <HAL_OSPIM_Config+0x7d8>
 8005ae8:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d015      	beq.n	8005b20 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005af4:	4a8a      	ldr	r2, [pc, #552]	@ (8005d20 <HAL_OSPIM_Config+0x9d8>)
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005b0a:	4985      	ldr	r1, [pc, #532]	@ (8005d20 <HAL_OSPIM_Config+0x9d8>)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	3b01      	subs	r3, #1
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d016      	beq.n	8005b5a <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005b2c:	4a7c      	ldr	r2, [pc, #496]	@ (8005d20 <HAL_OSPIM_Config+0x9d8>)
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005b42:	4977      	ldr	r1, [pc, #476]	@ (8005d20 <HAL_OSPIM_Config+0x9d8>)
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	440b      	add	r3, r1
 8005b56:	605a      	str	r2, [r3, #4]
 8005b58:	e0c3      	b.n	8005ce2 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 80bf 	beq.w	8005ce2 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005b64:	4a6e      	ldr	r2, [pc, #440]	@ (8005d20 <HAL_OSPIM_Config+0x9d8>)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005b7a:	4969      	ldr	r1, [pc, #420]	@ (8005d20 <HAL_OSPIM_Config+0x9d8>)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	605a      	str	r2, [r3, #4]
 8005b90:	e0a7      	b.n	8005ce2 <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8005b92:	4a63      	ldr	r2, [pc, #396]	@ (8005d20 <HAL_OSPIM_Config+0x9d8>)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f023 0203 	bic.w	r2, r3, #3
 8005ba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	495d      	ldr	r1, [pc, #372]	@ (8005d20 <HAL_OSPIM_Config+0x9d8>)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	f042 0201 	orr.w	r2, r2, #1
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	440b      	add	r3, r1
 8005bba:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d014      	beq.n	8005bee <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8005bc4:	4a56      	ldr	r2, [pc, #344]	@ (8005d20 <HAL_OSPIM_Config+0x9d8>)
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005bd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bd8:	015b      	lsls	r3, r3, #5
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	4950      	ldr	r1, [pc, #320]	@ (8005d20 <HAL_OSPIM_Config+0x9d8>)
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	f042 0210 	orr.w	r2, r2, #16
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	440b      	add	r3, r1
 8005bec:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d019      	beq.n	8005c2e <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005bfa:	4a49      	ldr	r2, [pc, #292]	@ (8005d20 <HAL_OSPIM_Config+0x9d8>)
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005c10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c12:	049b      	lsls	r3, r3, #18
 8005c14:	431a      	orrs	r2, r3
 8005c16:	4942      	ldr	r1, [pc, #264]	@ (8005d20 <HAL_OSPIM_Config+0x9d8>)
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	440b      	add	r3, r1
 8005c2a:	605a      	str	r2, [r3, #4]
 8005c2c:	e01c      	b.n	8005c68 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d018      	beq.n	8005c68 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005c36:	4a3a      	ldr	r2, [pc, #232]	@ (8005d20 <HAL_OSPIM_Config+0x9d8>)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005c4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c4e:	069b      	lsls	r3, r3, #26
 8005c50:	431a      	orrs	r2, r3
 8005c52:	4933      	ldr	r1, [pc, #204]	@ (8005d20 <HAL_OSPIM_Config+0x9d8>)
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	440b      	add	r3, r1
 8005c66:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d019      	beq.n	8005ca8 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005c74:	4a2a      	ldr	r2, [pc, #168]	@ (8005d20 <HAL_OSPIM_Config+0x9d8>)
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c8c:	049b      	lsls	r3, r3, #18
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	4923      	ldr	r1, [pc, #140]	@ (8005d20 <HAL_OSPIM_Config+0x9d8>)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	3b01      	subs	r3, #1
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	605a      	str	r2, [r3, #4]
 8005ca6:	e01c      	b.n	8005ce2 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d018      	beq.n	8005ce2 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d20 <HAL_OSPIM_Config+0x9d8>)
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cc8:	069b      	lsls	r3, r3, #26
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	4914      	ldr	r1, [pc, #80]	@ (8005d20 <HAL_OSPIM_Config+0x9d8>)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	440b      	add	r3, r1
 8005ce0:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8005ce2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d005      	beq.n	8005cfa <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005cee:	4b0d      	ldr	r3, [pc, #52]	@ (8005d24 <HAL_OSPIM_Config+0x9dc>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8005d24 <HAL_OSPIM_Config+0x9dc>)
 8005cf4:	f043 0301 	orr.w	r3, r3, #1
 8005cf8:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8005cfa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005d06:	4b08      	ldr	r3, [pc, #32]	@ (8005d28 <HAL_OSPIM_Config+0x9e0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a07      	ldr	r2, [pc, #28]	@ (8005d28 <HAL_OSPIM_Config+0x9e0>)
 8005d0c:	f043 0301 	orr.w	r3, r3, #1
 8005d10:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8005d12:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3750      	adds	r7, #80	@ 0x50
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	420c4000 	.word	0x420c4000
 8005d24:	420d1400 	.word	0x420d1400
 8005d28:	420d2400 	.word	0x420d2400

08005d2c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	603b      	str	r3, [r7, #0]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005d3c:	e022      	b.n	8005d84 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d44:	d01e      	beq.n	8005d84 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d46:	f7fe f8fb 	bl	8003f40 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d302      	bcc.n	8005d5c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d113      	bne.n	8005d84 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6a1a      	ldr	r2, [r3, #32]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	401a      	ands	r2, r3
 8005d66:	79fb      	ldrb	r3, [r7, #7]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d00b      	beq.n	8005d84 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d72:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d78:	f043 0201 	orr.w	r2, r3, #1
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e00e      	b.n	8005da2 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6a1a      	ldr	r2, [r3, #32]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	bf14      	ite	ne
 8005d92:	2301      	movne	r3, #1
 8005d94:	2300      	moveq	r3, #0
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	461a      	mov	r2, r3
 8005d9a:	79fb      	ldrb	r3, [r7, #7]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d1ce      	bne.n	8005d3e <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	6039      	str	r1, [r7, #0]
 8005db6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8005db8:	2300      	movs	r3, #0
 8005dba:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d005      	beq.n	8005dd2 <OSPIM_GetConfig+0x26>
 8005dc6:	79fb      	ldrb	r3, [r7, #7]
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d802      	bhi.n	8005dd2 <OSPIM_GetConfig+0x26>
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d102      	bne.n	8005dd8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	75fb      	strb	r3, [r7, #23]
 8005dd6:	e098      	b.n	8005f0a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2200      	movs	r2, #0
 8005de2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2200      	movs	r2, #0
 8005de8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2200      	movs	r2, #0
 8005dee:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	2200      	movs	r2, #0
 8005df4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d10b      	bne.n	8005e14 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8005dfc:	4b46      	ldr	r3, [pc, #280]	@ (8005f18 <OSPIM_GetConfig+0x16c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d102      	bne.n	8005e0e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8005e08:	4b44      	ldr	r3, [pc, #272]	@ (8005f1c <OSPIM_GetConfig+0x170>)
 8005e0a:	613b      	str	r3, [r7, #16]
 8005e0c:	e002      	b.n	8005e14 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8005e0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e12:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005e14:	2300      	movs	r3, #0
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e074      	b.n	8005f04 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8005e1a:	4a3f      	ldr	r2, [pc, #252]	@ (8005f18 <OSPIM_GetConfig+0x16c>)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00a      	beq.n	8005e46 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	4053      	eors	r3, r2
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d103      	bne.n	8005e46 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	1c5a      	adds	r2, r3, #1
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00a      	beq.n	8005e66 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4053      	eors	r3, r2
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d103      	bne.n	8005e66 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00a      	beq.n	8005e86 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	4053      	eors	r3, r2
 8005e76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d103      	bne.n	8005e86 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d018      	beq.n	8005ec2 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	4053      	eors	r3, r2
 8005e96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d111      	bne.n	8005ec2 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	60da      	str	r2, [r3, #12]
 8005eb4:	e005      	b.n	8005ec2 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d018      	beq.n	8005efe <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	4053      	eors	r3, r2
 8005ed2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d111      	bne.n	8005efe <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d106      	bne.n	8005ef2 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	611a      	str	r2, [r3, #16]
 8005ef0:	e005      	b.n	8005efe <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3301      	adds	r3, #1
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d987      	bls.n	8005e1a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	420c4000 	.word	0x420c4000
 8005f1c:	04040222 	.word	0x04040222

08005f20 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f042 0202 	orr.w	r2, r2, #2
 8005f3c:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2208      	movs	r2, #8
 8005f42:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a15      	ldr	r2, [pc, #84]	@ (8005fa0 <HAL_OSPI_DLYB_SetConfig+0x80>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d109      	bne.n	8005f62 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8005f4e:	4815      	ldr	r0, [pc, #84]	@ (8005fa4 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8005f50:	f7ff f8aa 	bl	80050a8 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8005f54:	6839      	ldr	r1, [r7, #0]
 8005f56:	4813      	ldr	r0, [pc, #76]	@ (8005fa4 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8005f58:	f006 fed4 	bl	800cd04 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	73fb      	strb	r3, [r7, #15]
 8005f60:	e00d      	b.n	8005f7e <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a10      	ldr	r2, [pc, #64]	@ (8005fa8 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d108      	bne.n	8005f7e <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8005f6c:	480f      	ldr	r0, [pc, #60]	@ (8005fac <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8005f6e:	f7ff f89b 	bl	80050a8 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8005f72:	6839      	ldr	r1, [r7, #0]
 8005f74:	480d      	ldr	r0, [pc, #52]	@ (8005fac <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8005f76:	f006 fec5 	bl	800cd04 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7ff f95e 	bl	8005240 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0202 	bic.w	r2, r2, #2
 8005f92:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	420d1400 	.word	0x420d1400
 8005fa4:	420cf000 	.word	0x420cf000
 8005fa8:	420d2400 	.word	0x420d2400
 8005fac:	420cf400 	.word	0x420cf400

08005fb0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af02      	add	r7, sp, #8
 8005fb6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e108      	b.n	80061d4 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d106      	bne.n	8005fe2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7fc fbef 	bl	80027c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2203      	movs	r2, #3
 8005fe6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	4a7b      	ldr	r2, [pc, #492]	@ (80061dc <HAL_PCD_Init+0x22c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d102      	bne.n	8005ff8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f007 f896 	bl	800d12e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	7c1a      	ldrb	r2, [r3, #16]
 800600a:	f88d 2000 	strb.w	r2, [sp]
 800600e:	3304      	adds	r3, #4
 8006010:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006012:	f007 f85f 	bl	800d0d4 <USB_CoreInit>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e0d5      	b.n	80061d4 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2100      	movs	r1, #0
 800602e:	4618      	mov	r0, r3
 8006030:	f007 f88e 	bl	800d150 <USB_SetCurrentMode>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d005      	beq.n	8006046 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2202      	movs	r2, #2
 800603e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e0c6      	b.n	80061d4 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006046:	2300      	movs	r3, #0
 8006048:	73fb      	strb	r3, [r7, #15]
 800604a:	e04a      	b.n	80060e2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800604c:	7bfa      	ldrb	r2, [r7, #15]
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	4613      	mov	r3, r2
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	4413      	add	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	440b      	add	r3, r1
 800605a:	3315      	adds	r3, #21
 800605c:	2201      	movs	r2, #1
 800605e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006060:	7bfa      	ldrb	r2, [r7, #15]
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	4613      	mov	r3, r2
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	440b      	add	r3, r1
 800606e:	3314      	adds	r3, #20
 8006070:	7bfa      	ldrb	r2, [r7, #15]
 8006072:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006074:	7bfa      	ldrb	r2, [r7, #15]
 8006076:	7bfb      	ldrb	r3, [r7, #15]
 8006078:	b298      	uxth	r0, r3
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	4613      	mov	r3, r2
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	4413      	add	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	440b      	add	r3, r1
 8006086:	332e      	adds	r3, #46	@ 0x2e
 8006088:	4602      	mov	r2, r0
 800608a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800608c:	7bfa      	ldrb	r2, [r7, #15]
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	4613      	mov	r3, r2
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	4413      	add	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	3318      	adds	r3, #24
 800609c:	2200      	movs	r2, #0
 800609e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80060a0:	7bfa      	ldrb	r2, [r7, #15]
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	4613      	mov	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	331c      	adds	r3, #28
 80060b0:	2200      	movs	r2, #0
 80060b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80060b4:	7bfa      	ldrb	r2, [r7, #15]
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	4613      	mov	r3, r2
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	4413      	add	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	440b      	add	r3, r1
 80060c2:	3320      	adds	r3, #32
 80060c4:	2200      	movs	r2, #0
 80060c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80060c8:	7bfa      	ldrb	r2, [r7, #15]
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	4613      	mov	r3, r2
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	4413      	add	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	440b      	add	r3, r1
 80060d6:	3324      	adds	r3, #36	@ 0x24
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	3301      	adds	r3, #1
 80060e0:	73fb      	strb	r3, [r7, #15]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	791b      	ldrb	r3, [r3, #4]
 80060e6:	7bfa      	ldrb	r2, [r7, #15]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d3af      	bcc.n	800604c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060ec:	2300      	movs	r3, #0
 80060ee:	73fb      	strb	r3, [r7, #15]
 80060f0:	e044      	b.n	800617c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80060f2:	7bfa      	ldrb	r2, [r7, #15]
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	4613      	mov	r3, r2
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	4413      	add	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	440b      	add	r3, r1
 8006100:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006104:	2200      	movs	r2, #0
 8006106:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006108:	7bfa      	ldrb	r2, [r7, #15]
 800610a:	6879      	ldr	r1, [r7, #4]
 800610c:	4613      	mov	r3, r2
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	4413      	add	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	440b      	add	r3, r1
 8006116:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800611a:	7bfa      	ldrb	r2, [r7, #15]
 800611c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800611e:	7bfa      	ldrb	r2, [r7, #15]
 8006120:	6879      	ldr	r1, [r7, #4]
 8006122:	4613      	mov	r3, r2
 8006124:	00db      	lsls	r3, r3, #3
 8006126:	4413      	add	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	440b      	add	r3, r1
 800612c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006130:	2200      	movs	r2, #0
 8006132:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006134:	7bfa      	ldrb	r2, [r7, #15]
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	4613      	mov	r3, r2
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	4413      	add	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	440b      	add	r3, r1
 8006142:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006146:	2200      	movs	r2, #0
 8006148:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800614a:	7bfa      	ldrb	r2, [r7, #15]
 800614c:	6879      	ldr	r1, [r7, #4]
 800614e:	4613      	mov	r3, r2
 8006150:	00db      	lsls	r3, r3, #3
 8006152:	4413      	add	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	440b      	add	r3, r1
 8006158:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800615c:	2200      	movs	r2, #0
 800615e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006160:	7bfa      	ldrb	r2, [r7, #15]
 8006162:	6879      	ldr	r1, [r7, #4]
 8006164:	4613      	mov	r3, r2
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	4413      	add	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	440b      	add	r3, r1
 800616e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006176:	7bfb      	ldrb	r3, [r7, #15]
 8006178:	3301      	adds	r3, #1
 800617a:	73fb      	strb	r3, [r7, #15]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	791b      	ldrb	r3, [r3, #4]
 8006180:	7bfa      	ldrb	r2, [r7, #15]
 8006182:	429a      	cmp	r2, r3
 8006184:	d3b5      	bcc.n	80060f2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6818      	ldr	r0, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	7c1a      	ldrb	r2, [r3, #16]
 800618e:	f88d 2000 	strb.w	r2, [sp]
 8006192:	3304      	adds	r3, #4
 8006194:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006196:	f007 f827 	bl	800d1e8 <USB_DevInit>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e013      	b.n	80061d4 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	7b1b      	ldrb	r3, [r3, #12]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d102      	bne.n	80061c8 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f80c 	bl	80061e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f007 f9d0 	bl	800d572 <USB_DevDisconnect>

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	42040000 	.word	0x42040000

080061e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800620e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006212:	f043 0303 	orr.w	r3, r3, #3
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8006230:	4b39      	ldr	r3, [pc, #228]	@ (8006318 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006234:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006238:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	429a      	cmp	r2, r3
 8006240:	d10b      	bne.n	800625a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006248:	d905      	bls.n	8006256 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800624a:	4b33      	ldr	r3, [pc, #204]	@ (8006318 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	4a32      	ldr	r2, [pc, #200]	@ (8006318 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006250:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006254:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	e057      	b.n	800630a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006260:	d90a      	bls.n	8006278 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8006262:	4b2d      	ldr	r3, [pc, #180]	@ (8006318 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4313      	orrs	r3, r2
 800626e:	4a2a      	ldr	r2, [pc, #168]	@ (8006318 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006270:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006274:	60d3      	str	r3, [r2, #12]
 8006276:	e007      	b.n	8006288 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8006278:	4b27      	ldr	r3, [pc, #156]	@ (8006318 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006280:	4925      	ldr	r1, [pc, #148]	@ (8006318 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4313      	orrs	r3, r2
 8006286:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006288:	4b24      	ldr	r3, [pc, #144]	@ (800631c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a24      	ldr	r2, [pc, #144]	@ (8006320 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800628e:	fba2 2303 	umull	r2, r3, r2, r3
 8006292:	099b      	lsrs	r3, r3, #6
 8006294:	2232      	movs	r2, #50	@ 0x32
 8006296:	fb02 f303 	mul.w	r3, r2, r3
 800629a:	4a21      	ldr	r2, [pc, #132]	@ (8006320 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800629c:	fba2 2303 	umull	r2, r3, r2, r3
 80062a0:	099b      	lsrs	r3, r3, #6
 80062a2:	3301      	adds	r3, #1
 80062a4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80062a6:	e002      	b.n	80062ae <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80062ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006318 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d102      	bne.n	80062c0 <HAL_PWREx_ControlVoltageScaling+0x98>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1f3      	bne.n	80062a8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d01b      	beq.n	80062fe <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80062c6:	4b15      	ldr	r3, [pc, #84]	@ (800631c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a15      	ldr	r2, [pc, #84]	@ (8006320 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80062cc:	fba2 2303 	umull	r2, r3, r2, r3
 80062d0:	099b      	lsrs	r3, r3, #6
 80062d2:	2232      	movs	r2, #50	@ 0x32
 80062d4:	fb02 f303 	mul.w	r3, r2, r3
 80062d8:	4a11      	ldr	r2, [pc, #68]	@ (8006320 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80062da:	fba2 2303 	umull	r2, r3, r2, r3
 80062de:	099b      	lsrs	r3, r3, #6
 80062e0:	3301      	adds	r3, #1
 80062e2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80062e4:	e002      	b.n	80062ec <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80062ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006318 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80062ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d102      	bne.n	80062fe <HAL_PWREx_ControlVoltageScaling+0xd6>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1f3      	bne.n	80062e6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e000      	b.n	800630a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	46020800 	.word	0x46020800
 800631c:	20000000 	.word	0x20000000
 8006320:	10624dd3 	.word	0x10624dd3

08006324 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006324:	b480      	push	{r7}
 8006326:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8006328:	4b04      	ldr	r3, [pc, #16]	@ (800633c <HAL_PWREx_GetVoltageRange+0x18>)
 800632a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8006330:	4618      	mov	r0, r3
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	46020800 	.word	0x46020800

08006340 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006348:	4b22      	ldr	r3, [pc, #136]	@ (80063d4 <HAL_PWREx_ConfigSupply+0x94>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a22      	ldr	r2, [pc, #136]	@ (80063d8 <HAL_PWREx_ConfigSupply+0x98>)
 800634e:	fba2 2303 	umull	r2, r3, r2, r3
 8006352:	099b      	lsrs	r3, r3, #6
 8006354:	2232      	movs	r2, #50	@ 0x32
 8006356:	fb02 f303 	mul.w	r3, r2, r3
 800635a:	4a1f      	ldr	r2, [pc, #124]	@ (80063d8 <HAL_PWREx_ConfigSupply+0x98>)
 800635c:	fba2 2303 	umull	r2, r3, r2, r3
 8006360:	099b      	lsrs	r3, r3, #6
 8006362:	3301      	adds	r3, #1
 8006364:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d113      	bne.n	8006394 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800636c:	4b1b      	ldr	r3, [pc, #108]	@ (80063dc <HAL_PWREx_ConfigSupply+0x9c>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	4a1a      	ldr	r2, [pc, #104]	@ (80063dc <HAL_PWREx_ConfigSupply+0x9c>)
 8006372:	f023 0302 	bic.w	r3, r3, #2
 8006376:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006378:	e002      	b.n	8006380 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3b01      	subs	r3, #1
 800637e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006380:	4b16      	ldr	r3, [pc, #88]	@ (80063dc <HAL_PWREx_ConfigSupply+0x9c>)
 8006382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b02      	cmp	r3, #2
 800638a:	d116      	bne.n	80063ba <HAL_PWREx_ConfigSupply+0x7a>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f3      	bne.n	800637a <HAL_PWREx_ConfigSupply+0x3a>
 8006392:	e012      	b.n	80063ba <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8006394:	4b11      	ldr	r3, [pc, #68]	@ (80063dc <HAL_PWREx_ConfigSupply+0x9c>)
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	4a10      	ldr	r2, [pc, #64]	@ (80063dc <HAL_PWREx_ConfigSupply+0x9c>)
 800639a:	f043 0302 	orr.w	r3, r3, #2
 800639e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80063a0:	e002      	b.n	80063a8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80063a8:	4b0c      	ldr	r3, [pc, #48]	@ (80063dc <HAL_PWREx_ConfigSupply+0x9c>)
 80063aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <HAL_PWREx_ConfigSupply+0x7a>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1f3      	bne.n	80063a2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e000      	b.n	80063c6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	20000000 	.word	0x20000000
 80063d8:	10624dd3 	.word	0x10624dd3
 80063dc:	46020800 	.word	0x46020800

080063e0 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80063e4:	4b05      	ldr	r3, [pc, #20]	@ (80063fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	4a04      	ldr	r2, [pc, #16]	@ (80063fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80063ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063ee:	6113      	str	r3, [r2, #16]
}
 80063f0:	bf00      	nop
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	46020800 	.word	0x46020800

08006400 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8006404:	4b05      	ldr	r3, [pc, #20]	@ (800641c <HAL_PWREx_EnableVddIO2+0x1c>)
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	4a04      	ldr	r2, [pc, #16]	@ (800641c <HAL_PWREx_EnableVddIO2+0x1c>)
 800640a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800640e:	6113      	str	r3, [r2, #16]
}
 8006410:	bf00      	nop
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	46020800 	.word	0x46020800

08006420 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08e      	sub	sp, #56	@ 0x38
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006428:	2300      	movs	r3, #0
 800642a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d102      	bne.n	800643a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	f000 bec8 	b.w	80071ca <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800643a:	4b99      	ldr	r3, [pc, #612]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f003 030c 	and.w	r3, r3, #12
 8006442:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006444:	4b96      	ldr	r3, [pc, #600]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 8006446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006448:	f003 0303 	and.w	r3, r3, #3
 800644c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 816c 	beq.w	8006734 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800645c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645e:	2b00      	cmp	r3, #0
 8006460:	d007      	beq.n	8006472 <HAL_RCC_OscConfig+0x52>
 8006462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006464:	2b0c      	cmp	r3, #12
 8006466:	f040 80de 	bne.w	8006626 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800646a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646c:	2b01      	cmp	r3, #1
 800646e:	f040 80da 	bne.w	8006626 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d102      	bne.n	8006480 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f000 bea5 	b.w	80071ca <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006484:	4b86      	ldr	r3, [pc, #536]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d004      	beq.n	800649a <HAL_RCC_OscConfig+0x7a>
 8006490:	4b83      	ldr	r3, [pc, #524]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006498:	e005      	b.n	80064a6 <HAL_RCC_OscConfig+0x86>
 800649a:	4b81      	ldr	r3, [pc, #516]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 800649c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064a0:	041b      	lsls	r3, r3, #16
 80064a2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d255      	bcs.n	8006556 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10a      	bne.n	80064c6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b4:	4618      	mov	r0, r3
 80064b6:	f001 f9d9 	bl	800786c <RCC_SetFlashLatencyFromMSIRange>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	f000 be82 	b.w	80071ca <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80064c6:	4b76      	ldr	r3, [pc, #472]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	4a75      	ldr	r2, [pc, #468]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 80064cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80064d0:	6093      	str	r3, [r2, #8]
 80064d2:	4b73      	ldr	r3, [pc, #460]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064de:	4970      	ldr	r1, [pc, #448]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80064ec:	d309      	bcc.n	8006502 <HAL_RCC_OscConfig+0xe2>
 80064ee:	4b6c      	ldr	r3, [pc, #432]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f023 021f 	bic.w	r2, r3, #31
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	4969      	ldr	r1, [pc, #420]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	60cb      	str	r3, [r1, #12]
 8006500:	e07e      	b.n	8006600 <HAL_RCC_OscConfig+0x1e0>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006506:	2b00      	cmp	r3, #0
 8006508:	da0a      	bge.n	8006520 <HAL_RCC_OscConfig+0x100>
 800650a:	4b65      	ldr	r3, [pc, #404]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	015b      	lsls	r3, r3, #5
 8006518:	4961      	ldr	r1, [pc, #388]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 800651a:	4313      	orrs	r3, r2
 800651c:	60cb      	str	r3, [r1, #12]
 800651e:	e06f      	b.n	8006600 <HAL_RCC_OscConfig+0x1e0>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006528:	d30a      	bcc.n	8006540 <HAL_RCC_OscConfig+0x120>
 800652a:	4b5d      	ldr	r3, [pc, #372]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	029b      	lsls	r3, r3, #10
 8006538:	4959      	ldr	r1, [pc, #356]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 800653a:	4313      	orrs	r3, r2
 800653c:	60cb      	str	r3, [r1, #12]
 800653e:	e05f      	b.n	8006600 <HAL_RCC_OscConfig+0x1e0>
 8006540:	4b57      	ldr	r3, [pc, #348]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	03db      	lsls	r3, r3, #15
 800654e:	4954      	ldr	r1, [pc, #336]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 8006550:	4313      	orrs	r3, r2
 8006552:	60cb      	str	r3, [r1, #12]
 8006554:	e054      	b.n	8006600 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006556:	4b52      	ldr	r3, [pc, #328]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	4a51      	ldr	r2, [pc, #324]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 800655c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006560:	6093      	str	r3, [r2, #8]
 8006562:	4b4f      	ldr	r3, [pc, #316]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656e:	494c      	ldr	r1, [pc, #304]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 8006570:	4313      	orrs	r3, r2
 8006572:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006578:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800657c:	d309      	bcc.n	8006592 <HAL_RCC_OscConfig+0x172>
 800657e:	4b48      	ldr	r3, [pc, #288]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f023 021f 	bic.w	r2, r3, #31
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	4945      	ldr	r1, [pc, #276]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 800658c:	4313      	orrs	r3, r2
 800658e:	60cb      	str	r3, [r1, #12]
 8006590:	e028      	b.n	80065e4 <HAL_RCC_OscConfig+0x1c4>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006596:	2b00      	cmp	r3, #0
 8006598:	da0a      	bge.n	80065b0 <HAL_RCC_OscConfig+0x190>
 800659a:	4b41      	ldr	r3, [pc, #260]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	015b      	lsls	r3, r3, #5
 80065a8:	493d      	ldr	r1, [pc, #244]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60cb      	str	r3, [r1, #12]
 80065ae:	e019      	b.n	80065e4 <HAL_RCC_OscConfig+0x1c4>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b8:	d30a      	bcc.n	80065d0 <HAL_RCC_OscConfig+0x1b0>
 80065ba:	4b39      	ldr	r3, [pc, #228]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	029b      	lsls	r3, r3, #10
 80065c8:	4935      	ldr	r1, [pc, #212]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60cb      	str	r3, [r1, #12]
 80065ce:	e009      	b.n	80065e4 <HAL_RCC_OscConfig+0x1c4>
 80065d0:	4b33      	ldr	r3, [pc, #204]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	03db      	lsls	r3, r3, #15
 80065de:	4930      	ldr	r1, [pc, #192]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80065e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10a      	bne.n	8006600 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ee:	4618      	mov	r0, r3
 80065f0:	f001 f93c 	bl	800786c <RCC_SetFlashLatencyFromMSIRange>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	f000 bde5 	b.w	80071ca <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8006600:	f001 f8de 	bl	80077c0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006604:	4b27      	ldr	r3, [pc, #156]	@ (80066a4 <HAL_RCC_OscConfig+0x284>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4618      	mov	r0, r3
 800660a:	f7fd fc0f 	bl	8003e2c <HAL_InitTick>
 800660e:	4603      	mov	r3, r0
 8006610:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8006614:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 808a 	beq.w	8006732 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800661e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006622:	f000 bdd2 	b.w	80071ca <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d066      	beq.n	80066fc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800662e:	4b1c      	ldr	r3, [pc, #112]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a1b      	ldr	r2, [pc, #108]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 8006634:	f043 0301 	orr.w	r3, r3, #1
 8006638:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800663a:	f7fd fc81 	bl	8003f40 <HAL_GetTick>
 800663e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006640:	e009      	b.n	8006656 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006642:	f7fd fc7d 	bl	8003f40 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b02      	cmp	r3, #2
 800664e:	d902      	bls.n	8006656 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	f000 bdba 	b.w	80071ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006656:	4b12      	ldr	r3, [pc, #72]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0304 	and.w	r3, r3, #4
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0ef      	beq.n	8006642 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006662:	4b0f      	ldr	r3, [pc, #60]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	4a0e      	ldr	r2, [pc, #56]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 8006668:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800666c:	6093      	str	r3, [r2, #8]
 800666e:	4b0c      	ldr	r3, [pc, #48]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667a:	4909      	ldr	r1, [pc, #36]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 800667c:	4313      	orrs	r3, r2
 800667e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006684:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006688:	d30e      	bcc.n	80066a8 <HAL_RCC_OscConfig+0x288>
 800668a:	4b05      	ldr	r3, [pc, #20]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f023 021f 	bic.w	r2, r3, #31
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	4902      	ldr	r1, [pc, #8]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 8006698:	4313      	orrs	r3, r2
 800669a:	60cb      	str	r3, [r1, #12]
 800669c:	e04a      	b.n	8006734 <HAL_RCC_OscConfig+0x314>
 800669e:	bf00      	nop
 80066a0:	46020c00 	.word	0x46020c00
 80066a4:	2000000c 	.word	0x2000000c
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	da0a      	bge.n	80066c6 <HAL_RCC_OscConfig+0x2a6>
 80066b0:	4b98      	ldr	r3, [pc, #608]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	015b      	lsls	r3, r3, #5
 80066be:	4995      	ldr	r1, [pc, #596]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60cb      	str	r3, [r1, #12]
 80066c4:	e036      	b.n	8006734 <HAL_RCC_OscConfig+0x314>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ce:	d30a      	bcc.n	80066e6 <HAL_RCC_OscConfig+0x2c6>
 80066d0:	4b90      	ldr	r3, [pc, #576]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	029b      	lsls	r3, r3, #10
 80066de:	498d      	ldr	r1, [pc, #564]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	60cb      	str	r3, [r1, #12]
 80066e4:	e026      	b.n	8006734 <HAL_RCC_OscConfig+0x314>
 80066e6:	4b8b      	ldr	r3, [pc, #556]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	03db      	lsls	r3, r3, #15
 80066f4:	4987      	ldr	r1, [pc, #540]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60cb      	str	r3, [r1, #12]
 80066fa:	e01b      	b.n	8006734 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80066fc:	4b85      	ldr	r3, [pc, #532]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a84      	ldr	r2, [pc, #528]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 8006702:	f023 0301 	bic.w	r3, r3, #1
 8006706:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006708:	f7fd fc1a 	bl	8003f40 <HAL_GetTick>
 800670c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800670e:	e009      	b.n	8006724 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006710:	f7fd fc16 	bl	8003f40 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d902      	bls.n	8006724 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	f000 bd53 	b.w	80071ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006724:	4b7b      	ldr	r3, [pc, #492]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1ef      	bne.n	8006710 <HAL_RCC_OscConfig+0x2f0>
 8006730:	e000      	b.n	8006734 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006732:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 808b 	beq.w	8006858 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006744:	2b08      	cmp	r3, #8
 8006746:	d005      	beq.n	8006754 <HAL_RCC_OscConfig+0x334>
 8006748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674a:	2b0c      	cmp	r3, #12
 800674c:	d109      	bne.n	8006762 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800674e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006750:	2b03      	cmp	r3, #3
 8006752:	d106      	bne.n	8006762 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d17d      	bne.n	8006858 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	f000 bd34 	b.w	80071ca <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800676a:	d106      	bne.n	800677a <HAL_RCC_OscConfig+0x35a>
 800676c:	4b69      	ldr	r3, [pc, #420]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a68      	ldr	r2, [pc, #416]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 8006772:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006776:	6013      	str	r3, [r2, #0]
 8006778:	e041      	b.n	80067fe <HAL_RCC_OscConfig+0x3de>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006782:	d112      	bne.n	80067aa <HAL_RCC_OscConfig+0x38a>
 8006784:	4b63      	ldr	r3, [pc, #396]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a62      	ldr	r2, [pc, #392]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 800678a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800678e:	6013      	str	r3, [r2, #0]
 8006790:	4b60      	ldr	r3, [pc, #384]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a5f      	ldr	r2, [pc, #380]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 8006796:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800679a:	6013      	str	r3, [r2, #0]
 800679c:	4b5d      	ldr	r3, [pc, #372]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a5c      	ldr	r2, [pc, #368]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80067a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	e029      	b.n	80067fe <HAL_RCC_OscConfig+0x3de>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80067b2:	d112      	bne.n	80067da <HAL_RCC_OscConfig+0x3ba>
 80067b4:	4b57      	ldr	r3, [pc, #348]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a56      	ldr	r2, [pc, #344]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80067ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	4b54      	ldr	r3, [pc, #336]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a53      	ldr	r2, [pc, #332]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80067c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	4b51      	ldr	r3, [pc, #324]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a50      	ldr	r2, [pc, #320]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80067d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067d6:	6013      	str	r3, [r2, #0]
 80067d8:	e011      	b.n	80067fe <HAL_RCC_OscConfig+0x3de>
 80067da:	4b4e      	ldr	r3, [pc, #312]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a4d      	ldr	r2, [pc, #308]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80067e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	4b4b      	ldr	r3, [pc, #300]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a4a      	ldr	r2, [pc, #296]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80067ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	4b48      	ldr	r3, [pc, #288]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a47      	ldr	r2, [pc, #284]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80067f8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80067fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d014      	beq.n	8006830 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8006806:	f7fd fb9b 	bl	8003f40 <HAL_GetTick>
 800680a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800680c:	e009      	b.n	8006822 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800680e:	f7fd fb97 	bl	8003f40 <HAL_GetTick>
 8006812:	4602      	mov	r2, r0
 8006814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	2b64      	cmp	r3, #100	@ 0x64
 800681a:	d902      	bls.n	8006822 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	f000 bcd4 	b.w	80071ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006822:	4b3c      	ldr	r3, [pc, #240]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0ef      	beq.n	800680e <HAL_RCC_OscConfig+0x3ee>
 800682e:	e013      	b.n	8006858 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8006830:	f7fd fb86 	bl	8003f40 <HAL_GetTick>
 8006834:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006836:	e009      	b.n	800684c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006838:	f7fd fb82 	bl	8003f40 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b64      	cmp	r3, #100	@ 0x64
 8006844:	d902      	bls.n	800684c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	f000 bcbf 	b.w	80071ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800684c:	4b31      	ldr	r3, [pc, #196]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1ef      	bne.n	8006838 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d05f      	beq.n	8006924 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006866:	2b04      	cmp	r3, #4
 8006868:	d005      	beq.n	8006876 <HAL_RCC_OscConfig+0x456>
 800686a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686c:	2b0c      	cmp	r3, #12
 800686e:	d114      	bne.n	800689a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006872:	2b02      	cmp	r3, #2
 8006874:	d111      	bne.n	800689a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d102      	bne.n	8006884 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	f000 bca3 	b.w	80071ca <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006884:	4b23      	ldr	r3, [pc, #140]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	041b      	lsls	r3, r3, #16
 8006892:	4920      	ldr	r1, [pc, #128]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 8006894:	4313      	orrs	r3, r2
 8006896:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006898:	e044      	b.n	8006924 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d024      	beq.n	80068ec <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80068a2:	4b1c      	ldr	r3, [pc, #112]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80068a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068ac:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80068ae:	f7fd fb47 	bl	8003f40 <HAL_GetTick>
 80068b2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068b4:	e009      	b.n	80068ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068b6:	f7fd fb43 	bl	8003f40 <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d902      	bls.n	80068ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	f000 bc80 	b.w	80071ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068ca:	4b12      	ldr	r3, [pc, #72]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d0ef      	beq.n	80068b6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80068d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	041b      	lsls	r3, r3, #16
 80068e4:	490b      	ldr	r1, [pc, #44]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	610b      	str	r3, [r1, #16]
 80068ea:	e01b      	b.n	8006924 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80068ec:	4b09      	ldr	r3, [pc, #36]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a08      	ldr	r2, [pc, #32]	@ (8006914 <HAL_RCC_OscConfig+0x4f4>)
 80068f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068f6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80068f8:	f7fd fb22 	bl	8003f40 <HAL_GetTick>
 80068fc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068fe:	e00b      	b.n	8006918 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006900:	f7fd fb1e 	bl	8003f40 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d904      	bls.n	8006918 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	f000 bc5b 	b.w	80071ca <HAL_RCC_OscConfig+0xdaa>
 8006914:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006918:	4baf      	ldr	r3, [pc, #700]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1ed      	bne.n	8006900 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 80c8 	beq.w	8006ac2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8006932:	2300      	movs	r3, #0
 8006934:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006938:	4ba7      	ldr	r3, [pc, #668]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 800693a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800693e:	f003 0304 	and.w	r3, r3, #4
 8006942:	2b00      	cmp	r3, #0
 8006944:	d111      	bne.n	800696a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006946:	4ba4      	ldr	r3, [pc, #656]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006948:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800694c:	4aa2      	ldr	r2, [pc, #648]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 800694e:	f043 0304 	orr.w	r3, r3, #4
 8006952:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006956:	4ba0      	ldr	r3, [pc, #640]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	617b      	str	r3, [r7, #20]
 8006962:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006964:	2301      	movs	r3, #1
 8006966:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800696a:	4b9c      	ldr	r3, [pc, #624]	@ (8006bdc <HAL_RCC_OscConfig+0x7bc>)
 800696c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d119      	bne.n	80069aa <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006976:	4b99      	ldr	r3, [pc, #612]	@ (8006bdc <HAL_RCC_OscConfig+0x7bc>)
 8006978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697a:	4a98      	ldr	r2, [pc, #608]	@ (8006bdc <HAL_RCC_OscConfig+0x7bc>)
 800697c:	f043 0301 	orr.w	r3, r3, #1
 8006980:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006982:	f7fd fadd 	bl	8003f40 <HAL_GetTick>
 8006986:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006988:	e009      	b.n	800699e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800698a:	f7fd fad9 	bl	8003f40 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	d902      	bls.n	800699e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	f000 bc16 	b.w	80071ca <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800699e:	4b8f      	ldr	r3, [pc, #572]	@ (8006bdc <HAL_RCC_OscConfig+0x7bc>)
 80069a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0ef      	beq.n	800698a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d05f      	beq.n	8006a72 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80069b2:	4b89      	ldr	r3, [pc, #548]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 80069b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069b8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	699a      	ldr	r2, [r3, #24]
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d037      	beq.n	8006a38 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d006      	beq.n	80069e0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e3f4      	b.n	80071ca <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d01b      	beq.n	8006a22 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80069ea:	4b7b      	ldr	r3, [pc, #492]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 80069ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069f0:	4a79      	ldr	r2, [pc, #484]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 80069f2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80069f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80069fa:	f7fd faa1 	bl	8003f40 <HAL_GetTick>
 80069fe:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006a00:	e008      	b.n	8006a14 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a02:	f7fd fa9d 	bl	8003f40 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b05      	cmp	r3, #5
 8006a0e:	d901      	bls.n	8006a14 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e3da      	b.n	80071ca <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006a14:	4b70      	ldr	r3, [pc, #448]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1ef      	bne.n	8006a02 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006a22:	4b6d      	ldr	r3, [pc, #436]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006a24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a28:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	4969      	ldr	r1, [pc, #420]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006a38:	4b67      	ldr	r3, [pc, #412]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006a3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a3e:	4a66      	ldr	r2, [pc, #408]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006a40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a44:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006a48:	f7fd fa7a 	bl	8003f40 <HAL_GetTick>
 8006a4c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006a4e:	e008      	b.n	8006a62 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a50:	f7fd fa76 	bl	8003f40 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b05      	cmp	r3, #5
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e3b3      	b.n	80071ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006a62:	4b5d      	ldr	r3, [pc, #372]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006a64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d0ef      	beq.n	8006a50 <HAL_RCC_OscConfig+0x630>
 8006a70:	e01b      	b.n	8006aaa <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006a72:	4b59      	ldr	r3, [pc, #356]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006a74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a78:	4a57      	ldr	r2, [pc, #348]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006a7a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006a7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006a82:	f7fd fa5d 	bl	8003f40 <HAL_GetTick>
 8006a86:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006a88:	e008      	b.n	8006a9c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a8a:	f7fd fa59 	bl	8003f40 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b05      	cmp	r3, #5
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e396      	b.n	80071ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006a9c:	4b4e      	ldr	r3, [pc, #312]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006a9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006aa2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1ef      	bne.n	8006a8a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006aaa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d107      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ab2:	4b49      	ldr	r3, [pc, #292]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ab8:	4a47      	ldr	r2, [pc, #284]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006aba:	f023 0304 	bic.w	r3, r3, #4
 8006abe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0304 	and.w	r3, r3, #4
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 8111 	beq.w	8006cf2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ad6:	4b40      	ldr	r3, [pc, #256]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006adc:	f003 0304 	and.w	r3, r3, #4
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d111      	bne.n	8006b08 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ae4:	4b3c      	ldr	r3, [pc, #240]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006aea:	4a3b      	ldr	r2, [pc, #236]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006aec:	f043 0304 	orr.w	r3, r3, #4
 8006af0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006af4:	4b38      	ldr	r3, [pc, #224]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006afa:	f003 0304 	and.w	r3, r3, #4
 8006afe:	613b      	str	r3, [r7, #16]
 8006b00:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006b02:	2301      	movs	r3, #1
 8006b04:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b08:	4b34      	ldr	r3, [pc, #208]	@ (8006bdc <HAL_RCC_OscConfig+0x7bc>)
 8006b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d118      	bne.n	8006b46 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006b14:	4b31      	ldr	r3, [pc, #196]	@ (8006bdc <HAL_RCC_OscConfig+0x7bc>)
 8006b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b18:	4a30      	ldr	r2, [pc, #192]	@ (8006bdc <HAL_RCC_OscConfig+0x7bc>)
 8006b1a:	f043 0301 	orr.w	r3, r3, #1
 8006b1e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b20:	f7fd fa0e 	bl	8003f40 <HAL_GetTick>
 8006b24:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b26:	e008      	b.n	8006b3a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b28:	f7fd fa0a 	bl	8003f40 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d901      	bls.n	8006b3a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e347      	b.n	80071ca <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b3a:	4b28      	ldr	r3, [pc, #160]	@ (8006bdc <HAL_RCC_OscConfig+0x7bc>)
 8006b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0f0      	beq.n	8006b28 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d01f      	beq.n	8006b92 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f003 0304 	and.w	r3, r3, #4
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d010      	beq.n	8006b80 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b64:	4a1c      	ldr	r2, [pc, #112]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006b66:	f043 0304 	orr.w	r3, r3, #4
 8006b6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006b70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b74:	4a18      	ldr	r2, [pc, #96]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006b76:	f043 0301 	orr.w	r3, r3, #1
 8006b7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006b7e:	e018      	b.n	8006bb2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006b80:	4b15      	ldr	r3, [pc, #84]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006b82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b86:	4a14      	ldr	r2, [pc, #80]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006b88:	f043 0301 	orr.w	r3, r3, #1
 8006b8c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006b90:	e00f      	b.n	8006bb2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006b92:	4b11      	ldr	r3, [pc, #68]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006b94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b98:	4a0f      	ldr	r2, [pc, #60]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006b9a:	f023 0301 	bic.w	r3, r3, #1
 8006b9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ba8:	4a0b      	ldr	r2, [pc, #44]	@ (8006bd8 <HAL_RCC_OscConfig+0x7b8>)
 8006baa:	f023 0304 	bic.w	r3, r3, #4
 8006bae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d057      	beq.n	8006c6a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8006bba:	f7fd f9c1 	bl	8003f40 <HAL_GetTick>
 8006bbe:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bc0:	e00e      	b.n	8006be0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bc2:	f7fd f9bd 	bl	8003f40 <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d905      	bls.n	8006be0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e2f8      	b.n	80071ca <HAL_RCC_OscConfig+0xdaa>
 8006bd8:	46020c00 	.word	0x46020c00
 8006bdc:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006be0:	4b9c      	ldr	r3, [pc, #624]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006be2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d0e9      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d01b      	beq.n	8006c32 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006bfa:	4b96      	ldr	r3, [pc, #600]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006bfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c00:	4a94      	ldr	r2, [pc, #592]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006c0a:	e00a      	b.n	8006c22 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c0c:	f7fd f998 	bl	8003f40 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e2d3      	b.n	80071ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006c22:	4b8c      	ldr	r3, [pc, #560]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006c24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d0ed      	beq.n	8006c0c <HAL_RCC_OscConfig+0x7ec>
 8006c30:	e053      	b.n	8006cda <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006c32:	4b88      	ldr	r3, [pc, #544]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c38:	4a86      	ldr	r2, [pc, #536]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006c3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006c42:	e00a      	b.n	8006c5a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c44:	f7fd f97c 	bl	8003f40 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e2b7      	b.n	80071ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006c5a:	4b7e      	ldr	r3, [pc, #504]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1ed      	bne.n	8006c44 <HAL_RCC_OscConfig+0x824>
 8006c68:	e037      	b.n	8006cda <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006c6a:	f7fd f969 	bl	8003f40 <HAL_GetTick>
 8006c6e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c70:	e00a      	b.n	8006c88 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c72:	f7fd f965 	bl	8003f40 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d901      	bls.n	8006c88 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e2a0      	b.n	80071ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c88:	4b72      	ldr	r3, [pc, #456]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1ed      	bne.n	8006c72 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006c96:	4b6f      	ldr	r3, [pc, #444]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006c98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d01a      	beq.n	8006cda <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006ca4:	4b6b      	ldr	r3, [pc, #428]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006ca6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006caa:	4a6a      	ldr	r2, [pc, #424]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006cac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cb0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006cb4:	e00a      	b.n	8006ccc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cb6:	f7fd f943 	bl	8003f40 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d901      	bls.n	8006ccc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e27e      	b.n	80071ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006ccc:	4b61      	ldr	r3, [pc, #388]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006cce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1ed      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006cda:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d107      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ce2:	4b5c      	ldr	r3, [pc, #368]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ce8:	4a5a      	ldr	r2, [pc, #360]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006cea:	f023 0304 	bic.w	r3, r3, #4
 8006cee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0320 	and.w	r3, r3, #32
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d036      	beq.n	8006d6c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d019      	beq.n	8006d3a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006d06:	4b53      	ldr	r3, [pc, #332]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a52      	ldr	r2, [pc, #328]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006d0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006d10:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006d12:	f7fd f915 	bl	8003f40 <HAL_GetTick>
 8006d16:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006d18:	e008      	b.n	8006d2c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d1a:	f7fd f911 	bl	8003f40 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d901      	bls.n	8006d2c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e24e      	b.n	80071ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006d2c:	4b49      	ldr	r3, [pc, #292]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d0f0      	beq.n	8006d1a <HAL_RCC_OscConfig+0x8fa>
 8006d38:	e018      	b.n	8006d6c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8006d3a:	4b46      	ldr	r3, [pc, #280]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a45      	ldr	r2, [pc, #276]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006d40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d44:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006d46:	f7fd f8fb 	bl	8003f40 <HAL_GetTick>
 8006d4a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006d4c:	e008      	b.n	8006d60 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d4e:	f7fd f8f7 	bl	8003f40 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e234      	b.n	80071ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006d60:	4b3c      	ldr	r3, [pc, #240]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1f0      	bne.n	8006d4e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d036      	beq.n	8006de6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d019      	beq.n	8006db4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006d80:	4b34      	ldr	r3, [pc, #208]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a33      	ldr	r2, [pc, #204]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006d86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d8a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006d8c:	f7fd f8d8 	bl	8003f40 <HAL_GetTick>
 8006d90:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006d92:	e008      	b.n	8006da6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006d94:	f7fd f8d4 	bl	8003f40 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d901      	bls.n	8006da6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e211      	b.n	80071ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006da6:	4b2b      	ldr	r3, [pc, #172]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0f0      	beq.n	8006d94 <HAL_RCC_OscConfig+0x974>
 8006db2:	e018      	b.n	8006de6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006db4:	4b27      	ldr	r3, [pc, #156]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a26      	ldr	r2, [pc, #152]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006dba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dbe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006dc0:	f7fd f8be 	bl	8003f40 <HAL_GetTick>
 8006dc4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006dc6:	e008      	b.n	8006dda <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006dc8:	f7fd f8ba 	bl	8003f40 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e1f7      	b.n	80071ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006dda:	4b1e      	ldr	r3, [pc, #120]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1f0      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d07f      	beq.n	8006ef2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d062      	beq.n	8006ec0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8006dfa:	4b16      	ldr	r3, [pc, #88]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	4a15      	ldr	r2, [pc, #84]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006e00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e04:	6093      	str	r3, [r2, #8]
 8006e06:	4b13      	ldr	r3, [pc, #76]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e12:	4910      	ldr	r1, [pc, #64]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006e20:	d309      	bcc.n	8006e36 <HAL_RCC_OscConfig+0xa16>
 8006e22:	4b0c      	ldr	r3, [pc, #48]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f023 021f 	bic.w	r2, r3, #31
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	4909      	ldr	r1, [pc, #36]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60cb      	str	r3, [r1, #12]
 8006e34:	e02a      	b.n	8006e8c <HAL_RCC_OscConfig+0xa6c>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	da0c      	bge.n	8006e58 <HAL_RCC_OscConfig+0xa38>
 8006e3e:	4b05      	ldr	r3, [pc, #20]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	015b      	lsls	r3, r3, #5
 8006e4c:	4901      	ldr	r1, [pc, #4]	@ (8006e54 <HAL_RCC_OscConfig+0xa34>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60cb      	str	r3, [r1, #12]
 8006e52:	e01b      	b.n	8006e8c <HAL_RCC_OscConfig+0xa6c>
 8006e54:	46020c00 	.word	0x46020c00
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e60:	d30a      	bcc.n	8006e78 <HAL_RCC_OscConfig+0xa58>
 8006e62:	4ba1      	ldr	r3, [pc, #644]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	029b      	lsls	r3, r3, #10
 8006e70:	499d      	ldr	r1, [pc, #628]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60cb      	str	r3, [r1, #12]
 8006e76:	e009      	b.n	8006e8c <HAL_RCC_OscConfig+0xa6c>
 8006e78:	4b9b      	ldr	r3, [pc, #620]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	03db      	lsls	r3, r3, #15
 8006e86:	4998      	ldr	r1, [pc, #608]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006e8c:	4b96      	ldr	r3, [pc, #600]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a95      	ldr	r2, [pc, #596]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006e92:	f043 0310 	orr.w	r3, r3, #16
 8006e96:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006e98:	f7fd f852 	bl	8003f40 <HAL_GetTick>
 8006e9c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006ea0:	f7fd f84e 	bl	8003f40 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e18b      	b.n	80071ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006eb2:	4b8d      	ldr	r3, [pc, #564]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0320 	and.w	r3, r3, #32
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0f0      	beq.n	8006ea0 <HAL_RCC_OscConfig+0xa80>
 8006ebe:	e018      	b.n	8006ef2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006ec0:	4b89      	ldr	r3, [pc, #548]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a88      	ldr	r2, [pc, #544]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006ec6:	f023 0310 	bic.w	r3, r3, #16
 8006eca:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006ecc:	f7fd f838 	bl	8003f40 <HAL_GetTick>
 8006ed0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006ed2:	e008      	b.n	8006ee6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006ed4:	f7fd f834 	bl	8003f40 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d901      	bls.n	8006ee6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e171      	b.n	80071ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006ee6:	4b80      	ldr	r3, [pc, #512]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0320 	and.w	r3, r3, #32
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1f0      	bne.n	8006ed4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 8166 	beq.w	80071c8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8006efc:	2300      	movs	r3, #0
 8006efe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f02:	4b79      	ldr	r3, [pc, #484]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	f003 030c 	and.w	r3, r3, #12
 8006f0a:	2b0c      	cmp	r3, #12
 8006f0c:	f000 80f2 	beq.w	80070f4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	f040 80c5 	bne.w	80070a4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006f1a:	4b73      	ldr	r3, [pc, #460]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a72      	ldr	r2, [pc, #456]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006f20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f24:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006f26:	f7fd f80b 	bl	8003f40 <HAL_GetTick>
 8006f2a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006f2c:	e008      	b.n	8006f40 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f2e:	f7fd f807 	bl	8003f40 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d901      	bls.n	8006f40 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e144      	b.n	80071ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006f40:	4b69      	ldr	r3, [pc, #420]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1f0      	bne.n	8006f2e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f4c:	4b66      	ldr	r3, [pc, #408]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f52:	f003 0304 	and.w	r3, r3, #4
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d111      	bne.n	8006f7e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8006f5a:	4b63      	ldr	r3, [pc, #396]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f60:	4a61      	ldr	r2, [pc, #388]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006f62:	f043 0304 	orr.w	r3, r3, #4
 8006f66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006f6a:	4b5f      	ldr	r3, [pc, #380]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f70:	f003 0304 	and.w	r3, r3, #4
 8006f74:	60fb      	str	r3, [r7, #12]
 8006f76:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8006f7e:	4b5b      	ldr	r3, [pc, #364]	@ (80070ec <HAL_RCC_OscConfig+0xccc>)
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f8a:	d102      	bne.n	8006f92 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006f92:	4b56      	ldr	r3, [pc, #344]	@ (80070ec <HAL_RCC_OscConfig+0xccc>)
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	4a55      	ldr	r2, [pc, #340]	@ (80070ec <HAL_RCC_OscConfig+0xccc>)
 8006f98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f9c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006f9e:	4b52      	ldr	r3, [pc, #328]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fa6:	f023 0303 	bic.w	r3, r3, #3
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006fb2:	3a01      	subs	r2, #1
 8006fb4:	0212      	lsls	r2, r2, #8
 8006fb6:	4311      	orrs	r1, r2
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	494a      	ldr	r1, [pc, #296]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	628b      	str	r3, [r1, #40]	@ 0x28
 8006fc4:	4b48      	ldr	r3, [pc, #288]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8006fc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fc8:	4b49      	ldr	r3, [pc, #292]	@ (80070f0 <HAL_RCC_OscConfig+0xcd0>)
 8006fca:	4013      	ands	r3, r2
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006fd0:	3a01      	subs	r2, #1
 8006fd2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006fda:	3a01      	subs	r2, #1
 8006fdc:	0252      	lsls	r2, r2, #9
 8006fde:	b292      	uxth	r2, r2
 8006fe0:	4311      	orrs	r1, r2
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006fe6:	3a01      	subs	r2, #1
 8006fe8:	0412      	lsls	r2, r2, #16
 8006fea:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006fee:	4311      	orrs	r1, r2
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006ff4:	3a01      	subs	r2, #1
 8006ff6:	0612      	lsls	r2, r2, #24
 8006ff8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	493a      	ldr	r1, [pc, #232]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8007000:	4313      	orrs	r3, r2
 8007002:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007004:	4b38      	ldr	r3, [pc, #224]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8007006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007008:	4a37      	ldr	r2, [pc, #220]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 800700a:	f023 0310 	bic.w	r3, r3, #16
 800700e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007014:	4a34      	ldr	r2, [pc, #208]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8007016:	00db      	lsls	r3, r3, #3
 8007018:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800701a:	4b33      	ldr	r3, [pc, #204]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 800701c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701e:	4a32      	ldr	r2, [pc, #200]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8007020:	f043 0310 	orr.w	r3, r3, #16
 8007024:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8007026:	4b30      	ldr	r3, [pc, #192]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8007028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702a:	f023 020c 	bic.w	r2, r3, #12
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007032:	492d      	ldr	r1, [pc, #180]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8007034:	4313      	orrs	r3, r2
 8007036:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8007038:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800703c:	2b01      	cmp	r3, #1
 800703e:	d105      	bne.n	800704c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007040:	4b2a      	ldr	r3, [pc, #168]	@ (80070ec <HAL_RCC_OscConfig+0xccc>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	4a29      	ldr	r2, [pc, #164]	@ (80070ec <HAL_RCC_OscConfig+0xccc>)
 8007046:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800704a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800704c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8007050:	2b01      	cmp	r3, #1
 8007052:	d107      	bne.n	8007064 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8007054:	4b24      	ldr	r3, [pc, #144]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8007056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800705a:	4a23      	ldr	r2, [pc, #140]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 800705c:	f023 0304 	bic.w	r3, r3, #4
 8007060:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8007064:	4b20      	ldr	r3, [pc, #128]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a1f      	ldr	r2, [pc, #124]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 800706a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800706e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007070:	f7fc ff66 	bl	8003f40 <HAL_GetTick>
 8007074:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007076:	e008      	b.n	800708a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007078:	f7fc ff62 	bl	8003f40 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d901      	bls.n	800708a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e09f      	b.n	80071ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800708a:	4b17      	ldr	r3, [pc, #92]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0f0      	beq.n	8007078 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007096:	4b14      	ldr	r3, [pc, #80]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 8007098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709a:	4a13      	ldr	r2, [pc, #76]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 800709c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070a0:	6293      	str	r3, [r2, #40]	@ 0x28
 80070a2:	e091      	b.n	80071c8 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80070a4:	4b10      	ldr	r3, [pc, #64]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a0f      	ldr	r2, [pc, #60]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 80070aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070ae:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80070b0:	f7fc ff46 	bl	8003f40 <HAL_GetTick>
 80070b4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80070b6:	e008      	b.n	80070ca <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070b8:	f7fc ff42 	bl	8003f40 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e07f      	b.n	80071ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80070ca:	4b07      	ldr	r3, [pc, #28]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1f0      	bne.n	80070b8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80070d6:	4b04      	ldr	r3, [pc, #16]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 80070d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070da:	4a03      	ldr	r2, [pc, #12]	@ (80070e8 <HAL_RCC_OscConfig+0xcc8>)
 80070dc:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80070e0:	f023 0303 	bic.w	r3, r3, #3
 80070e4:	6293      	str	r3, [r2, #40]	@ 0x28
 80070e6:	e06f      	b.n	80071c8 <HAL_RCC_OscConfig+0xda8>
 80070e8:	46020c00 	.word	0x46020c00
 80070ec:	46020800 	.word	0x46020800
 80070f0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80070f4:	4b37      	ldr	r3, [pc, #220]	@ (80071d4 <HAL_RCC_OscConfig+0xdb4>)
 80070f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80070fa:	4b36      	ldr	r3, [pc, #216]	@ (80071d4 <HAL_RCC_OscConfig+0xdb4>)
 80070fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070fe:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007104:	2b01      	cmp	r3, #1
 8007106:	d039      	beq.n	800717c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	f003 0203 	and.w	r2, r3, #3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007112:	429a      	cmp	r2, r3
 8007114:	d132      	bne.n	800717c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	0a1b      	lsrs	r3, r3, #8
 800711a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007122:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007124:	429a      	cmp	r2, r3
 8007126:	d129      	bne.n	800717c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007132:	429a      	cmp	r2, r3
 8007134:	d122      	bne.n	800717c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007140:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007142:	429a      	cmp	r2, r3
 8007144:	d11a      	bne.n	800717c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	0a5b      	lsrs	r3, r3, #9
 800714a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007152:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007154:	429a      	cmp	r2, r3
 8007156:	d111      	bne.n	800717c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	0c1b      	lsrs	r3, r3, #16
 800715c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007164:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007166:	429a      	cmp	r2, r3
 8007168:	d108      	bne.n	800717c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	0e1b      	lsrs	r3, r3, #24
 800716e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007176:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007178:	429a      	cmp	r2, r3
 800717a:	d001      	beq.n	8007180 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e024      	b.n	80071ca <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007180:	4b14      	ldr	r3, [pc, #80]	@ (80071d4 <HAL_RCC_OscConfig+0xdb4>)
 8007182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007184:	08db      	lsrs	r3, r3, #3
 8007186:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800718e:	429a      	cmp	r2, r3
 8007190:	d01a      	beq.n	80071c8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007192:	4b10      	ldr	r3, [pc, #64]	@ (80071d4 <HAL_RCC_OscConfig+0xdb4>)
 8007194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007196:	4a0f      	ldr	r2, [pc, #60]	@ (80071d4 <HAL_RCC_OscConfig+0xdb4>)
 8007198:	f023 0310 	bic.w	r3, r3, #16
 800719c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800719e:	f7fc fecf 	bl	8003f40 <HAL_GetTick>
 80071a2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80071a4:	bf00      	nop
 80071a6:	f7fc fecb 	bl	8003f40 <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d0f9      	beq.n	80071a6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071b6:	4a07      	ldr	r2, [pc, #28]	@ (80071d4 <HAL_RCC_OscConfig+0xdb4>)
 80071b8:	00db      	lsls	r3, r3, #3
 80071ba:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80071bc:	4b05      	ldr	r3, [pc, #20]	@ (80071d4 <HAL_RCC_OscConfig+0xdb4>)
 80071be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c0:	4a04      	ldr	r2, [pc, #16]	@ (80071d4 <HAL_RCC_OscConfig+0xdb4>)
 80071c2:	f043 0310 	orr.w	r3, r3, #16
 80071c6:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3738      	adds	r7, #56	@ 0x38
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	46020c00 	.word	0x46020c00

080071d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e1d9      	b.n	80075a0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071ec:	4b9b      	ldr	r3, [pc, #620]	@ (800745c <HAL_RCC_ClockConfig+0x284>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 030f 	and.w	r3, r3, #15
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d910      	bls.n	800721c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071fa:	4b98      	ldr	r3, [pc, #608]	@ (800745c <HAL_RCC_ClockConfig+0x284>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f023 020f 	bic.w	r2, r3, #15
 8007202:	4996      	ldr	r1, [pc, #600]	@ (800745c <HAL_RCC_ClockConfig+0x284>)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	4313      	orrs	r3, r2
 8007208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800720a:	4b94      	ldr	r3, [pc, #592]	@ (800745c <HAL_RCC_ClockConfig+0x284>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 030f 	and.w	r3, r3, #15
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d001      	beq.n	800721c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e1c1      	b.n	80075a0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0310 	and.w	r3, r3, #16
 8007224:	2b00      	cmp	r3, #0
 8007226:	d010      	beq.n	800724a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	695a      	ldr	r2, [r3, #20]
 800722c:	4b8c      	ldr	r3, [pc, #560]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 800722e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007230:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007234:	429a      	cmp	r2, r3
 8007236:	d908      	bls.n	800724a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8007238:	4b89      	ldr	r3, [pc, #548]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 800723a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	4986      	ldr	r1, [pc, #536]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 8007246:	4313      	orrs	r3, r2
 8007248:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0308 	and.w	r3, r3, #8
 8007252:	2b00      	cmp	r3, #0
 8007254:	d012      	beq.n	800727c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691a      	ldr	r2, [r3, #16]
 800725a:	4b81      	ldr	r3, [pc, #516]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	091b      	lsrs	r3, r3, #4
 8007260:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007264:	429a      	cmp	r2, r3
 8007266:	d909      	bls.n	800727c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007268:	4b7d      	ldr	r3, [pc, #500]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	011b      	lsls	r3, r3, #4
 8007276:	497a      	ldr	r1, [pc, #488]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 8007278:	4313      	orrs	r3, r2
 800727a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0304 	and.w	r3, r3, #4
 8007284:	2b00      	cmp	r3, #0
 8007286:	d010      	beq.n	80072aa <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	4b74      	ldr	r3, [pc, #464]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007294:	429a      	cmp	r2, r3
 8007296:	d908      	bls.n	80072aa <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007298:	4b71      	ldr	r3, [pc, #452]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	496e      	ldr	r1, [pc, #440]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d010      	beq.n	80072d8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	689a      	ldr	r2, [r3, #8]
 80072ba:	4b69      	ldr	r3, [pc, #420]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	f003 030f 	and.w	r3, r3, #15
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d908      	bls.n	80072d8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80072c6:	4b66      	ldr	r3, [pc, #408]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	f023 020f 	bic.w	r2, r3, #15
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	4963      	ldr	r1, [pc, #396]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0301 	and.w	r3, r3, #1
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 80d2 	beq.w	800748a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80072e6:	2300      	movs	r3, #0
 80072e8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d143      	bne.n	800737a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072f2:	4b5b      	ldr	r3, [pc, #364]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 80072f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d110      	bne.n	8007322 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007300:	4b57      	ldr	r3, [pc, #348]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 8007302:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007306:	4a56      	ldr	r2, [pc, #344]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 8007308:	f043 0304 	orr.w	r3, r3, #4
 800730c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007310:	4b53      	ldr	r3, [pc, #332]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 8007312:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007316:	f003 0304 	and.w	r3, r3, #4
 800731a:	60bb      	str	r3, [r7, #8]
 800731c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800731e:	2301      	movs	r3, #1
 8007320:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8007322:	f7fc fe0d 	bl	8003f40 <HAL_GetTick>
 8007326:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007328:	4b4e      	ldr	r3, [pc, #312]	@ (8007464 <HAL_RCC_ClockConfig+0x28c>)
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00f      	beq.n	8007354 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007334:	e008      	b.n	8007348 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8007336:	f7fc fe03 	bl	8003f40 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d901      	bls.n	8007348 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e12b      	b.n	80075a0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007348:	4b46      	ldr	r3, [pc, #280]	@ (8007464 <HAL_RCC_ClockConfig+0x28c>)
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d0f0      	beq.n	8007336 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007354:	7dfb      	ldrb	r3, [r7, #23]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d107      	bne.n	800736a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800735a:	4b41      	ldr	r3, [pc, #260]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 800735c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007360:	4a3f      	ldr	r2, [pc, #252]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 8007362:	f023 0304 	bic.w	r3, r3, #4
 8007366:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800736a:	4b3d      	ldr	r3, [pc, #244]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d121      	bne.n	80073ba <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e112      	b.n	80075a0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	2b02      	cmp	r3, #2
 8007380:	d107      	bne.n	8007392 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007382:	4b37      	ldr	r3, [pc, #220]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d115      	bne.n	80073ba <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e106      	b.n	80075a0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d107      	bne.n	80073aa <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800739a:	4b31      	ldr	r3, [pc, #196]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0304 	and.w	r3, r3, #4
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d109      	bne.n	80073ba <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e0fa      	b.n	80075a0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073aa:	4b2d      	ldr	r3, [pc, #180]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e0f2      	b.n	80075a0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80073ba:	4b29      	ldr	r3, [pc, #164]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	f023 0203 	bic.w	r2, r3, #3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	4926      	ldr	r1, [pc, #152]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80073cc:	f7fc fdb8 	bl	8003f40 <HAL_GetTick>
 80073d0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d112      	bne.n	8007400 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073da:	e00a      	b.n	80073f2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073dc:	f7fc fdb0 	bl	8003f40 <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d901      	bls.n	80073f2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e0d6      	b.n	80075a0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073f2:	4b1b      	ldr	r3, [pc, #108]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	f003 030c 	and.w	r3, r3, #12
 80073fa:	2b0c      	cmp	r3, #12
 80073fc:	d1ee      	bne.n	80073dc <HAL_RCC_ClockConfig+0x204>
 80073fe:	e044      	b.n	800748a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	2b02      	cmp	r3, #2
 8007406:	d112      	bne.n	800742e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007408:	e00a      	b.n	8007420 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800740a:	f7fc fd99 	bl	8003f40 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007418:	4293      	cmp	r3, r2
 800741a:	d901      	bls.n	8007420 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e0bf      	b.n	80075a0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007420:	4b0f      	ldr	r3, [pc, #60]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	f003 030c 	and.w	r3, r3, #12
 8007428:	2b08      	cmp	r3, #8
 800742a:	d1ee      	bne.n	800740a <HAL_RCC_ClockConfig+0x232>
 800742c:	e02d      	b.n	800748a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d123      	bne.n	800747e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007436:	e00a      	b.n	800744e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007438:	f7fc fd82 	bl	8003f40 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007446:	4293      	cmp	r3, r2
 8007448:	d901      	bls.n	800744e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e0a8      	b.n	80075a0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800744e:	4b04      	ldr	r3, [pc, #16]	@ (8007460 <HAL_RCC_ClockConfig+0x288>)
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	f003 030c 	and.w	r3, r3, #12
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1ee      	bne.n	8007438 <HAL_RCC_ClockConfig+0x260>
 800745a:	e016      	b.n	800748a <HAL_RCC_ClockConfig+0x2b2>
 800745c:	40022000 	.word	0x40022000
 8007460:	46020c00 	.word	0x46020c00
 8007464:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007468:	f7fc fd6a 	bl	8003f40 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007476:	4293      	cmp	r3, r2
 8007478:	d901      	bls.n	800747e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e090      	b.n	80075a0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800747e:	4b4a      	ldr	r3, [pc, #296]	@ (80075a8 <HAL_RCC_ClockConfig+0x3d0>)
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	f003 030c 	and.w	r3, r3, #12
 8007486:	2b04      	cmp	r3, #4
 8007488:	d1ee      	bne.n	8007468 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d010      	beq.n	80074b8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689a      	ldr	r2, [r3, #8]
 800749a:	4b43      	ldr	r3, [pc, #268]	@ (80075a8 <HAL_RCC_ClockConfig+0x3d0>)
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	f003 030f 	and.w	r3, r3, #15
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d208      	bcs.n	80074b8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80074a6:	4b40      	ldr	r3, [pc, #256]	@ (80075a8 <HAL_RCC_ClockConfig+0x3d0>)
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	f023 020f 	bic.w	r2, r3, #15
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	493d      	ldr	r1, [pc, #244]	@ (80075a8 <HAL_RCC_ClockConfig+0x3d0>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074b8:	4b3c      	ldr	r3, [pc, #240]	@ (80075ac <HAL_RCC_ClockConfig+0x3d4>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 030f 	and.w	r3, r3, #15
 80074c0:	683a      	ldr	r2, [r7, #0]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d210      	bcs.n	80074e8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074c6:	4b39      	ldr	r3, [pc, #228]	@ (80075ac <HAL_RCC_ClockConfig+0x3d4>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f023 020f 	bic.w	r2, r3, #15
 80074ce:	4937      	ldr	r1, [pc, #220]	@ (80075ac <HAL_RCC_ClockConfig+0x3d4>)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074d6:	4b35      	ldr	r3, [pc, #212]	@ (80075ac <HAL_RCC_ClockConfig+0x3d4>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 030f 	and.w	r3, r3, #15
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d001      	beq.n	80074e8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e05b      	b.n	80075a0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d010      	beq.n	8007516 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	68da      	ldr	r2, [r3, #12]
 80074f8:	4b2b      	ldr	r3, [pc, #172]	@ (80075a8 <HAL_RCC_ClockConfig+0x3d0>)
 80074fa:	6a1b      	ldr	r3, [r3, #32]
 80074fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007500:	429a      	cmp	r2, r3
 8007502:	d208      	bcs.n	8007516 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007504:	4b28      	ldr	r3, [pc, #160]	@ (80075a8 <HAL_RCC_ClockConfig+0x3d0>)
 8007506:	6a1b      	ldr	r3, [r3, #32]
 8007508:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	4925      	ldr	r1, [pc, #148]	@ (80075a8 <HAL_RCC_ClockConfig+0x3d0>)
 8007512:	4313      	orrs	r3, r2
 8007514:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0308 	and.w	r3, r3, #8
 800751e:	2b00      	cmp	r3, #0
 8007520:	d012      	beq.n	8007548 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	691a      	ldr	r2, [r3, #16]
 8007526:	4b20      	ldr	r3, [pc, #128]	@ (80075a8 <HAL_RCC_ClockConfig+0x3d0>)
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	091b      	lsrs	r3, r3, #4
 800752c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007530:	429a      	cmp	r2, r3
 8007532:	d209      	bcs.n	8007548 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007534:	4b1c      	ldr	r3, [pc, #112]	@ (80075a8 <HAL_RCC_ClockConfig+0x3d0>)
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	011b      	lsls	r3, r3, #4
 8007542:	4919      	ldr	r1, [pc, #100]	@ (80075a8 <HAL_RCC_ClockConfig+0x3d0>)
 8007544:	4313      	orrs	r3, r2
 8007546:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0310 	and.w	r3, r3, #16
 8007550:	2b00      	cmp	r3, #0
 8007552:	d010      	beq.n	8007576 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	695a      	ldr	r2, [r3, #20]
 8007558:	4b13      	ldr	r3, [pc, #76]	@ (80075a8 <HAL_RCC_ClockConfig+0x3d0>)
 800755a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800755c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007560:	429a      	cmp	r2, r3
 8007562:	d208      	bcs.n	8007576 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8007564:	4b10      	ldr	r3, [pc, #64]	@ (80075a8 <HAL_RCC_ClockConfig+0x3d0>)
 8007566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007568:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	490d      	ldr	r1, [pc, #52]	@ (80075a8 <HAL_RCC_ClockConfig+0x3d0>)
 8007572:	4313      	orrs	r3, r2
 8007574:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007576:	f000 f821 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 800757a:	4602      	mov	r2, r0
 800757c:	4b0a      	ldr	r3, [pc, #40]	@ (80075a8 <HAL_RCC_ClockConfig+0x3d0>)
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	490a      	ldr	r1, [pc, #40]	@ (80075b0 <HAL_RCC_ClockConfig+0x3d8>)
 8007586:	5ccb      	ldrb	r3, [r1, r3]
 8007588:	fa22 f303 	lsr.w	r3, r2, r3
 800758c:	4a09      	ldr	r2, [pc, #36]	@ (80075b4 <HAL_RCC_ClockConfig+0x3dc>)
 800758e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007590:	4b09      	ldr	r3, [pc, #36]	@ (80075b8 <HAL_RCC_ClockConfig+0x3e0>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4618      	mov	r0, r3
 8007596:	f7fc fc49 	bl	8003e2c <HAL_InitTick>
 800759a:	4603      	mov	r3, r0
 800759c:	73fb      	strb	r3, [r7, #15]

  return status;
 800759e:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3718      	adds	r7, #24
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	46020c00 	.word	0x46020c00
 80075ac:	40022000 	.word	0x40022000
 80075b0:	080144f8 	.word	0x080144f8
 80075b4:	20000000 	.word	0x20000000
 80075b8:	2000000c 	.word	0x2000000c

080075bc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075bc:	b480      	push	{r7}
 80075be:	b08b      	sub	sp, #44	@ 0x2c
 80075c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80075c2:	2300      	movs	r3, #0
 80075c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075ca:	4b78      	ldr	r3, [pc, #480]	@ (80077ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	f003 030c 	and.w	r3, r3, #12
 80075d2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80075d4:	4b75      	ldr	r3, [pc, #468]	@ (80077ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 80075d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d8:	f003 0303 	and.w	r3, r3, #3
 80075dc:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d005      	beq.n	80075f0 <HAL_RCC_GetSysClockFreq+0x34>
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	2b0c      	cmp	r3, #12
 80075e8:	d121      	bne.n	800762e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d11e      	bne.n	800762e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80075f0:	4b6e      	ldr	r3, [pc, #440]	@ (80077ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d107      	bne.n	800760c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80075fc:	4b6b      	ldr	r3, [pc, #428]	@ (80077ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 80075fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007602:	0b1b      	lsrs	r3, r3, #12
 8007604:	f003 030f 	and.w	r3, r3, #15
 8007608:	627b      	str	r3, [r7, #36]	@ 0x24
 800760a:	e005      	b.n	8007618 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800760c:	4b67      	ldr	r3, [pc, #412]	@ (80077ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	0f1b      	lsrs	r3, r3, #28
 8007612:	f003 030f 	and.w	r3, r3, #15
 8007616:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007618:	4a65      	ldr	r2, [pc, #404]	@ (80077b0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800761a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007620:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d110      	bne.n	800764a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800762c:	e00d      	b.n	800764a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800762e:	4b5f      	ldr	r3, [pc, #380]	@ (80077ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	f003 030c 	and.w	r3, r3, #12
 8007636:	2b04      	cmp	r3, #4
 8007638:	d102      	bne.n	8007640 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800763a:	4b5e      	ldr	r3, [pc, #376]	@ (80077b4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800763c:	623b      	str	r3, [r7, #32]
 800763e:	e004      	b.n	800764a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	2b08      	cmp	r3, #8
 8007644:	d101      	bne.n	800764a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007646:	4b5b      	ldr	r3, [pc, #364]	@ (80077b4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007648:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	2b0c      	cmp	r3, #12
 800764e:	f040 80a5 	bne.w	800779c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007652:	4b56      	ldr	r3, [pc, #344]	@ (80077ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007656:	f003 0303 	and.w	r3, r3, #3
 800765a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800765c:	4b53      	ldr	r3, [pc, #332]	@ (80077ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 800765e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007660:	0a1b      	lsrs	r3, r3, #8
 8007662:	f003 030f 	and.w	r3, r3, #15
 8007666:	3301      	adds	r3, #1
 8007668:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800766a:	4b50      	ldr	r3, [pc, #320]	@ (80077ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 800766c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766e:	091b      	lsrs	r3, r3, #4
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007676:	4b4d      	ldr	r3, [pc, #308]	@ (80077ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767a:	08db      	lsrs	r3, r3, #3
 800767c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	fb02 f303 	mul.w	r3, r2, r3
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	2b02      	cmp	r3, #2
 8007696:	d003      	beq.n	80076a0 <HAL_RCC_GetSysClockFreq+0xe4>
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	2b03      	cmp	r3, #3
 800769c:	d022      	beq.n	80076e4 <HAL_RCC_GetSysClockFreq+0x128>
 800769e:	e043      	b.n	8007728 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076aa:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80077b8 <HAL_RCC_GetSysClockFreq+0x1fc>
 80076ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b2:	4b3e      	ldr	r3, [pc, #248]	@ (80077ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 80076b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80076c2:	ed97 6a01 	vldr	s12, [r7, #4]
 80076c6:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80077bc <HAL_RCC_GetSysClockFreq+0x200>
 80076ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80076ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80076d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80076da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076e2:	e046      	b.n	8007772 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ee:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80077b8 <HAL_RCC_GetSysClockFreq+0x1fc>
 80076f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f6:	4b2d      	ldr	r3, [pc, #180]	@ (80077ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 80076f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007706:	ed97 6a01 	vldr	s12, [r7, #4]
 800770a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80077bc <HAL_RCC_GetSysClockFreq+0x200>
 800770e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007712:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007716:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800771a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800771e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007726:	e024      	b.n	8007772 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	ee07 3a90 	vmov	s15, r3
 8007738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007740:	4b1a      	ldr	r3, [pc, #104]	@ (80077ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007748:	ee07 3a90 	vmov	s15, r3
 800774c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007750:	ed97 6a01 	vldr	s12, [r7, #4]
 8007754:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80077bc <HAL_RCC_GetSysClockFreq+0x200>
 8007758:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800775c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007760:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007764:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007770:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8007772:	4b0e      	ldr	r3, [pc, #56]	@ (80077ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007776:	0e1b      	lsrs	r3, r3, #24
 8007778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800777c:	3301      	adds	r3, #1
 800777e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	ee07 3a90 	vmov	s15, r3
 8007786:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800778a:	edd7 6a07 	vldr	s13, [r7, #28]
 800778e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007796:	ee17 3a90 	vmov	r3, s15
 800779a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800779c:	6a3b      	ldr	r3, [r7, #32]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	372c      	adds	r7, #44	@ 0x2c
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	46020c00 	.word	0x46020c00
 80077b0:	08014510 	.word	0x08014510
 80077b4:	00f42400 	.word	0x00f42400
 80077b8:	4b742400 	.word	0x4b742400
 80077bc:	46000000 	.word	0x46000000

080077c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80077c4:	f7ff fefa 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 80077c8:	4602      	mov	r2, r0
 80077ca:	4b07      	ldr	r3, [pc, #28]	@ (80077e8 <HAL_RCC_GetHCLKFreq+0x28>)
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	f003 030f 	and.w	r3, r3, #15
 80077d2:	4906      	ldr	r1, [pc, #24]	@ (80077ec <HAL_RCC_GetHCLKFreq+0x2c>)
 80077d4:	5ccb      	ldrb	r3, [r1, r3]
 80077d6:	fa22 f303 	lsr.w	r3, r2, r3
 80077da:	4a05      	ldr	r2, [pc, #20]	@ (80077f0 <HAL_RCC_GetHCLKFreq+0x30>)
 80077dc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80077de:	4b04      	ldr	r3, [pc, #16]	@ (80077f0 <HAL_RCC_GetHCLKFreq+0x30>)
 80077e0:	681b      	ldr	r3, [r3, #0]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	46020c00 	.word	0x46020c00
 80077ec:	080144f8 	.word	0x080144f8
 80077f0:	20000000 	.word	0x20000000

080077f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80077f8:	f7ff ffe2 	bl	80077c0 <HAL_RCC_GetHCLKFreq>
 80077fc:	4602      	mov	r2, r0
 80077fe:	4b05      	ldr	r3, [pc, #20]	@ (8007814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	091b      	lsrs	r3, r3, #4
 8007804:	f003 0307 	and.w	r3, r3, #7
 8007808:	4903      	ldr	r1, [pc, #12]	@ (8007818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800780a:	5ccb      	ldrb	r3, [r1, r3]
 800780c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007810:	4618      	mov	r0, r3
 8007812:	bd80      	pop	{r7, pc}
 8007814:	46020c00 	.word	0x46020c00
 8007818:	08014508 	.word	0x08014508

0800781c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007820:	f7ff ffce 	bl	80077c0 <HAL_RCC_GetHCLKFreq>
 8007824:	4602      	mov	r2, r0
 8007826:	4b05      	ldr	r3, [pc, #20]	@ (800783c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	0a1b      	lsrs	r3, r3, #8
 800782c:	f003 0307 	and.w	r3, r3, #7
 8007830:	4903      	ldr	r1, [pc, #12]	@ (8007840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007832:	5ccb      	ldrb	r3, [r1, r3]
 8007834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007838:	4618      	mov	r0, r3
 800783a:	bd80      	pop	{r7, pc}
 800783c:	46020c00 	.word	0x46020c00
 8007840:	08014508 	.word	0x08014508

08007844 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8007848:	f7ff ffba 	bl	80077c0 <HAL_RCC_GetHCLKFreq>
 800784c:	4602      	mov	r2, r0
 800784e:	4b05      	ldr	r3, [pc, #20]	@ (8007864 <HAL_RCC_GetPCLK3Freq+0x20>)
 8007850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007852:	091b      	lsrs	r3, r3, #4
 8007854:	f003 0307 	and.w	r3, r3, #7
 8007858:	4903      	ldr	r1, [pc, #12]	@ (8007868 <HAL_RCC_GetPCLK3Freq+0x24>)
 800785a:	5ccb      	ldrb	r3, [r1, r3]
 800785c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007860:	4618      	mov	r0, r3
 8007862:	bd80      	pop	{r7, pc}
 8007864:	46020c00 	.word	0x46020c00
 8007868:	08014508 	.word	0x08014508

0800786c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007874:	4b3e      	ldr	r3, [pc, #248]	@ (8007970 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800787a:	f003 0304 	and.w	r3, r3, #4
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007882:	f7fe fd4f 	bl	8006324 <HAL_PWREx_GetVoltageRange>
 8007886:	6178      	str	r0, [r7, #20]
 8007888:	e019      	b.n	80078be <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800788a:	4b39      	ldr	r3, [pc, #228]	@ (8007970 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800788c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007890:	4a37      	ldr	r2, [pc, #220]	@ (8007970 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007892:	f043 0304 	orr.w	r3, r3, #4
 8007896:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800789a:	4b35      	ldr	r3, [pc, #212]	@ (8007970 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800789c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078a0:	f003 0304 	and.w	r3, r3, #4
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80078a8:	f7fe fd3c 	bl	8006324 <HAL_PWREx_GetVoltageRange>
 80078ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80078ae:	4b30      	ldr	r3, [pc, #192]	@ (8007970 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80078b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078b4:	4a2e      	ldr	r2, [pc, #184]	@ (8007970 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80078b6:	f023 0304 	bic.w	r3, r3, #4
 80078ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078c4:	d003      	beq.n	80078ce <RCC_SetFlashLatencyFromMSIRange+0x62>
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078cc:	d109      	bne.n	80078e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078d4:	d202      	bcs.n	80078dc <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80078d6:	2301      	movs	r3, #1
 80078d8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80078da:	e033      	b.n	8007944 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80078dc:	2300      	movs	r3, #0
 80078de:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80078e0:	e030      	b.n	8007944 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078e8:	d208      	bcs.n	80078fc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078f0:	d102      	bne.n	80078f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80078f2:	2303      	movs	r3, #3
 80078f4:	613b      	str	r3, [r7, #16]
 80078f6:	e025      	b.n	8007944 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e035      	b.n	8007968 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007902:	d90f      	bls.n	8007924 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d109      	bne.n	800791e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007910:	d902      	bls.n	8007918 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8007912:	2300      	movs	r3, #0
 8007914:	613b      	str	r3, [r7, #16]
 8007916:	e015      	b.n	8007944 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007918:	2301      	movs	r3, #1
 800791a:	613b      	str	r3, [r7, #16]
 800791c:	e012      	b.n	8007944 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800791e:	2300      	movs	r3, #0
 8007920:	613b      	str	r3, [r7, #16]
 8007922:	e00f      	b.n	8007944 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800792a:	d109      	bne.n	8007940 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007932:	d102      	bne.n	800793a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007934:	2301      	movs	r3, #1
 8007936:	613b      	str	r3, [r7, #16]
 8007938:	e004      	b.n	8007944 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800793a:	2302      	movs	r3, #2
 800793c:	613b      	str	r3, [r7, #16]
 800793e:	e001      	b.n	8007944 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007940:	2301      	movs	r3, #1
 8007942:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007944:	4b0b      	ldr	r3, [pc, #44]	@ (8007974 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f023 020f 	bic.w	r2, r3, #15
 800794c:	4909      	ldr	r1, [pc, #36]	@ (8007974 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	4313      	orrs	r3, r2
 8007952:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007954:	4b07      	ldr	r3, [pc, #28]	@ (8007974 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 030f 	and.w	r3, r3, #15
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	429a      	cmp	r2, r3
 8007960:	d001      	beq.n	8007966 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e000      	b.n	8007968 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	46020c00 	.word	0x46020c00
 8007974:	40022000 	.word	0x40022000

08007978 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800797c:	b0ba      	sub	sp, #232	@ 0xe8
 800797e:	af00      	add	r7, sp, #0
 8007980:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007984:	2300      	movs	r3, #0
 8007986:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800798a:	2300      	movs	r3, #0
 800798c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007990:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007998:	f002 0401 	and.w	r4, r2, #1
 800799c:	2500      	movs	r5, #0
 800799e:	ea54 0305 	orrs.w	r3, r4, r5
 80079a2:	d00b      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80079a4:	4bcb      	ldr	r3, [pc, #812]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079aa:	f023 0103 	bic.w	r1, r3, #3
 80079ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079b4:	4ac7      	ldr	r2, [pc, #796]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079b6:	430b      	orrs	r3, r1
 80079b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80079bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c4:	f002 0802 	and.w	r8, r2, #2
 80079c8:	f04f 0900 	mov.w	r9, #0
 80079cc:	ea58 0309 	orrs.w	r3, r8, r9
 80079d0:	d00b      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80079d2:	4bc0      	ldr	r3, [pc, #768]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079d8:	f023 010c 	bic.w	r1, r3, #12
 80079dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079e2:	4abc      	ldr	r2, [pc, #752]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079e4:	430b      	orrs	r3, r1
 80079e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80079ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	f002 0a04 	and.w	sl, r2, #4
 80079f6:	f04f 0b00 	mov.w	fp, #0
 80079fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80079fe:	d00b      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007a00:	4bb4      	ldr	r3, [pc, #720]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a06:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007a0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a10:	4ab0      	ldr	r2, [pc, #704]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a12:	430b      	orrs	r3, r1
 8007a14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007a18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a20:	f002 0308 	and.w	r3, r2, #8
 8007a24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007a32:	460b      	mov	r3, r1
 8007a34:	4313      	orrs	r3, r2
 8007a36:	d00b      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007a38:	4ba6      	ldr	r3, [pc, #664]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a48:	4aa2      	ldr	r2, [pc, #648]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a4a:	430b      	orrs	r3, r1
 8007a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	f002 0310 	and.w	r3, r2, #16
 8007a5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a60:	2300      	movs	r3, #0
 8007a62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a66:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	d00b      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007a70:	4b98      	ldr	r3, [pc, #608]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a76:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a80:	4a94      	ldr	r2, [pc, #592]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a82:	430b      	orrs	r3, r1
 8007a84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a90:	f002 0320 	and.w	r3, r2, #32
 8007a94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007a9e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	d00b      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007aa8:	4b8a      	ldr	r3, [pc, #552]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007aaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007aae:	f023 0107 	bic.w	r1, r3, #7
 8007ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ab8:	4a86      	ldr	r2, [pc, #536]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007aba:	430b      	orrs	r3, r1
 8007abc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ac0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007acc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ad6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007ada:	460b      	mov	r3, r1
 8007adc:	4313      	orrs	r3, r2
 8007ade:	d00b      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007ae0:	4b7c      	ldr	r3, [pc, #496]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ae6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007aee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007af0:	4a78      	ldr	r2, [pc, #480]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007af2:	430b      	orrs	r3, r1
 8007af4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007af8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b00:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007b04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b0e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b12:	460b      	mov	r3, r1
 8007b14:	4313      	orrs	r3, r2
 8007b16:	d00b      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007b18:	4b6e      	ldr	r3, [pc, #440]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b28:	4a6a      	ldr	r2, [pc, #424]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b2a:	430b      	orrs	r3, r1
 8007b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b38:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007b3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b40:	2300      	movs	r3, #0
 8007b42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b46:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	d00b      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007b50:	4b60      	ldr	r3, [pc, #384]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b56:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b60:	4a5c      	ldr	r2, [pc, #368]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b62:	430b      	orrs	r3, r1
 8007b64:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b70:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007b74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b7e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007b82:	460b      	mov	r3, r1
 8007b84:	4313      	orrs	r3, r2
 8007b86:	d00b      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007b88:	4b52      	ldr	r3, [pc, #328]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b8e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8007b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b98:	4a4e      	ldr	r2, [pc, #312]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b9a:	430b      	orrs	r3, r1
 8007b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007ba0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba8:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007bac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007bb6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	d00b      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007bc0:	4b44      	ldr	r3, [pc, #272]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007bc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007bc6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007bca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007bd0:	4a40      	ldr	r2, [pc, #256]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007bd2:	430b      	orrs	r3, r1
 8007bd4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007bd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007be8:	2300      	movs	r3, #0
 8007bea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007bee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	d00b      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007bf8:	4b36      	ldr	r3, [pc, #216]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bfe:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007c02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c08:	4a32      	ldr	r2, [pc, #200]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c0a:	430b      	orrs	r3, r1
 8007c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8007c10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007c1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c20:	2300      	movs	r3, #0
 8007c22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c26:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	d00c      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007c30:	4b28      	ldr	r3, [pc, #160]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c42:	4a24      	ldr	r2, [pc, #144]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c44:	430b      	orrs	r3, r1
 8007c46:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c52:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007c56:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c58:	2300      	movs	r3, #0
 8007c5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c5c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007c60:	460b      	mov	r3, r1
 8007c62:	4313      	orrs	r3, r2
 8007c64:	d04f      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c6e:	2b80      	cmp	r3, #128	@ 0x80
 8007c70:	d02d      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x356>
 8007c72:	2b80      	cmp	r3, #128	@ 0x80
 8007c74:	d827      	bhi.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007c76:	2b60      	cmp	r3, #96	@ 0x60
 8007c78:	d02e      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007c7a:	2b60      	cmp	r3, #96	@ 0x60
 8007c7c:	d823      	bhi.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007c7e:	2b40      	cmp	r3, #64	@ 0x40
 8007c80:	d006      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8007c82:	2b40      	cmp	r3, #64	@ 0x40
 8007c84:	d81f      	bhi.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d009      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x326>
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	d011      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8007c8e:	e01a      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c90:	4b10      	ldr	r3, [pc, #64]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c94:	4a0f      	ldr	r2, [pc, #60]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c9a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007c9c:	e01d      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ca2:	3308      	adds	r3, #8
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f002 fa17 	bl	800a0d8 <RCCEx_PLL2_Config>
 8007caa:	4603      	mov	r3, r0
 8007cac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007cb0:	e013      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007cb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cb6:	332c      	adds	r3, #44	@ 0x2c
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f002 faa5 	bl	800a208 <RCCEx_PLL3_Config>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007cc4:	e009      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007ccc:	e005      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8007cce:	bf00      	nop
 8007cd0:	e003      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007cd2:	bf00      	nop
 8007cd4:	46020c00 	.word	0x46020c00
        break;
 8007cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cda:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10d      	bne.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007ce2:	4bb6      	ldr	r3, [pc, #728]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007ce4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ce8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8007cec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cf4:	4ab1      	ldr	r2, [pc, #708]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007cf6:	430b      	orrs	r3, r1
 8007cf8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007cfc:	e003      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cfe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007d02:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007d06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007d12:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d14:	2300      	movs	r3, #0
 8007d16:	677b      	str	r3, [r7, #116]	@ 0x74
 8007d18:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	d053      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d2e:	d033      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007d30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d34:	d82c      	bhi.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007d36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d3a:	d02f      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007d3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d40:	d826      	bhi.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007d42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d46:	d008      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8007d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d4c:	d820      	bhi.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8007d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d56:	d011      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8007d58:	e01a      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007d5a:	4b98      	ldr	r3, [pc, #608]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d5e:	4a97      	ldr	r2, [pc, #604]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d64:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007d66:	e01a      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d6c:	3308      	adds	r3, #8
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f002 f9b2 	bl	800a0d8 <RCCEx_PLL2_Config>
 8007d74:	4603      	mov	r3, r0
 8007d76:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007d7a:	e010      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d80:	332c      	adds	r3, #44	@ 0x2c
 8007d82:	4618      	mov	r0, r3
 8007d84:	f002 fa40 	bl	800a208 <RCCEx_PLL3_Config>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007d8e:	e006      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007d96:	e002      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007d98:	bf00      	nop
 8007d9a:	e000      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d9e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10d      	bne.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007da6:	4b85      	ldr	r3, [pc, #532]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007da8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007dac:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007db0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007db8:	4a80      	ldr	r2, [pc, #512]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007dba:	430b      	orrs	r3, r1
 8007dbc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007dc0:	e003      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007dc6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007dca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007dd6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007dd8:	2300      	movs	r3, #0
 8007dda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ddc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007de0:	460b      	mov	r3, r1
 8007de2:	4313      	orrs	r3, r2
 8007de4:	d046      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007dee:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007df2:	d028      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007df4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007df8:	d821      	bhi.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007dfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007dfe:	d022      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007e00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e04:	d81b      	bhi.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007e06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e0a:	d01c      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007e0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e10:	d815      	bhi.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007e12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e16:	d008      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007e18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e1c:	d80f      	bhi.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d011      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e26:	d00e      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007e28:	e009      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e2e:	3308      	adds	r3, #8
 8007e30:	4618      	mov	r0, r3
 8007e32:	f002 f951 	bl	800a0d8 <RCCEx_PLL2_Config>
 8007e36:	4603      	mov	r3, r0
 8007e38:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007e3c:	e004      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007e44:	e000      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8007e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e48:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10d      	bne.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007e50:	4b5a      	ldr	r3, [pc, #360]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007e52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e56:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007e62:	4a56      	ldr	r2, [pc, #344]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007e64:	430b      	orrs	r3, r1
 8007e66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007e6a:	e003      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e6c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007e70:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8007e74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007e80:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e82:	2300      	movs	r3, #0
 8007e84:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e86:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	d03f      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8007e90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e98:	2b04      	cmp	r3, #4
 8007e9a:	d81e      	bhi.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x562>
 8007e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8007e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea2:	bf00      	nop
 8007ea4:	08007ee3 	.word	0x08007ee3
 8007ea8:	08007eb9 	.word	0x08007eb9
 8007eac:	08007ec7 	.word	0x08007ec7
 8007eb0:	08007ee3 	.word	0x08007ee3
 8007eb4:	08007ee3 	.word	0x08007ee3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007eb8:	4b40      	ldr	r3, [pc, #256]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ebc:	4a3f      	ldr	r2, [pc, #252]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007ebe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ec2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007ec4:	e00e      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007ec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007eca:	332c      	adds	r3, #44	@ 0x2c
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f002 f99b 	bl	800a208 <RCCEx_PLL3_Config>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007ed8:	e004      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007ee0:	e000      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8007ee2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007ee4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10d      	bne.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8007eec:	4b33      	ldr	r3, [pc, #204]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007eee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ef2:	f023 0107 	bic.w	r1, r3, #7
 8007ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007efe:	4a2f      	ldr	r2, [pc, #188]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007f00:	430b      	orrs	r3, r1
 8007f02:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007f06:	e003      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f08:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007f0c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8007f10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f18:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007f1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f1e:	2300      	movs	r3, #0
 8007f20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f22:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007f26:	460b      	mov	r3, r1
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	d04d      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8007f2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f38:	d028      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8007f3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f3e:	d821      	bhi.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007f40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f44:	d024      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8007f46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f4a:	d81b      	bhi.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007f4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f50:	d00e      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8007f52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f56:	d815      	bhi.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d01b      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8007f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f60:	d110      	bne.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007f62:	4b16      	ldr	r3, [pc, #88]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f66:	4a15      	ldr	r2, [pc, #84]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f6c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007f6e:	e012      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007f70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f74:	332c      	adds	r3, #44	@ 0x2c
 8007f76:	4618      	mov	r0, r3
 8007f78:	f002 f946 	bl	800a208 <RCCEx_PLL3_Config>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007f82:	e008      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007f8a:	e004      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007f8c:	bf00      	nop
 8007f8e:	e002      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007f90:	bf00      	nop
 8007f92:	e000      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007f94:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007f96:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d110      	bne.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8007f9e:	4b07      	ldr	r3, [pc, #28]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007fa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fa4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007fa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fb0:	4a02      	ldr	r2, [pc, #8]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007fb2:	430b      	orrs	r3, r1
 8007fb4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007fb8:	e006      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8007fba:	bf00      	nop
 8007fbc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007fc4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007fc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007fd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8007fda:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007fde:	460b      	mov	r3, r1
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	f000 80b5 	beq.w	8008150 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fec:	4b9d      	ldr	r3, [pc, #628]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ff2:	f003 0304 	and.w	r3, r3, #4
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d113      	bne.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ffa:	4b9a      	ldr	r3, [pc, #616]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008000:	4a98      	ldr	r2, [pc, #608]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008002:	f043 0304 	orr.w	r3, r3, #4
 8008006:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800800a:	4b96      	ldr	r3, [pc, #600]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800800c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008010:	f003 0304 	and.w	r3, r3, #4
 8008014:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008018:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 800801c:	2301      	movs	r3, #1
 800801e:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008022:	4b91      	ldr	r3, [pc, #580]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008026:	4a90      	ldr	r2, [pc, #576]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008028:	f043 0301 	orr.w	r3, r3, #1
 800802c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800802e:	f7fb ff87 	bl	8003f40 <HAL_GetTick>
 8008032:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008036:	e00b      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008038:	f7fb ff82 	bl	8003f40 <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	2b02      	cmp	r3, #2
 8008046:	d903      	bls.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800804e:	e005      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008050:	4b85      	ldr	r3, [pc, #532]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008054:	f003 0301 	and.w	r3, r3, #1
 8008058:	2b00      	cmp	r3, #0
 800805a:	d0ed      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800805c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8008060:	2b00      	cmp	r3, #0
 8008062:	d165      	bne.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008064:	4b7f      	ldr	r3, [pc, #508]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008066:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800806a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800806e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8008072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008076:	2b00      	cmp	r3, #0
 8008078:	d023      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800807a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800807e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008086:	4293      	cmp	r3, r2
 8008088:	d01b      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800808a:	4b76      	ldr	r3, [pc, #472]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800808c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008094:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008098:	4b72      	ldr	r3, [pc, #456]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800809a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800809e:	4a71      	ldr	r2, [pc, #452]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80080a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080a8:	4b6e      	ldr	r3, [pc, #440]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80080aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080ae:	4a6d      	ldr	r2, [pc, #436]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80080b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80080b8:	4a6a      	ldr	r2, [pc, #424]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80080ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80080c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080c6:	f003 0301 	and.w	r3, r3, #1
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d019      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ce:	f7fb ff37 	bl	8003f40 <HAL_GetTick>
 80080d2:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080d6:	e00d      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080d8:	f7fb ff32 	bl	8003f40 <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080e2:	1ad2      	subs	r2, r2, r3
 80080e4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d903      	bls.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 80080f2:	e006      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080f4:	4b5b      	ldr	r3, [pc, #364]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80080f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080fa:	f003 0302 	and.w	r3, r3, #2
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d0ea      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8008102:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10d      	bne.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800810a:	4b56      	ldr	r3, [pc, #344]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800810c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008110:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008114:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008118:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800811c:	4a51      	ldr	r2, [pc, #324]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800811e:	430b      	orrs	r3, r1
 8008120:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008124:	e008      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008126:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800812a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 800812e:	e003      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008130:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8008134:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008138:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 800813c:	2b01      	cmp	r3, #1
 800813e:	d107      	bne.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008140:	4b48      	ldr	r3, [pc, #288]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008142:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008146:	4a47      	ldr	r2, [pc, #284]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008148:	f023 0304 	bic.w	r3, r3, #4
 800814c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8008150:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800815c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800815e:	2300      	movs	r3, #0
 8008160:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008162:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008166:	460b      	mov	r3, r1
 8008168:	4313      	orrs	r3, r2
 800816a:	d042      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800816c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008170:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008174:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008178:	d022      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800817a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800817e:	d81b      	bhi.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8008180:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008184:	d011      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x832>
 8008186:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800818a:	d815      	bhi.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800818c:	2b00      	cmp	r3, #0
 800818e:	d019      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8008190:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008194:	d110      	bne.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800819a:	3308      	adds	r3, #8
 800819c:	4618      	mov	r0, r3
 800819e:	f001 ff9b 	bl	800a0d8 <RCCEx_PLL2_Config>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80081a8:	e00d      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081aa:	4b2e      	ldr	r3, [pc, #184]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80081ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ae:	4a2d      	ldr	r2, [pc, #180]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80081b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081b4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80081b6:	e006      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80081be:	e002      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80081c0:	bf00      	nop
 80081c2:	e000      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80081c4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80081c6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10d      	bne.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80081ce:	4b25      	ldr	r3, [pc, #148]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80081d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081d4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80081d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80081dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80081e0:	4a20      	ldr	r2, [pc, #128]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80081e2:	430b      	orrs	r3, r1
 80081e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80081e8:	e003      	b.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ea:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80081ee:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80081f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80081f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fa:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80081fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8008200:	2300      	movs	r3, #0
 8008202:	647b      	str	r3, [r7, #68]	@ 0x44
 8008204:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008208:	460b      	mov	r3, r1
 800820a:	4313      	orrs	r3, r2
 800820c:	d032      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800820e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008212:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008216:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800821a:	d00b      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800821c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008220:	d804      	bhi.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8008222:	2b00      	cmp	r3, #0
 8008224:	d008      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8008226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800822a:	d007      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8008232:	e004      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8008234:	bf00      	nop
 8008236:	e002      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8008238:	bf00      	nop
 800823a:	e000      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800823c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800823e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8008242:	2b00      	cmp	r3, #0
 8008244:	d112      	bne.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008246:	4b07      	ldr	r3, [pc, #28]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008248:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800824c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008250:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008254:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008258:	4a02      	ldr	r2, [pc, #8]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800825a:	430b      	orrs	r3, r1
 800825c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008260:	e008      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8008262:	bf00      	nop
 8008264:	46020c00 	.word	0x46020c00
 8008268:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800826c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8008270:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8008274:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008280:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008282:	2300      	movs	r3, #0
 8008284:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008286:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800828a:	460b      	mov	r3, r1
 800828c:	4313      	orrs	r3, r2
 800828e:	d00c      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8008290:	4b98      	ldr	r3, [pc, #608]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008292:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008296:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800829a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800829e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80082a2:	4a94      	ldr	r2, [pc, #592]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80082a4:	430b      	orrs	r3, r1
 80082a6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80082aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80082b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80082b8:	2300      	movs	r3, #0
 80082ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80082bc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80082c0:	460b      	mov	r3, r1
 80082c2:	4313      	orrs	r3, r2
 80082c4:	d019      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80082c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80082ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082d2:	d105      	bne.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80082d4:	4b87      	ldr	r3, [pc, #540]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80082d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d8:	4a86      	ldr	r2, [pc, #536]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80082da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082de:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80082e0:	4b84      	ldr	r3, [pc, #528]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80082e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80082e6:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80082ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80082f2:	4a80      	ldr	r2, [pc, #512]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80082f4:	430b      	orrs	r3, r1
 80082f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80082fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008306:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008308:	2300      	movs	r3, #0
 800830a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800830c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008310:	460b      	mov	r3, r1
 8008312:	4313      	orrs	r3, r2
 8008314:	d00c      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008316:	4b77      	ldr	r3, [pc, #476]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800831c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008320:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008324:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008328:	4972      	ldr	r1, [pc, #456]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800832a:	4313      	orrs	r3, r2
 800832c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008330:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008338:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800833c:	623b      	str	r3, [r7, #32]
 800833e:	2300      	movs	r3, #0
 8008340:	627b      	str	r3, [r7, #36]	@ 0x24
 8008342:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008346:	460b      	mov	r3, r1
 8008348:	4313      	orrs	r3, r2
 800834a:	d00c      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800834c:	4b69      	ldr	r3, [pc, #420]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800834e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008352:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800835a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800835e:	4965      	ldr	r1, [pc, #404]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008360:	4313      	orrs	r3, r2
 8008362:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800836a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008372:	61bb      	str	r3, [r7, #24]
 8008374:	2300      	movs	r3, #0
 8008376:	61fb      	str	r3, [r7, #28]
 8008378:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800837c:	460b      	mov	r3, r1
 800837e:	4313      	orrs	r3, r2
 8008380:	d00c      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008382:	4b5c      	ldr	r3, [pc, #368]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008388:	f023 0218 	bic.w	r2, r3, #24
 800838c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008390:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008394:	4957      	ldr	r1, [pc, #348]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008396:	4313      	orrs	r3, r2
 8008398:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800839c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80083a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80083a8:	613b      	str	r3, [r7, #16]
 80083aa:	2300      	movs	r3, #0
 80083ac:	617b      	str	r3, [r7, #20]
 80083ae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80083b2:	460b      	mov	r3, r1
 80083b4:	4313      	orrs	r3, r2
 80083b6:	d032      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80083b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80083bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80083c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083c4:	d105      	bne.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083c6:	4b4b      	ldr	r3, [pc, #300]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80083c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ca:	4a4a      	ldr	r2, [pc, #296]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80083cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083d0:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80083d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80083d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80083da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80083de:	d108      	bne.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80083e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80083e4:	3308      	adds	r3, #8
 80083e6:	4618      	mov	r0, r3
 80083e8:	f001 fe76 	bl	800a0d8 <RCCEx_PLL2_Config>
 80083ec:	4603      	mov	r3, r0
 80083ee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 80083f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10d      	bne.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80083fa:	4b3e      	ldr	r3, [pc, #248]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80083fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008400:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008404:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008408:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800840c:	4939      	ldr	r1, [pc, #228]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800840e:	4313      	orrs	r3, r2
 8008410:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008414:	e003      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008416:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800841a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800841e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008426:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800842a:	60bb      	str	r3, [r7, #8]
 800842c:	2300      	movs	r3, #0
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008434:	460b      	mov	r3, r1
 8008436:	4313      	orrs	r3, r2
 8008438:	d03a      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800843a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800843e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008442:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008446:	d00e      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8008448:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800844c:	d815      	bhi.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800844e:	2b00      	cmp	r3, #0
 8008450:	d017      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008452:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008456:	d110      	bne.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008458:	4b26      	ldr	r3, [pc, #152]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800845a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800845c:	4a25      	ldr	r2, [pc, #148]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800845e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008462:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008464:	e00e      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800846a:	3308      	adds	r3, #8
 800846c:	4618      	mov	r0, r3
 800846e:	f001 fe33 	bl	800a0d8 <RCCEx_PLL2_Config>
 8008472:	4603      	mov	r3, r0
 8008474:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008478:	e004      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8008480:	e000      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8008482:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008484:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10d      	bne.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800848c:	4b19      	ldr	r3, [pc, #100]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800848e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008492:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008496:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800849a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800849e:	4915      	ldr	r1, [pc, #84]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80084a0:	4313      	orrs	r3, r2
 80084a2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80084a6:	e003      	b.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80084ac:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80084b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80084bc:	603b      	str	r3, [r7, #0]
 80084be:	2300      	movs	r3, #0
 80084c0:	607b      	str	r3, [r7, #4]
 80084c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80084c6:	460b      	mov	r3, r1
 80084c8:	4313      	orrs	r3, r2
 80084ca:	d00c      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80084cc:	4b09      	ldr	r3, [pc, #36]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80084ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80084d2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80084d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80084da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80084de:	4905      	ldr	r1, [pc, #20]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80084e0:	4313      	orrs	r3, r2
 80084e2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80084e6:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	37e8      	adds	r7, #232	@ 0xe8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084f4:	46020c00 	.word	0x46020c00

080084f8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b089      	sub	sp, #36	@ 0x24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008500:	4ba6      	ldr	r3, [pc, #664]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008508:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800850a:	4ba4      	ldr	r3, [pc, #656]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800850c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8008514:	4ba1      	ldr	r3, [pc, #644]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008518:	0a1b      	lsrs	r3, r3, #8
 800851a:	f003 030f 	and.w	r3, r3, #15
 800851e:	3301      	adds	r3, #1
 8008520:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008522:	4b9e      	ldr	r3, [pc, #632]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008526:	091b      	lsrs	r3, r3, #4
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800852e:	4b9b      	ldr	r3, [pc, #620]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008532:	08db      	lsrs	r3, r3, #3
 8008534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	fb02 f303 	mul.w	r3, r2, r3
 800853e:	ee07 3a90 	vmov	s15, r3
 8008542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008546:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	2b03      	cmp	r3, #3
 800854e:	d062      	beq.n	8008616 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	2b03      	cmp	r3, #3
 8008554:	f200 8081 	bhi.w	800865a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d024      	beq.n	80085a8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	2b02      	cmp	r3, #2
 8008562:	d17a      	bne.n	800865a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	ee07 3a90 	vmov	s15, r3
 800856a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800856e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8008572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008576:	4b89      	ldr	r3, [pc, #548]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800857a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800857e:	ee07 3a90 	vmov	s15, r3
 8008582:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008586:	ed97 6a02 	vldr	s12, [r7, #8]
 800858a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80087a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800858e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008592:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008596:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800859a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800859e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085a6:	e08f      	b.n	80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80085a8:	4b7c      	ldr	r3, [pc, #496]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d005      	beq.n	80085c0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80085b4:	4b79      	ldr	r3, [pc, #484]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	0f1b      	lsrs	r3, r3, #28
 80085ba:	f003 030f 	and.w	r3, r3, #15
 80085be:	e006      	b.n	80085ce <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80085c0:	4b76      	ldr	r3, [pc, #472]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80085c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80085c6:	041b      	lsls	r3, r3, #16
 80085c8:	0f1b      	lsrs	r3, r3, #28
 80085ca:	f003 030f 	and.w	r3, r3, #15
 80085ce:	4a76      	ldr	r2, [pc, #472]	@ (80087a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80085d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085d4:	ee07 3a90 	vmov	s15, r3
 80085d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	ee07 3a90 	vmov	s15, r3
 80085e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	ee07 3a90 	vmov	s15, r3
 80085f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80085f8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80087a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80085fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008604:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008608:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800860c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008610:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008614:	e058      	b.n	80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	ee07 3a90 	vmov	s15, r3
 800861c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008620:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8008624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008628:	4b5c      	ldr	r3, [pc, #368]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800862a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800862c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008630:	ee07 3a90 	vmov	s15, r3
 8008634:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008638:	ed97 6a02 	vldr	s12, [r7, #8]
 800863c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80087a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008640:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008644:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008648:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800864c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008654:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008658:	e036      	b.n	80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800865a:	4b50      	ldr	r3, [pc, #320]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d005      	beq.n	8008672 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8008666:	4b4d      	ldr	r3, [pc, #308]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	0f1b      	lsrs	r3, r3, #28
 800866c:	f003 030f 	and.w	r3, r3, #15
 8008670:	e006      	b.n	8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8008672:	4b4a      	ldr	r3, [pc, #296]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008674:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008678:	041b      	lsls	r3, r3, #16
 800867a:	0f1b      	lsrs	r3, r3, #28
 800867c:	f003 030f 	and.w	r3, r3, #15
 8008680:	4a49      	ldr	r2, [pc, #292]	@ (80087a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008686:	ee07 3a90 	vmov	s15, r3
 800868a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	ee07 3a90 	vmov	s15, r3
 8008694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008698:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	ee07 3a90 	vmov	s15, r3
 80086a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80086aa:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80087a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80086ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80086be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086c6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80086c8:	4b34      	ldr	r3, [pc, #208]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80086ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d017      	beq.n	8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80086d4:	4b31      	ldr	r3, [pc, #196]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80086d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086d8:	0a5b      	lsrs	r3, r3, #9
 80086da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086de:	ee07 3a90 	vmov	s15, r3
 80086e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80086e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086ea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80086ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80086f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086fa:	ee17 2a90 	vmov	r2, s15
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	601a      	str	r2, [r3, #0]
 8008702:	e002      	b.n	800870a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800870a:	4b24      	ldr	r3, [pc, #144]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800870c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800870e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d017      	beq.n	8008746 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008716:	4b21      	ldr	r3, [pc, #132]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800871a:	0c1b      	lsrs	r3, r3, #16
 800871c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008720:	ee07 3a90 	vmov	s15, r3
 8008724:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008728:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800872c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008730:	edd7 6a07 	vldr	s13, [r7, #28]
 8008734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800873c:	ee17 2a90 	vmov	r2, s15
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	605a      	str	r2, [r3, #4]
 8008744:	e002      	b.n	800874c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800874c:	4b13      	ldr	r3, [pc, #76]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800874e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008750:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d017      	beq.n	8008788 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008758:	4b10      	ldr	r3, [pc, #64]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800875a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800875c:	0e1b      	lsrs	r3, r3, #24
 800875e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008762:	ee07 3a90 	vmov	s15, r3
 8008766:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800876a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800876e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008772:	edd7 6a07 	vldr	s13, [r7, #28]
 8008776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800877a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800877e:	ee17 2a90 	vmov	r2, s15
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008786:	e002      	b.n	800878e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	609a      	str	r2, [r3, #8]
}
 800878e:	bf00      	nop
 8008790:	3724      	adds	r7, #36	@ 0x24
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	46020c00 	.word	0x46020c00
 80087a0:	4b742400 	.word	0x4b742400
 80087a4:	46000000 	.word	0x46000000
 80087a8:	08014510 	.word	0x08014510

080087ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b089      	sub	sp, #36	@ 0x24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80087b4:	4ba6      	ldr	r3, [pc, #664]	@ (8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80087b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087bc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80087be:	4ba4      	ldr	r3, [pc, #656]	@ (8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80087c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c2:	f003 0303 	and.w	r3, r3, #3
 80087c6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80087c8:	4ba1      	ldr	r3, [pc, #644]	@ (8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80087ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087cc:	0a1b      	lsrs	r3, r3, #8
 80087ce:	f003 030f 	and.w	r3, r3, #15
 80087d2:	3301      	adds	r3, #1
 80087d4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80087d6:	4b9e      	ldr	r3, [pc, #632]	@ (8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80087d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087da:	091b      	lsrs	r3, r3, #4
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80087e2:	4b9b      	ldr	r3, [pc, #620]	@ (8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80087e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e6:	08db      	lsrs	r3, r3, #3
 80087e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	fb02 f303 	mul.w	r3, r2, r3
 80087f2:	ee07 3a90 	vmov	s15, r3
 80087f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087fa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2b03      	cmp	r3, #3
 8008802:	d062      	beq.n	80088ca <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	2b03      	cmp	r3, #3
 8008808:	f200 8081 	bhi.w	800890e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d024      	beq.n	800885c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	2b02      	cmp	r3, #2
 8008816:	d17a      	bne.n	800890e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	ee07 3a90 	vmov	s15, r3
 800881e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008822:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800882a:	4b89      	ldr	r3, [pc, #548]	@ (8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800882c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800882e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800883a:	ed97 6a02 	vldr	s12, [r7, #8]
 800883e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008842:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008846:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800884a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800884e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008856:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800885a:	e08f      	b.n	800897c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800885c:	4b7c      	ldr	r3, [pc, #496]	@ (8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d005      	beq.n	8008874 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008868:	4b79      	ldr	r3, [pc, #484]	@ (8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	0f1b      	lsrs	r3, r3, #28
 800886e:	f003 030f 	and.w	r3, r3, #15
 8008872:	e006      	b.n	8008882 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8008874:	4b76      	ldr	r3, [pc, #472]	@ (8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008876:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800887a:	041b      	lsls	r3, r3, #16
 800887c:	0f1b      	lsrs	r3, r3, #28
 800887e:	f003 030f 	and.w	r3, r3, #15
 8008882:	4a76      	ldr	r2, [pc, #472]	@ (8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008888:	ee07 3a90 	vmov	s15, r3
 800888c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	ee07 3a90 	vmov	s15, r3
 8008896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800889a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	ee07 3a90 	vmov	s15, r3
 80088a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80088ac:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80088b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80088c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088c8:	e058      	b.n	800897c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	ee07 3a90 	vmov	s15, r3
 80088d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80088d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088dc:	4b5c      	ldr	r3, [pc, #368]	@ (8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80088de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088e4:	ee07 3a90 	vmov	s15, r3
 80088e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80088ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80088f0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80088f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80088f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80088fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008900:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008908:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800890c:	e036      	b.n	800897c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800890e:	4b50      	ldr	r3, [pc, #320]	@ (8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008916:	2b00      	cmp	r3, #0
 8008918:	d005      	beq.n	8008926 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800891a:	4b4d      	ldr	r3, [pc, #308]	@ (8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	0f1b      	lsrs	r3, r3, #28
 8008920:	f003 030f 	and.w	r3, r3, #15
 8008924:	e006      	b.n	8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8008926:	4b4a      	ldr	r3, [pc, #296]	@ (8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008928:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800892c:	041b      	lsls	r3, r3, #16
 800892e:	0f1b      	lsrs	r3, r3, #28
 8008930:	f003 030f 	and.w	r3, r3, #15
 8008934:	4a49      	ldr	r2, [pc, #292]	@ (8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800893a:	ee07 3a90 	vmov	s15, r3
 800893e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	ee07 3a90 	vmov	s15, r3
 8008948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	ee07 3a90 	vmov	s15, r3
 8008956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800895a:	ed97 6a02 	vldr	s12, [r7, #8]
 800895e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800896a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800896e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008976:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800897a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800897c:	4b34      	ldr	r3, [pc, #208]	@ (8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800897e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d017      	beq.n	80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008988:	4b31      	ldr	r3, [pc, #196]	@ (8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800898a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800898c:	0a5b      	lsrs	r3, r3, #9
 800898e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008992:	ee07 3a90 	vmov	s15, r3
 8008996:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800899a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800899e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80089a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80089a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089ae:	ee17 2a90 	vmov	r2, s15
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	601a      	str	r2, [r3, #0]
 80089b6:	e002      	b.n	80089be <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80089be:	4b24      	ldr	r3, [pc, #144]	@ (8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80089c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d017      	beq.n	80089fa <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80089ca:	4b21      	ldr	r3, [pc, #132]	@ (8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80089cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089ce:	0c1b      	lsrs	r3, r3, #16
 80089d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089d4:	ee07 3a90 	vmov	s15, r3
 80089d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80089dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089e0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80089e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089f0:	ee17 2a90 	vmov	r2, s15
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	605a      	str	r2, [r3, #4]
 80089f8:	e002      	b.n	8008a00 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008a00:	4b13      	ldr	r3, [pc, #76]	@ (8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d017      	beq.n	8008a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008a0c:	4b10      	ldr	r3, [pc, #64]	@ (8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a10:	0e1b      	lsrs	r3, r3, #24
 8008a12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a16:	ee07 3a90 	vmov	s15, r3
 8008a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8008a1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a22:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008a26:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a32:	ee17 2a90 	vmov	r2, s15
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008a3a:	e002      	b.n	8008a42 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	609a      	str	r2, [r3, #8]
}
 8008a42:	bf00      	nop
 8008a44:	3724      	adds	r7, #36	@ 0x24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	46020c00 	.word	0x46020c00
 8008a54:	4b742400 	.word	0x4b742400
 8008a58:	46000000 	.word	0x46000000
 8008a5c:	08014510 	.word	0x08014510

08008a60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b089      	sub	sp, #36	@ 0x24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008a68:	4ba6      	ldr	r3, [pc, #664]	@ (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a70:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008a72:	4ba4      	ldr	r3, [pc, #656]	@ (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a76:	f003 0303 	and.w	r3, r3, #3
 8008a7a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8008a7c:	4ba1      	ldr	r3, [pc, #644]	@ (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a80:	0a1b      	lsrs	r3, r3, #8
 8008a82:	f003 030f 	and.w	r3, r3, #15
 8008a86:	3301      	adds	r3, #1
 8008a88:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008a8a:	4b9e      	ldr	r3, [pc, #632]	@ (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a8e:	091b      	lsrs	r3, r3, #4
 8008a90:	f003 0301 	and.w	r3, r3, #1
 8008a94:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008a96:	4b9b      	ldr	r3, [pc, #620]	@ (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a9a:	08db      	lsrs	r3, r3, #3
 8008a9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	fb02 f303 	mul.w	r3, r2, r3
 8008aa6:	ee07 3a90 	vmov	s15, r3
 8008aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aae:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d062      	beq.n	8008b7e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	f200 8081 	bhi.w	8008bc2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d024      	beq.n	8008b10 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d17a      	bne.n	8008bc2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ade:	4b89      	ldr	r3, [pc, #548]	@ (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ae6:	ee07 3a90 	vmov	s15, r3
 8008aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008aee:	ed97 6a02 	vldr	s12, [r7, #8]
 8008af2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b0a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8008b0e:	e08f      	b.n	8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008b10:	4b7c      	ldr	r3, [pc, #496]	@ (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d005      	beq.n	8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8008b1c:	4b79      	ldr	r3, [pc, #484]	@ (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	0f1b      	lsrs	r3, r3, #28
 8008b22:	f003 030f 	and.w	r3, r3, #15
 8008b26:	e006      	b.n	8008b36 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8008b28:	4b76      	ldr	r3, [pc, #472]	@ (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008b2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008b2e:	041b      	lsls	r3, r3, #16
 8008b30:	0f1b      	lsrs	r3, r3, #28
 8008b32:	f003 030f 	and.w	r3, r3, #15
 8008b36:	4a76      	ldr	r2, [pc, #472]	@ (8008d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b3c:	ee07 3a90 	vmov	s15, r3
 8008b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	ee07 3a90 	vmov	s15, r3
 8008b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	ee07 3a90 	vmov	s15, r3
 8008b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b60:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008b64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b70:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b7c:	e058      	b.n	8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	ee07 3a90 	vmov	s15, r3
 8008b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b88:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008b8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b90:	4b5c      	ldr	r3, [pc, #368]	@ (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b98:	ee07 3a90 	vmov	s15, r3
 8008b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ba0:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ba4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008ba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008bac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bc0:	e036      	b.n	8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008bc2:	4b50      	ldr	r3, [pc, #320]	@ (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d005      	beq.n	8008bda <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8008bce:	4b4d      	ldr	r3, [pc, #308]	@ (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	0f1b      	lsrs	r3, r3, #28
 8008bd4:	f003 030f 	and.w	r3, r3, #15
 8008bd8:	e006      	b.n	8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8008bda:	4b4a      	ldr	r3, [pc, #296]	@ (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008bdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008be0:	041b      	lsls	r3, r3, #16
 8008be2:	0f1b      	lsrs	r3, r3, #28
 8008be4:	f003 030f 	and.w	r3, r3, #15
 8008be8:	4a49      	ldr	r2, [pc, #292]	@ (8008d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bee:	ee07 3a90 	vmov	s15, r3
 8008bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	ee07 3a90 	vmov	s15, r3
 8008bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	ee07 3a90 	vmov	s15, r3
 8008c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c12:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c2e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008c30:	4b34      	ldr	r3, [pc, #208]	@ (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d017      	beq.n	8008c6c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008c3c:	4b31      	ldr	r3, [pc, #196]	@ (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c40:	0a5b      	lsrs	r3, r3, #9
 8008c42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c46:	ee07 3a90 	vmov	s15, r3
 8008c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8008c4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c52:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008c56:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c62:	ee17 2a90 	vmov	r2, s15
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	e002      	b.n	8008c72 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008c72:	4b24      	ldr	r3, [pc, #144]	@ (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d017      	beq.n	8008cae <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008c7e:	4b21      	ldr	r3, [pc, #132]	@ (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c82:	0c1b      	lsrs	r3, r3, #16
 8008c84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c88:	ee07 3a90 	vmov	s15, r3
 8008c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008c90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c94:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008c98:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ca4:	ee17 2a90 	vmov	r2, s15
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	605a      	str	r2, [r3, #4]
 8008cac:	e002      	b.n	8008cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008cb4:	4b13      	ldr	r3, [pc, #76]	@ (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d017      	beq.n	8008cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008cc0:	4b10      	ldr	r3, [pc, #64]	@ (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cc4:	0e1b      	lsrs	r3, r3, #24
 8008cc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cca:	ee07 3a90 	vmov	s15, r3
 8008cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8008cd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008cd6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008cda:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ce6:	ee17 2a90 	vmov	r2, s15
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008cee:	e002      	b.n	8008cf6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	609a      	str	r2, [r3, #8]
}
 8008cf6:	bf00      	nop
 8008cf8:	3724      	adds	r7, #36	@ 0x24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	46020c00 	.word	0x46020c00
 8008d08:	4b742400 	.word	0x4b742400
 8008d0c:	46000000 	.word	0x46000000
 8008d10:	08014510 	.word	0x08014510

08008d14 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b08e      	sub	sp, #56	@ 0x38
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008d1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d22:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8008d26:	430b      	orrs	r3, r1
 8008d28:	d145      	bne.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008d2a:	4ba7      	ldr	r3, [pc, #668]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008d2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d34:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008d36:	4ba4      	ldr	r3, [pc, #656]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008d38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d108      	bne.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d4a:	d104      	bne.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008d4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d50:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d52:	f001 b9b3 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008d56:	4b9c      	ldr	r3, [pc, #624]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d64:	d114      	bne.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d6c:	d110      	bne.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008d6e:	4b96      	ldr	r3, [pc, #600]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d7c:	d103      	bne.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8008d7e:	23fa      	movs	r3, #250	@ 0xfa
 8008d80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008d82:	f001 b99b 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008d86:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008d8a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008d8c:	f001 b996 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008d90:	4b8d      	ldr	r3, [pc, #564]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d9c:	d107      	bne.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008da4:	d103      	bne.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8008da6:	4b89      	ldr	r3, [pc, #548]	@ (8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008da8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008daa:	f001 b987 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008dae:	2300      	movs	r3, #0
 8008db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008db2:	f001 b983 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dba:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008dbe:	430b      	orrs	r3, r1
 8008dc0:	d151      	bne.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008dc2:	4b81      	ldr	r3, [pc, #516]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008dc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008dc8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8008dcc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd0:	2b80      	cmp	r3, #128	@ 0x80
 8008dd2:	d035      	beq.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd6:	2b80      	cmp	r3, #128	@ 0x80
 8008dd8:	d841      	bhi.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ddc:	2b60      	cmp	r3, #96	@ 0x60
 8008dde:	d02a      	beq.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8008de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de2:	2b60      	cmp	r3, #96	@ 0x60
 8008de4:	d83b      	bhi.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de8:	2b40      	cmp	r3, #64	@ 0x40
 8008dea:	d009      	beq.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dee:	2b40      	cmp	r3, #64	@ 0x40
 8008df0:	d835      	bhi.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00c      	beq.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8008df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfa:	2b20      	cmp	r3, #32
 8008dfc:	d012      	beq.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008dfe:	e02e      	b.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7ff fb77 	bl	80084f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e0e:	f001 b955 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e12:	f107 0318 	add.w	r3, r7, #24
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7ff fcc8 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e20:	f001 b94c 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e24:	f107 030c 	add.w	r3, r7, #12
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7ff fe19 	bl	8008a60 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e32:	f001 b943 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008e36:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008e3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e3c:	f001 b93e 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e40:	4b61      	ldr	r3, [pc, #388]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e4c:	d103      	bne.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8008e4e:	4b60      	ldr	r3, [pc, #384]	@ (8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008e50:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008e52:	f001 b933 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008e56:	2300      	movs	r3, #0
 8008e58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e5a:	f001 b92f 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e62:	f001 b92b 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008e66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e6a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008e6e:	430b      	orrs	r3, r1
 8008e70:	d158      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008e72:	4b55      	ldr	r3, [pc, #340]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008e74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e7c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e84:	d03b      	beq.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e8c:	d846      	bhi.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e94:	d02e      	beq.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8008e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e9c:	d83e      	bhi.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ea4:	d00b      	beq.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008eac:	d836      	bhi.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00d      	beq.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eba:	d012      	beq.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8008ebc:	e02e      	b.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7ff fb18 	bl	80084f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ecc:	f001 b8f6 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ed0:	f107 0318 	add.w	r3, r7, #24
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7ff fc69 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ede:	f001 b8ed 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ee2:	f107 030c 	add.w	r3, r7, #12
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7ff fdba 	bl	8008a60 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ef0:	f001 b8e4 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008ef4:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008ef8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008efa:	f001 b8df 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008efe:	4b32      	ldr	r3, [pc, #200]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f0a:	d103      	bne.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8008f0c:	4b30      	ldr	r3, [pc, #192]	@ (8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008f0e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008f10:	f001 b8d4 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f18:	f001 b8d0 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f20:	f001 b8cc 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8008f24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f28:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008f2c:	430b      	orrs	r3, r1
 8008f2e:	d126      	bne.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8008f30:	4b25      	ldr	r3, [pc, #148]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008f32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008f36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f3a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8008f3c:	4b22      	ldr	r3, [pc, #136]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f48:	d106      	bne.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d103      	bne.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8008f50:	4b1f      	ldr	r3, [pc, #124]	@ (8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f54:	f001 b8b2 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8008f58:	4b1b      	ldr	r3, [pc, #108]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f64:	d107      	bne.n	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8008f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f6c:	d103      	bne.n	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8008f6e:	4b19      	ldr	r3, [pc, #100]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f72:	f001 b8a3 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f7a:	f001 b89f 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8008f7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f82:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8008f86:	430b      	orrs	r3, r1
 8008f88:	d16e      	bne.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f90:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008f94:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f98:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008f9c:	d03d      	beq.n	800901a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008fa4:	d85c      	bhi.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fac:	d014      	beq.n	8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8008fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fb4:	d854      	bhi.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d01f      	beq.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008fc2:	d012      	beq.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008fc4:	e04c      	b.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008fc6:	bf00      	nop
 8008fc8:	46020c00 	.word	0x46020c00
 8008fcc:	0007a120 	.word	0x0007a120
 8008fd0:	00f42400 	.word	0x00f42400
 8008fd4:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7ff fa8b 	bl	80084f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fe6:	f001 b869 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fea:	f107 0318 	add.w	r3, r7, #24
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7ff fbdc 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ff8:	f001 b860 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008ffc:	4ba7      	ldr	r3, [pc, #668]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009004:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009008:	d103      	bne.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800900a:	4ba5      	ldr	r3, [pc, #660]	@ (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800900c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800900e:	f001 b855 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009012:	2300      	movs	r3, #0
 8009014:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009016:	f001 b851 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800901a:	4ba0      	ldr	r3, [pc, #640]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 0320 	and.w	r3, r3, #32
 8009022:	2b20      	cmp	r3, #32
 8009024:	d118      	bne.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009026:	4b9d      	ldr	r3, [pc, #628]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800902e:	2b00      	cmp	r3, #0
 8009030:	d005      	beq.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009032:	4b9a      	ldr	r3, [pc, #616]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	0e1b      	lsrs	r3, r3, #24
 8009038:	f003 030f 	and.w	r3, r3, #15
 800903c:	e006      	b.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800903e:	4b97      	ldr	r3, [pc, #604]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009040:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009044:	041b      	lsls	r3, r3, #16
 8009046:	0e1b      	lsrs	r3, r3, #24
 8009048:	f003 030f 	and.w	r3, r3, #15
 800904c:	4a95      	ldr	r2, [pc, #596]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800904e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009052:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009054:	f001 b832 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009058:	2300      	movs	r3, #0
 800905a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800905c:	f001 b82e 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8009060:	2300      	movs	r3, #0
 8009062:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009064:	f001 b82a 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800906c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8009070:	430b      	orrs	r3, r1
 8009072:	d17f      	bne.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009074:	4b89      	ldr	r3, [pc, #548]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009076:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800907a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800907e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8009080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009082:	2b00      	cmp	r3, #0
 8009084:	d165      	bne.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8009086:	4b85      	ldr	r3, [pc, #532]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800908c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8009090:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8009092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009094:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009098:	d034      	beq.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800909a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80090a0:	d853      	bhi.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80090a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090a8:	d00b      	beq.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80090aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090b0:	d84b      	bhi.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80090b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d016      	beq.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80090b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80090be:	d009      	beq.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80090c0:	e043      	b.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7ff fa16 	bl	80084f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ce:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80090d0:	f000 bff4 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090d4:	f107 0318 	add.w	r3, r7, #24
 80090d8:	4618      	mov	r0, r3
 80090da:	f7ff fb67 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80090e2:	f000 bfeb 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80090e6:	4b6d      	ldr	r3, [pc, #436]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80090ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090f2:	d103      	bne.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 80090f4:	4b6a      	ldr	r3, [pc, #424]	@ (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80090f6:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80090f8:	f000 bfe0 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 80090fc:	2300      	movs	r3, #0
 80090fe:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009100:	f000 bfdc 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009104:	4b65      	ldr	r3, [pc, #404]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 0320 	and.w	r3, r3, #32
 800910c:	2b20      	cmp	r3, #32
 800910e:	d118      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009110:	4b62      	ldr	r3, [pc, #392]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009118:	2b00      	cmp	r3, #0
 800911a:	d005      	beq.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800911c:	4b5f      	ldr	r3, [pc, #380]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	0e1b      	lsrs	r3, r3, #24
 8009122:	f003 030f 	and.w	r3, r3, #15
 8009126:	e006      	b.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009128:	4b5c      	ldr	r3, [pc, #368]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800912a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800912e:	041b      	lsls	r3, r3, #16
 8009130:	0e1b      	lsrs	r3, r3, #24
 8009132:	f003 030f 	and.w	r3, r3, #15
 8009136:	4a5b      	ldr	r2, [pc, #364]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800913c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800913e:	f000 bfbd 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8009142:	2300      	movs	r3, #0
 8009144:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009146:	f000 bfb9 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 800914a:	2300      	movs	r3, #0
 800914c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800914e:	f000 bfb5 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8009152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009154:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009158:	d108      	bne.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800915a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff f9ca 	bl	80084f8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8009164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009166:	637b      	str	r3, [r7, #52]	@ 0x34
 8009168:	f000 bfa8 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 800916c:	2300      	movs	r3, #0
 800916e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009170:	f000 bfa4 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8009174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009178:	1e51      	subs	r1, r2, #1
 800917a:	430b      	orrs	r3, r1
 800917c:	d136      	bne.n	80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800917e:	4b47      	ldr	r3, [pc, #284]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009184:	f003 0303 	and.w	r3, r3, #3
 8009188:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800918a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918c:	2b00      	cmp	r3, #0
 800918e:	d104      	bne.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8009190:	f7fe fb44 	bl	800781c <HAL_RCC_GetPCLK2Freq>
 8009194:	6378      	str	r0, [r7, #52]	@ 0x34
 8009196:	f000 bf91 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800919a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919c:	2b01      	cmp	r3, #1
 800919e:	d104      	bne.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80091a0:	f7fe fa0c 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 80091a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80091a6:	f000 bf89 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80091aa:	4b3c      	ldr	r3, [pc, #240]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091b6:	d106      	bne.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80091b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d103      	bne.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80091be:	4b3a      	ldr	r3, [pc, #232]	@ (80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80091c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80091c2:	f000 bf7b 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80091c6:	4b35      	ldr	r3, [pc, #212]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80091c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091cc:	f003 0302 	and.w	r3, r3, #2
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d107      	bne.n	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80091d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d6:	2b03      	cmp	r3, #3
 80091d8:	d104      	bne.n	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 80091da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091de:	637b      	str	r3, [r7, #52]	@ 0x34
 80091e0:	f000 bf6c 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80091e4:	2300      	movs	r3, #0
 80091e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80091e8:	f000 bf68 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80091ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091f0:	1e91      	subs	r1, r2, #2
 80091f2:	430b      	orrs	r3, r1
 80091f4:	d136      	bne.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80091f6:	4b29      	ldr	r3, [pc, #164]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80091f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091fc:	f003 030c 	and.w	r3, r3, #12
 8009200:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009204:	2b00      	cmp	r3, #0
 8009206:	d104      	bne.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009208:	f7fe faf4 	bl	80077f4 <HAL_RCC_GetPCLK1Freq>
 800920c:	6378      	str	r0, [r7, #52]	@ 0x34
 800920e:	f000 bf55 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8009212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009214:	2b04      	cmp	r3, #4
 8009216:	d104      	bne.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009218:	f7fe f9d0 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 800921c:	6378      	str	r0, [r7, #52]	@ 0x34
 800921e:	f000 bf4d 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009222:	4b1e      	ldr	r3, [pc, #120]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800922a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800922e:	d106      	bne.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009232:	2b08      	cmp	r3, #8
 8009234:	d103      	bne.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8009236:	4b1c      	ldr	r3, [pc, #112]	@ (80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009238:	637b      	str	r3, [r7, #52]	@ 0x34
 800923a:	f000 bf3f 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800923e:	4b17      	ldr	r3, [pc, #92]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009240:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009244:	f003 0302 	and.w	r3, r3, #2
 8009248:	2b02      	cmp	r3, #2
 800924a:	d107      	bne.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800924c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924e:	2b0c      	cmp	r3, #12
 8009250:	d104      	bne.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8009252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009256:	637b      	str	r3, [r7, #52]	@ 0x34
 8009258:	f000 bf30 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800925c:	2300      	movs	r3, #0
 800925e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009260:	f000 bf2c 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8009264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009268:	1f11      	subs	r1, r2, #4
 800926a:	430b      	orrs	r3, r1
 800926c:	d13f      	bne.n	80092ee <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800926e:	4b0b      	ldr	r3, [pc, #44]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009274:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009278:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800927a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927c:	2b00      	cmp	r3, #0
 800927e:	d104      	bne.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009280:	f7fe fab8 	bl	80077f4 <HAL_RCC_GetPCLK1Freq>
 8009284:	6378      	str	r0, [r7, #52]	@ 0x34
 8009286:	f000 bf19 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800928a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928c:	2b10      	cmp	r3, #16
 800928e:	d10d      	bne.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009290:	f7fe f994 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 8009294:	6378      	str	r0, [r7, #52]	@ 0x34
 8009296:	f000 bf11 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800929a:	bf00      	nop
 800929c:	46020c00 	.word	0x46020c00
 80092a0:	02dc6c00 	.word	0x02dc6c00
 80092a4:	08014510 	.word	0x08014510
 80092a8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80092ac:	4ba6      	ldr	r3, [pc, #664]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80092b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092b8:	d106      	bne.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80092ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092bc:	2b20      	cmp	r3, #32
 80092be:	d103      	bne.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80092c0:	4ba2      	ldr	r3, [pc, #648]	@ (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80092c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80092c4:	f000 befa 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80092c8:	4b9f      	ldr	r3, [pc, #636]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80092ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092ce:	f003 0302 	and.w	r3, r3, #2
 80092d2:	2b02      	cmp	r3, #2
 80092d4:	d107      	bne.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80092d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d8:	2b30      	cmp	r3, #48	@ 0x30
 80092da:	d104      	bne.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 80092dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80092e2:	f000 beeb 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80092e6:	2300      	movs	r3, #0
 80092e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80092ea:	f000 bee7 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80092ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092f2:	f1a2 0108 	sub.w	r1, r2, #8
 80092f6:	430b      	orrs	r3, r1
 80092f8:	d136      	bne.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80092fa:	4b93      	ldr	r3, [pc, #588]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80092fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009300:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009304:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009308:	2b00      	cmp	r3, #0
 800930a:	d104      	bne.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800930c:	f7fe fa72 	bl	80077f4 <HAL_RCC_GetPCLK1Freq>
 8009310:	6378      	str	r0, [r7, #52]	@ 0x34
 8009312:	f000 bed3 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8009316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009318:	2b40      	cmp	r3, #64	@ 0x40
 800931a:	d104      	bne.n	8009326 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800931c:	f7fe f94e 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 8009320:	6378      	str	r0, [r7, #52]	@ 0x34
 8009322:	f000 becb 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009326:	4b88      	ldr	r3, [pc, #544]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800932e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009332:	d106      	bne.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8009334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009336:	2b80      	cmp	r3, #128	@ 0x80
 8009338:	d103      	bne.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800933a:	4b84      	ldr	r3, [pc, #528]	@ (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800933c:	637b      	str	r3, [r7, #52]	@ 0x34
 800933e:	f000 bebd 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009342:	4b81      	ldr	r3, [pc, #516]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009348:	f003 0302 	and.w	r3, r3, #2
 800934c:	2b02      	cmp	r3, #2
 800934e:	d107      	bne.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009352:	2bc0      	cmp	r3, #192	@ 0xc0
 8009354:	d104      	bne.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8009356:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800935a:	637b      	str	r3, [r7, #52]	@ 0x34
 800935c:	f000 beae 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8009360:	2300      	movs	r3, #0
 8009362:	637b      	str	r3, [r7, #52]	@ 0x34
 8009364:	f000 beaa 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8009368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800936c:	f1a2 0110 	sub.w	r1, r2, #16
 8009370:	430b      	orrs	r3, r1
 8009372:	d139      	bne.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009374:	4b74      	ldr	r3, [pc, #464]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800937a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800937e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009382:	2b00      	cmp	r3, #0
 8009384:	d104      	bne.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009386:	f7fe fa35 	bl	80077f4 <HAL_RCC_GetPCLK1Freq>
 800938a:	6378      	str	r0, [r7, #52]	@ 0x34
 800938c:	f000 be96 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8009390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009396:	d104      	bne.n	80093a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009398:	f7fe f910 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 800939c:	6378      	str	r0, [r7, #52]	@ 0x34
 800939e:	f000 be8d 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80093a2:	4b69      	ldr	r3, [pc, #420]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093ae:	d107      	bne.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80093b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093b6:	d103      	bne.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80093b8:	4b64      	ldr	r3, [pc, #400]	@ (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80093ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80093bc:	f000 be7e 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80093c0:	4b61      	ldr	r3, [pc, #388]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80093c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093c6:	f003 0302 	and.w	r3, r3, #2
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d108      	bne.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80093ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093d4:	d104      	bne.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 80093d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093da:	637b      	str	r3, [r7, #52]	@ 0x34
 80093dc:	f000 be6e 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80093e4:	f000 be6a 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80093e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093ec:	f1a2 0120 	sub.w	r1, r2, #32
 80093f0:	430b      	orrs	r3, r1
 80093f2:	d158      	bne.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80093f4:	4b54      	ldr	r3, [pc, #336]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80093f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80093fa:	f003 0307 	and.w	r3, r3, #7
 80093fe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8009400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009402:	2b00      	cmp	r3, #0
 8009404:	d104      	bne.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8009406:	f7fe fa1d 	bl	8007844 <HAL_RCC_GetPCLK3Freq>
 800940a:	6378      	str	r0, [r7, #52]	@ 0x34
 800940c:	f000 be56 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8009410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009412:	2b01      	cmp	r3, #1
 8009414:	d104      	bne.n	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009416:	f7fe f8d1 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 800941a:	6378      	str	r0, [r7, #52]	@ 0x34
 800941c:	f000 be4e 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009420:	4b49      	ldr	r3, [pc, #292]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800942c:	d106      	bne.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800942e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009430:	2b02      	cmp	r3, #2
 8009432:	d103      	bne.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8009434:	4b45      	ldr	r3, [pc, #276]	@ (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009436:	637b      	str	r3, [r7, #52]	@ 0x34
 8009438:	f000 be40 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800943c:	4b42      	ldr	r3, [pc, #264]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800943e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009442:	f003 0302 	and.w	r3, r3, #2
 8009446:	2b02      	cmp	r3, #2
 8009448:	d107      	bne.n	800945a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800944a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944c:	2b03      	cmp	r3, #3
 800944e:	d104      	bne.n	800945a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8009450:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009454:	637b      	str	r3, [r7, #52]	@ 0x34
 8009456:	f000 be31 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800945a:	4b3b      	ldr	r3, [pc, #236]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0320 	and.w	r3, r3, #32
 8009462:	2b20      	cmp	r3, #32
 8009464:	d11b      	bne.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8009466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009468:	2b04      	cmp	r3, #4
 800946a:	d118      	bne.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800946c:	4b36      	ldr	r3, [pc, #216]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d005      	beq.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8009478:	4b33      	ldr	r3, [pc, #204]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	0e1b      	lsrs	r3, r3, #24
 800947e:	f003 030f 	and.w	r3, r3, #15
 8009482:	e006      	b.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8009484:	4b30      	ldr	r3, [pc, #192]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009486:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800948a:	041b      	lsls	r3, r3, #16
 800948c:	0e1b      	lsrs	r3, r3, #24
 800948e:	f003 030f 	and.w	r3, r3, #15
 8009492:	4a2f      	ldr	r2, [pc, #188]	@ (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009498:	637b      	str	r3, [r7, #52]	@ 0x34
 800949a:	f000 be0f 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800949e:	2300      	movs	r3, #0
 80094a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80094a2:	f000 be0b 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80094a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094aa:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80094ae:	430b      	orrs	r3, r1
 80094b0:	d172      	bne.n	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80094b2:	4b25      	ldr	r3, [pc, #148]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80094b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80094b8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80094bc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80094be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094c4:	d104      	bne.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80094c6:	f7fe f879 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 80094ca:	6378      	str	r0, [r7, #52]	@ 0x34
 80094cc:	f000 bdf6 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80094d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094d6:	d108      	bne.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094d8:	f107 0318 	add.w	r3, r7, #24
 80094dc:	4618      	mov	r0, r3
 80094de:	f7ff f965 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80094e2:	6a3b      	ldr	r3, [r7, #32]
 80094e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094e6:	f000 bde9 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80094ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d104      	bne.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80094f0:	f7fe f966 	bl	80077c0 <HAL_RCC_GetHCLKFreq>
 80094f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80094f6:	f000 bde1 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80094fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009500:	d128      	bne.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009502:	4b11      	ldr	r3, [pc, #68]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 0320 	and.w	r3, r3, #32
 800950a:	2b20      	cmp	r3, #32
 800950c:	d118      	bne.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800950e:	4b0e      	ldr	r3, [pc, #56]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009516:	2b00      	cmp	r3, #0
 8009518:	d005      	beq.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800951a:	4b0b      	ldr	r3, [pc, #44]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	0e1b      	lsrs	r3, r3, #24
 8009520:	f003 030f 	and.w	r3, r3, #15
 8009524:	e006      	b.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8009526:	4b08      	ldr	r3, [pc, #32]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009528:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800952c:	041b      	lsls	r3, r3, #16
 800952e:	0e1b      	lsrs	r3, r3, #24
 8009530:	f003 030f 	and.w	r3, r3, #15
 8009534:	4a06      	ldr	r2, [pc, #24]	@ (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800953a:	637b      	str	r3, [r7, #52]	@ 0x34
 800953c:	f000 bdbe 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8009540:	2300      	movs	r3, #0
 8009542:	637b      	str	r3, [r7, #52]	@ 0x34
 8009544:	f000 bdba 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009548:	46020c00 	.word	0x46020c00
 800954c:	00f42400 	.word	0x00f42400
 8009550:	08014510 	.word	0x08014510
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009554:	4baf      	ldr	r3, [pc, #700]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800955c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009560:	d107      	bne.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8009562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009564:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009568:	d103      	bne.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 800956a:	4bab      	ldr	r3, [pc, #684]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800956c:	637b      	str	r3, [r7, #52]	@ 0x34
 800956e:	f000 bda5 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009572:	4ba8      	ldr	r3, [pc, #672]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800957a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800957e:	d107      	bne.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8009580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009582:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009586:	d103      	bne.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8009588:	4ba3      	ldr	r3, [pc, #652]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800958a:	637b      	str	r3, [r7, #52]	@ 0x34
 800958c:	f000 bd96 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8009590:	2300      	movs	r3, #0
 8009592:	637b      	str	r3, [r7, #52]	@ 0x34
 8009594:	f000 bd92 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8009598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800959c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80095a0:	430b      	orrs	r3, r1
 80095a2:	d158      	bne.n	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80095a4:	4b9b      	ldr	r3, [pc, #620]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80095a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80095aa:	f003 0307 	and.w	r3, r3, #7
 80095ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80095b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b2:	2b04      	cmp	r3, #4
 80095b4:	d84b      	bhi.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 80095b6:	a201      	add	r2, pc, #4	@ (adr r2, 80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80095b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095bc:	080095f5 	.word	0x080095f5
 80095c0:	080095d1 	.word	0x080095d1
 80095c4:	080095e3 	.word	0x080095e3
 80095c8:	080095ff 	.word	0x080095ff
 80095cc:	08009609 	.word	0x08009609
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fe ff8f 	bl	80084f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80095da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095de:	f000 bd6d 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095e2:	f107 030c 	add.w	r3, r7, #12
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7ff fa3a 	bl	8008a60 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095f0:	f000 bd64 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80095f4:	f7fe f8e4 	bl	80077c0 <HAL_RCC_GetHCLKFreq>
 80095f8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80095fa:	f000 bd5f 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80095fe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009602:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009604:	f000 bd5a 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009608:	4b82      	ldr	r3, [pc, #520]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 0320 	and.w	r3, r3, #32
 8009610:	2b20      	cmp	r3, #32
 8009612:	d118      	bne.n	8009646 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009614:	4b7f      	ldr	r3, [pc, #508]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d005      	beq.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8009620:	4b7c      	ldr	r3, [pc, #496]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	0e1b      	lsrs	r3, r3, #24
 8009626:	f003 030f 	and.w	r3, r3, #15
 800962a:	e006      	b.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800962c:	4b79      	ldr	r3, [pc, #484]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800962e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009632:	041b      	lsls	r3, r3, #16
 8009634:	0e1b      	lsrs	r3, r3, #24
 8009636:	f003 030f 	and.w	r3, r3, #15
 800963a:	4a78      	ldr	r2, [pc, #480]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800963c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009640:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009642:	f000 bd3b 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009646:	2300      	movs	r3, #0
 8009648:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800964a:	f000 bd37 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800964e:	2300      	movs	r3, #0
 8009650:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009652:	f000 bd33 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8009656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800965a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800965e:	430b      	orrs	r3, r1
 8009660:	d167      	bne.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8009662:	4b6c      	ldr	r3, [pc, #432]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009664:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009668:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800966c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800966e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009670:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009674:	d036      	beq.n	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8009676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009678:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800967c:	d855      	bhi.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800967e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009680:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009684:	d029      	beq.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8009686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009688:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800968c:	d84d      	bhi.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800968e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009690:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009694:	d013      	beq.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8009696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009698:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800969c:	d845      	bhi.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800969e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d015      	beq.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 80096a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096aa:	d13e      	bne.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7fe ff21 	bl	80084f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80096b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096ba:	f000 bcff 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096be:	f107 030c 	add.w	r3, r7, #12
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7ff f9cc 	bl	8008a60 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096cc:	f000 bcf6 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80096d0:	f7fe f876 	bl	80077c0 <HAL_RCC_GetHCLKFreq>
 80096d4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80096d6:	f000 bcf1 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80096da:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80096de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096e0:	f000 bcec 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80096e4:	4b4b      	ldr	r3, [pc, #300]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 0320 	and.w	r3, r3, #32
 80096ec:	2b20      	cmp	r3, #32
 80096ee:	d118      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80096f0:	4b48      	ldr	r3, [pc, #288]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d005      	beq.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 80096fc:	4b45      	ldr	r3, [pc, #276]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	0e1b      	lsrs	r3, r3, #24
 8009702:	f003 030f 	and.w	r3, r3, #15
 8009706:	e006      	b.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009708:	4b42      	ldr	r3, [pc, #264]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800970a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800970e:	041b      	lsls	r3, r3, #16
 8009710:	0e1b      	lsrs	r3, r3, #24
 8009712:	f003 030f 	and.w	r3, r3, #15
 8009716:	4a41      	ldr	r2, [pc, #260]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8009718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800971c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800971e:	f000 bccd 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009722:	2300      	movs	r3, #0
 8009724:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009726:	f000 bcc9 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800972a:	2300      	movs	r3, #0
 800972c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800972e:	f000 bcc5 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8009732:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009736:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800973a:	430b      	orrs	r3, r1
 800973c:	d14c      	bne.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800973e:	4b35      	ldr	r3, [pc, #212]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009744:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009748:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800974a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800974c:	2b00      	cmp	r3, #0
 800974e:	d104      	bne.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009750:	f7fe f850 	bl	80077f4 <HAL_RCC_GetPCLK1Freq>
 8009754:	6378      	str	r0, [r7, #52]	@ 0x34
 8009756:	f000 bcb1 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800975a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009760:	d104      	bne.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009762:	f7fd ff2b 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 8009766:	6378      	str	r0, [r7, #52]	@ 0x34
 8009768:	f000 bca8 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800976c:	4b29      	ldr	r3, [pc, #164]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009778:	d107      	bne.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800977a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009780:	d103      	bne.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8009782:	4b25      	ldr	r3, [pc, #148]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8009784:	637b      	str	r3, [r7, #52]	@ 0x34
 8009786:	f000 bc99 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800978a:	4b22      	ldr	r3, [pc, #136]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 0320 	and.w	r3, r3, #32
 8009792:	2b20      	cmp	r3, #32
 8009794:	d11c      	bne.n	80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8009796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009798:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800979c:	d118      	bne.n	80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800979e:	4b1d      	ldr	r3, [pc, #116]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d005      	beq.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80097aa:	4b1a      	ldr	r3, [pc, #104]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	0e1b      	lsrs	r3, r3, #24
 80097b0:	f003 030f 	and.w	r3, r3, #15
 80097b4:	e006      	b.n	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80097b6:	4b17      	ldr	r3, [pc, #92]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80097b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80097bc:	041b      	lsls	r3, r3, #16
 80097be:	0e1b      	lsrs	r3, r3, #24
 80097c0:	f003 030f 	and.w	r3, r3, #15
 80097c4:	4a15      	ldr	r2, [pc, #84]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80097c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80097cc:	f000 bc76 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80097d0:	2300      	movs	r3, #0
 80097d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80097d4:	f000 bc72 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80097d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097dc:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80097e0:	430b      	orrs	r3, r1
 80097e2:	d153      	bne.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80097e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80097e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80097ea:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80097ee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80097f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d104      	bne.n	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80097f6:	f7fd fffd 	bl	80077f4 <HAL_RCC_GetPCLK1Freq>
 80097fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80097fc:	f000 bc5e 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8009800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009806:	d10b      	bne.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009808:	f7fd fed8 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 800980c:	6378      	str	r0, [r7, #52]	@ 0x34
 800980e:	f000 bc55 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009812:	bf00      	nop
 8009814:	46020c00 	.word	0x46020c00
 8009818:	00f42400 	.word	0x00f42400
 800981c:	08014510 	.word	0x08014510
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009820:	4ba1      	ldr	r3, [pc, #644]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800982c:	d107      	bne.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 800982e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009834:	d103      	bne.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8009836:	4b9d      	ldr	r3, [pc, #628]	@ (8009aac <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009838:	637b      	str	r3, [r7, #52]	@ 0x34
 800983a:	f000 bc3f 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800983e:	4b9a      	ldr	r3, [pc, #616]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 0320 	and.w	r3, r3, #32
 8009846:	2b20      	cmp	r3, #32
 8009848:	d11c      	bne.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 800984a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009850:	d118      	bne.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009852:	4b95      	ldr	r3, [pc, #596]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d005      	beq.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800985e:	4b92      	ldr	r3, [pc, #584]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	0e1b      	lsrs	r3, r3, #24
 8009864:	f003 030f 	and.w	r3, r3, #15
 8009868:	e006      	b.n	8009878 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800986a:	4b8f      	ldr	r3, [pc, #572]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800986c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009870:	041b      	lsls	r3, r3, #16
 8009872:	0e1b      	lsrs	r3, r3, #24
 8009874:	f003 030f 	and.w	r3, r3, #15
 8009878:	4a8d      	ldr	r2, [pc, #564]	@ (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800987a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800987e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009880:	f000 bc1c 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8009884:	2300      	movs	r3, #0
 8009886:	637b      	str	r3, [r7, #52]	@ 0x34
 8009888:	f000 bc18 	b.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800988c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009890:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009894:	430b      	orrs	r3, r1
 8009896:	d151      	bne.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009898:	4b83      	ldr	r3, [pc, #524]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800989a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800989e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80098a2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80098a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80098a8:	d024      	beq.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 80098aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ac:	2bc0      	cmp	r3, #192	@ 0xc0
 80098ae:	d842      	bhi.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80098b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b2:	2b80      	cmp	r3, #128	@ 0x80
 80098b4:	d00d      	beq.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 80098b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b8:	2b80      	cmp	r3, #128	@ 0x80
 80098ba:	d83c      	bhi.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80098bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 80098c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c4:	2b40      	cmp	r3, #64	@ 0x40
 80098c6:	d011      	beq.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 80098c8:	e035      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80098ca:	f7fd ffbb 	bl	8007844 <HAL_RCC_GetPCLK3Freq>
 80098ce:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80098d0:	e3f4      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80098d2:	4b75      	ldr	r3, [pc, #468]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098de:	d102      	bne.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 80098e0:	4b72      	ldr	r3, [pc, #456]	@ (8009aac <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80098e2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80098e4:	e3ea      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80098e6:	2300      	movs	r3, #0
 80098e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098ea:	e3e7      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80098ec:	f7fd fe66 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 80098f0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80098f2:	e3e3      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80098f4:	4b6c      	ldr	r3, [pc, #432]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f003 0320 	and.w	r3, r3, #32
 80098fc:	2b20      	cmp	r3, #32
 80098fe:	d117      	bne.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009900:	4b69      	ldr	r3, [pc, #420]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009908:	2b00      	cmp	r3, #0
 800990a:	d005      	beq.n	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 800990c:	4b66      	ldr	r3, [pc, #408]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	0e1b      	lsrs	r3, r3, #24
 8009912:	f003 030f 	and.w	r3, r3, #15
 8009916:	e006      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8009918:	4b63      	ldr	r3, [pc, #396]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800991a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800991e:	041b      	lsls	r3, r3, #16
 8009920:	0e1b      	lsrs	r3, r3, #24
 8009922:	f003 030f 	and.w	r3, r3, #15
 8009926:	4a62      	ldr	r2, [pc, #392]	@ (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8009928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800992c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800992e:	e3c5      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009930:	2300      	movs	r3, #0
 8009932:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009934:	e3c2      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8009936:	2300      	movs	r3, #0
 8009938:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800993a:	e3bf      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800993c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009940:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8009944:	430b      	orrs	r3, r1
 8009946:	d147      	bne.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009948:	4b57      	ldr	r3, [pc, #348]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800994a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800994e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009952:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8009954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009956:	2b00      	cmp	r3, #0
 8009958:	d103      	bne.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800995a:	f7fd ff4b 	bl	80077f4 <HAL_RCC_GetPCLK1Freq>
 800995e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009960:	e3ac      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8009962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009964:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009968:	d103      	bne.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800996a:	f7fd fe27 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 800996e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009970:	e3a4      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009972:	4b4d      	ldr	r3, [pc, #308]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800997a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800997e:	d106      	bne.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8009980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009982:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009986:	d102      	bne.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8009988:	4b48      	ldr	r3, [pc, #288]	@ (8009aac <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800998a:	637b      	str	r3, [r7, #52]	@ 0x34
 800998c:	e396      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800998e:	4b46      	ldr	r3, [pc, #280]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 0320 	and.w	r3, r3, #32
 8009996:	2b20      	cmp	r3, #32
 8009998:	d11b      	bne.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800999a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80099a0:	d117      	bne.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80099a2:	4b41      	ldr	r3, [pc, #260]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d005      	beq.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80099ae:	4b3e      	ldr	r3, [pc, #248]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	0e1b      	lsrs	r3, r3, #24
 80099b4:	f003 030f 	and.w	r3, r3, #15
 80099b8:	e006      	b.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 80099ba:	4b3b      	ldr	r3, [pc, #236]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80099bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80099c0:	041b      	lsls	r3, r3, #16
 80099c2:	0e1b      	lsrs	r3, r3, #24
 80099c4:	f003 030f 	and.w	r3, r3, #15
 80099c8:	4a39      	ldr	r2, [pc, #228]	@ (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80099ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80099d0:	e374      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80099d2:	2300      	movs	r3, #0
 80099d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80099d6:	e371      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80099d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099dc:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80099e0:	430b      	orrs	r3, r1
 80099e2:	d16a      	bne.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80099e4:	4b30      	ldr	r3, [pc, #192]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80099e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80099ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099ee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80099f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d120      	bne.n	8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80099f6:	4b2c      	ldr	r3, [pc, #176]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f003 0320 	and.w	r3, r3, #32
 80099fe:	2b20      	cmp	r3, #32
 8009a00:	d117      	bne.n	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009a02:	4b29      	ldr	r3, [pc, #164]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d005      	beq.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 8009a0e:	4b26      	ldr	r3, [pc, #152]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	0e1b      	lsrs	r3, r3, #24
 8009a14:	f003 030f 	and.w	r3, r3, #15
 8009a18:	e006      	b.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8009a1a:	4b23      	ldr	r3, [pc, #140]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009a1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009a20:	041b      	lsls	r3, r3, #16
 8009a22:	0e1b      	lsrs	r3, r3, #24
 8009a24:	f003 030f 	and.w	r3, r3, #15
 8009a28:	4a21      	ldr	r2, [pc, #132]	@ (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8009a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a30:	e344      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8009a32:	2300      	movs	r3, #0
 8009a34:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a36:	e341      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8009a38:	4b1b      	ldr	r3, [pc, #108]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009a3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a46:	d112      	bne.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8009a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a4e:	d10e      	bne.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a50:	4b15      	ldr	r3, [pc, #84]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009a52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a5e:	d102      	bne.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8009a60:	23fa      	movs	r3, #250	@ 0xfa
 8009a62:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a64:	e32a      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8009a66:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009a6a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a6c:	e326      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a7a:	d106      	bne.n	8009a8a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8009a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a82:	d102      	bne.n	8009a8a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8009a84:	4b09      	ldr	r3, [pc, #36]	@ (8009aac <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009a86:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a88:	e318      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009a8a:	4b07      	ldr	r3, [pc, #28]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009a8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a90:	f003 0302 	and.w	r3, r3, #2
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d10d      	bne.n	8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8009a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a9e:	d109      	bne.n	8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8009aa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009aa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aa6:	e309      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009aa8:	46020c00 	.word	0x46020c00
 8009aac:	00f42400 	.word	0x00f42400
 8009ab0:	08014510 	.word	0x08014510
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ab8:	e300      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009abe:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009ac2:	430b      	orrs	r3, r1
 8009ac4:	d164      	bne.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009ac6:	4ba2      	ldr	r3, [pc, #648]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009ac8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009acc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009ad0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8009ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d120      	bne.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009ad8:	4b9d      	ldr	r3, [pc, #628]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 0320 	and.w	r3, r3, #32
 8009ae0:	2b20      	cmp	r3, #32
 8009ae2:	d117      	bne.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009ae4:	4b9a      	ldr	r3, [pc, #616]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d005      	beq.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8009af0:	4b97      	ldr	r3, [pc, #604]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	0e1b      	lsrs	r3, r3, #24
 8009af6:	f003 030f 	and.w	r3, r3, #15
 8009afa:	e006      	b.n	8009b0a <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8009afc:	4b94      	ldr	r3, [pc, #592]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009afe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b02:	041b      	lsls	r3, r3, #16
 8009b04:	0e1b      	lsrs	r3, r3, #24
 8009b06:	f003 030f 	and.w	r3, r3, #15
 8009b0a:	4a92      	ldr	r2, [pc, #584]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8009b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b12:	e2d3      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8009b14:	2300      	movs	r3, #0
 8009b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b18:	e2d0      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009b1a:	4b8d      	ldr	r3, [pc, #564]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b28:	d112      	bne.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8009b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b30:	d10e      	bne.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009b32:	4b87      	ldr	r3, [pc, #540]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009b34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b40:	d102      	bne.n	8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 8009b42:	23fa      	movs	r3, #250	@ 0xfa
 8009b44:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009b46:	e2b9      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8009b48:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009b4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009b4e:	e2b5      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009b50:	4b7f      	ldr	r3, [pc, #508]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b5c:	d106      	bne.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b64:	d102      	bne.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8009b66:	4b7c      	ldr	r3, [pc, #496]	@ (8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009b68:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b6a:	e2a7      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009b6c:	4b78      	ldr	r3, [pc, #480]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b72:	f003 0302 	and.w	r3, r3, #2
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d107      	bne.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b80:	d103      	bne.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8009b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b88:	e298      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b8e:	e295      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b94:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009b98:	430b      	orrs	r3, r1
 8009b9a:	d147      	bne.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009b9c:	4b6c      	ldr	r3, [pc, #432]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ba2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009ba6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d103      	bne.n	8009bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009bae:	f7fd fe21 	bl	80077f4 <HAL_RCC_GetPCLK1Freq>
 8009bb2:	6378      	str	r0, [r7, #52]	@ 0x34
 8009bb4:	e282      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009bb6:	4b66      	ldr	r3, [pc, #408]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009bc4:	d112      	bne.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8009bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009bcc:	d10e      	bne.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009bce:	4b60      	ldr	r3, [pc, #384]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009bd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bdc:	d102      	bne.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8009bde:	23fa      	movs	r3, #250	@ 0xfa
 8009be0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009be2:	e26b      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8009be4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009be8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009bea:	e267      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009bec:	4b58      	ldr	r3, [pc, #352]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bf8:	d106      	bne.n	8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009c00:	d102      	bne.n	8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8009c02:	4b55      	ldr	r3, [pc, #340]	@ (8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c06:	e259      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009c08:	4b51      	ldr	r3, [pc, #324]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009c0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c0e:	f003 0302 	and.w	r3, r3, #2
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d107      	bne.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8009c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c18:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009c1c:	d103      	bne.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8009c1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c24:	e24a      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8009c26:	2300      	movs	r3, #0
 8009c28:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c2a:	e247      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009c2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c30:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8009c34:	430b      	orrs	r3, r1
 8009c36:	d12d      	bne.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8009c38:	4b45      	ldr	r3, [pc, #276]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009c3e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009c42:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8009c44:	4b42      	ldr	r3, [pc, #264]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c50:	d105      	bne.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8009c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d102      	bne.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8009c58:	4b3f      	ldr	r3, [pc, #252]	@ (8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c5c:	e22e      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c64:	d107      	bne.n	8009c76 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fe fc44 	bl	80084f8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c74:	e222      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8009c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c7c:	d107      	bne.n	8009c8e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c7e:	f107 0318 	add.w	r3, r7, #24
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7fe fd92 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c8c:	e216      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c92:	e213      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c98:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8009c9c:	430b      	orrs	r3, r1
 8009c9e:	d15d      	bne.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ca6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009caa:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009cb2:	d028      	beq.n	8009d06 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009cba:	d845      	bhi.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8009cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009cc2:	d013      	beq.n	8009cec <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8009cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009cca:	d83d      	bhi.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8009ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d004      	beq.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cd8:	d004      	beq.n	8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8009cda:	e035      	b.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009cdc:	f7fd fd9e 	bl	800781c <HAL_RCC_GetPCLK2Freq>
 8009ce0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009ce2:	e1eb      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009ce4:	f7fd fc6a 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 8009ce8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009cea:	e1e7      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009cec:	4b18      	ldr	r3, [pc, #96]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cf8:	d102      	bne.n	8009d00 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8009cfa:	4b17      	ldr	r3, [pc, #92]	@ (8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009cfc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009cfe:	e1dd      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009d00:	2300      	movs	r3, #0
 8009d02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d04:	e1da      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009d06:	4b12      	ldr	r3, [pc, #72]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f003 0320 	and.w	r3, r3, #32
 8009d0e:	2b20      	cmp	r3, #32
 8009d10:	d117      	bne.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009d12:	4b0f      	ldr	r3, [pc, #60]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d005      	beq.n	8009d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8009d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	0e1b      	lsrs	r3, r3, #24
 8009d24:	f003 030f 	and.w	r3, r3, #15
 8009d28:	e006      	b.n	8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8009d2a:	4b09      	ldr	r3, [pc, #36]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009d30:	041b      	lsls	r3, r3, #16
 8009d32:	0e1b      	lsrs	r3, r3, #24
 8009d34:	f003 030f 	and.w	r3, r3, #15
 8009d38:	4a06      	ldr	r2, [pc, #24]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8009d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d3e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009d40:	e1bc      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009d42:	2300      	movs	r3, #0
 8009d44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d46:	e1b9      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d4c:	e1b6      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009d4e:	bf00      	nop
 8009d50:	46020c00 	.word	0x46020c00
 8009d54:	08014510 	.word	0x08014510
 8009d58:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d60:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8009d64:	430b      	orrs	r3, r1
 8009d66:	d156      	bne.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009d68:	4ba5      	ldr	r3, [pc, #660]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009d72:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009d7a:	d028      	beq.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009d82:	d845      	bhi.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8009d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d8a:	d013      	beq.n	8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8009d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d92:	d83d      	bhi.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8009d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d004      	beq.n	8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8009d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009da0:	d004      	beq.n	8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8009da2:	e035      	b.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009da4:	f7fd fd26 	bl	80077f4 <HAL_RCC_GetPCLK1Freq>
 8009da8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009daa:	e187      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009dac:	f7fd fc06 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 8009db0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009db2:	e183      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009db4:	4b92      	ldr	r3, [pc, #584]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009dbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009dc0:	d102      	bne.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8009dc2:	4b90      	ldr	r3, [pc, #576]	@ (800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8009dc4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009dc6:	e179      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009dcc:	e176      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009dce:	4b8c      	ldr	r3, [pc, #560]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 0320 	and.w	r3, r3, #32
 8009dd6:	2b20      	cmp	r3, #32
 8009dd8:	d117      	bne.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009dda:	4b89      	ldr	r3, [pc, #548]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d005      	beq.n	8009df2 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8009de6:	4b86      	ldr	r3, [pc, #536]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	0e1b      	lsrs	r3, r3, #24
 8009dec:	f003 030f 	and.w	r3, r3, #15
 8009df0:	e006      	b.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8009df2:	4b83      	ldr	r3, [pc, #524]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009df8:	041b      	lsls	r3, r3, #16
 8009dfa:	0e1b      	lsrs	r3, r3, #24
 8009dfc:	f003 030f 	and.w	r3, r3, #15
 8009e00:	4a81      	ldr	r2, [pc, #516]	@ (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8009e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e06:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009e08:	e158      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e0e:	e155      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009e10:	2300      	movs	r3, #0
 8009e12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e14:	e152      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8009e16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e1a:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8009e1e:	430b      	orrs	r3, r1
 8009e20:	d177      	bne.n	8009f12 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009e22:	4b77      	ldr	r3, [pc, #476]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009e24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e28:	f003 0318 	and.w	r3, r3, #24
 8009e2c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e30:	2b18      	cmp	r3, #24
 8009e32:	d86b      	bhi.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8009e34:	a201      	add	r2, pc, #4	@ (adr r2, 8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8009e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3a:	bf00      	nop
 8009e3c:	08009ea1 	.word	0x08009ea1
 8009e40:	08009f0d 	.word	0x08009f0d
 8009e44:	08009f0d 	.word	0x08009f0d
 8009e48:	08009f0d 	.word	0x08009f0d
 8009e4c:	08009f0d 	.word	0x08009f0d
 8009e50:	08009f0d 	.word	0x08009f0d
 8009e54:	08009f0d 	.word	0x08009f0d
 8009e58:	08009f0d 	.word	0x08009f0d
 8009e5c:	08009ea9 	.word	0x08009ea9
 8009e60:	08009f0d 	.word	0x08009f0d
 8009e64:	08009f0d 	.word	0x08009f0d
 8009e68:	08009f0d 	.word	0x08009f0d
 8009e6c:	08009f0d 	.word	0x08009f0d
 8009e70:	08009f0d 	.word	0x08009f0d
 8009e74:	08009f0d 	.word	0x08009f0d
 8009e78:	08009f0d 	.word	0x08009f0d
 8009e7c:	08009eb1 	.word	0x08009eb1
 8009e80:	08009f0d 	.word	0x08009f0d
 8009e84:	08009f0d 	.word	0x08009f0d
 8009e88:	08009f0d 	.word	0x08009f0d
 8009e8c:	08009f0d 	.word	0x08009f0d
 8009e90:	08009f0d 	.word	0x08009f0d
 8009e94:	08009f0d 	.word	0x08009f0d
 8009e98:	08009f0d 	.word	0x08009f0d
 8009e9c:	08009ecb 	.word	0x08009ecb
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009ea0:	f7fd fcd0 	bl	8007844 <HAL_RCC_GetPCLK3Freq>
 8009ea4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009ea6:	e109      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009ea8:	f7fd fb88 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 8009eac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009eae:	e105      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009eb0:	4b53      	ldr	r3, [pc, #332]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009eb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ebc:	d102      	bne.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8009ebe:	4b51      	ldr	r3, [pc, #324]	@ (800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8009ec0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009ec2:	e0fb      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ec8:	e0f8      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009eca:	4b4d      	ldr	r3, [pc, #308]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f003 0320 	and.w	r3, r3, #32
 8009ed2:	2b20      	cmp	r3, #32
 8009ed4:	d117      	bne.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009ed6:	4b4a      	ldr	r3, [pc, #296]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d005      	beq.n	8009eee <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8009ee2:	4b47      	ldr	r3, [pc, #284]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	0e1b      	lsrs	r3, r3, #24
 8009ee8:	f003 030f 	and.w	r3, r3, #15
 8009eec:	e006      	b.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8009eee:	4b44      	ldr	r3, [pc, #272]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009ef0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009ef4:	041b      	lsls	r3, r3, #16
 8009ef6:	0e1b      	lsrs	r3, r3, #24
 8009ef8:	f003 030f 	and.w	r3, r3, #15
 8009efc:	4a42      	ldr	r2, [pc, #264]	@ (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8009efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f02:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009f04:	e0da      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009f06:	2300      	movs	r3, #0
 8009f08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f0a:	e0d7      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f10:	e0d4      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8009f12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f16:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8009f1a:	430b      	orrs	r3, r1
 8009f1c:	d155      	bne.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009f1e:	4b38      	ldr	r3, [pc, #224]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009f20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009f24:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009f28:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009f30:	d013      	beq.n	8009f5a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8009f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009f38:	d844      	bhi.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f40:	d013      	beq.n	8009f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8009f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f48:	d83c      	bhi.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8009f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d014      	beq.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8009f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f56:	d014      	beq.n	8009f82 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8009f58:	e034      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f5a:	f107 0318 	add.w	r3, r7, #24
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fe fc24 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f68:	e0a8      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fe fac2 	bl	80084f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f78:	e0a0      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009f7a:	f7fd fb1f 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 8009f7e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009f80:	e09c      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009f82:	4b1f      	ldr	r3, [pc, #124]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f003 0320 	and.w	r3, r3, #32
 8009f8a:	2b20      	cmp	r3, #32
 8009f8c:	d117      	bne.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009f8e:	4b1c      	ldr	r3, [pc, #112]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d005      	beq.n	8009fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8009f9a:	4b19      	ldr	r3, [pc, #100]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	0e1b      	lsrs	r3, r3, #24
 8009fa0:	f003 030f 	and.w	r3, r3, #15
 8009fa4:	e006      	b.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8009fa6:	4b16      	ldr	r3, [pc, #88]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009fa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009fac:	041b      	lsls	r3, r3, #16
 8009fae:	0e1b      	lsrs	r3, r3, #24
 8009fb0:	f003 030f 	and.w	r3, r3, #15
 8009fb4:	4a14      	ldr	r2, [pc, #80]	@ (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8009fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009fbc:	e07e      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009fc2:	e07b      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009fc8:	e078      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fce:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8009fd2:	430b      	orrs	r3, r1
 8009fd4:	d138      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009fd6:	4b0a      	ldr	r3, [pc, #40]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009fdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009fe0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8009fe2:	4b07      	ldr	r3, [pc, #28]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009fe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009fe8:	f003 0302 	and.w	r3, r3, #2
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d10d      	bne.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8009ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10a      	bne.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8009ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ffa:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ffc:	e05e      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009ffe:	bf00      	nop
 800a000:	46020c00 	.word	0x46020c00
 800a004:	00f42400 	.word	0x00f42400
 800a008:	08014510 	.word	0x08014510
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800a00c:	4b2e      	ldr	r3, [pc, #184]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800a00e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a012:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a016:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a01a:	d112      	bne.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 800a01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a022:	d10e      	bne.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a024:	4b28      	ldr	r3, [pc, #160]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800a026:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a02a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a02e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a032:	d102      	bne.n	800a03a <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 800a034:	23fa      	movs	r3, #250	@ 0xfa
 800a036:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a038:	e040      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800a03a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a03e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a040:	e03c      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800a042:	2300      	movs	r3, #0
 800a044:	637b      	str	r3, [r7, #52]	@ 0x34
 800a046:	e039      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800a048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a04c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a050:	430b      	orrs	r3, r1
 800a052:	d131      	bne.n	800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a054:	4b1c      	ldr	r3, [pc, #112]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800a056:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a05a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a05e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a060:	4b19      	ldr	r3, [pc, #100]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a068:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a06c:	d105      	bne.n	800a07a <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 800a06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a070:	2b00      	cmp	r3, #0
 800a072:	d102      	bne.n	800a07a <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 800a074:	4b15      	ldr	r3, [pc, #84]	@ (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 800a076:	637b      	str	r3, [r7, #52]	@ 0x34
 800a078:	e020      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800a07a:	4b13      	ldr	r3, [pc, #76]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a082:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a086:	d106      	bne.n	800a096 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 800a088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a08a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a08e:	d102      	bne.n	800a096 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 800a090:	4b0f      	ldr	r3, [pc, #60]	@ (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 800a092:	637b      	str	r3, [r7, #52]	@ 0x34
 800a094:	e012      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800a096:	4b0c      	ldr	r3, [pc, #48]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a09e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0a2:	d106      	bne.n	800a0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0aa:	d102      	bne.n	800a0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 800a0ac:	4b09      	ldr	r3, [pc, #36]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 800a0ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0b0:	e004      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0b6:	e001      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800a0bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3738      	adds	r7, #56	@ 0x38
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	46020c00 	.word	0x46020c00
 800a0cc:	02dc6c00 	.word	0x02dc6c00
 800a0d0:	016e3600 	.word	0x016e3600
 800a0d4:	00f42400 	.word	0x00f42400

0800a0d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800a0e0:	4b47      	ldr	r3, [pc, #284]	@ (800a200 <RCCEx_PLL2_Config+0x128>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a46      	ldr	r2, [pc, #280]	@ (800a200 <RCCEx_PLL2_Config+0x128>)
 800a0e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a0ea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a0ec:	f7f9 ff28 	bl	8003f40 <HAL_GetTick>
 800a0f0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0f2:	e008      	b.n	800a106 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a0f4:	f7f9 ff24 	bl	8003f40 <HAL_GetTick>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d901      	bls.n	800a106 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a102:	2303      	movs	r3, #3
 800a104:	e077      	b.n	800a1f6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a106:	4b3e      	ldr	r3, [pc, #248]	@ (800a200 <RCCEx_PLL2_Config+0x128>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d1f0      	bne.n	800a0f4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a112:	4b3b      	ldr	r3, [pc, #236]	@ (800a200 <RCCEx_PLL2_Config+0x128>)
 800a114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a116:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a11a:	f023 0303 	bic.w	r3, r3, #3
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	6811      	ldr	r1, [r2, #0]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	6852      	ldr	r2, [r2, #4]
 800a126:	3a01      	subs	r2, #1
 800a128:	0212      	lsls	r2, r2, #8
 800a12a:	430a      	orrs	r2, r1
 800a12c:	4934      	ldr	r1, [pc, #208]	@ (800a200 <RCCEx_PLL2_Config+0x128>)
 800a12e:	4313      	orrs	r3, r2
 800a130:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a132:	4b33      	ldr	r3, [pc, #204]	@ (800a200 <RCCEx_PLL2_Config+0x128>)
 800a134:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a136:	4b33      	ldr	r3, [pc, #204]	@ (800a204 <RCCEx_PLL2_Config+0x12c>)
 800a138:	4013      	ands	r3, r2
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	6892      	ldr	r2, [r2, #8]
 800a13e:	3a01      	subs	r2, #1
 800a140:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	68d2      	ldr	r2, [r2, #12]
 800a148:	3a01      	subs	r2, #1
 800a14a:	0252      	lsls	r2, r2, #9
 800a14c:	b292      	uxth	r2, r2
 800a14e:	4311      	orrs	r1, r2
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	6912      	ldr	r2, [r2, #16]
 800a154:	3a01      	subs	r2, #1
 800a156:	0412      	lsls	r2, r2, #16
 800a158:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a15c:	4311      	orrs	r1, r2
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	6952      	ldr	r2, [r2, #20]
 800a162:	3a01      	subs	r2, #1
 800a164:	0612      	lsls	r2, r2, #24
 800a166:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a16a:	430a      	orrs	r2, r1
 800a16c:	4924      	ldr	r1, [pc, #144]	@ (800a200 <RCCEx_PLL2_Config+0x128>)
 800a16e:	4313      	orrs	r3, r2
 800a170:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a172:	4b23      	ldr	r3, [pc, #140]	@ (800a200 <RCCEx_PLL2_Config+0x128>)
 800a174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a176:	f023 020c 	bic.w	r2, r3, #12
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	699b      	ldr	r3, [r3, #24]
 800a17e:	4920      	ldr	r1, [pc, #128]	@ (800a200 <RCCEx_PLL2_Config+0x128>)
 800a180:	4313      	orrs	r3, r2
 800a182:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a184:	4b1e      	ldr	r3, [pc, #120]	@ (800a200 <RCCEx_PLL2_Config+0x128>)
 800a186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a1b      	ldr	r3, [r3, #32]
 800a18c:	491c      	ldr	r1, [pc, #112]	@ (800a200 <RCCEx_PLL2_Config+0x128>)
 800a18e:	4313      	orrs	r3, r2
 800a190:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800a192:	4b1b      	ldr	r3, [pc, #108]	@ (800a200 <RCCEx_PLL2_Config+0x128>)
 800a194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a196:	4a1a      	ldr	r2, [pc, #104]	@ (800a200 <RCCEx_PLL2_Config+0x128>)
 800a198:	f023 0310 	bic.w	r3, r3, #16
 800a19c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a19e:	4b18      	ldr	r3, [pc, #96]	@ (800a200 <RCCEx_PLL2_Config+0x128>)
 800a1a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a1a6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	69d2      	ldr	r2, [r2, #28]
 800a1ae:	00d2      	lsls	r2, r2, #3
 800a1b0:	4913      	ldr	r1, [pc, #76]	@ (800a200 <RCCEx_PLL2_Config+0x128>)
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800a1b6:	4b12      	ldr	r3, [pc, #72]	@ (800a200 <RCCEx_PLL2_Config+0x128>)
 800a1b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ba:	4a11      	ldr	r2, [pc, #68]	@ (800a200 <RCCEx_PLL2_Config+0x128>)
 800a1bc:	f043 0310 	orr.w	r3, r3, #16
 800a1c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800a1c2:	4b0f      	ldr	r3, [pc, #60]	@ (800a200 <RCCEx_PLL2_Config+0x128>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a0e      	ldr	r2, [pc, #56]	@ (800a200 <RCCEx_PLL2_Config+0x128>)
 800a1c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a1cc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a1ce:	f7f9 feb7 	bl	8003f40 <HAL_GetTick>
 800a1d2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1d4:	e008      	b.n	800a1e8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a1d6:	f7f9 feb3 	bl	8003f40 <HAL_GetTick>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	d901      	bls.n	800a1e8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	e006      	b.n	800a1f6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1e8:	4b05      	ldr	r3, [pc, #20]	@ (800a200 <RCCEx_PLL2_Config+0x128>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d0f0      	beq.n	800a1d6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0

}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	46020c00 	.word	0x46020c00
 800a204:	80800000 	.word	0x80800000

0800a208 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800a210:	4b47      	ldr	r3, [pc, #284]	@ (800a330 <RCCEx_PLL3_Config+0x128>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a46      	ldr	r2, [pc, #280]	@ (800a330 <RCCEx_PLL3_Config+0x128>)
 800a216:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a21a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a21c:	f7f9 fe90 	bl	8003f40 <HAL_GetTick>
 800a220:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a222:	e008      	b.n	800a236 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a224:	f7f9 fe8c 	bl	8003f40 <HAL_GetTick>
 800a228:	4602      	mov	r2, r0
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d901      	bls.n	800a236 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a232:	2303      	movs	r3, #3
 800a234:	e077      	b.n	800a326 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a236:	4b3e      	ldr	r3, [pc, #248]	@ (800a330 <RCCEx_PLL3_Config+0x128>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1f0      	bne.n	800a224 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a242:	4b3b      	ldr	r3, [pc, #236]	@ (800a330 <RCCEx_PLL3_Config+0x128>)
 800a244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a246:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a24a:	f023 0303 	bic.w	r3, r3, #3
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	6811      	ldr	r1, [r2, #0]
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	6852      	ldr	r2, [r2, #4]
 800a256:	3a01      	subs	r2, #1
 800a258:	0212      	lsls	r2, r2, #8
 800a25a:	430a      	orrs	r2, r1
 800a25c:	4934      	ldr	r1, [pc, #208]	@ (800a330 <RCCEx_PLL3_Config+0x128>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	630b      	str	r3, [r1, #48]	@ 0x30
 800a262:	4b33      	ldr	r3, [pc, #204]	@ (800a330 <RCCEx_PLL3_Config+0x128>)
 800a264:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a266:	4b33      	ldr	r3, [pc, #204]	@ (800a334 <RCCEx_PLL3_Config+0x12c>)
 800a268:	4013      	ands	r3, r2
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	6892      	ldr	r2, [r2, #8]
 800a26e:	3a01      	subs	r2, #1
 800a270:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	68d2      	ldr	r2, [r2, #12]
 800a278:	3a01      	subs	r2, #1
 800a27a:	0252      	lsls	r2, r2, #9
 800a27c:	b292      	uxth	r2, r2
 800a27e:	4311      	orrs	r1, r2
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	6912      	ldr	r2, [r2, #16]
 800a284:	3a01      	subs	r2, #1
 800a286:	0412      	lsls	r2, r2, #16
 800a288:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a28c:	4311      	orrs	r1, r2
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	6952      	ldr	r2, [r2, #20]
 800a292:	3a01      	subs	r2, #1
 800a294:	0612      	lsls	r2, r2, #24
 800a296:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a29a:	430a      	orrs	r2, r1
 800a29c:	4924      	ldr	r1, [pc, #144]	@ (800a330 <RCCEx_PLL3_Config+0x128>)
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800a2a2:	4b23      	ldr	r3, [pc, #140]	@ (800a330 <RCCEx_PLL3_Config+0x128>)
 800a2a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2a6:	f023 020c 	bic.w	r2, r3, #12
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	4920      	ldr	r1, [pc, #128]	@ (800a330 <RCCEx_PLL3_Config+0x128>)
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a2b4:	4b1e      	ldr	r3, [pc, #120]	@ (800a330 <RCCEx_PLL3_Config+0x128>)
 800a2b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6a1b      	ldr	r3, [r3, #32]
 800a2bc:	491c      	ldr	r1, [pc, #112]	@ (800a330 <RCCEx_PLL3_Config+0x128>)
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800a2c2:	4b1b      	ldr	r3, [pc, #108]	@ (800a330 <RCCEx_PLL3_Config+0x128>)
 800a2c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2c6:	4a1a      	ldr	r2, [pc, #104]	@ (800a330 <RCCEx_PLL3_Config+0x128>)
 800a2c8:	f023 0310 	bic.w	r3, r3, #16
 800a2cc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a2ce:	4b18      	ldr	r3, [pc, #96]	@ (800a330 <RCCEx_PLL3_Config+0x128>)
 800a2d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a2d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a2d6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	69d2      	ldr	r2, [r2, #28]
 800a2de:	00d2      	lsls	r2, r2, #3
 800a2e0:	4913      	ldr	r1, [pc, #76]	@ (800a330 <RCCEx_PLL3_Config+0x128>)
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800a2e6:	4b12      	ldr	r3, [pc, #72]	@ (800a330 <RCCEx_PLL3_Config+0x128>)
 800a2e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2ea:	4a11      	ldr	r2, [pc, #68]	@ (800a330 <RCCEx_PLL3_Config+0x128>)
 800a2ec:	f043 0310 	orr.w	r3, r3, #16
 800a2f0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800a2f2:	4b0f      	ldr	r3, [pc, #60]	@ (800a330 <RCCEx_PLL3_Config+0x128>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a0e      	ldr	r2, [pc, #56]	@ (800a330 <RCCEx_PLL3_Config+0x128>)
 800a2f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2fc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a2fe:	f7f9 fe1f 	bl	8003f40 <HAL_GetTick>
 800a302:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a304:	e008      	b.n	800a318 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a306:	f7f9 fe1b 	bl	8003f40 <HAL_GetTick>
 800a30a:	4602      	mov	r2, r0
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	1ad3      	subs	r3, r2, r3
 800a310:	2b02      	cmp	r3, #2
 800a312:	d901      	bls.n	800a318 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a314:	2303      	movs	r3, #3
 800a316:	e006      	b.n	800a326 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a318:	4b05      	ldr	r3, [pc, #20]	@ (800a330 <RCCEx_PLL3_Config+0x128>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a320:	2b00      	cmp	r3, #0
 800a322:	d0f0      	beq.n	800a306 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	46020c00 	.word	0x46020c00
 800a334:	80800000 	.word	0x80800000

0800a338 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d101      	bne.n	800a34a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	e0fb      	b.n	800a542 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a7f      	ldr	r2, [pc, #508]	@ (800a54c <HAL_SPI_Init+0x214>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d004      	beq.n	800a35e <HAL_SPI_Init+0x26>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a7d      	ldr	r2, [pc, #500]	@ (800a550 <HAL_SPI_Init+0x218>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	e000      	b.n	800a360 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800a35e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a78      	ldr	r2, [pc, #480]	@ (800a54c <HAL_SPI_Init+0x214>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d004      	beq.n	800a37a <HAL_SPI_Init+0x42>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a76      	ldr	r2, [pc, #472]	@ (800a550 <HAL_SPI_Init+0x218>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d105      	bne.n	800a386 <HAL_SPI_Init+0x4e>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	2b0f      	cmp	r3, #15
 800a380:	d901      	bls.n	800a386 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	e0dd      	b.n	800a542 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 f8ec 	bl	800a564 <SPI_GetPacketSize>
 800a38c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a6e      	ldr	r2, [pc, #440]	@ (800a54c <HAL_SPI_Init+0x214>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d004      	beq.n	800a3a2 <HAL_SPI_Init+0x6a>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a6c      	ldr	r2, [pc, #432]	@ (800a550 <HAL_SPI_Init+0x218>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d102      	bne.n	800a3a8 <HAL_SPI_Init+0x70>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2b08      	cmp	r3, #8
 800a3a6:	d816      	bhi.n	800a3d6 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a3ac:	4a69      	ldr	r2, [pc, #420]	@ (800a554 <HAL_SPI_Init+0x21c>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d00e      	beq.n	800a3d0 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a68      	ldr	r2, [pc, #416]	@ (800a558 <HAL_SPI_Init+0x220>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d009      	beq.n	800a3d0 <HAL_SPI_Init+0x98>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a66      	ldr	r2, [pc, #408]	@ (800a55c <HAL_SPI_Init+0x224>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d004      	beq.n	800a3d0 <HAL_SPI_Init+0x98>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a65      	ldr	r2, [pc, #404]	@ (800a560 <HAL_SPI_Init+0x228>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d104      	bne.n	800a3da <HAL_SPI_Init+0xa2>
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2b10      	cmp	r3, #16
 800a3d4:	d901      	bls.n	800a3da <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e0b3      	b.n	800a542 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d106      	bne.n	800a3f4 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7f8 f88e 	bl	8002510 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f022 0201 	bic.w	r2, r2, #1
 800a40a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a416:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	699b      	ldr	r3, [r3, #24]
 800a41c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a420:	d119      	bne.n	800a456 <HAL_SPI_Init+0x11e>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a42a:	d103      	bne.n	800a434 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a430:	2b00      	cmp	r3, #0
 800a432:	d008      	beq.n	800a446 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d10c      	bne.n	800a456 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a440:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a444:	d107      	bne.n	800a456 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a454:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d00f      	beq.n	800a482 <HAL_SPI_Init+0x14a>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	2b06      	cmp	r3, #6
 800a468:	d90b      	bls.n	800a482 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	430a      	orrs	r2, r1
 800a47e:	601a      	str	r2, [r3, #0]
 800a480:	e007      	b.n	800a492 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a490:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	69da      	ldr	r2, [r3, #28]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a49a:	431a      	orrs	r2, r3
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	431a      	orrs	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4a4:	ea42 0103 	orr.w	r1, r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	68da      	ldr	r2, [r3, #12]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	430a      	orrs	r2, r1
 800a4b2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4bc:	431a      	orrs	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c2:	431a      	orrs	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	699b      	ldr	r3, [r3, #24]
 800a4c8:	431a      	orrs	r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	431a      	orrs	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	695b      	ldr	r3, [r3, #20]
 800a4d4:	431a      	orrs	r2, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
 800a4da:	431a      	orrs	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	431a      	orrs	r2, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4e6:	431a      	orrs	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	431a      	orrs	r2, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4f2:	431a      	orrs	r2, r3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4f8:	431a      	orrs	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4fe:	ea42 0103 	orr.w	r1, r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	430a      	orrs	r2, r1
 800a50c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00a      	beq.n	800a530 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	430a      	orrs	r2, r1
 800a52e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	46002000 	.word	0x46002000
 800a550:	56002000 	.word	0x56002000
 800a554:	40013000 	.word	0x40013000
 800a558:	50013000 	.word	0x50013000
 800a55c:	40003800 	.word	0x40003800
 800a560:	50003800 	.word	0x50003800

0800a564 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a570:	095b      	lsrs	r3, r3, #5
 800a572:	3301      	adds	r3, #1
 800a574:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	3301      	adds	r3, #1
 800a57c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	3307      	adds	r3, #7
 800a582:	08db      	lsrs	r3, r3, #3
 800a584:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	fb02 f303 	mul.w	r3, r2, r3
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3714      	adds	r7, #20
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800a59a:	b480      	push	{r7}
 800a59c:	b083      	sub	sp, #12
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d12e      	bne.n	800a60e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d101      	bne.n	800a5be <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800a5ba:	2302      	movs	r3, #2
 800a5bc:	e028      	b.n	800a610 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2202      	movs	r2, #2
 800a5ca:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f022 0201 	bic.w	r2, r2, #1
 800a5dc:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800a5ea:	ea42 0103 	orr.w	r1, r2, r3
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	689a      	ldr	r2, [r3, #8]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	430a      	orrs	r2, r1
 800a5f8:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	e000      	b.n	800a610 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
  }
}
 800a610:	4618      	mov	r0, r3
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d101      	bne.n	800a62e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	e050      	b.n	800a6d0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a634:	2b00      	cmp	r3, #0
 800a636:	d114      	bne.n	800a662 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 fde3 	bl	800b20c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d103      	bne.n	800a658 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	4a21      	ldr	r2, [pc, #132]	@ (800a6d8 <HAL_UART_Init+0xbc>)
 800a654:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2224      	movs	r2, #36	@ 0x24
 800a666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f022 0201 	bic.w	r2, r2, #1
 800a678:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d002      	beq.n	800a688 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 ffb0 	bl	800b5e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fe0b 	bl	800b2a4 <UART_SetConfig>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b01      	cmp	r3, #1
 800a692:	d101      	bne.n	800a698 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	e01b      	b.n	800a6d0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	685a      	ldr	r2, [r3, #4]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a6a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	689a      	ldr	r2, [r3, #8]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a6b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f042 0201 	orr.w	r2, r2, #1
 800a6c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f001 f82f 	bl	800b72c <UART_CheckIdleState>
 800a6ce:	4603      	mov	r3, r0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	08002631 	.word	0x08002631

0800a6dc <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b087      	sub	sp, #28
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	607a      	str	r2, [r7, #4]
 800a6e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d109      	bne.n	800a708 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	e097      	b.n	800a838 <HAL_UART_RegisterCallback+0x15c>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a70e:	2b20      	cmp	r3, #32
 800a710:	d167      	bne.n	800a7e2 <HAL_UART_RegisterCallback+0x106>
  {
    switch (CallbackID)
 800a712:	7afb      	ldrb	r3, [r7, #11]
 800a714:	2b0c      	cmp	r3, #12
 800a716:	d859      	bhi.n	800a7cc <HAL_UART_RegisterCallback+0xf0>
 800a718:	a201      	add	r2, pc, #4	@ (adr r2, 800a720 <HAL_UART_RegisterCallback+0x44>)
 800a71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71e:	bf00      	nop
 800a720:	0800a755 	.word	0x0800a755
 800a724:	0800a75f 	.word	0x0800a75f
 800a728:	0800a769 	.word	0x0800a769
 800a72c:	0800a773 	.word	0x0800a773
 800a730:	0800a77d 	.word	0x0800a77d
 800a734:	0800a787 	.word	0x0800a787
 800a738:	0800a791 	.word	0x0800a791
 800a73c:	0800a79b 	.word	0x0800a79b
 800a740:	0800a7cd 	.word	0x0800a7cd
 800a744:	0800a7a5 	.word	0x0800a7a5
 800a748:	0800a7af 	.word	0x0800a7af
 800a74c:	0800a7b9 	.word	0x0800a7b9
 800a750:	0800a7c3 	.word	0x0800a7c3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a75c:	e06b      	b.n	800a836 <HAL_UART_RegisterCallback+0x15a>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a766:	e066      	b.n	800a836 <HAL_UART_RegisterCallback+0x15a>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a770:	e061      	b.n	800a836 <HAL_UART_RegisterCallback+0x15a>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a77a:	e05c      	b.n	800a836 <HAL_UART_RegisterCallback+0x15a>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a784:	e057      	b.n	800a836 <HAL_UART_RegisterCallback+0x15a>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a78e:	e052      	b.n	800a836 <HAL_UART_RegisterCallback+0x15a>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a798:	e04d      	b.n	800a836 <HAL_UART_RegisterCallback+0x15a>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a7a2:	e048      	b.n	800a836 <HAL_UART_RegisterCallback+0x15a>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a7ac:	e043      	b.n	800a836 <HAL_UART_RegisterCallback+0x15a>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a7b6:	e03e      	b.n	800a836 <HAL_UART_RegisterCallback+0x15a>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800a7c0:	e039      	b.n	800a836 <HAL_UART_RegisterCallback+0x15a>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a7ca:	e034      	b.n	800a836 <HAL_UART_RegisterCallback+0x15a>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	75fb      	strb	r3, [r7, #23]
        break;
 800a7e0:	e029      	b.n	800a836 <HAL_UART_RegisterCallback+0x15a>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d11a      	bne.n	800a822 <HAL_UART_RegisterCallback+0x146>
  {
    switch (CallbackID)
 800a7ec:	7afb      	ldrb	r3, [r7, #11]
 800a7ee:	2b0b      	cmp	r3, #11
 800a7f0:	d002      	beq.n	800a7f8 <HAL_UART_RegisterCallback+0x11c>
 800a7f2:	2b0c      	cmp	r3, #12
 800a7f4:	d005      	beq.n	800a802 <HAL_UART_RegisterCallback+0x126>
 800a7f6:	e009      	b.n	800a80c <HAL_UART_RegisterCallback+0x130>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800a800:	e019      	b.n	800a836 <HAL_UART_RegisterCallback+0x15a>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a80a:	e014      	b.n	800a836 <HAL_UART_RegisterCallback+0x15a>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a812:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	75fb      	strb	r3, [r7, #23]
        break;
 800a820:	e009      	b.n	800a836 <HAL_UART_RegisterCallback+0x15a>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a828:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a836:	7dfb      	ldrb	r3, [r7, #23]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	371c      	adds	r7, #28
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b08a      	sub	sp, #40	@ 0x28
 800a848:	af02      	add	r7, sp, #8
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	603b      	str	r3, [r7, #0]
 800a850:	4613      	mov	r3, r2
 800a852:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a85a:	2b20      	cmp	r3, #32
 800a85c:	f040 808b 	bne.w	800a976 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d002      	beq.n	800a86c <HAL_UART_Transmit+0x28>
 800a866:	88fb      	ldrh	r3, [r7, #6]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d101      	bne.n	800a870 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	e083      	b.n	800a978 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a87a:	2b80      	cmp	r3, #128	@ 0x80
 800a87c:	d107      	bne.n	800a88e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	689a      	ldr	r2, [r3, #8]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a88c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2200      	movs	r2, #0
 800a892:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2221      	movs	r2, #33	@ 0x21
 800a89a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a89e:	f7f9 fb4f 	bl	8003f40 <HAL_GetTick>
 800a8a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	88fa      	ldrh	r2, [r7, #6]
 800a8a8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	88fa      	ldrh	r2, [r7, #6]
 800a8b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	689b      	ldr	r3, [r3, #8]
 800a8b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8bc:	d108      	bne.n	800a8d0 <HAL_UART_Transmit+0x8c>
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d104      	bne.n	800a8d0 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	61bb      	str	r3, [r7, #24]
 800a8ce:	e003      	b.n	800a8d8 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a8d8:	e030      	b.n	800a93c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	2180      	movs	r1, #128	@ 0x80
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f000 ffcb 	bl	800b880 <UART_WaitOnFlagUntilTimeout>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d005      	beq.n	800a8fc <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2220      	movs	r2, #32
 800a8f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	e03d      	b.n	800a978 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d10b      	bne.n	800a91a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	881b      	ldrh	r3, [r3, #0]
 800a906:	461a      	mov	r2, r3
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a910:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	3302      	adds	r3, #2
 800a916:	61bb      	str	r3, [r7, #24]
 800a918:	e007      	b.n	800a92a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	781a      	ldrb	r2, [r3, #0]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	3301      	adds	r3, #1
 800a928:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a930:	b29b      	uxth	r3, r3
 800a932:	3b01      	subs	r3, #1
 800a934:	b29a      	uxth	r2, r3
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a942:	b29b      	uxth	r3, r3
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1c8      	bne.n	800a8da <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	2200      	movs	r2, #0
 800a950:	2140      	movs	r1, #64	@ 0x40
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f000 ff94 	bl	800b880 <UART_WaitOnFlagUntilTimeout>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d005      	beq.n	800a96a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2220      	movs	r2, #32
 800a962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a966:	2303      	movs	r3, #3
 800a968:	e006      	b.n	800a978 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2220      	movs	r2, #32
 800a96e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a972:	2300      	movs	r3, #0
 800a974:	e000      	b.n	800a978 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a976:	2302      	movs	r3, #2
  }
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3720      	adds	r7, #32
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a980:	b480      	push	{r7}
 800a982:	b091      	sub	sp, #68	@ 0x44
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	4613      	mov	r3, r2
 800a98c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a994:	2b20      	cmp	r3, #32
 800a996:	f040 8088 	bne.w	800aaaa <HAL_UART_Transmit_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d002      	beq.n	800a9a6 <HAL_UART_Transmit_IT+0x26>
 800a9a0:	88fb      	ldrh	r3, [r7, #6]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d101      	bne.n	800a9aa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e080      	b.n	800aaac <HAL_UART_Transmit_IT+0x12c>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9b4:	2b80      	cmp	r3, #128	@ 0x80
 800a9b6:	d107      	bne.n	800a9c8 <HAL_UART_Transmit_IT+0x48>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	689a      	ldr	r2, [r3, #8]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a9c6:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->pTxBuffPtr  = pData;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	88fa      	ldrh	r2, [r7, #6]
 800a9d2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	88fa      	ldrh	r2, [r7, #6]
 800a9da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2221      	movs	r2, #33	@ 0x21
 800a9f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9fc:	d12a      	bne.n	800aa54 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa06:	d107      	bne.n	800aa18 <HAL_UART_Transmit_IT+0x98>
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d103      	bne.n	800aa18 <HAL_UART_Transmit_IT+0x98>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	4a29      	ldr	r2, [pc, #164]	@ (800aab8 <HAL_UART_Transmit_IT+0x138>)
 800aa14:	679a      	str	r2, [r3, #120]	@ 0x78
 800aa16:	e002      	b.n	800aa1e <HAL_UART_Transmit_IT+0x9e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	4a28      	ldr	r2, [pc, #160]	@ (800aabc <HAL_UART_Transmit_IT+0x13c>)
 800aa1c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	3308      	adds	r3, #8
 800aa24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa28:	e853 3f00 	ldrex	r3, [r3]
 800aa2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800aa34:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	3308      	adds	r3, #8
 800aa3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa3e:	637a      	str	r2, [r7, #52]	@ 0x34
 800aa40:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa42:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aa44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa46:	e841 2300 	strex	r3, r2, [r1]
 800aa4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800aa4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d1e5      	bne.n	800aa1e <HAL_UART_Transmit_IT+0x9e>
 800aa52:	e028      	b.n	800aaa6 <HAL_UART_Transmit_IT+0x126>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	689b      	ldr	r3, [r3, #8]
 800aa58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa5c:	d107      	bne.n	800aa6e <HAL_UART_Transmit_IT+0xee>
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d103      	bne.n	800aa6e <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	4a15      	ldr	r2, [pc, #84]	@ (800aac0 <HAL_UART_Transmit_IT+0x140>)
 800aa6a:	679a      	str	r2, [r3, #120]	@ 0x78
 800aa6c:	e002      	b.n	800aa74 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	4a14      	ldr	r2, [pc, #80]	@ (800aac4 <HAL_UART_Transmit_IT+0x144>)
 800aa72:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	e853 3f00 	ldrex	r3, [r3]
 800aa80:	613b      	str	r3, [r7, #16]
   return(result);
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	461a      	mov	r2, r3
 800aa90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa92:	623b      	str	r3, [r7, #32]
 800aa94:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa96:	69f9      	ldr	r1, [r7, #28]
 800aa98:	6a3a      	ldr	r2, [r7, #32]
 800aa9a:	e841 2300 	strex	r3, r2, [r1]
 800aa9e:	61bb      	str	r3, [r7, #24]
   return(result);
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1e6      	bne.n	800aa74 <HAL_UART_Transmit_IT+0xf4>
    }

    return HAL_OK;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	e000      	b.n	800aaac <HAL_UART_Transmit_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 800aaaa:	2302      	movs	r3, #2
  }
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3744      	adds	r7, #68	@ 0x44
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	0800bef7 	.word	0x0800bef7
 800aabc:	0800be17 	.word	0x0800be17
 800aac0:	0800bd55 	.word	0x0800bd55
 800aac4:	0800bc9d 	.word	0x0800bc9d

0800aac8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b08a      	sub	sp, #40	@ 0x28
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	4613      	mov	r3, r2
 800aad4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aadc:	2b20      	cmp	r3, #32
 800aade:	d14b      	bne.n	800ab78 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d002      	beq.n	800aaec <HAL_UART_Receive_IT+0x24>
 800aae6:	88fb      	ldrh	r3, [r7, #6]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d101      	bne.n	800aaf0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800aaec:	2301      	movs	r3, #1
 800aaee:	e044      	b.n	800ab7a <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab00:	2b40      	cmp	r3, #64	@ 0x40
 800ab02:	d107      	bne.n	800ab14 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	689a      	ldr	r2, [r3, #8]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ab12:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a1a      	ldr	r2, [pc, #104]	@ (800ab84 <HAL_UART_Receive_IT+0xbc>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d024      	beq.n	800ab68 <HAL_UART_Receive_IT+0xa0>
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a19      	ldr	r2, [pc, #100]	@ (800ab88 <HAL_UART_Receive_IT+0xc0>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d01f      	beq.n	800ab68 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d018      	beq.n	800ab68 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	e853 3f00 	ldrex	r3, [r3]
 800ab42:	613b      	str	r3, [r7, #16]
   return(result);
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ab4a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	461a      	mov	r2, r3
 800ab52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab54:	623b      	str	r3, [r7, #32]
 800ab56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab58:	69f9      	ldr	r1, [r7, #28]
 800ab5a:	6a3a      	ldr	r2, [r7, #32]
 800ab5c:	e841 2300 	strex	r3, r2, [r1]
 800ab60:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1e6      	bne.n	800ab36 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ab68:	88fb      	ldrh	r3, [r7, #6]
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	68b9      	ldr	r1, [r7, #8]
 800ab6e:	68f8      	ldr	r0, [r7, #12]
 800ab70:	f000 fef4 	bl	800b95c <UART_Start_Receive_IT>
 800ab74:	4603      	mov	r3, r0
 800ab76:	e000      	b.n	800ab7a <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800ab78:	2302      	movs	r3, #2
  }
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3728      	adds	r7, #40	@ 0x28
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	46002400 	.word	0x46002400
 800ab88:	56002400 	.word	0x56002400

0800ab8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b0ae      	sub	sp, #184	@ 0xb8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	69db      	ldr	r3, [r3, #28]
 800ab9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800abb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800abb6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800abba:	4013      	ands	r3, r2
 800abbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800abc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d11b      	bne.n	800ac00 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800abc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800abcc:	f003 0320 	and.w	r3, r3, #32
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d015      	beq.n	800ac00 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800abd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800abd8:	f003 0320 	and.w	r3, r3, #32
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d105      	bne.n	800abec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800abe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d009      	beq.n	800ac00 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f000 828c 	beq.w	800b10e <HAL_UART_IRQHandler+0x582>
      {
        huart->RxISR(huart);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	4798      	blx	r3
      }
      return;
 800abfe:	e286      	b.n	800b10e <HAL_UART_IRQHandler+0x582>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ac00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f000 8103 	beq.w	800ae10 <HAL_UART_IRQHandler+0x284>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ac0a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ac0e:	4b7d      	ldr	r3, [pc, #500]	@ (800ae04 <HAL_UART_IRQHandler+0x278>)
 800ac10:	4013      	ands	r3, r2
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d106      	bne.n	800ac24 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ac16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ac1a:	4b7b      	ldr	r3, [pc, #492]	@ (800ae08 <HAL_UART_IRQHandler+0x27c>)
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f000 80f6 	beq.w	800ae10 <HAL_UART_IRQHandler+0x284>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ac24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ac28:	f003 0301 	and.w	r3, r3, #1
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d011      	beq.n	800ac54 <HAL_UART_IRQHandler+0xc8>
 800ac30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ac34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00b      	beq.n	800ac54 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2201      	movs	r2, #1
 800ac42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac4a:	f043 0201 	orr.w	r2, r3, #1
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ac58:	f003 0302 	and.w	r3, r3, #2
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d011      	beq.n	800ac84 <HAL_UART_IRQHandler+0xf8>
 800ac60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac64:	f003 0301 	and.w	r3, r3, #1
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00b      	beq.n	800ac84 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2202      	movs	r2, #2
 800ac72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac7a:	f043 0204 	orr.w	r2, r3, #4
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ac88:	f003 0304 	and.w	r3, r3, #4
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d011      	beq.n	800acb4 <HAL_UART_IRQHandler+0x128>
 800ac90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac94:	f003 0301 	and.w	r3, r3, #1
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00b      	beq.n	800acb4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2204      	movs	r2, #4
 800aca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acaa:	f043 0202 	orr.w	r2, r3, #2
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800acb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800acb8:	f003 0308 	and.w	r3, r3, #8
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d017      	beq.n	800acf0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800acc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800acc4:	f003 0320 	and.w	r3, r3, #32
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d105      	bne.n	800acd8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800accc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800acd0:	4b4c      	ldr	r3, [pc, #304]	@ (800ae04 <HAL_UART_IRQHandler+0x278>)
 800acd2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00b      	beq.n	800acf0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2208      	movs	r2, #8
 800acde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ace6:	f043 0208 	orr.w	r2, r3, #8
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800acf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800acf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d012      	beq.n	800ad22 <HAL_UART_IRQHandler+0x196>
 800acfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ad00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00c      	beq.n	800ad22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ad10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad18:	f043 0220 	orr.w	r2, r3, #32
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	f000 81f2 	beq.w	800b112 <HAL_UART_IRQHandler+0x586>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad32:	f003 0320 	and.w	r3, r3, #32
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d013      	beq.n	800ad62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ad3e:	f003 0320 	and.w	r3, r3, #32
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d105      	bne.n	800ad52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d007      	beq.n	800ad62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d003      	beq.n	800ad62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad76:	2b40      	cmp	r3, #64	@ 0x40
 800ad78:	d005      	beq.n	800ad86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ad7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ad7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d032      	beq.n	800adec <HAL_UART_IRQHandler+0x260>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 ff0a 	bl	800bba0 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad96:	2b40      	cmp	r3, #64	@ 0x40
 800ad98:	d122      	bne.n	800ade0 <HAL_UART_IRQHandler+0x254>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d017      	beq.n	800add4 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adaa:	4a18      	ldr	r2, [pc, #96]	@ (800ae0c <HAL_UART_IRQHandler+0x280>)
 800adac:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7f9 fb35 	bl	8004424 <HAL_DMA_Abort_IT>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d01f      	beq.n	800ae00 <HAL_UART_IRQHandler+0x274>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800adce:	4610      	mov	r0, r2
 800add0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800add2:	e015      	b.n	800ae00 <HAL_UART_IRQHandler+0x274>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adde:	e00f      	b.n	800ae00 <HAL_UART_IRQHandler+0x274>
#endif /* HAL_DMA_MODULE_ENABLED */
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adea:	e009      	b.n	800ae00 <HAL_UART_IRQHandler+0x274>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800adfe:	e188      	b.n	800b112 <HAL_UART_IRQHandler+0x586>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae00:	bf00      	nop
    return;
 800ae02:	e186      	b.n	800b112 <HAL_UART_IRQHandler+0x586>
 800ae04:	10000001 	.word	0x10000001
 800ae08:	04000120 	.word	0x04000120
 800ae0c:	0800bc6d 	.word	0x0800bc6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	f040 812d 	bne.w	800b074 <HAL_UART_IRQHandler+0x4e8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ae1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae1e:	f003 0310 	and.w	r3, r3, #16
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f000 8126 	beq.w	800b074 <HAL_UART_IRQHandler+0x4e8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ae28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ae2c:	f003 0310 	and.w	r3, r3, #16
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f000 811f 	beq.w	800b074 <HAL_UART_IRQHandler+0x4e8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2210      	movs	r2, #16
 800ae3c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae48:	2b40      	cmp	r3, #64	@ 0x40
 800ae4a:	f040 8093 	bne.w	800af74 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae58:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800ae5c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 8158 	beq.w	800b116 <HAL_UART_IRQHandler+0x58a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ae6c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800ae70:	429a      	cmp	r2, r3
 800ae72:	f080 8150 	bcs.w	800b116 <HAL_UART_IRQHandler+0x58a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800ae7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae88:	2b81      	cmp	r3, #129	@ 0x81
 800ae8a:	d060      	beq.n	800af4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae94:	e853 3f00 	ldrex	r3, [r3]
 800ae98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ae9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aea0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	461a      	mov	r2, r3
 800aeaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aeae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aeb2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aeb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aeba:	e841 2300 	strex	r3, r2, [r1]
 800aebe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aec0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d1e2      	bne.n	800ae8c <HAL_UART_IRQHandler+0x300>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	3308      	adds	r3, #8
 800aecc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aece:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aed0:	e853 3f00 	ldrex	r3, [r3]
 800aed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aed6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aed8:	f023 0301 	bic.w	r3, r3, #1
 800aedc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	3308      	adds	r3, #8
 800aee6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800aeea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aeec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aef0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aef2:	e841 2300 	strex	r3, r2, [r1]
 800aef6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aef8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d1e3      	bne.n	800aec6 <HAL_UART_IRQHandler+0x33a>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2220      	movs	r2, #32
 800af02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af14:	e853 3f00 	ldrex	r3, [r3]
 800af18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800af1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af1c:	f023 0310 	bic.w	r3, r3, #16
 800af20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	461a      	mov	r2, r3
 800af2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800af2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800af34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af36:	e841 2300 	strex	r3, r2, [r1]
 800af3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800af3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d1e4      	bne.n	800af0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af48:	4618      	mov	r0, r3
 800af4a:	f7f9 f9ef 	bl	800432c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2202      	movs	r2, #2
 800af52:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800af66:	b292      	uxth	r2, r2
 800af68:	1a8a      	subs	r2, r1, r2
 800af6a:	b292      	uxth	r2, r2
 800af6c:	4611      	mov	r1, r2
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af72:	e0d0      	b.n	800b116 <HAL_UART_IRQHandler+0x58a>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af80:	b29b      	uxth	r3, r3
 800af82:	1ad3      	subs	r3, r2, r3
 800af84:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af8e:	b29b      	uxth	r3, r3
 800af90:	2b00      	cmp	r3, #0
 800af92:	f000 80c2 	beq.w	800b11a <HAL_UART_IRQHandler+0x58e>
          && (nb_rx_data > 0U))
 800af96:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f000 80bd 	beq.w	800b11a <HAL_UART_IRQHandler+0x58e>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa8:	e853 3f00 	ldrex	r3, [r3]
 800afac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800afae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800afb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	461a      	mov	r2, r3
 800afbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800afc2:	647b      	str	r3, [r7, #68]	@ 0x44
 800afc4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800afc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800afca:	e841 2300 	strex	r3, r2, [r1]
 800afce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800afd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1e4      	bne.n	800afa0 <HAL_UART_IRQHandler+0x414>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	3308      	adds	r3, #8
 800afdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe0:	e853 3f00 	ldrex	r3, [r3]
 800afe4:	623b      	str	r3, [r7, #32]
   return(result);
 800afe6:	6a3b      	ldr	r3, [r7, #32]
 800afe8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800afec:	f023 0301 	bic.w	r3, r3, #1
 800aff0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	3308      	adds	r3, #8
 800affa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800affe:	633a      	str	r2, [r7, #48]	@ 0x30
 800b000:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b002:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b006:	e841 2300 	strex	r3, r2, [r1]
 800b00a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1e1      	bne.n	800afd6 <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2220      	movs	r2, #32
 800b016:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	e853 3f00 	ldrex	r3, [r3]
 800b032:	60fb      	str	r3, [r7, #12]
   return(result);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f023 0310 	bic.w	r3, r3, #16
 800b03a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	461a      	mov	r2, r3
 800b044:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b048:	61fb      	str	r3, [r7, #28]
 800b04a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b04c:	69b9      	ldr	r1, [r7, #24]
 800b04e:	69fa      	ldr	r2, [r7, #28]
 800b050:	e841 2300 	strex	r3, r2, [r1]
 800b054:	617b      	str	r3, [r7, #20]
   return(result);
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1e4      	bne.n	800b026 <HAL_UART_IRQHandler+0x49a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2202      	movs	r2, #2
 800b060:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b068:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 800b06c:	4611      	mov	r1, r2
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b072:	e052      	b.n	800b11a <HAL_UART_IRQHandler+0x58e>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b074:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d014      	beq.n	800b0aa <HAL_UART_IRQHandler+0x51e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b080:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d105      	bne.n	800b098 <HAL_UART_IRQHandler+0x50c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b08c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b090:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b094:	2b00      	cmp	r3, #0
 800b096:	d008      	beq.n	800b0aa <HAL_UART_IRQHandler+0x51e>
  {
    if (huart->TxISR != NULL)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d03e      	beq.n	800b11e <HAL_UART_IRQHandler+0x592>
    {
      huart->TxISR(huart);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	4798      	blx	r3
    }
    return;
 800b0a8:	e039      	b.n	800b11e <HAL_UART_IRQHandler+0x592>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b0aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b0ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d009      	beq.n	800b0ca <HAL_UART_IRQHandler+0x53e>
 800b0b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b0ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d003      	beq.n	800b0ca <HAL_UART_IRQHandler+0x53e>
  {
    UART_EndTransmit_IT(huart);
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 ff8c 	bl	800bfe0 <UART_EndTransmit_IT>
    return;
 800b0c8:	e02a      	b.n	800b120 <HAL_UART_IRQHandler+0x594>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b0ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b0ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00b      	beq.n	800b0ee <HAL_UART_IRQHandler+0x562>
 800b0d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b0da:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d005      	beq.n	800b0ee <HAL_UART_IRQHandler+0x562>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b0ec:	e018      	b.n	800b120 <HAL_UART_IRQHandler+0x594>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b0ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b0f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d012      	beq.n	800b120 <HAL_UART_IRQHandler+0x594>
 800b0fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	da0e      	bge.n	800b120 <HAL_UART_IRQHandler+0x594>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b10c:	e008      	b.n	800b120 <HAL_UART_IRQHandler+0x594>
      return;
 800b10e:	bf00      	nop
 800b110:	e006      	b.n	800b120 <HAL_UART_IRQHandler+0x594>
    return;
 800b112:	bf00      	nop
 800b114:	e004      	b.n	800b120 <HAL_UART_IRQHandler+0x594>
      return;
 800b116:	bf00      	nop
 800b118:	e002      	b.n	800b120 <HAL_UART_IRQHandler+0x594>
      return;
 800b11a:	bf00      	nop
 800b11c:	e000      	b.n	800b120 <HAL_UART_IRQHandler+0x594>
    return;
 800b11e:	bf00      	nop
  }
}
 800b120:	37b8      	adds	r7, #184	@ 0xb8
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop

0800b128 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b144:	bf00      	nop
 800b146:	370c      	adds	r7, #12
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b158:	bf00      	nop
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b16c:	bf00      	nop
 800b16e:	370c      	adds	r7, #12
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b194:	bf00      	nop
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b083      	sub	sp, #12
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b1a8:	bf00      	nop
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b1bc:	bf00      	nop
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b1d4:	bf00      	nop
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1ee:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1f6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	4313      	orrs	r3, r2
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3714      	adds	r7, #20
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr
	...

0800b20c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a18      	ldr	r2, [pc, #96]	@ (800b278 <UART_InitCallbacksToDefault+0x6c>)
 800b218:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	4a17      	ldr	r2, [pc, #92]	@ (800b27c <UART_InitCallbacksToDefault+0x70>)
 800b220:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a16      	ldr	r2, [pc, #88]	@ (800b280 <UART_InitCallbacksToDefault+0x74>)
 800b228:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a15      	ldr	r2, [pc, #84]	@ (800b284 <UART_InitCallbacksToDefault+0x78>)
 800b230:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a14      	ldr	r2, [pc, #80]	@ (800b288 <UART_InitCallbacksToDefault+0x7c>)
 800b238:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4a13      	ldr	r2, [pc, #76]	@ (800b28c <UART_InitCallbacksToDefault+0x80>)
 800b240:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4a12      	ldr	r2, [pc, #72]	@ (800b290 <UART_InitCallbacksToDefault+0x84>)
 800b248:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	4a11      	ldr	r2, [pc, #68]	@ (800b294 <UART_InitCallbacksToDefault+0x88>)
 800b250:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	4a10      	ldr	r2, [pc, #64]	@ (800b298 <UART_InitCallbacksToDefault+0x8c>)
 800b258:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	4a0f      	ldr	r2, [pc, #60]	@ (800b29c <UART_InitCallbacksToDefault+0x90>)
 800b260:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	4a0e      	ldr	r2, [pc, #56]	@ (800b2a0 <UART_InitCallbacksToDefault+0x94>)
 800b268:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

}
 800b26c:	bf00      	nop
 800b26e:	370c      	adds	r7, #12
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr
 800b278:	0800b13d 	.word	0x0800b13d
 800b27c:	0800b129 	.word	0x0800b129
 800b280:	0800b165 	.word	0x0800b165
 800b284:	0800b151 	.word	0x0800b151
 800b288:	0800b179 	.word	0x0800b179
 800b28c:	0800b18d 	.word	0x0800b18d
 800b290:	0800b1a1 	.word	0x0800b1a1
 800b294:	0800b1b5 	.word	0x0800b1b5
 800b298:	0800cad5 	.word	0x0800cad5
 800b29c:	0800cae9 	.word	0x0800cae9
 800b2a0:	0800b1c9 	.word	0x0800b1c9

0800b2a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2a8:	b094      	sub	sp, #80	@ 0x50
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	4b7e      	ldr	r3, [pc, #504]	@ (800b4b4 <UART_SetConfig+0x210>)
 800b2ba:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2be:	689a      	ldr	r2, [r3, #8]
 800b2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c2:	691b      	ldr	r3, [r3, #16]
 800b2c4:	431a      	orrs	r2, r3
 800b2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c8:	695b      	ldr	r3, [r3, #20]
 800b2ca:	431a      	orrs	r2, r3
 800b2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ce:	69db      	ldr	r3, [r3, #28]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4977      	ldr	r1, [pc, #476]	@ (800b4b8 <UART_SetConfig+0x214>)
 800b2dc:	4019      	ands	r1, r3
 800b2de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2e4:	430b      	orrs	r3, r1
 800b2e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b2f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f4:	68d9      	ldr	r1, [r3, #12]
 800b2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f8:	681a      	ldr	r2, [r3, #0]
 800b2fa:	ea40 0301 	orr.w	r3, r0, r1
 800b2fe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b302:	699b      	ldr	r3, [r3, #24]
 800b304:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	4b6a      	ldr	r3, [pc, #424]	@ (800b4b4 <UART_SetConfig+0x210>)
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d009      	beq.n	800b324 <UART_SetConfig+0x80>
 800b310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	4b69      	ldr	r3, [pc, #420]	@ (800b4bc <UART_SetConfig+0x218>)
 800b316:	429a      	cmp	r2, r3
 800b318:	d004      	beq.n	800b324 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b31c:	6a1a      	ldr	r2, [r3, #32]
 800b31e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b320:	4313      	orrs	r3, r2
 800b322:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b32e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b338:	430b      	orrs	r3, r1
 800b33a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b342:	f023 000f 	bic.w	r0, r3, #15
 800b346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b348:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	ea40 0301 	orr.w	r3, r0, r1
 800b352:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	4b59      	ldr	r3, [pc, #356]	@ (800b4c0 <UART_SetConfig+0x21c>)
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d102      	bne.n	800b364 <UART_SetConfig+0xc0>
 800b35e:	2301      	movs	r3, #1
 800b360:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b362:	e029      	b.n	800b3b8 <UART_SetConfig+0x114>
 800b364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	4b56      	ldr	r3, [pc, #344]	@ (800b4c4 <UART_SetConfig+0x220>)
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d102      	bne.n	800b374 <UART_SetConfig+0xd0>
 800b36e:	2302      	movs	r3, #2
 800b370:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b372:	e021      	b.n	800b3b8 <UART_SetConfig+0x114>
 800b374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	4b53      	ldr	r3, [pc, #332]	@ (800b4c8 <UART_SetConfig+0x224>)
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d102      	bne.n	800b384 <UART_SetConfig+0xe0>
 800b37e:	2304      	movs	r3, #4
 800b380:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b382:	e019      	b.n	800b3b8 <UART_SetConfig+0x114>
 800b384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	4b50      	ldr	r3, [pc, #320]	@ (800b4cc <UART_SetConfig+0x228>)
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d102      	bne.n	800b394 <UART_SetConfig+0xf0>
 800b38e:	2308      	movs	r3, #8
 800b390:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b392:	e011      	b.n	800b3b8 <UART_SetConfig+0x114>
 800b394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	4b4d      	ldr	r3, [pc, #308]	@ (800b4d0 <UART_SetConfig+0x22c>)
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d102      	bne.n	800b3a4 <UART_SetConfig+0x100>
 800b39e:	2310      	movs	r3, #16
 800b3a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3a2:	e009      	b.n	800b3b8 <UART_SetConfig+0x114>
 800b3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	4b42      	ldr	r3, [pc, #264]	@ (800b4b4 <UART_SetConfig+0x210>)
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d102      	bne.n	800b3b4 <UART_SetConfig+0x110>
 800b3ae:	2320      	movs	r3, #32
 800b3b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3b2:	e001      	b.n	800b3b8 <UART_SetConfig+0x114>
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	4b3d      	ldr	r3, [pc, #244]	@ (800b4b4 <UART_SetConfig+0x210>)
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d005      	beq.n	800b3ce <UART_SetConfig+0x12a>
 800b3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	4b3d      	ldr	r3, [pc, #244]	@ (800b4bc <UART_SetConfig+0x218>)
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	f040 8085 	bne.w	800b4d8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b3ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	623b      	str	r3, [r7, #32]
 800b3d4:	627a      	str	r2, [r7, #36]	@ 0x24
 800b3d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b3da:	f7fd fc9b 	bl	8008d14 <HAL_RCCEx_GetPeriphCLKFreq>
 800b3de:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b3e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	f000 80e8 	beq.w	800b5b8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3ec:	4a39      	ldr	r2, [pc, #228]	@ (800b4d4 <UART_SetConfig+0x230>)
 800b3ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3fa:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3fe:	685a      	ldr	r2, [r3, #4]
 800b400:	4613      	mov	r3, r2
 800b402:	005b      	lsls	r3, r3, #1
 800b404:	4413      	add	r3, r2
 800b406:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b408:	429a      	cmp	r2, r3
 800b40a:	d305      	bcc.n	800b418 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b412:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b414:	429a      	cmp	r2, r3
 800b416:	d903      	bls.n	800b420 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800b418:	2301      	movs	r3, #1
 800b41a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b41e:	e048      	b.n	800b4b2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b420:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b422:	2200      	movs	r2, #0
 800b424:	61bb      	str	r3, [r7, #24]
 800b426:	61fa      	str	r2, [r7, #28]
 800b428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b42a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b42c:	4a29      	ldr	r2, [pc, #164]	@ (800b4d4 <UART_SetConfig+0x230>)
 800b42e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b432:	b29b      	uxth	r3, r3
 800b434:	2200      	movs	r2, #0
 800b436:	613b      	str	r3, [r7, #16]
 800b438:	617a      	str	r2, [r7, #20]
 800b43a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b43e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b442:	f7f5 fbbf 	bl	8000bc4 <__aeabi_uldivmod>
 800b446:	4602      	mov	r2, r0
 800b448:	460b      	mov	r3, r1
 800b44a:	4610      	mov	r0, r2
 800b44c:	4619      	mov	r1, r3
 800b44e:	f04f 0200 	mov.w	r2, #0
 800b452:	f04f 0300 	mov.w	r3, #0
 800b456:	020b      	lsls	r3, r1, #8
 800b458:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b45c:	0202      	lsls	r2, r0, #8
 800b45e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b460:	6849      	ldr	r1, [r1, #4]
 800b462:	0849      	lsrs	r1, r1, #1
 800b464:	2000      	movs	r0, #0
 800b466:	460c      	mov	r4, r1
 800b468:	4605      	mov	r5, r0
 800b46a:	eb12 0804 	adds.w	r8, r2, r4
 800b46e:	eb43 0905 	adc.w	r9, r3, r5
 800b472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	60bb      	str	r3, [r7, #8]
 800b47a:	60fa      	str	r2, [r7, #12]
 800b47c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b480:	4640      	mov	r0, r8
 800b482:	4649      	mov	r1, r9
 800b484:	f7f5 fb9e 	bl	8000bc4 <__aeabi_uldivmod>
 800b488:	4602      	mov	r2, r0
 800b48a:	460b      	mov	r3, r1
 800b48c:	4613      	mov	r3, r2
 800b48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b492:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b496:	d308      	bcc.n	800b4aa <UART_SetConfig+0x206>
 800b498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b49a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b49e:	d204      	bcs.n	800b4aa <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800b4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b4a6:	60da      	str	r2, [r3, #12]
 800b4a8:	e003      	b.n	800b4b2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b4b0:	e082      	b.n	800b5b8 <UART_SetConfig+0x314>
 800b4b2:	e081      	b.n	800b5b8 <UART_SetConfig+0x314>
 800b4b4:	46002400 	.word	0x46002400
 800b4b8:	cfff69f3 	.word	0xcfff69f3
 800b4bc:	56002400 	.word	0x56002400
 800b4c0:	40013800 	.word	0x40013800
 800b4c4:	40004400 	.word	0x40004400
 800b4c8:	40004800 	.word	0x40004800
 800b4cc:	40004c00 	.word	0x40004c00
 800b4d0:	40005000 	.word	0x40005000
 800b4d4:	08014810 	.word	0x08014810
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4da:	69db      	ldr	r3, [r3, #28]
 800b4dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b4e0:	d13c      	bne.n	800b55c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b4e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	603b      	str	r3, [r7, #0]
 800b4e8:	607a      	str	r2, [r7, #4]
 800b4ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b4ee:	f7fd fc11 	bl	8008d14 <HAL_RCCEx_GetPeriphCLKFreq>
 800b4f2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b4f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d05e      	beq.n	800b5b8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4fe:	4a39      	ldr	r2, [pc, #228]	@ (800b5e4 <UART_SetConfig+0x340>)
 800b500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b504:	461a      	mov	r2, r3
 800b506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b508:	fbb3 f3f2 	udiv	r3, r3, r2
 800b50c:	005a      	lsls	r2, r3, #1
 800b50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	085b      	lsrs	r3, r3, #1
 800b514:	441a      	add	r2, r3
 800b516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b522:	2b0f      	cmp	r3, #15
 800b524:	d916      	bls.n	800b554 <UART_SetConfig+0x2b0>
 800b526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b52c:	d212      	bcs.n	800b554 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b52e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b530:	b29b      	uxth	r3, r3
 800b532:	f023 030f 	bic.w	r3, r3, #15
 800b536:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b53a:	085b      	lsrs	r3, r3, #1
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	f003 0307 	and.w	r3, r3, #7
 800b542:	b29a      	uxth	r2, r3
 800b544:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b546:	4313      	orrs	r3, r2
 800b548:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b550:	60da      	str	r2, [r3, #12]
 800b552:	e031      	b.n	800b5b8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b554:	2301      	movs	r3, #1
 800b556:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b55a:	e02d      	b.n	800b5b8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b55c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b55e:	2200      	movs	r2, #0
 800b560:	469a      	mov	sl, r3
 800b562:	4693      	mov	fp, r2
 800b564:	4650      	mov	r0, sl
 800b566:	4659      	mov	r1, fp
 800b568:	f7fd fbd4 	bl	8008d14 <HAL_RCCEx_GetPeriphCLKFreq>
 800b56c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b56e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b570:	2b00      	cmp	r3, #0
 800b572:	d021      	beq.n	800b5b8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b578:	4a1a      	ldr	r2, [pc, #104]	@ (800b5e4 <UART_SetConfig+0x340>)
 800b57a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b57e:	461a      	mov	r2, r3
 800b580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b582:	fbb3 f2f2 	udiv	r2, r3, r2
 800b586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	085b      	lsrs	r3, r3, #1
 800b58c:	441a      	add	r2, r3
 800b58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	fbb2 f3f3 	udiv	r3, r2, r3
 800b596:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b59a:	2b0f      	cmp	r3, #15
 800b59c:	d909      	bls.n	800b5b2 <UART_SetConfig+0x30e>
 800b59e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5a4:	d205      	bcs.n	800b5b2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b5a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5a8:	b29a      	uxth	r2, r3
 800b5aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	60da      	str	r2, [r3, #12]
 800b5b0:	e002      	b.n	800b5b8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b5ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b5d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3750      	adds	r7, #80	@ 0x50
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b5e2:	bf00      	nop
 800b5e4:	08014810 	.word	0x08014810

0800b5e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5f4:	f003 0308 	and.w	r3, r3, #8
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d00a      	beq.n	800b612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	430a      	orrs	r2, r1
 800b610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b616:	f003 0301 	and.w	r3, r3, #1
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00a      	beq.n	800b634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	430a      	orrs	r2, r1
 800b632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b638:	f003 0302 	and.w	r3, r3, #2
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00a      	beq.n	800b656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	430a      	orrs	r2, r1
 800b654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b65a:	f003 0304 	and.w	r3, r3, #4
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d00a      	beq.n	800b678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	430a      	orrs	r2, r1
 800b676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b67c:	f003 0310 	and.w	r3, r3, #16
 800b680:	2b00      	cmp	r3, #0
 800b682:	d00a      	beq.n	800b69a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	689b      	ldr	r3, [r3, #8]
 800b68a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	430a      	orrs	r2, r1
 800b698:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b69e:	f003 0320 	and.w	r3, r3, #32
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d00a      	beq.n	800b6bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	430a      	orrs	r2, r1
 800b6ba:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d01a      	beq.n	800b6fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	430a      	orrs	r2, r1
 800b6dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6e6:	d10a      	bne.n	800b6fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	430a      	orrs	r2, r1
 800b6fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00a      	beq.n	800b720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	430a      	orrs	r2, r1
 800b71e:	605a      	str	r2, [r3, #4]
  }
}
 800b720:	bf00      	nop
 800b722:	370c      	adds	r7, #12
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr

0800b72c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b098      	sub	sp, #96	@ 0x60
 800b730:	af02      	add	r7, sp, #8
 800b732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b73c:	f7f8 fc00 	bl	8003f40 <HAL_GetTick>
 800b740:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f003 0308 	and.w	r3, r3, #8
 800b74c:	2b08      	cmp	r3, #8
 800b74e:	d12f      	bne.n	800b7b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b750:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b758:	2200      	movs	r2, #0
 800b75a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f88e 	bl	800b880 <UART_WaitOnFlagUntilTimeout>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d022      	beq.n	800b7b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b772:	e853 3f00 	ldrex	r3, [r3]
 800b776:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b77a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b77e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	461a      	mov	r2, r3
 800b786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b788:	647b      	str	r3, [r7, #68]	@ 0x44
 800b78a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b78c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b78e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b790:	e841 2300 	strex	r3, r2, [r1]
 800b794:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1e6      	bne.n	800b76a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2220      	movs	r2, #32
 800b7a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	e063      	b.n	800b878 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f003 0304 	and.w	r3, r3, #4
 800b7ba:	2b04      	cmp	r3, #4
 800b7bc:	d149      	bne.n	800b852 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b7c2:	9300      	str	r3, [sp, #0]
 800b7c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f000 f857 	bl	800b880 <UART_WaitOnFlagUntilTimeout>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d03c      	beq.n	800b852 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e0:	e853 3f00 	ldrex	r3, [r3]
 800b7e4:	623b      	str	r3, [r7, #32]
   return(result);
 800b7e6:	6a3b      	ldr	r3, [r7, #32]
 800b7e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b7ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b7f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7fe:	e841 2300 	strex	r3, r2, [r1]
 800b802:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b806:	2b00      	cmp	r3, #0
 800b808:	d1e6      	bne.n	800b7d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	3308      	adds	r3, #8
 800b810:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	e853 3f00 	ldrex	r3, [r3]
 800b818:	60fb      	str	r3, [r7, #12]
   return(result);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f023 0301 	bic.w	r3, r3, #1
 800b820:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	3308      	adds	r3, #8
 800b828:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b82a:	61fa      	str	r2, [r7, #28]
 800b82c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b82e:	69b9      	ldr	r1, [r7, #24]
 800b830:	69fa      	ldr	r2, [r7, #28]
 800b832:	e841 2300 	strex	r3, r2, [r1]
 800b836:	617b      	str	r3, [r7, #20]
   return(result);
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d1e5      	bne.n	800b80a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2220      	movs	r2, #32
 800b842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2200      	movs	r2, #0
 800b84a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b84e:	2303      	movs	r3, #3
 800b850:	e012      	b.n	800b878 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2220      	movs	r2, #32
 800b856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2220      	movs	r2, #32
 800b85e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2200      	movs	r2, #0
 800b872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b876:	2300      	movs	r3, #0
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3758      	adds	r7, #88	@ 0x58
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	603b      	str	r3, [r7, #0]
 800b88c:	4613      	mov	r3, r2
 800b88e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b890:	e04f      	b.n	800b932 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b898:	d04b      	beq.n	800b932 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b89a:	f7f8 fb51 	bl	8003f40 <HAL_GetTick>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	1ad3      	subs	r3, r2, r3
 800b8a4:	69ba      	ldr	r2, [r7, #24]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d302      	bcc.n	800b8b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b8aa:	69bb      	ldr	r3, [r7, #24]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d101      	bne.n	800b8b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b8b0:	2303      	movs	r3, #3
 800b8b2:	e04e      	b.n	800b952 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f003 0304 	and.w	r3, r3, #4
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d037      	beq.n	800b932 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	2b80      	cmp	r3, #128	@ 0x80
 800b8c6:	d034      	beq.n	800b932 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	2b40      	cmp	r3, #64	@ 0x40
 800b8cc:	d031      	beq.n	800b932 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	69db      	ldr	r3, [r3, #28]
 800b8d4:	f003 0308 	and.w	r3, r3, #8
 800b8d8:	2b08      	cmp	r3, #8
 800b8da:	d110      	bne.n	800b8fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2208      	movs	r2, #8
 800b8e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b8e4:	68f8      	ldr	r0, [r7, #12]
 800b8e6:	f000 f95b 	bl	800bba0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2208      	movs	r2, #8
 800b8ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e029      	b.n	800b952 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	69db      	ldr	r3, [r3, #28]
 800b904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b90c:	d111      	bne.n	800b932 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b918:	68f8      	ldr	r0, [r7, #12]
 800b91a:	f000 f941 	bl	800bba0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2220      	movs	r2, #32
 800b922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b92e:	2303      	movs	r3, #3
 800b930:	e00f      	b.n	800b952 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	69da      	ldr	r2, [r3, #28]
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	4013      	ands	r3, r2
 800b93c:	68ba      	ldr	r2, [r7, #8]
 800b93e:	429a      	cmp	r2, r3
 800b940:	bf0c      	ite	eq
 800b942:	2301      	moveq	r3, #1
 800b944:	2300      	movne	r3, #0
 800b946:	b2db      	uxtb	r3, r3
 800b948:	461a      	mov	r2, r3
 800b94a:	79fb      	ldrb	r3, [r7, #7]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d0a0      	beq.n	800b892 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b950:	2300      	movs	r3, #0
}
 800b952:	4618      	mov	r0, r3
 800b954:	3710      	adds	r7, #16
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
	...

0800b95c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b0a3      	sub	sp, #140	@ 0x8c
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	4613      	mov	r3, r2
 800b968:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	88fa      	ldrh	r2, [r7, #6]
 800b974:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	88fa      	ldrh	r2, [r7, #6]
 800b97c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2200      	movs	r2, #0
 800b984:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b98e:	d10e      	bne.n	800b9ae <UART_Start_Receive_IT+0x52>
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	691b      	ldr	r3, [r3, #16]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d105      	bne.n	800b9a4 <UART_Start_Receive_IT+0x48>
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b99e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b9a2:	e02d      	b.n	800ba00 <UART_Start_Receive_IT+0xa4>
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	22ff      	movs	r2, #255	@ 0xff
 800b9a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b9ac:	e028      	b.n	800ba00 <UART_Start_Receive_IT+0xa4>
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d10d      	bne.n	800b9d2 <UART_Start_Receive_IT+0x76>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d104      	bne.n	800b9c8 <UART_Start_Receive_IT+0x6c>
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	22ff      	movs	r2, #255	@ 0xff
 800b9c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b9c6:	e01b      	b.n	800ba00 <UART_Start_Receive_IT+0xa4>
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	227f      	movs	r2, #127	@ 0x7f
 800b9cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b9d0:	e016      	b.n	800ba00 <UART_Start_Receive_IT+0xa4>
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9da:	d10d      	bne.n	800b9f8 <UART_Start_Receive_IT+0x9c>
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d104      	bne.n	800b9ee <UART_Start_Receive_IT+0x92>
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	227f      	movs	r2, #127	@ 0x7f
 800b9e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b9ec:	e008      	b.n	800ba00 <UART_Start_Receive_IT+0xa4>
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	223f      	movs	r2, #63	@ 0x3f
 800b9f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b9f6:	e003      	b.n	800ba00 <UART_Start_Receive_IT+0xa4>
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2200      	movs	r2, #0
 800ba04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2222      	movs	r2, #34	@ 0x22
 800ba0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	3308      	adds	r3, #8
 800ba16:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba1a:	e853 3f00 	ldrex	r3, [r3]
 800ba1e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ba20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba22:	f043 0301 	orr.w	r3, r3, #1
 800ba26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	3308      	adds	r3, #8
 800ba30:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ba34:	673a      	str	r2, [r7, #112]	@ 0x70
 800ba36:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba38:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ba3a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ba3c:	e841 2300 	strex	r3, r2, [r1]
 800ba40:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800ba42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d1e3      	bne.n	800ba10 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba50:	d14f      	bne.n	800baf2 <UART_Start_Receive_IT+0x196>
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ba58:	88fa      	ldrh	r2, [r7, #6]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d349      	bcc.n	800baf2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba66:	d107      	bne.n	800ba78 <UART_Start_Receive_IT+0x11c>
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	691b      	ldr	r3, [r3, #16]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d103      	bne.n	800ba78 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	4a47      	ldr	r2, [pc, #284]	@ (800bb90 <UART_Start_Receive_IT+0x234>)
 800ba74:	675a      	str	r2, [r3, #116]	@ 0x74
 800ba76:	e002      	b.n	800ba7e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4a46      	ldr	r2, [pc, #280]	@ (800bb94 <UART_Start_Receive_IT+0x238>)
 800ba7c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	691b      	ldr	r3, [r3, #16]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d01a      	beq.n	800babc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba8e:	e853 3f00 	ldrex	r3, [r3]
 800ba92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ba94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	461a      	mov	r2, r3
 800baa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800baa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800baaa:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800baae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bab0:	e841 2300 	strex	r3, r2, [r1]
 800bab4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800bab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d1e4      	bne.n	800ba86 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	3308      	adds	r3, #8
 800bac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bac6:	e853 3f00 	ldrex	r3, [r3]
 800baca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bace:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bad2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	3308      	adds	r3, #8
 800bada:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800badc:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bade:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bae2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bae4:	e841 2300 	strex	r3, r2, [r1]
 800bae8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800baea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baec:	2b00      	cmp	r3, #0
 800baee:	d1e5      	bne.n	800babc <UART_Start_Receive_IT+0x160>
 800baf0:	e046      	b.n	800bb80 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bafa:	d107      	bne.n	800bb0c <UART_Start_Receive_IT+0x1b0>
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	691b      	ldr	r3, [r3, #16]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d103      	bne.n	800bb0c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	4a24      	ldr	r2, [pc, #144]	@ (800bb98 <UART_Start_Receive_IT+0x23c>)
 800bb08:	675a      	str	r2, [r3, #116]	@ 0x74
 800bb0a:	e002      	b.n	800bb12 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	4a23      	ldr	r2, [pc, #140]	@ (800bb9c <UART_Start_Receive_IT+0x240>)
 800bb10:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	691b      	ldr	r3, [r3, #16]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d019      	beq.n	800bb4e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb22:	e853 3f00 	ldrex	r3, [r3]
 800bb26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb2a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800bb2e:	677b      	str	r3, [r7, #116]	@ 0x74
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	461a      	mov	r2, r3
 800bb36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb38:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb3a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bb3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb40:	e841 2300 	strex	r3, r2, [r1]
 800bb44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bb46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d1e6      	bne.n	800bb1a <UART_Start_Receive_IT+0x1be>
 800bb4c:	e018      	b.n	800bb80 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	e853 3f00 	ldrex	r3, [r3]
 800bb5a:	613b      	str	r3, [r7, #16]
   return(result);
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	f043 0320 	orr.w	r3, r3, #32
 800bb62:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	461a      	mov	r2, r3
 800bb6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb6c:	623b      	str	r3, [r7, #32]
 800bb6e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb70:	69f9      	ldr	r1, [r7, #28]
 800bb72:	6a3a      	ldr	r2, [r7, #32]
 800bb74:	e841 2300 	strex	r3, r2, [r1]
 800bb78:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb7a:	69bb      	ldr	r3, [r7, #24]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d1e6      	bne.n	800bb4e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	378c      	adds	r7, #140	@ 0x8c
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr
 800bb8e:	bf00      	nop
 800bb90:	0800c751 	.word	0x0800c751
 800bb94:	0800c3d5 	.word	0x0800c3d5
 800bb98:	0800c209 	.word	0x0800c209
 800bb9c:	0800c03d 	.word	0x0800c03d

0800bba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b095      	sub	sp, #84	@ 0x54
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbb0:	e853 3f00 	ldrex	r3, [r3]
 800bbb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bbbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbc6:	643b      	str	r3, [r7, #64]	@ 0x40
 800bbc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bbcc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bbce:	e841 2300 	strex	r3, r2, [r1]
 800bbd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bbd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d1e6      	bne.n	800bba8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	3308      	adds	r3, #8
 800bbe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe2:	6a3b      	ldr	r3, [r7, #32]
 800bbe4:	e853 3f00 	ldrex	r3, [r3]
 800bbe8:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bbf0:	f023 0301 	bic.w	r3, r3, #1
 800bbf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	3308      	adds	r3, #8
 800bbfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bbfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bc00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc06:	e841 2300 	strex	r3, r2, [r1]
 800bc0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1e3      	bne.n	800bbda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d118      	bne.n	800bc4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	e853 3f00 	ldrex	r3, [r3]
 800bc26:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	f023 0310 	bic.w	r3, r3, #16
 800bc2e:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	461a      	mov	r2, r3
 800bc36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc38:	61bb      	str	r3, [r7, #24]
 800bc3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc3c:	6979      	ldr	r1, [r7, #20]
 800bc3e:	69ba      	ldr	r2, [r7, #24]
 800bc40:	e841 2300 	strex	r3, r2, [r1]
 800bc44:	613b      	str	r3, [r7, #16]
   return(result);
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d1e6      	bne.n	800bc1a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2220      	movs	r2, #32
 800bc50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2200      	movs	r2, #0
 800bc58:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bc60:	bf00      	nop
 800bc62:	3754      	adds	r7, #84	@ 0x54
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2200      	movs	r2, #0
 800bc86:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bc90:	68f8      	ldr	r0, [r7, #12]
 800bc92:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc94:	bf00      	nop
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b08f      	sub	sp, #60	@ 0x3c
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcaa:	2b21      	cmp	r3, #33	@ 0x21
 800bcac:	d14c      	bne.n	800bd48 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d132      	bne.n	800bd20 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc0:	6a3b      	ldr	r3, [r7, #32]
 800bcc2:	e853 3f00 	ldrex	r3, [r3]
 800bcc6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bcc8:	69fb      	ldr	r3, [r7, #28]
 800bcca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bcce:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bcda:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bcde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bce0:	e841 2300 	strex	r3, r2, [r1]
 800bce4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d1e6      	bne.n	800bcba <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	e853 3f00 	ldrex	r3, [r3]
 800bcf8:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd00:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	461a      	mov	r2, r3
 800bd08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd0a:	61bb      	str	r3, [r7, #24]
 800bd0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0e:	6979      	ldr	r1, [r7, #20]
 800bd10:	69ba      	ldr	r2, [r7, #24]
 800bd12:	e841 2300 	strex	r3, r2, [r1]
 800bd16:	613b      	str	r3, [r7, #16]
   return(result);
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1e6      	bne.n	800bcec <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bd1e:	e013      	b.n	800bd48 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd24:	781a      	ldrb	r2, [r3, #0]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd30:	1c5a      	adds	r2, r3, #1
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800bd48:	bf00      	nop
 800bd4a:	373c      	adds	r7, #60	@ 0x3c
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b091      	sub	sp, #68	@ 0x44
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd62:	2b21      	cmp	r3, #33	@ 0x21
 800bd64:	d151      	bne.n	800be0a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d132      	bne.n	800bdd8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd7a:	e853 3f00 	ldrex	r3, [r3]
 800bd7e:	623b      	str	r3, [r7, #32]
   return(result);
 800bd80:	6a3b      	ldr	r3, [r7, #32]
 800bd82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd86:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd90:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd98:	e841 2300 	strex	r3, r2, [r1]
 800bd9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d1e6      	bne.n	800bd72 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	e853 3f00 	ldrex	r3, [r3]
 800bdb0:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdb8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdc2:	61fb      	str	r3, [r7, #28]
 800bdc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc6:	69b9      	ldr	r1, [r7, #24]
 800bdc8:	69fa      	ldr	r2, [r7, #28]
 800bdca:	e841 2300 	strex	r3, r2, [r1]
 800bdce:	617b      	str	r3, [r7, #20]
   return(result);
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1e6      	bne.n	800bda4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800bdd6:	e018      	b.n	800be0a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bdde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bde0:	881b      	ldrh	r3, [r3, #0]
 800bde2:	461a      	mov	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bdec:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdf2:	1c9a      	adds	r2, r3, #2
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	3b01      	subs	r3, #1
 800be02:	b29a      	uxth	r2, r3
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800be0a:	bf00      	nop
 800be0c:	3744      	adds	r7, #68	@ 0x44
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr

0800be16 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800be16:	b480      	push	{r7}
 800be18:	b091      	sub	sp, #68	@ 0x44
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be24:	2b21      	cmp	r3, #33	@ 0x21
 800be26:	d160      	bne.n	800beea <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be2e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800be30:	e057      	b.n	800bee2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800be38:	b29b      	uxth	r3, r3
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d133      	bne.n	800bea6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	3308      	adds	r3, #8
 800be44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be48:	e853 3f00 	ldrex	r3, [r3]
 800be4c:	623b      	str	r3, [r7, #32]
   return(result);
 800be4e:	6a3b      	ldr	r3, [r7, #32]
 800be50:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800be54:	63bb      	str	r3, [r7, #56]	@ 0x38
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	3308      	adds	r3, #8
 800be5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be5e:	633a      	str	r2, [r7, #48]	@ 0x30
 800be60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be66:	e841 2300 	strex	r3, r2, [r1]
 800be6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800be6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d1e5      	bne.n	800be3e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	e853 3f00 	ldrex	r3, [r3]
 800be7e:	60fb      	str	r3, [r7, #12]
   return(result);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be86:	637b      	str	r3, [r7, #52]	@ 0x34
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	461a      	mov	r2, r3
 800be8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be90:	61fb      	str	r3, [r7, #28]
 800be92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be94:	69b9      	ldr	r1, [r7, #24]
 800be96:	69fa      	ldr	r2, [r7, #28]
 800be98:	e841 2300 	strex	r3, r2, [r1]
 800be9c:	617b      	str	r3, [r7, #20]
   return(result);
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d1e6      	bne.n	800be72 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800bea4:	e021      	b.n	800beea <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	69db      	ldr	r3, [r3, #28]
 800beac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d013      	beq.n	800bedc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800beb8:	781a      	ldrb	r2, [r3, #0]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bec4:	1c5a      	adds	r2, r3, #1
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	3b01      	subs	r3, #1
 800bed4:	b29a      	uxth	r2, r3
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bedc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bede:	3b01      	subs	r3, #1
 800bee0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800bee2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d1a4      	bne.n	800be32 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800bee8:	e7ff      	b.n	800beea <UART_TxISR_8BIT_FIFOEN+0xd4>
 800beea:	bf00      	nop
 800beec:	3744      	adds	r7, #68	@ 0x44
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr

0800bef6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bef6:	b480      	push	{r7}
 800bef8:	b091      	sub	sp, #68	@ 0x44
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf04:	2b21      	cmp	r3, #33	@ 0x21
 800bf06:	d165      	bne.n	800bfd4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf0e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800bf10:	e05c      	b.n	800bfcc <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d133      	bne.n	800bf86 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	3308      	adds	r3, #8
 800bf24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf26:	6a3b      	ldr	r3, [r7, #32]
 800bf28:	e853 3f00 	ldrex	r3, [r3]
 800bf2c:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf2e:	69fb      	ldr	r3, [r7, #28]
 800bf30:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bf34:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	3308      	adds	r3, #8
 800bf3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bf40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf46:	e841 2300 	strex	r3, r2, [r1]
 800bf4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1e5      	bne.n	800bf1e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	e853 3f00 	ldrex	r3, [r3]
 800bf5e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf66:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf70:	61bb      	str	r3, [r7, #24]
 800bf72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf74:	6979      	ldr	r1, [r7, #20]
 800bf76:	69ba      	ldr	r2, [r7, #24]
 800bf78:	e841 2300 	strex	r3, r2, [r1]
 800bf7c:	613b      	str	r3, [r7, #16]
   return(result);
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1e6      	bne.n	800bf52 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800bf84:	e026      	b.n	800bfd4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	69db      	ldr	r3, [r3, #28]
 800bf8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d018      	beq.n	800bfc6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf98:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bf9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf9c:	881b      	ldrh	r3, [r3, #0]
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfa8:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfae:	1c9a      	adds	r2, r3, #2
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	3b01      	subs	r3, #1
 800bfbe:	b29a      	uxth	r2, r3
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bfc6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bfc8:	3b01      	subs	r3, #1
 800bfca:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800bfcc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d19f      	bne.n	800bf12 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800bfd2:	e7ff      	b.n	800bfd4 <UART_TxISR_16BIT_FIFOEN+0xde>
 800bfd4:	bf00      	nop
 800bfd6:	3744      	adds	r7, #68	@ 0x44
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b088      	sub	sp, #32
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	e853 3f00 	ldrex	r3, [r3]
 800bff4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bffc:	61fb      	str	r3, [r7, #28]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	461a      	mov	r2, r3
 800c004:	69fb      	ldr	r3, [r7, #28]
 800c006:	61bb      	str	r3, [r7, #24]
 800c008:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00a:	6979      	ldr	r1, [r7, #20]
 800c00c:	69ba      	ldr	r2, [r7, #24]
 800c00e:	e841 2300 	strex	r3, r2, [r1]
 800c012:	613b      	str	r3, [r7, #16]
   return(result);
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1e6      	bne.n	800bfe8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2220      	movs	r2, #32
 800c01e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c032:	bf00      	nop
 800c034:	3720      	adds	r7, #32
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
	...

0800c03c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b09c      	sub	sp, #112	@ 0x70
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c04a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c054:	2b22      	cmp	r3, #34	@ 0x22
 800c056:	f040 80c7 	bne.w	800c1e8 <UART_RxISR_8BIT+0x1ac>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c060:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c064:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c068:	b2d9      	uxtb	r1, r3
 800c06a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c06e:	b2da      	uxtb	r2, r3
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c074:	400a      	ands	r2, r1
 800c076:	b2d2      	uxtb	r2, r2
 800c078:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c07e:	1c5a      	adds	r2, r3, #1
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	3b01      	subs	r3, #1
 800c08e:	b29a      	uxth	r2, r3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f040 80aa 	bne.w	800c1f8 <UART_RxISR_8BIT+0x1bc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0ac:	e853 3f00 	ldrex	r3, [r3]
 800c0b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c0b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	461a      	mov	r2, r3
 800c0c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c0c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c0c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c0ca:	e841 2300 	strex	r3, r2, [r1]
 800c0ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c0d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d1e6      	bne.n	800c0a4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	3308      	adds	r3, #8
 800c0dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0e0:	e853 3f00 	ldrex	r3, [r3]
 800c0e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c0e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0e8:	f023 0301 	bic.w	r3, r3, #1
 800c0ec:	667b      	str	r3, [r7, #100]	@ 0x64
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	3308      	adds	r3, #8
 800c0f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c0f6:	647a      	str	r2, [r7, #68]	@ 0x44
 800c0f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c0fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0fe:	e841 2300 	strex	r3, r2, [r1]
 800c102:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1e5      	bne.n	800c0d6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2220      	movs	r2, #32
 800c10e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2200      	movs	r2, #0
 800c116:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4a37      	ldr	r2, [pc, #220]	@ (800c200 <UART_RxISR_8BIT+0x1c4>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d024      	beq.n	800c172 <UART_RxISR_8BIT+0x136>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a35      	ldr	r2, [pc, #212]	@ (800c204 <UART_RxISR_8BIT+0x1c8>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d01f      	beq.n	800c172 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d018      	beq.n	800c172 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c148:	e853 3f00 	ldrex	r3, [r3]
 800c14c:	623b      	str	r3, [r7, #32]
   return(result);
 800c14e:	6a3b      	ldr	r3, [r7, #32]
 800c150:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c154:	663b      	str	r3, [r7, #96]	@ 0x60
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	461a      	mov	r2, r3
 800c15c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c15e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c160:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c162:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c166:	e841 2300 	strex	r3, r2, [r1]
 800c16a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d1e6      	bne.n	800c140 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c176:	2b01      	cmp	r3, #1
 800c178:	d130      	bne.n	800c1dc <UART_RxISR_8BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	e853 3f00 	ldrex	r3, [r3]
 800c18c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f023 0310 	bic.w	r3, r3, #16
 800c194:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	461a      	mov	r2, r3
 800c19c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c19e:	61fb      	str	r3, [r7, #28]
 800c1a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a2:	69b9      	ldr	r1, [r7, #24]
 800c1a4:	69fa      	ldr	r2, [r7, #28]
 800c1a6:	e841 2300 	strex	r3, r2, [r1]
 800c1aa:	617b      	str	r3, [r7, #20]
   return(result);
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d1e6      	bne.n	800c180 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	69db      	ldr	r3, [r3, #28]
 800c1b8:	f003 0310 	and.w	r3, r3, #16
 800c1bc:	2b10      	cmp	r3, #16
 800c1be:	d103      	bne.n	800c1c8 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2210      	movs	r2, #16
 800c1c6:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c1d4:	4611      	mov	r1, r2
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c1da:	e00d      	b.n	800c1f8 <UART_RxISR_8BIT+0x1bc>
        huart->RxCpltCallback(huart);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	4798      	blx	r3
}
 800c1e6:	e007      	b.n	800c1f8 <UART_RxISR_8BIT+0x1bc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	699a      	ldr	r2, [r3, #24]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f042 0208 	orr.w	r2, r2, #8
 800c1f6:	619a      	str	r2, [r3, #24]
}
 800c1f8:	bf00      	nop
 800c1fa:	3770      	adds	r7, #112	@ 0x70
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	46002400 	.word	0x46002400
 800c204:	56002400 	.word	0x56002400

0800c208 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b09c      	sub	sp, #112	@ 0x70
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c216:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c220:	2b22      	cmp	r3, #34	@ 0x22
 800c222:	f040 80c7 	bne.w	800c3b4 <UART_RxISR_16BIT+0x1ac>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c22c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c234:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c236:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c23a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c23e:	4013      	ands	r3, r2
 800c240:	b29a      	uxth	r2, r3
 800c242:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c244:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c24a:	1c9a      	adds	r2, r3, #2
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c256:	b29b      	uxth	r3, r3
 800c258:	3b01      	subs	r3, #1
 800c25a:	b29a      	uxth	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c268:	b29b      	uxth	r3, r3
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	f040 80aa 	bne.w	800c3c4 <UART_RxISR_16BIT+0x1bc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c278:	e853 3f00 	ldrex	r3, [r3]
 800c27c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c27e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c280:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c284:	667b      	str	r3, [r7, #100]	@ 0x64
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	461a      	mov	r2, r3
 800c28c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c28e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c290:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c292:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c294:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c296:	e841 2300 	strex	r3, r2, [r1]
 800c29a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c29c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d1e6      	bne.n	800c270 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	3308      	adds	r3, #8
 800c2a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2ac:	e853 3f00 	ldrex	r3, [r3]
 800c2b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b4:	f023 0301 	bic.w	r3, r3, #1
 800c2b8:	663b      	str	r3, [r7, #96]	@ 0x60
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	3308      	adds	r3, #8
 800c2c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c2c2:	643a      	str	r2, [r7, #64]	@ 0x40
 800c2c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c2c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c2ca:	e841 2300 	strex	r3, r2, [r1]
 800c2ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d1e5      	bne.n	800c2a2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2220      	movs	r2, #32
 800c2da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4a37      	ldr	r2, [pc, #220]	@ (800c3cc <UART_RxISR_16BIT+0x1c4>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d024      	beq.n	800c33e <UART_RxISR_16BIT+0x136>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4a35      	ldr	r2, [pc, #212]	@ (800c3d0 <UART_RxISR_16BIT+0x1c8>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d01f      	beq.n	800c33e <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d018      	beq.n	800c33e <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c312:	6a3b      	ldr	r3, [r7, #32]
 800c314:	e853 3f00 	ldrex	r3, [r3]
 800c318:	61fb      	str	r3, [r7, #28]
   return(result);
 800c31a:	69fb      	ldr	r3, [r7, #28]
 800c31c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c320:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	461a      	mov	r2, r3
 800c328:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c32a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c32c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c330:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c332:	e841 2300 	strex	r3, r2, [r1]
 800c336:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d1e6      	bne.n	800c30c <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c342:	2b01      	cmp	r3, #1
 800c344:	d130      	bne.n	800c3a8 <UART_RxISR_16BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2200      	movs	r2, #0
 800c34a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	e853 3f00 	ldrex	r3, [r3]
 800c358:	60bb      	str	r3, [r7, #8]
   return(result);
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	f023 0310 	bic.w	r3, r3, #16
 800c360:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	461a      	mov	r2, r3
 800c368:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c36a:	61bb      	str	r3, [r7, #24]
 800c36c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c36e:	6979      	ldr	r1, [r7, #20]
 800c370:	69ba      	ldr	r2, [r7, #24]
 800c372:	e841 2300 	strex	r3, r2, [r1]
 800c376:	613b      	str	r3, [r7, #16]
   return(result);
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d1e6      	bne.n	800c34c <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	69db      	ldr	r3, [r3, #28]
 800c384:	f003 0310 	and.w	r3, r3, #16
 800c388:	2b10      	cmp	r3, #16
 800c38a:	d103      	bne.n	800c394 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2210      	movs	r2, #16
 800c392:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c3a0:	4611      	mov	r1, r2
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c3a6:	e00d      	b.n	800c3c4 <UART_RxISR_16BIT+0x1bc>
        huart->RxCpltCallback(huart);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	4798      	blx	r3
}
 800c3b2:	e007      	b.n	800c3c4 <UART_RxISR_16BIT+0x1bc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	699a      	ldr	r2, [r3, #24]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f042 0208 	orr.w	r2, r2, #8
 800c3c2:	619a      	str	r2, [r3, #24]
}
 800c3c4:	bf00      	nop
 800c3c6:	3770      	adds	r7, #112	@ 0x70
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	46002400 	.word	0x46002400
 800c3d0:	56002400 	.word	0x56002400

0800c3d4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b0ac      	sub	sp, #176	@ 0xb0
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c3e2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	69db      	ldr	r3, [r3, #28]
 800c3ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	689b      	ldr	r3, [r3, #8]
 800c400:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c40a:	2b22      	cmp	r3, #34	@ 0x22
 800c40c:	f040 818d 	bne.w	800c72a <UART_RxISR_8BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c416:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c41a:	e130      	b.n	800c67e <UART_RxISR_8BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c422:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c426:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800c42a:	b2d9      	uxtb	r1, r3
 800c42c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800c430:	b2da      	uxtb	r2, r3
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c436:	400a      	ands	r2, r1
 800c438:	b2d2      	uxtb	r2, r2
 800c43a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c440:	1c5a      	adds	r2, r3, #1
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	3b01      	subs	r3, #1
 800c450:	b29a      	uxth	r2, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	69db      	ldr	r3, [r3, #28]
 800c45e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c466:	f003 0307 	and.w	r3, r3, #7
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d055      	beq.n	800c51a <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c46e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c472:	f003 0301 	and.w	r3, r3, #1
 800c476:	2b00      	cmp	r3, #0
 800c478:	d011      	beq.n	800c49e <UART_RxISR_8BIT_FIFOEN+0xca>
 800c47a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c47e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00b      	beq.n	800c49e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2201      	movs	r2, #1
 800c48c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c494:	f043 0201 	orr.w	r2, r3, #1
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c49e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4a2:	f003 0302 	and.w	r3, r3, #2
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d011      	beq.n	800c4ce <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c4aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c4ae:	f003 0301 	and.w	r3, r3, #1
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d00b      	beq.n	800c4ce <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	2202      	movs	r2, #2
 800c4bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4c4:	f043 0204 	orr.w	r2, r3, #4
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4d2:	f003 0304 	and.w	r3, r3, #4
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d011      	beq.n	800c4fe <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c4da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c4de:	f003 0301 	and.w	r3, r3, #1
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d00b      	beq.n	800c4fe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2204      	movs	r2, #4
 800c4ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4f4:	f043 0202 	orr.w	r2, r3, #2
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c504:	2b00      	cmp	r3, #0
 800c506:	d008      	beq.n	800c51a <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c520:	b29b      	uxth	r3, r3
 800c522:	2b00      	cmp	r3, #0
 800c524:	f040 80ab 	bne.w	800c67e <UART_RxISR_8BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c52e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c530:	e853 3f00 	ldrex	r3, [r3]
 800c534:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800c536:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c53c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	461a      	mov	r2, r3
 800c546:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c54a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c54c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c54e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c550:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c552:	e841 2300 	strex	r3, r2, [r1]
 800c556:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800c558:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d1e4      	bne.n	800c528 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	3308      	adds	r3, #8
 800c564:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c566:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c568:	e853 3f00 	ldrex	r3, [r3]
 800c56c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c56e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c570:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c574:	f023 0301 	bic.w	r3, r3, #1
 800c578:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	3308      	adds	r3, #8
 800c582:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c586:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c588:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c58a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c58c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c58e:	e841 2300 	strex	r3, r2, [r1]
 800c592:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c594:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c596:	2b00      	cmp	r3, #0
 800c598:	d1e1      	bne.n	800c55e <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2220      	movs	r2, #32
 800c59e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4a64      	ldr	r2, [pc, #400]	@ (800c744 <UART_RxISR_8BIT_FIFOEN+0x370>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d026      	beq.n	800c606 <UART_RxISR_8BIT_FIFOEN+0x232>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a62      	ldr	r2, [pc, #392]	@ (800c748 <UART_RxISR_8BIT_FIFOEN+0x374>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d021      	beq.n	800c606 <UART_RxISR_8BIT_FIFOEN+0x232>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d01a      	beq.n	800c606 <UART_RxISR_8BIT_FIFOEN+0x232>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5d8:	e853 3f00 	ldrex	r3, [r3]
 800c5dc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c5de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c5e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c5f2:	657b      	str	r3, [r7, #84]	@ 0x54
 800c5f4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c5f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c5fa:	e841 2300 	strex	r3, r2, [r1]
 800c5fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c600:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c602:	2b00      	cmp	r3, #0
 800c604:	d1e4      	bne.n	800c5d0 <UART_RxISR_8BIT_FIFOEN+0x1fc>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d132      	bne.n	800c674 <UART_RxISR_8BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c61a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c61c:	e853 3f00 	ldrex	r3, [r3]
 800c620:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c624:	f023 0310 	bic.w	r3, r3, #16
 800c628:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	461a      	mov	r2, r3
 800c632:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c636:	643b      	str	r3, [r7, #64]	@ 0x40
 800c638:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c63a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c63c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c63e:	e841 2300 	strex	r3, r2, [r1]
 800c642:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1e4      	bne.n	800c614 <UART_RxISR_8BIT_FIFOEN+0x240>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	69db      	ldr	r3, [r3, #28]
 800c650:	f003 0310 	and.w	r3, r3, #16
 800c654:	2b10      	cmp	r3, #16
 800c656:	d103      	bne.n	800c660 <UART_RxISR_8BIT_FIFOEN+0x28c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2210      	movs	r2, #16
 800c65e:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c66c:	4611      	mov	r1, r2
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	4798      	blx	r3
 800c672:	e004      	b.n	800c67e <UART_RxISR_8BIT_FIFOEN+0x2aa>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c67e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800c682:	2b00      	cmp	r3, #0
 800c684:	d006      	beq.n	800c694 <UART_RxISR_8BIT_FIFOEN+0x2c0>
 800c686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c68a:	f003 0320 	and.w	r3, r3, #32
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f47f aec4 	bne.w	800c41c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c69a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c69e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d049      	beq.n	800c73a <UART_RxISR_8BIT_FIFOEN+0x366>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c6ac:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d242      	bcs.n	800c73a <UART_RxISR_8BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	3308      	adds	r3, #8
 800c6ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6bc:	6a3b      	ldr	r3, [r7, #32]
 800c6be:	e853 3f00 	ldrex	r3, [r3]
 800c6c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c6ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	3308      	adds	r3, #8
 800c6d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c6d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c6da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c6de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6e0:	e841 2300 	strex	r3, r2, [r1]
 800c6e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d1e3      	bne.n	800c6b4 <UART_RxISR_8BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4a17      	ldr	r2, [pc, #92]	@ (800c74c <UART_RxISR_8BIT_FIFOEN+0x378>)
 800c6f0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	e853 3f00 	ldrex	r3, [r3]
 800c6fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	f043 0320 	orr.w	r3, r3, #32
 800c706:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	461a      	mov	r2, r3
 800c710:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c714:	61bb      	str	r3, [r7, #24]
 800c716:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c718:	6979      	ldr	r1, [r7, #20]
 800c71a:	69ba      	ldr	r2, [r7, #24]
 800c71c:	e841 2300 	strex	r3, r2, [r1]
 800c720:	613b      	str	r3, [r7, #16]
   return(result);
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d1e4      	bne.n	800c6f2 <UART_RxISR_8BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c728:	e007      	b.n	800c73a <UART_RxISR_8BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	699a      	ldr	r2, [r3, #24]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f042 0208 	orr.w	r2, r2, #8
 800c738:	619a      	str	r2, [r3, #24]
}
 800c73a:	bf00      	nop
 800c73c:	37b0      	adds	r7, #176	@ 0xb0
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	46002400 	.word	0x46002400
 800c748:	56002400 	.word	0x56002400
 800c74c:	0800c03d 	.word	0x0800c03d

0800c750 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b0ae      	sub	sp, #184	@ 0xb8
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c75e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	69db      	ldr	r3, [r3, #28]
 800c768:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	689b      	ldr	r3, [r3, #8]
 800c77c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c786:	2b22      	cmp	r3, #34	@ 0x22
 800c788:	f040 8191 	bne.w	800caae <UART_RxISR_16BIT_FIFOEN+0x35e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c792:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c796:	e134      	b.n	800ca02 <UART_RxISR_16BIT_FIFOEN+0x2b2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c79e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c7aa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800c7ae:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800c7b2:	4013      	ands	r3, r2
 800c7b4:	b29a      	uxth	r2, r3
 800c7b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c7ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7c0:	1c9a      	adds	r2, r3, #2
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c7cc:	b29b      	uxth	r3, r3
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	b29a      	uxth	r2, r3
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	69db      	ldr	r3, [r3, #28]
 800c7de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c7e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c7e6:	f003 0307 	and.w	r3, r3, #7
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d055      	beq.n	800c89a <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c7ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c7f2:	f003 0301 	and.w	r3, r3, #1
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d011      	beq.n	800c81e <UART_RxISR_16BIT_FIFOEN+0xce>
 800c7fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00b      	beq.n	800c81e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	2201      	movs	r2, #1
 800c80c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c814:	f043 0201 	orr.w	r2, r3, #1
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c81e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c822:	f003 0302 	and.w	r3, r3, #2
 800c826:	2b00      	cmp	r3, #0
 800c828:	d011      	beq.n	800c84e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c82a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c82e:	f003 0301 	and.w	r3, r3, #1
 800c832:	2b00      	cmp	r3, #0
 800c834:	d00b      	beq.n	800c84e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2202      	movs	r2, #2
 800c83c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c844:	f043 0204 	orr.w	r2, r3, #4
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c84e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c852:	f003 0304 	and.w	r3, r3, #4
 800c856:	2b00      	cmp	r3, #0
 800c858:	d011      	beq.n	800c87e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c85a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c85e:	f003 0301 	and.w	r3, r3, #1
 800c862:	2b00      	cmp	r3, #0
 800c864:	d00b      	beq.n	800c87e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2204      	movs	r2, #4
 800c86c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c874:	f043 0202 	orr.w	r2, r3, #2
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c884:	2b00      	cmp	r3, #0
 800c886:	d008      	beq.n	800c89a <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	f040 80ad 	bne.w	800ca02 <UART_RxISR_16BIT_FIFOEN+0x2b2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c8b0:	e853 3f00 	ldrex	r3, [r3]
 800c8b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c8b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c8bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c8ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c8ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c8d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c8d6:	e841 2300 	strex	r3, r2, [r1]
 800c8da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c8dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1e2      	bne.n	800c8a8 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	3308      	adds	r3, #8
 800c8e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c8ec:	e853 3f00 	ldrex	r3, [r3]
 800c8f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c8f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c8f8:	f023 0301 	bic.w	r3, r3, #1
 800c8fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	3308      	adds	r3, #8
 800c906:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c90a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c90c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c90e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c910:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c912:	e841 2300 	strex	r3, r2, [r1]
 800c916:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c918:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1e1      	bne.n	800c8e2 <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2220      	movs	r2, #32
 800c922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4a64      	ldr	r2, [pc, #400]	@ (800cac8 <UART_RxISR_16BIT_FIFOEN+0x378>)
 800c938:	4293      	cmp	r3, r2
 800c93a:	d026      	beq.n	800c98a <UART_RxISR_16BIT_FIFOEN+0x23a>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a62      	ldr	r2, [pc, #392]	@ (800cacc <UART_RxISR_16BIT_FIFOEN+0x37c>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d021      	beq.n	800c98a <UART_RxISR_16BIT_FIFOEN+0x23a>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c950:	2b00      	cmp	r3, #0
 800c952:	d01a      	beq.n	800c98a <UART_RxISR_16BIT_FIFOEN+0x23a>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c95a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c95c:	e853 3f00 	ldrex	r3, [r3]
 800c960:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c962:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c964:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c968:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	461a      	mov	r2, r3
 800c972:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c976:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c978:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c97a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c97c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c97e:	e841 2300 	strex	r3, r2, [r1]
 800c982:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c984:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c986:	2b00      	cmp	r3, #0
 800c988:	d1e4      	bne.n	800c954 <UART_RxISR_16BIT_FIFOEN+0x204>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d132      	bne.n	800c9f8 <UART_RxISR_16BIT_FIFOEN+0x2a8>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2200      	movs	r2, #0
 800c996:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9a0:	e853 3f00 	ldrex	r3, [r3]
 800c9a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c9a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9a8:	f023 0310 	bic.w	r3, r3, #16
 800c9ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c9ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800c9bc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c9c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9c2:	e841 2300 	strex	r3, r2, [r1]
 800c9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c9c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d1e4      	bne.n	800c998 <UART_RxISR_16BIT_FIFOEN+0x248>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	69db      	ldr	r3, [r3, #28]
 800c9d4:	f003 0310 	and.w	r3, r3, #16
 800c9d8:	2b10      	cmp	r3, #16
 800c9da:	d103      	bne.n	800c9e4 <UART_RxISR_16BIT_FIFOEN+0x294>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	2210      	movs	r2, #16
 800c9e2:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c9f0:	4611      	mov	r1, r2
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	4798      	blx	r3
 800c9f6:	e004      	b.n	800ca02 <UART_RxISR_16BIT_FIFOEN+0x2b2>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ca02:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d006      	beq.n	800ca18 <UART_RxISR_16BIT_FIFOEN+0x2c8>
 800ca0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ca0e:	f003 0320 	and.w	r3, r3, #32
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	f47f aec0 	bne.w	800c798 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca1e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ca22:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d049      	beq.n	800cabe <UART_RxISR_16BIT_FIFOEN+0x36e>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ca30:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d242      	bcs.n	800cabe <UART_RxISR_16BIT_FIFOEN+0x36e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	3308      	adds	r3, #8
 800ca3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca42:	e853 3f00 	ldrex	r3, [r3]
 800ca46:	623b      	str	r3, [r7, #32]
   return(result);
 800ca48:	6a3b      	ldr	r3, [r7, #32]
 800ca4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ca4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	3308      	adds	r3, #8
 800ca58:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ca5c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ca5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca64:	e841 2300 	strex	r3, r2, [r1]
 800ca68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1e3      	bne.n	800ca38 <UART_RxISR_16BIT_FIFOEN+0x2e8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a17      	ldr	r2, [pc, #92]	@ (800cad0 <UART_RxISR_16BIT_FIFOEN+0x380>)
 800ca74:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	e853 3f00 	ldrex	r3, [r3]
 800ca82:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f043 0320 	orr.w	r3, r3, #32
 800ca8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	461a      	mov	r2, r3
 800ca94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ca98:	61fb      	str	r3, [r7, #28]
 800ca9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca9c:	69b9      	ldr	r1, [r7, #24]
 800ca9e:	69fa      	ldr	r2, [r7, #28]
 800caa0:	e841 2300 	strex	r3, r2, [r1]
 800caa4:	617b      	str	r3, [r7, #20]
   return(result);
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d1e4      	bne.n	800ca76 <UART_RxISR_16BIT_FIFOEN+0x326>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800caac:	e007      	b.n	800cabe <UART_RxISR_16BIT_FIFOEN+0x36e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	699a      	ldr	r2, [r3, #24]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f042 0208 	orr.w	r2, r2, #8
 800cabc:	619a      	str	r2, [r3, #24]
}
 800cabe:	bf00      	nop
 800cac0:	37b8      	adds	r7, #184	@ 0xb8
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	46002400 	.word	0x46002400
 800cacc:	56002400 	.word	0x56002400
 800cad0:	0800c209 	.word	0x0800c209

0800cad4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cadc:	bf00      	nop
 800cade:	370c      	adds	r7, #12
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800caf0:	bf00      	nop
 800caf2:	370c      	adds	r7, #12
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b085      	sub	sp, #20
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	d101      	bne.n	800cb12 <HAL_UARTEx_DisableFifoMode+0x16>
 800cb0e:	2302      	movs	r3, #2
 800cb10:	e027      	b.n	800cb62 <HAL_UARTEx_DisableFifoMode+0x66>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2201      	movs	r2, #1
 800cb16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2224      	movs	r2, #36	@ 0x24
 800cb1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f022 0201 	bic.w	r2, r2, #1
 800cb38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cb40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2200      	movs	r2, #0
 800cb46:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	68fa      	ldr	r2, [r7, #12]
 800cb4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2220      	movs	r2, #32
 800cb54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb60:	2300      	movs	r3, #0
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3714      	adds	r7, #20
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr

0800cb6e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b084      	sub	sp, #16
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
 800cb76:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d101      	bne.n	800cb86 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cb82:	2302      	movs	r3, #2
 800cb84:	e02d      	b.n	800cbe2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2201      	movs	r2, #1
 800cb8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2224      	movs	r2, #36	@ 0x24
 800cb92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f022 0201 	bic.w	r2, r2, #1
 800cbac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	683a      	ldr	r2, [r7, #0]
 800cbbe:	430a      	orrs	r2, r1
 800cbc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f850 	bl	800cc68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2220      	movs	r2, #32
 800cbd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cbea:	b580      	push	{r7, lr}
 800cbec:	b084      	sub	sp, #16
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
 800cbf2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	d101      	bne.n	800cc02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cbfe:	2302      	movs	r3, #2
 800cc00:	e02d      	b.n	800cc5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2201      	movs	r2, #1
 800cc06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2224      	movs	r2, #36	@ 0x24
 800cc0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f022 0201 	bic.w	r2, r2, #1
 800cc28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	689b      	ldr	r3, [r3, #8]
 800cc30:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	683a      	ldr	r2, [r7, #0]
 800cc3a:	430a      	orrs	r2, r1
 800cc3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 f812 	bl	800cc68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	68fa      	ldr	r2, [r7, #12]
 800cc4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2220      	movs	r2, #32
 800cc50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cc5c:	2300      	movs	r3, #0
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3710      	adds	r7, #16
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
	...

0800cc68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b085      	sub	sp, #20
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d108      	bne.n	800cc8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2201      	movs	r2, #1
 800cc84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cc88:	e031      	b.n	800ccee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cc8a:	2308      	movs	r3, #8
 800cc8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cc8e:	2308      	movs	r3, #8
 800cc90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	689b      	ldr	r3, [r3, #8]
 800cc98:	0e5b      	lsrs	r3, r3, #25
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	f003 0307 	and.w	r3, r3, #7
 800cca0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	0f5b      	lsrs	r3, r3, #29
 800ccaa:	b2db      	uxtb	r3, r3
 800ccac:	f003 0307 	and.w	r3, r3, #7
 800ccb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ccb2:	7bbb      	ldrb	r3, [r7, #14]
 800ccb4:	7b3a      	ldrb	r2, [r7, #12]
 800ccb6:	4911      	ldr	r1, [pc, #68]	@ (800ccfc <UARTEx_SetNbDataToProcess+0x94>)
 800ccb8:	5c8a      	ldrb	r2, [r1, r2]
 800ccba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ccbe:	7b3a      	ldrb	r2, [r7, #12]
 800ccc0:	490f      	ldr	r1, [pc, #60]	@ (800cd00 <UARTEx_SetNbDataToProcess+0x98>)
 800ccc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ccc4:	fb93 f3f2 	sdiv	r3, r3, r2
 800ccc8:	b29a      	uxth	r2, r3
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ccd0:	7bfb      	ldrb	r3, [r7, #15]
 800ccd2:	7b7a      	ldrb	r2, [r7, #13]
 800ccd4:	4909      	ldr	r1, [pc, #36]	@ (800ccfc <UARTEx_SetNbDataToProcess+0x94>)
 800ccd6:	5c8a      	ldrb	r2, [r1, r2]
 800ccd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ccdc:	7b7a      	ldrb	r2, [r7, #13]
 800ccde:	4908      	ldr	r1, [pc, #32]	@ (800cd00 <UARTEx_SetNbDataToProcess+0x98>)
 800cce0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cce2:	fb93 f3f2 	sdiv	r3, r3, r2
 800cce6:	b29a      	uxth	r2, r3
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ccee:	bf00      	nop
 800ccf0:	3714      	adds	r7, #20
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf8:	4770      	bx	lr
 800ccfa:	bf00      	nop
 800ccfc:	08014828 	.word	0x08014828
 800cd00:	08014830 	.word	0x08014830

0800cd04 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f043 0202 	orr.w	r2, r3, #2
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	685a      	ldr	r2, [r3, #4]
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	021b      	lsls	r3, r3, #8
 800cd24:	431a      	orrs	r2, r3
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f023 0202 	bic.w	r2, r3, #2
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	601a      	str	r2, [r3, #0]
}
 800cd36:	bf00      	nop
 800cd38:	370c      	adds	r7, #12
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr

0800cd42 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800cd42:	b480      	push	{r7}
 800cd44:	b08b      	sub	sp, #44	@ 0x2c
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	60f8      	str	r0, [r7, #12]
 800cd4a:	60b9      	str	r1, [r7, #8]
 800cd4c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681a      	ldr	r2, [r3, #0]
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	fa93 f3a3 	rbit	r3, r3
 800cd5c:	613b      	str	r3, [r7, #16]
  return result;
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d101      	bne.n	800cd6c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800cd68:	2320      	movs	r3, #32
 800cd6a:	e003      	b.n	800cd74 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800cd6c:	69bb      	ldr	r3, [r7, #24]
 800cd6e:	fab3 f383 	clz	r3, r3
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	005b      	lsls	r3, r3, #1
 800cd76:	2103      	movs	r1, #3
 800cd78:	fa01 f303 	lsl.w	r3, r1, r3
 800cd7c:	43db      	mvns	r3, r3
 800cd7e:	401a      	ands	r2, r3
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd84:	6a3b      	ldr	r3, [r7, #32]
 800cd86:	fa93 f3a3 	rbit	r3, r3
 800cd8a:	61fb      	str	r3, [r7, #28]
  return result;
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800cd90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d101      	bne.n	800cd9a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800cd96:	2320      	movs	r3, #32
 800cd98:	e003      	b.n	800cda2 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800cd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd9c:	fab3 f383 	clz	r3, r3
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	005b      	lsls	r3, r3, #1
 800cda4:	6879      	ldr	r1, [r7, #4]
 800cda6:	fa01 f303 	lsl.w	r3, r1, r3
 800cdaa:	431a      	orrs	r2, r3
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 800cdb0:	bf00      	nop
 800cdb2:	372c      	adds	r7, #44	@ 0x2c
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr

0800cdbc <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	685a      	ldr	r2, [r3, #4]
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	43db      	mvns	r3, r3
 800cdd0:	401a      	ands	r2, r3
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	6879      	ldr	r1, [r7, #4]
 800cdd6:	fb01 f303 	mul.w	r3, r1, r3
 800cdda:	431a      	orrs	r2, r3
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	605a      	str	r2, [r3, #4]
}
 800cde0:	bf00      	nop
 800cde2:	3714      	adds	r7, #20
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr

0800cdec <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b08b      	sub	sp, #44	@ 0x2c
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	689a      	ldr	r2, [r3, #8]
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	fa93 f3a3 	rbit	r3, r3
 800ce06:	613b      	str	r3, [r7, #16]
  return result;
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d101      	bne.n	800ce16 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800ce12:	2320      	movs	r3, #32
 800ce14:	e003      	b.n	800ce1e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800ce16:	69bb      	ldr	r3, [r7, #24]
 800ce18:	fab3 f383 	clz	r3, r3
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	005b      	lsls	r3, r3, #1
 800ce20:	2103      	movs	r1, #3
 800ce22:	fa01 f303 	lsl.w	r3, r1, r3
 800ce26:	43db      	mvns	r3, r3
 800ce28:	401a      	ands	r2, r3
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce2e:	6a3b      	ldr	r3, [r7, #32]
 800ce30:	fa93 f3a3 	rbit	r3, r3
 800ce34:	61fb      	str	r3, [r7, #28]
  return result;
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ce3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d101      	bne.n	800ce44 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800ce40:	2320      	movs	r3, #32
 800ce42:	e003      	b.n	800ce4c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800ce44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce46:	fab3 f383 	clz	r3, r3
 800ce4a:	b2db      	uxtb	r3, r3
 800ce4c:	005b      	lsls	r3, r3, #1
 800ce4e:	6879      	ldr	r1, [r7, #4]
 800ce50:	fa01 f303 	lsl.w	r3, r1, r3
 800ce54:	431a      	orrs	r2, r3
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 800ce5a:	bf00      	nop
 800ce5c:	372c      	adds	r7, #44	@ 0x2c
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce64:	4770      	bx	lr

0800ce66 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800ce66:	b480      	push	{r7}
 800ce68:	b08b      	sub	sp, #44	@ 0x2c
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	60f8      	str	r0, [r7, #12]
 800ce6e:	60b9      	str	r1, [r7, #8]
 800ce70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	68da      	ldr	r2, [r3, #12]
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	fa93 f3a3 	rbit	r3, r3
 800ce80:	613b      	str	r3, [r7, #16]
  return result;
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d101      	bne.n	800ce90 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800ce8c:	2320      	movs	r3, #32
 800ce8e:	e003      	b.n	800ce98 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800ce90:	69bb      	ldr	r3, [r7, #24]
 800ce92:	fab3 f383 	clz	r3, r3
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	005b      	lsls	r3, r3, #1
 800ce9a:	2103      	movs	r1, #3
 800ce9c:	fa01 f303 	lsl.w	r3, r1, r3
 800cea0:	43db      	mvns	r3, r3
 800cea2:	401a      	ands	r2, r3
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cea8:	6a3b      	ldr	r3, [r7, #32]
 800ceaa:	fa93 f3a3 	rbit	r3, r3
 800ceae:	61fb      	str	r3, [r7, #28]
  return result;
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d101      	bne.n	800cebe <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800ceba:	2320      	movs	r3, #32
 800cebc:	e003      	b.n	800cec6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800cebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec0:	fab3 f383 	clz	r3, r3
 800cec4:	b2db      	uxtb	r3, r3
 800cec6:	005b      	lsls	r3, r3, #1
 800cec8:	6879      	ldr	r1, [r7, #4]
 800ceca:	fa01 f303 	lsl.w	r3, r1, r3
 800cece:	431a      	orrs	r2, r3
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 800ced4:	bf00      	nop
 800ced6:	372c      	adds	r7, #44	@ 0x2c
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr

0800cee0 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b08b      	sub	sp, #44	@ 0x2c
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	60f8      	str	r0, [r7, #12]
 800cee8:	60b9      	str	r1, [r7, #8]
 800ceea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6a1a      	ldr	r2, [r3, #32]
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	fa93 f3a3 	rbit	r3, r3
 800cefa:	613b      	str	r3, [r7, #16]
  return result;
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d101      	bne.n	800cf0a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800cf06:	2320      	movs	r3, #32
 800cf08:	e003      	b.n	800cf12 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	fab3 f383 	clz	r3, r3
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	009b      	lsls	r3, r3, #2
 800cf14:	210f      	movs	r1, #15
 800cf16:	fa01 f303 	lsl.w	r3, r1, r3
 800cf1a:	43db      	mvns	r3, r3
 800cf1c:	401a      	ands	r2, r3
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf22:	6a3b      	ldr	r3, [r7, #32]
 800cf24:	fa93 f3a3 	rbit	r3, r3
 800cf28:	61fb      	str	r3, [r7, #28]
  return result;
 800cf2a:	69fb      	ldr	r3, [r7, #28]
 800cf2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800cf2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d101      	bne.n	800cf38 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800cf34:	2320      	movs	r3, #32
 800cf36:	e003      	b.n	800cf40 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800cf38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf3a:	fab3 f383 	clz	r3, r3
 800cf3e:	b2db      	uxtb	r3, r3
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	6879      	ldr	r1, [r7, #4]
 800cf44:	fa01 f303 	lsl.w	r3, r1, r3
 800cf48:	431a      	orrs	r2, r3
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 800cf4e:	bf00      	nop
 800cf50:	372c      	adds	r7, #44	@ 0x2c
 800cf52:	46bd      	mov	sp, r7
 800cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf58:	4770      	bx	lr

0800cf5a <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800cf5a:	b480      	push	{r7}
 800cf5c:	b08b      	sub	sp, #44	@ 0x2c
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	60f8      	str	r0, [r7, #12]
 800cf62:	60b9      	str	r1, [r7, #8]
 800cf64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	0a1b      	lsrs	r3, r3, #8
 800cf6e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	fa93 f3a3 	rbit	r3, r3
 800cf76:	613b      	str	r3, [r7, #16]
  return result;
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800cf7c:	69bb      	ldr	r3, [r7, #24]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d101      	bne.n	800cf86 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800cf82:	2320      	movs	r3, #32
 800cf84:	e003      	b.n	800cf8e <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	fab3 f383 	clz	r3, r3
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	210f      	movs	r1, #15
 800cf92:	fa01 f303 	lsl.w	r3, r1, r3
 800cf96:	43db      	mvns	r3, r3
 800cf98:	401a      	ands	r2, r3
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	0a1b      	lsrs	r3, r3, #8
 800cf9e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cfa0:	6a3b      	ldr	r3, [r7, #32]
 800cfa2:	fa93 f3a3 	rbit	r3, r3
 800cfa6:	61fb      	str	r3, [r7, #28]
  return result;
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800cfac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d101      	bne.n	800cfb6 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800cfb2:	2320      	movs	r3, #32
 800cfb4:	e003      	b.n	800cfbe <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800cfb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb8:	fab3 f383 	clz	r3, r3
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	6879      	ldr	r1, [r7, #4]
 800cfc2:	fa01 f303 	lsl.w	r3, r1, r3
 800cfc6:	431a      	orrs	r2, r3
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 800cfcc:	bf00      	nop
 800cfce:	372c      	adds	r7, #44	@ 0x2c
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b08a      	sub	sp, #40	@ 0x28
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cfe8:	69bb      	ldr	r3, [r7, #24]
 800cfea:	fa93 f3a3 	rbit	r3, r3
 800cfee:	617b      	str	r3, [r7, #20]
  return result;
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800cff4:	69fb      	ldr	r3, [r7, #28]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d101      	bne.n	800cffe <LL_GPIO_Init+0x26>
    return 32U;
 800cffa:	2320      	movs	r3, #32
 800cffc:	e003      	b.n	800d006 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	fab3 f383 	clz	r3, r3
 800d004:	b2db      	uxtb	r3, r3
 800d006:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800d008:	e058      	b.n	800d0bc <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	2101      	movs	r1, #1
 800d010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d012:	fa01 f303 	lsl.w	r3, r1, r3
 800d016:	4013      	ands	r3, r2
 800d018:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800d01a:	6a3b      	ldr	r3, [r7, #32]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d04a      	beq.n	800d0b6 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	2b01      	cmp	r3, #1
 800d026:	d003      	beq.n	800d030 <LL_GPIO_Init+0x58>
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	2b02      	cmp	r3, #2
 800d02e:	d10e      	bne.n	800d04e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	689b      	ldr	r3, [r3, #8]
 800d034:	461a      	mov	r2, r3
 800d036:	6a39      	ldr	r1, [r7, #32]
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f7ff fed7 	bl	800cdec <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	6819      	ldr	r1, [r3, #0]
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	68db      	ldr	r3, [r3, #12]
 800d046:	461a      	mov	r2, r3
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f7ff feb7 	bl	800cdbc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	691b      	ldr	r3, [r3, #16]
 800d052:	461a      	mov	r2, r3
 800d054:	6a39      	ldr	r1, [r7, #32]
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f7ff ff05 	bl	800ce66 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	2b02      	cmp	r3, #2
 800d062:	d121      	bne.n	800d0a8 <LL_GPIO_Init+0xd0>
 800d064:	6a3b      	ldr	r3, [r7, #32]
 800d066:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	fa93 f3a3 	rbit	r3, r3
 800d06e:	60bb      	str	r3, [r7, #8]
  return result;
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d101      	bne.n	800d07e <LL_GPIO_Init+0xa6>
    return 32U;
 800d07a:	2320      	movs	r3, #32
 800d07c:	e003      	b.n	800d086 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	fab3 f383 	clz	r3, r3
 800d084:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800d086:	2b07      	cmp	r3, #7
 800d088:	d807      	bhi.n	800d09a <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	695b      	ldr	r3, [r3, #20]
 800d08e:	461a      	mov	r2, r3
 800d090:	6a39      	ldr	r1, [r7, #32]
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f7ff ff24 	bl	800cee0 <LL_GPIO_SetAFPin_0_7>
 800d098:	e006      	b.n	800d0a8 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	695b      	ldr	r3, [r3, #20]
 800d09e:	461a      	mov	r2, r3
 800d0a0:	6a39      	ldr	r1, [r7, #32]
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f7ff ff59 	bl	800cf5a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	6a39      	ldr	r1, [r7, #32]
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f7ff fe46 	bl	800cd42 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800d0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0c2:	fa22 f303 	lsr.w	r3, r2, r3
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d19f      	bne.n	800d00a <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3728      	adds	r7, #40	@ 0x28
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}

0800d0d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d0d4:	b084      	sub	sp, #16
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b084      	sub	sp, #16
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
 800d0de:	f107 001c 	add.w	r0, r7, #28
 800d0e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 fa6c 	bl	800d5d0 <USB_CoreReset>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800d0fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d100:	2b00      	cmp	r3, #0
 800d102:	d106      	bne.n	800d112 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d108:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	639a      	str	r2, [r3, #56]	@ 0x38
 800d110:	e005      	b.n	800d11e <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d116:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800d11e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d120:	4618      	mov	r0, r3
 800d122:	3710      	adds	r7, #16
 800d124:	46bd      	mov	sp, r7
 800d126:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d12a:	b004      	add	sp, #16
 800d12c:	4770      	bx	lr

0800d12e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d12e:	b480      	push	{r7}
 800d130:	b083      	sub	sp, #12
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	689b      	ldr	r3, [r3, #8]
 800d13a:	f023 0201 	bic.w	r2, r3, #1
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d142:	2300      	movs	r3, #0
}
 800d144:	4618      	mov	r0, r3
 800d146:	370c      	adds	r7, #12
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b084      	sub	sp, #16
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	460b      	mov	r3, r1
 800d15a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d15c:	2300      	movs	r3, #0
 800d15e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d16c:	78fb      	ldrb	r3, [r7, #3]
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d115      	bne.n	800d19e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	68db      	ldr	r3, [r3, #12]
 800d176:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d17e:	200a      	movs	r0, #10
 800d180:	f7f6 feea 	bl	8003f58 <HAL_Delay>
      ms += 10U;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	330a      	adds	r3, #10
 800d188:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f000 fa12 	bl	800d5b4 <USB_GetMode>
 800d190:	4603      	mov	r3, r0
 800d192:	2b01      	cmp	r3, #1
 800d194:	d01e      	beq.n	800d1d4 <USB_SetCurrentMode+0x84>
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2bc7      	cmp	r3, #199	@ 0xc7
 800d19a:	d9f0      	bls.n	800d17e <USB_SetCurrentMode+0x2e>
 800d19c:	e01a      	b.n	800d1d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d19e:	78fb      	ldrb	r3, [r7, #3]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d115      	bne.n	800d1d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	68db      	ldr	r3, [r3, #12]
 800d1a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d1b0:	200a      	movs	r0, #10
 800d1b2:	f7f6 fed1 	bl	8003f58 <HAL_Delay>
      ms += 10U;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	330a      	adds	r3, #10
 800d1ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f000 f9f9 	bl	800d5b4 <USB_GetMode>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d005      	beq.n	800d1d4 <USB_SetCurrentMode+0x84>
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2bc7      	cmp	r3, #199	@ 0xc7
 800d1cc:	d9f0      	bls.n	800d1b0 <USB_SetCurrentMode+0x60>
 800d1ce:	e001      	b.n	800d1d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	e005      	b.n	800d1e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2bc8      	cmp	r3, #200	@ 0xc8
 800d1d8:	d101      	bne.n	800d1de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d1da:	2301      	movs	r3, #1
 800d1dc:	e000      	b.n	800d1e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d1de:	2300      	movs	r3, #0
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3710      	adds	r7, #16
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d1e8:	b084      	sub	sp, #16
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b086      	sub	sp, #24
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
 800d1f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d1f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d202:	2300      	movs	r3, #0
 800d204:	613b      	str	r3, [r7, #16]
 800d206:	e009      	b.n	800d21c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d208:	687a      	ldr	r2, [r7, #4]
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	3340      	adds	r3, #64	@ 0x40
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	4413      	add	r3, r2
 800d212:	2200      	movs	r2, #0
 800d214:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	3301      	adds	r3, #1
 800d21a:	613b      	str	r3, [r7, #16]
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	2b0e      	cmp	r3, #14
 800d220:	d9f2      	bls.n	800d208 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d222:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d226:	2b00      	cmp	r3, #0
 800d228:	d11c      	bne.n	800d264 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	68fa      	ldr	r2, [r7, #12]
 800d234:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d238:	f043 0302 	orr.w	r3, r3, #2
 800d23c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d242:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	601a      	str	r2, [r3, #0]
 800d262:	e005      	b.n	800d270 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d268:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d276:	461a      	mov	r2, r3
 800d278:	2300      	movs	r3, #0
 800d27a:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d27c:	2103      	movs	r1, #3
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f000 f95e 	bl	800d540 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d284:	2110      	movs	r1, #16
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 f8fa 	bl	800d480 <USB_FlushTxFifo>
 800d28c:	4603      	mov	r3, r0
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d001      	beq.n	800d296 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800d292:	2301      	movs	r3, #1
 800d294:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f000 f924 	bl	800d4e4 <USB_FlushRxFifo>
 800d29c:	4603      	mov	r3, r0
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d001      	beq.n	800d2a6 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	613b      	str	r3, [r7, #16]
 800d2ce:	e043      	b.n	800d358 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	015a      	lsls	r2, r3, #5
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d2e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d2e6:	d118      	bne.n	800d31a <USB_DevInit+0x132>
    {
      if (i == 0U)
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d10a      	bne.n	800d304 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	015a      	lsls	r2, r3, #5
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	4413      	add	r3, r2
 800d2f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d300:	6013      	str	r3, [r2, #0]
 800d302:	e013      	b.n	800d32c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	015a      	lsls	r2, r3, #5
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	4413      	add	r3, r2
 800d30c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d310:	461a      	mov	r2, r3
 800d312:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d316:	6013      	str	r3, [r2, #0]
 800d318:	e008      	b.n	800d32c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	015a      	lsls	r2, r3, #5
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	4413      	add	r3, r2
 800d322:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d326:	461a      	mov	r2, r3
 800d328:	2300      	movs	r3, #0
 800d32a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	015a      	lsls	r2, r3, #5
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	4413      	add	r3, r2
 800d334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d338:	461a      	mov	r2, r3
 800d33a:	2300      	movs	r3, #0
 800d33c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	015a      	lsls	r2, r3, #5
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	4413      	add	r3, r2
 800d346:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d34a:	461a      	mov	r2, r3
 800d34c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d350:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	3301      	adds	r3, #1
 800d356:	613b      	str	r3, [r7, #16]
 800d358:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d35c:	461a      	mov	r2, r3
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	4293      	cmp	r3, r2
 800d362:	d3b5      	bcc.n	800d2d0 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d364:	2300      	movs	r3, #0
 800d366:	613b      	str	r3, [r7, #16]
 800d368:	e043      	b.n	800d3f2 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	015a      	lsls	r2, r3, #5
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	4413      	add	r3, r2
 800d372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d37c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d380:	d118      	bne.n	800d3b4 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d10a      	bne.n	800d39e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	015a      	lsls	r2, r3, #5
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	4413      	add	r3, r2
 800d390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d394:	461a      	mov	r2, r3
 800d396:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d39a:	6013      	str	r3, [r2, #0]
 800d39c:	e013      	b.n	800d3c6 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	015a      	lsls	r2, r3, #5
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	4413      	add	r3, r2
 800d3a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d3b0:	6013      	str	r3, [r2, #0]
 800d3b2:	e008      	b.n	800d3c6 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	015a      	lsls	r2, r3, #5
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	4413      	add	r3, r2
 800d3bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	015a      	lsls	r2, r3, #5
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	4413      	add	r3, r2
 800d3ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	015a      	lsls	r2, r3, #5
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	4413      	add	r3, r2
 800d3e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d3ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	613b      	str	r3, [r7, #16]
 800d3f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d3b5      	bcc.n	800d36a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d404:	691b      	ldr	r3, [r3, #16]
 800d406:	68fa      	ldr	r2, [r7, #12]
 800d408:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d40c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d410:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2200      	movs	r2, #0
 800d416:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d41e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d420:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d424:	2b00      	cmp	r3, #0
 800d426:	d105      	bne.n	800d434 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	699b      	ldr	r3, [r3, #24]
 800d42c:	f043 0210 	orr.w	r2, r3, #16
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	699a      	ldr	r2, [r3, #24]
 800d438:	4b10      	ldr	r3, [pc, #64]	@ (800d47c <USB_DevInit+0x294>)
 800d43a:	4313      	orrs	r3, r2
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d440:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d444:	2b00      	cmp	r3, #0
 800d446:	d005      	beq.n	800d454 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	699b      	ldr	r3, [r3, #24]
 800d44c:	f043 0208 	orr.w	r2, r3, #8
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d454:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d458:	2b01      	cmp	r3, #1
 800d45a:	d107      	bne.n	800d46c <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	699b      	ldr	r3, [r3, #24]
 800d460:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d464:	f043 0304 	orr.w	r3, r3, #4
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d46c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3718      	adds	r7, #24
 800d472:	46bd      	mov	sp, r7
 800d474:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d478:	b004      	add	sp, #16
 800d47a:	4770      	bx	lr
 800d47c:	803c3800 	.word	0x803c3800

0800d480 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d480:	b480      	push	{r7}
 800d482:	b085      	sub	sp, #20
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d48a:	2300      	movs	r3, #0
 800d48c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	3301      	adds	r3, #1
 800d492:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d49a:	d901      	bls.n	800d4a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d49c:	2303      	movs	r3, #3
 800d49e:	e01b      	b.n	800d4d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	691b      	ldr	r3, [r3, #16]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	daf2      	bge.n	800d48e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	019b      	lsls	r3, r3, #6
 800d4b0:	f043 0220 	orr.w	r2, r3, #32
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d4c4:	d901      	bls.n	800d4ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d4c6:	2303      	movs	r3, #3
 800d4c8:	e006      	b.n	800d4d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	691b      	ldr	r3, [r3, #16]
 800d4ce:	f003 0320 	and.w	r3, r3, #32
 800d4d2:	2b20      	cmp	r3, #32
 800d4d4:	d0f0      	beq.n	800d4b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d4d6:	2300      	movs	r3, #0
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3714      	adds	r7, #20
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr

0800d4e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b085      	sub	sp, #20
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d4fc:	d901      	bls.n	800d502 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d4fe:	2303      	movs	r3, #3
 800d500:	e018      	b.n	800d534 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	691b      	ldr	r3, [r3, #16]
 800d506:	2b00      	cmp	r3, #0
 800d508:	daf2      	bge.n	800d4f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d50a:	2300      	movs	r3, #0
 800d50c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2210      	movs	r2, #16
 800d512:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	3301      	adds	r3, #1
 800d518:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d520:	d901      	bls.n	800d526 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d522:	2303      	movs	r3, #3
 800d524:	e006      	b.n	800d534 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	691b      	ldr	r3, [r3, #16]
 800d52a:	f003 0310 	and.w	r3, r3, #16
 800d52e:	2b10      	cmp	r3, #16
 800d530:	d0f0      	beq.n	800d514 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d532:	2300      	movs	r3, #0
}
 800d534:	4618      	mov	r0, r3
 800d536:	3714      	adds	r7, #20
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr

0800d540 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d540:	b480      	push	{r7}
 800d542:	b085      	sub	sp, #20
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	460b      	mov	r3, r1
 800d54a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	78fb      	ldrb	r3, [r7, #3]
 800d55a:	68f9      	ldr	r1, [r7, #12]
 800d55c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d560:	4313      	orrs	r3, r2
 800d562:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d564:	2300      	movs	r3, #0
}
 800d566:	4618      	mov	r0, r3
 800d568:	3714      	adds	r7, #20
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr

0800d572 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d572:	b480      	push	{r7}
 800d574:	b085      	sub	sp, #20
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	68fa      	ldr	r2, [r7, #12]
 800d588:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d58c:	f023 0303 	bic.w	r3, r3, #3
 800d590:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	68fa      	ldr	r2, [r7, #12]
 800d59c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d5a0:	f043 0302 	orr.w	r3, r3, #2
 800d5a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d5a6:	2300      	movs	r3, #0
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3714      	adds	r7, #20
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr

0800d5b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b083      	sub	sp, #12
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	695b      	ldr	r3, [r3, #20]
 800d5c0:	f003 0301 	and.w	r3, r3, #1
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	370c      	adds	r7, #12
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b085      	sub	sp, #20
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	3301      	adds	r3, #1
 800d5e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d5e8:	d901      	bls.n	800d5ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d5ea:	2303      	movs	r3, #3
 800d5ec:	e01b      	b.n	800d626 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	691b      	ldr	r3, [r3, #16]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	daf2      	bge.n	800d5dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	691b      	ldr	r3, [r3, #16]
 800d5fe:	f043 0201 	orr.w	r2, r3, #1
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	3301      	adds	r3, #1
 800d60a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d612:	d901      	bls.n	800d618 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d614:	2303      	movs	r3, #3
 800d616:	e006      	b.n	800d626 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	691b      	ldr	r3, [r3, #16]
 800d61c:	f003 0301 	and.w	r3, r3, #1
 800d620:	2b01      	cmp	r3, #1
 800d622:	d0f0      	beq.n	800d606 <USB_CoreReset+0x36>

  return HAL_OK;
 800d624:	2300      	movs	r3, #0
}
 800d626:	4618      	mov	r0, r3
 800d628:	3714      	adds	r7, #20
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr
	...

0800d634 <da16k_get_config>:

/*
 * Function that fetches configuration info from somewhere during initialisation. Written as weak so it can be easily
 * replaced by a board specific version. By default it returns the configuration variables above.
 */
__weak da16k_cfg_t * da16k_get_config(void) {
 800d634:	b480      	push	{r7}
 800d636:	af00      	add	r7, sp, #0
    return &mx_iotc_cfg;
 800d638:	4b02      	ldr	r3, [pc, #8]	@ (800d644 <da16k_get_config+0x10>)
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr
 800d644:	20000040 	.word	0x20000040

0800d648 <MX_iotc_da16k_pmod_Init>:

/*
 * Function definition as per the CubeMX framework. Initialises the chosen serial port & any other data as required by
 * the AT library, e.g. configuration data.
 */
int MX_iotc_da16k_pmod_Init(void) {
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
    int err = 0;
 800d64e:	2300      	movs	r3, #0
 800d650:	607b      	str	r3, [r7, #4]
    da16k_cfg_t * cfg_p = da16k_get_config();
 800d652:	f7ff ffef 	bl	800d634 <da16k_get_config>
 800d656:	6038      	str	r0, [r7, #0]

    if(!cfg_p)
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d102      	bne.n	800d664 <MX_iotc_da16k_pmod_Init+0x1c>
        return -1;
 800d65e:	f04f 33ff 	mov.w	r3, #4294967295
 800d662:	e009      	b.n	800d678 <MX_iotc_da16k_pmod_Init+0x30>

    if(da16k_init(cfg_p) != DA16K_SUCCESS)
 800d664:	6838      	ldr	r0, [r7, #0]
 800d666:	f7f5 ffa5 	bl	80035b4 <da16k_init>
 800d66a:	4603      	mov	r3, r0
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d002      	beq.n	800d676 <MX_iotc_da16k_pmod_Init+0x2e>
        err=-2;
 800d670:	f06f 0301 	mvn.w	r3, #1
 800d674:	607b      	str	r3, [r7, #4]

    return err;
 800d676:	687b      	ldr	r3, [r7, #4]
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3708      	adds	r7, #8
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <MX_iotc_da16k_pmod_Process>:
/*
 * Function definition as per the CubeMX framework. Called from within the super loop of single-threaded implementations
 * Its main job is to read communications from the DA16k PMOD board, detect any c2d commands & call a commands handler
 * function accordingly.
 */
int MX_iotc_da16k_pmod_Process(void) {
 800d680:	b580      	push	{r7, lr}
 800d682:	b084      	sub	sp, #16
 800d684:	af00      	add	r7, sp, #0
    da16k_cmd_t current_cmd = {0};
 800d686:	463b      	mov	r3, r7
 800d688:	2200      	movs	r2, #0
 800d68a:	601a      	str	r2, [r3, #0]
 800d68c:	605a      	str	r2, [r3, #4]
    da16k_err_t err;
    static uint32_t tick_expiry = 0;
    uint32_t tick_current = HAL_GetTick();
 800d68e:	f7f6 fc57 	bl	8003f40 <HAL_GetTick>
 800d692:	60f8      	str	r0, [r7, #12]

    if(tick_current < tick_expiry) {
 800d694:	4b11      	ldr	r3, [pc, #68]	@ (800d6dc <MX_iotc_da16k_pmod_Process+0x5c>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	68fa      	ldr	r2, [r7, #12]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d201      	bcs.n	800d6a2 <MX_iotc_da16k_pmod_Process+0x22>
        return 0;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	e018      	b.n	800d6d4 <MX_iotc_da16k_pmod_Process+0x54>
    } else {
        tick_expiry += 2000;
 800d6a2:	4b0e      	ldr	r3, [pc, #56]	@ (800d6dc <MX_iotc_da16k_pmod_Process+0x5c>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800d6aa:	4a0c      	ldr	r2, [pc, #48]	@ (800d6dc <MX_iotc_da16k_pmod_Process+0x5c>)
 800d6ac:	6013      	str	r3, [r2, #0]
    }

    err = da16k_get_cmd(&current_cmd);
 800d6ae:	463b      	mov	r3, r7
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7f5 feb1 	bl	8003418 <da16k_get_cmd>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	72fb      	strb	r3, [r7, #11]

    if (err == DA16K_SUCCESS) {
 800d6ba:	7afb      	ldrb	r3, [r7, #11]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d108      	bne.n	800d6d2 <MX_iotc_da16k_pmod_Process+0x52>
        da16k_cmd_handler(&current_cmd);
 800d6c0:	463b      	mov	r3, r7
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7f3 fd02 	bl	80010cc <da16k_cmd_handler>
        da16k_destroy_cmd(current_cmd);
 800d6c8:	463b      	mov	r3, r7
 800d6ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d6ce:	f7f5 ff59 	bl	8003584 <da16k_destroy_cmd>
    }

    return 0;
 800d6d2:	2300      	movs	r3, #0
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3710      	adds	r7, #16
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	20001790 	.word	0x20001790

0800d6e0 <HAL_DA16K_UART_TxCpltCallback>:

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
/*
 * Callback that occurs at the end of a transmission. Clears the tx_dma_busy flag to allow subsequent transmissions.
 */
void HAL_DA16K_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800d6e0:	b480      	push	{r7}
 800d6e2:	b083      	sub	sp, #12
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
}
 800d6e8:	bf00      	nop
 800d6ea:	370c      	adds	r7, #12
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr

0800d6f4 <HAL_DA16K_UART_RxCpltCallback>:

/*
 * Callback that happens when characters are received via interrupt one at a time. The function places each byte in a
 * buffer to be processed when the system can.
 */
void HAL_DA16K_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
    if(huart == da_uart_p) {
 800d6fc:	4b10      	ldr	r3, [pc, #64]	@ (800d740 <HAL_DA16K_UART_RxCpltCallback+0x4c>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	429a      	cmp	r2, r3
 800d704:	d118      	bne.n	800d738 <HAL_DA16K_UART_RxCpltCallback+0x44>
        HAL_UART_Receive_IT(da_uart_p, (uint8_t *) &rx_byte, 1);
 800d706:	4b0e      	ldr	r3, [pc, #56]	@ (800d740 <HAL_DA16K_UART_RxCpltCallback+0x4c>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2201      	movs	r2, #1
 800d70c:	490d      	ldr	r1, [pc, #52]	@ (800d744 <HAL_DA16K_UART_RxCpltCallback+0x50>)
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fd f9da 	bl	800aac8 <HAL_UART_Receive_IT>
        rx_buf[head] = rx_byte;
 800d714:	4b0c      	ldr	r3, [pc, #48]	@ (800d748 <HAL_DA16K_UART_RxCpltCallback+0x54>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	4a0a      	ldr	r2, [pc, #40]	@ (800d744 <HAL_DA16K_UART_RxCpltCallback+0x50>)
 800d71a:	7811      	ldrb	r1, [r2, #0]
 800d71c:	4a0b      	ldr	r2, [pc, #44]	@ (800d74c <HAL_DA16K_UART_RxCpltCallback+0x58>)
 800d71e:	54d1      	strb	r1, [r2, r3]
        if(++head >= TERM_LINE_SIZ) {
 800d720:	4b09      	ldr	r3, [pc, #36]	@ (800d748 <HAL_DA16K_UART_RxCpltCallback+0x54>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	3301      	adds	r3, #1
 800d726:	4a08      	ldr	r2, [pc, #32]	@ (800d748 <HAL_DA16K_UART_RxCpltCallback+0x54>)
 800d728:	6013      	str	r3, [r2, #0]
 800d72a:	4b07      	ldr	r3, [pc, #28]	@ (800d748 <HAL_DA16K_UART_RxCpltCallback+0x54>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	2bff      	cmp	r3, #255	@ 0xff
 800d730:	dd02      	ble.n	800d738 <HAL_DA16K_UART_RxCpltCallback+0x44>
            head = 0;
 800d732:	4b05      	ldr	r3, [pc, #20]	@ (800d748 <HAL_DA16K_UART_RxCpltCallback+0x54>)
 800d734:	2200      	movs	r2, #0
 800d736:	601a      	str	r2, [r3, #0]
        }
    }
}
 800d738:	bf00      	nop
 800d73a:	3708      	adds	r7, #8
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	2000004c 	.word	0x2000004c
 800d744:	2000189c 	.word	0x2000189c
 800d748:	20001894 	.word	0x20001894
 800d74c:	20001794 	.word	0x20001794

0800d750 <da16k_uart_init>:

/*
 * Function required by the AT cmd lib. This initialises the serial port so it's ready to place received bytes via
 * interrupt into a buffer. It also sets the serial port hardware ready to transmit strings, via DMA preferably.
 */
bool da16k_uart_init(void) {
 800d750:	b580      	push	{r7, lr}
 800d752:	af00      	add	r7, sp, #0

    if(BSP_USART2_Init()) {
 800d754:	f7f5 fa3e 	bl	8002bd4 <BSP_USART2_Init>
 800d758:	4603      	mov	r3, r0
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d001      	beq.n	800d762 <da16k_uart_init+0x12>
        return false;
 800d75e:	2300      	movs	r3, #0
 800d760:	e01f      	b.n	800d7a2 <da16k_uart_init+0x52>
    }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if(HAL_OK != HAL_UART_RegisterCallback(da_uart_p, HAL_UART_TX_COMPLETE_CB_ID,
 800d762:	4b11      	ldr	r3, [pc, #68]	@ (800d7a8 <da16k_uart_init+0x58>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4a11      	ldr	r2, [pc, #68]	@ (800d7ac <da16k_uart_init+0x5c>)
 800d768:	2101      	movs	r1, #1
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7fc ffb6 	bl	800a6dc <HAL_UART_RegisterCallback>
 800d770:	4603      	mov	r3, r0
 800d772:	2b00      	cmp	r3, #0
 800d774:	d001      	beq.n	800d77a <da16k_uart_init+0x2a>
        &HAL_DA16K_UART_TxCpltCallback) ) {
        return false;
 800d776:	2300      	movs	r3, #0
 800d778:	e013      	b.n	800d7a2 <da16k_uart_init+0x52>
    }

    if(HAL_OK != HAL_UART_RegisterCallback(da_uart_p, HAL_UART_RX_COMPLETE_CB_ID,
 800d77a:	4b0b      	ldr	r3, [pc, #44]	@ (800d7a8 <da16k_uart_init+0x58>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	4a0c      	ldr	r2, [pc, #48]	@ (800d7b0 <da16k_uart_init+0x60>)
 800d780:	2103      	movs	r1, #3
 800d782:	4618      	mov	r0, r3
 800d784:	f7fc ffaa 	bl	800a6dc <HAL_UART_RegisterCallback>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d001      	beq.n	800d792 <da16k_uart_init+0x42>
        &HAL_DA16K_UART_RxCpltCallback) ) {
        return false;
 800d78e:	2300      	movs	r3, #0
 800d790:	e007      	b.n	800d7a2 <da16k_uart_init+0x52>
    }
#endif

    HAL_UART_Receive_IT(da_uart_p, (uint8_t *) &rx_byte, 1);
 800d792:	4b05      	ldr	r3, [pc, #20]	@ (800d7a8 <da16k_uart_init+0x58>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	2201      	movs	r2, #1
 800d798:	4906      	ldr	r1, [pc, #24]	@ (800d7b4 <da16k_uart_init+0x64>)
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7fd f994 	bl	800aac8 <HAL_UART_Receive_IT>
    return true;
 800d7a0:	2301      	movs	r3, #1
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	2000004c 	.word	0x2000004c
 800d7ac:	0800d6e1 	.word	0x0800d6e1
 800d7b0:	0800d6f5 	.word	0x0800d6f5
 800d7b4:	2000189c 	.word	0x2000189c

0800d7b8 <da16k_uart_send>:
/*
 * Function required by the AT cmd lib. This function sends strings of known length via serial port. Should a 2nd
 * call occur before the 1st transmission has completed it will block here until the transfer is complete or a timeout
 * of 500ms expires.
 */
bool da16k_uart_send(const char *src, size_t length) {
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
    static char tx_buf[2][TERM_LINE_SIZ];
    static int buf_select = 0;
    HAL_StatusTypeDef s;

    if(!src || length==0) {
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d002      	beq.n	800d7ce <da16k_uart_send+0x16>
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d101      	bne.n	800d7d2 <da16k_uart_send+0x1a>
        return false;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	e025      	b.n	800d81e <da16k_uart_send+0x66>
    }

    memcpy(tx_buf[buf_select], src, length);
 800d7d2:	4b15      	ldr	r3, [pc, #84]	@ (800d828 <da16k_uart_send+0x70>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	021b      	lsls	r3, r3, #8
 800d7d8:	4a14      	ldr	r2, [pc, #80]	@ (800d82c <da16k_uart_send+0x74>)
 800d7da:	4413      	add	r3, r2
 800d7dc:	683a      	ldr	r2, [r7, #0]
 800d7de:	6879      	ldr	r1, [r7, #4]
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f000 fe09 	bl	800e3f8 <memcpy>
    do {
        s = HAL_UART_Transmit(da_uart_p, (uint8_t*)tx_buf[buf_select], length, _500MS);
 800d7e6:	4b12      	ldr	r3, [pc, #72]	@ (800d830 <da16k_uart_send+0x78>)
 800d7e8:	6818      	ldr	r0, [r3, #0]
 800d7ea:	4b0f      	ldr	r3, [pc, #60]	@ (800d828 <da16k_uart_send+0x70>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	021b      	lsls	r3, r3, #8
 800d7f0:	4a0e      	ldr	r2, [pc, #56]	@ (800d82c <da16k_uart_send+0x74>)
 800d7f2:	1899      	adds	r1, r3, r2
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	b29a      	uxth	r2, r3
 800d7f8:	2332      	movs	r3, #50	@ 0x32
 800d7fa:	f7fd f823 	bl	800a844 <HAL_UART_Transmit>
 800d7fe:	4603      	mov	r3, r0
 800d800:	73fb      	strb	r3, [r7, #15]
    }while(s != HAL_OK);
 800d802:	7bfb      	ldrb	r3, [r7, #15]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d1ee      	bne.n	800d7e6 <da16k_uart_send+0x2e>

    buf_select = buf_select ? 0:1;
 800d808:	4b07      	ldr	r3, [pc, #28]	@ (800d828 <da16k_uart_send+0x70>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	bf0c      	ite	eq
 800d810:	2301      	moveq	r3, #1
 800d812:	2300      	movne	r3, #0
 800d814:	b2db      	uxtb	r3, r3
 800d816:	461a      	mov	r2, r3
 800d818:	4b03      	ldr	r3, [pc, #12]	@ (800d828 <da16k_uart_send+0x70>)
 800d81a:	601a      	str	r2, [r3, #0]

    return true;
 800d81c:	2301      	movs	r3, #1
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3710      	adds	r7, #16
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	200018a0 	.word	0x200018a0
 800d82c:	200018a4 	.word	0x200018a4
 800d830:	2000004c 	.word	0x2000004c

0800d834 <da16k_uart_get_char>:

/*
 * Function required by the AT cmd lib. This function reads character from the receive buffer of the serial port. If
 * there are no characters to be read the code will block here for the specified timeout length.
 */
da16k_err_t da16k_uart_get_char(char *dst, uint32_t timeout_ms) {
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
    if(!dst) {
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d101      	bne.n	800d848 <da16k_uart_get_char+0x14>
        return DA16K_INVALID_PARAMETER;
 800d844:	230b      	movs	r3, #11
 800d846:	e027      	b.n	800d898 <da16k_uart_get_char+0x64>
    }

    uint32_t expiry = HAL_GetTick() + timeout_ms;
 800d848:	f7f6 fb7a 	bl	8003f40 <HAL_GetTick>
 800d84c:	4602      	mov	r2, r0
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	4413      	add	r3, r2
 800d852:	60fb      	str	r3, [r7, #12]

    do {
        if(tail != head) {
 800d854:	4b12      	ldr	r3, [pc, #72]	@ (800d8a0 <da16k_uart_get_char+0x6c>)
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	4b12      	ldr	r3, [pc, #72]	@ (800d8a4 <da16k_uart_get_char+0x70>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d014      	beq.n	800d88a <da16k_uart_get_char+0x56>
            *dst = rx_buf[tail];
 800d860:	4b0f      	ldr	r3, [pc, #60]	@ (800d8a0 <da16k_uart_get_char+0x6c>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a10      	ldr	r2, [pc, #64]	@ (800d8a8 <da16k_uart_get_char+0x74>)
 800d866:	5cd3      	ldrb	r3, [r2, r3]
 800d868:	b2da      	uxtb	r2, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	701a      	strb	r2, [r3, #0]
            if(++tail >= TERM_LINE_SIZ) {
 800d86e:	4b0c      	ldr	r3, [pc, #48]	@ (800d8a0 <da16k_uart_get_char+0x6c>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	3301      	adds	r3, #1
 800d874:	4a0a      	ldr	r2, [pc, #40]	@ (800d8a0 <da16k_uart_get_char+0x6c>)
 800d876:	6013      	str	r3, [r2, #0]
 800d878:	4b09      	ldr	r3, [pc, #36]	@ (800d8a0 <da16k_uart_get_char+0x6c>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2bff      	cmp	r3, #255	@ 0xff
 800d87e:	dd02      	ble.n	800d886 <da16k_uart_get_char+0x52>
                tail = 0;
 800d880:	4b07      	ldr	r3, [pc, #28]	@ (800d8a0 <da16k_uart_get_char+0x6c>)
 800d882:	2200      	movs	r2, #0
 800d884:	601a      	str	r2, [r3, #0]
            }
            return DA16K_SUCCESS;
 800d886:	2300      	movs	r3, #0
 800d888:	e006      	b.n	800d898 <da16k_uart_get_char+0x64>
        }
    }while(HAL_GetTick() < expiry);
 800d88a:	f7f6 fb59 	bl	8003f40 <HAL_GetTick>
 800d88e:	4602      	mov	r2, r0
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	4293      	cmp	r3, r2
 800d894:	d8de      	bhi.n	800d854 <da16k_uart_get_char+0x20>

    return DA16K_TIMEOUT;
 800d896:	2303      	movs	r3, #3
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3710      	adds	r7, #16
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	20001898 	.word	0x20001898
 800d8a4:	20001894 	.word	0x20001894
 800d8a8:	20001794 	.word	0x20001794

0800d8ac <atoi>:
 800d8ac:	220a      	movs	r2, #10
 800d8ae:	2100      	movs	r1, #0
 800d8b0:	f000 bad0 	b.w	800de54 <strtol>

0800d8b4 <malloc>:
 800d8b4:	4b02      	ldr	r3, [pc, #8]	@ (800d8c0 <malloc+0xc>)
 800d8b6:	4601      	mov	r1, r0
 800d8b8:	6818      	ldr	r0, [r3, #0]
 800d8ba:	f000 b80b 	b.w	800d8d4 <_malloc_r>
 800d8be:	bf00      	nop
 800d8c0:	2000046c 	.word	0x2000046c

0800d8c4 <free>:
 800d8c4:	4b02      	ldr	r3, [pc, #8]	@ (800d8d0 <free+0xc>)
 800d8c6:	4601      	mov	r1, r0
 800d8c8:	6818      	ldr	r0, [r3, #0]
 800d8ca:	f000 be09 	b.w	800e4e0 <_free_r>
 800d8ce:	bf00      	nop
 800d8d0:	2000046c 	.word	0x2000046c

0800d8d4 <_malloc_r>:
 800d8d4:	f101 030b 	add.w	r3, r1, #11
 800d8d8:	2b16      	cmp	r3, #22
 800d8da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8de:	4605      	mov	r5, r0
 800d8e0:	d906      	bls.n	800d8f0 <_malloc_r+0x1c>
 800d8e2:	f033 0707 	bics.w	r7, r3, #7
 800d8e6:	d504      	bpl.n	800d8f2 <_malloc_r+0x1e>
 800d8e8:	230c      	movs	r3, #12
 800d8ea:	602b      	str	r3, [r5, #0]
 800d8ec:	2400      	movs	r4, #0
 800d8ee:	e1a3      	b.n	800dc38 <_malloc_r+0x364>
 800d8f0:	2710      	movs	r7, #16
 800d8f2:	42b9      	cmp	r1, r7
 800d8f4:	d8f8      	bhi.n	800d8e8 <_malloc_r+0x14>
 800d8f6:	4628      	mov	r0, r5
 800d8f8:	4eb1      	ldr	r6, [pc, #708]	@ (800dbc0 <_malloc_r+0x2ec>)
 800d8fa:	f000 fa25 	bl	800dd48 <__malloc_lock>
 800d8fe:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 800d902:	d236      	bcs.n	800d972 <_malloc_r+0x9e>
 800d904:	f107 0208 	add.w	r2, r7, #8
 800d908:	08fb      	lsrs	r3, r7, #3
 800d90a:	4432      	add	r2, r6
 800d90c:	6854      	ldr	r4, [r2, #4]
 800d90e:	f1a2 0108 	sub.w	r1, r2, #8
 800d912:	428c      	cmp	r4, r1
 800d914:	d102      	bne.n	800d91c <_malloc_r+0x48>
 800d916:	68d4      	ldr	r4, [r2, #12]
 800d918:	42a2      	cmp	r2, r4
 800d91a:	d010      	beq.n	800d93e <_malloc_r+0x6a>
 800d91c:	6863      	ldr	r3, [r4, #4]
 800d91e:	f023 0303 	bic.w	r3, r3, #3
 800d922:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800d926:	4423      	add	r3, r4
 800d928:	60ca      	str	r2, [r1, #12]
 800d92a:	6091      	str	r1, [r2, #8]
 800d92c:	685a      	ldr	r2, [r3, #4]
 800d92e:	f042 0201 	orr.w	r2, r2, #1
 800d932:	605a      	str	r2, [r3, #4]
 800d934:	4628      	mov	r0, r5
 800d936:	3408      	adds	r4, #8
 800d938:	f000 fa0c 	bl	800dd54 <__malloc_unlock>
 800d93c:	e17c      	b.n	800dc38 <_malloc_r+0x364>
 800d93e:	3302      	adds	r3, #2
 800d940:	6934      	ldr	r4, [r6, #16]
 800d942:	49a0      	ldr	r1, [pc, #640]	@ (800dbc4 <_malloc_r+0x2f0>)
 800d944:	428c      	cmp	r4, r1
 800d946:	d077      	beq.n	800da38 <_malloc_r+0x164>
 800d948:	6862      	ldr	r2, [r4, #4]
 800d94a:	f022 0c03 	bic.w	ip, r2, #3
 800d94e:	ebac 0007 	sub.w	r0, ip, r7
 800d952:	280f      	cmp	r0, #15
 800d954:	dd48      	ble.n	800d9e8 <_malloc_r+0x114>
 800d956:	19e2      	adds	r2, r4, r7
 800d958:	f040 0301 	orr.w	r3, r0, #1
 800d95c:	f047 0701 	orr.w	r7, r7, #1
 800d960:	6067      	str	r7, [r4, #4]
 800d962:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800d966:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800d96a:	6053      	str	r3, [r2, #4]
 800d96c:	f844 000c 	str.w	r0, [r4, ip]
 800d970:	e7e0      	b.n	800d934 <_malloc_r+0x60>
 800d972:	0a7b      	lsrs	r3, r7, #9
 800d974:	d02a      	beq.n	800d9cc <_malloc_r+0xf8>
 800d976:	2b04      	cmp	r3, #4
 800d978:	d812      	bhi.n	800d9a0 <_malloc_r+0xcc>
 800d97a:	09bb      	lsrs	r3, r7, #6
 800d97c:	3338      	adds	r3, #56	@ 0x38
 800d97e:	1c5a      	adds	r2, r3, #1
 800d980:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800d984:	f1a2 0c08 	sub.w	ip, r2, #8
 800d988:	6854      	ldr	r4, [r2, #4]
 800d98a:	4564      	cmp	r4, ip
 800d98c:	d006      	beq.n	800d99c <_malloc_r+0xc8>
 800d98e:	6862      	ldr	r2, [r4, #4]
 800d990:	f022 0203 	bic.w	r2, r2, #3
 800d994:	1bd0      	subs	r0, r2, r7
 800d996:	280f      	cmp	r0, #15
 800d998:	dd1c      	ble.n	800d9d4 <_malloc_r+0x100>
 800d99a:	3b01      	subs	r3, #1
 800d99c:	3301      	adds	r3, #1
 800d99e:	e7cf      	b.n	800d940 <_malloc_r+0x6c>
 800d9a0:	2b14      	cmp	r3, #20
 800d9a2:	d801      	bhi.n	800d9a8 <_malloc_r+0xd4>
 800d9a4:	335b      	adds	r3, #91	@ 0x5b
 800d9a6:	e7ea      	b.n	800d97e <_malloc_r+0xaa>
 800d9a8:	2b54      	cmp	r3, #84	@ 0x54
 800d9aa:	d802      	bhi.n	800d9b2 <_malloc_r+0xde>
 800d9ac:	0b3b      	lsrs	r3, r7, #12
 800d9ae:	336e      	adds	r3, #110	@ 0x6e
 800d9b0:	e7e5      	b.n	800d97e <_malloc_r+0xaa>
 800d9b2:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800d9b6:	d802      	bhi.n	800d9be <_malloc_r+0xea>
 800d9b8:	0bfb      	lsrs	r3, r7, #15
 800d9ba:	3377      	adds	r3, #119	@ 0x77
 800d9bc:	e7df      	b.n	800d97e <_malloc_r+0xaa>
 800d9be:	f240 5254 	movw	r2, #1364	@ 0x554
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d804      	bhi.n	800d9d0 <_malloc_r+0xfc>
 800d9c6:	0cbb      	lsrs	r3, r7, #18
 800d9c8:	337c      	adds	r3, #124	@ 0x7c
 800d9ca:	e7d8      	b.n	800d97e <_malloc_r+0xaa>
 800d9cc:	233f      	movs	r3, #63	@ 0x3f
 800d9ce:	e7d6      	b.n	800d97e <_malloc_r+0xaa>
 800d9d0:	237e      	movs	r3, #126	@ 0x7e
 800d9d2:	e7d4      	b.n	800d97e <_malloc_r+0xaa>
 800d9d4:	2800      	cmp	r0, #0
 800d9d6:	68e1      	ldr	r1, [r4, #12]
 800d9d8:	db04      	blt.n	800d9e4 <_malloc_r+0x110>
 800d9da:	68a3      	ldr	r3, [r4, #8]
 800d9dc:	60d9      	str	r1, [r3, #12]
 800d9de:	608b      	str	r3, [r1, #8]
 800d9e0:	18a3      	adds	r3, r4, r2
 800d9e2:	e7a3      	b.n	800d92c <_malloc_r+0x58>
 800d9e4:	460c      	mov	r4, r1
 800d9e6:	e7d0      	b.n	800d98a <_malloc_r+0xb6>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800d9ee:	db07      	blt.n	800da00 <_malloc_r+0x12c>
 800d9f0:	44a4      	add	ip, r4
 800d9f2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800d9f6:	f043 0301 	orr.w	r3, r3, #1
 800d9fa:	f8cc 3004 	str.w	r3, [ip, #4]
 800d9fe:	e799      	b.n	800d934 <_malloc_r+0x60>
 800da00:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800da04:	6870      	ldr	r0, [r6, #4]
 800da06:	f080 8095 	bcs.w	800db34 <_malloc_r+0x260>
 800da0a:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800da0e:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800da12:	f04f 0c01 	mov.w	ip, #1
 800da16:	3201      	adds	r2, #1
 800da18:	fa0c fc0e 	lsl.w	ip, ip, lr
 800da1c:	ea4c 0000 	orr.w	r0, ip, r0
 800da20:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800da24:	6070      	str	r0, [r6, #4]
 800da26:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800da2a:	3808      	subs	r0, #8
 800da2c:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800da30:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800da34:	f8cc 400c 	str.w	r4, [ip, #12]
 800da38:	1098      	asrs	r0, r3, #2
 800da3a:	2201      	movs	r2, #1
 800da3c:	4082      	lsls	r2, r0
 800da3e:	6870      	ldr	r0, [r6, #4]
 800da40:	4290      	cmp	r0, r2
 800da42:	d325      	bcc.n	800da90 <_malloc_r+0x1bc>
 800da44:	4210      	tst	r0, r2
 800da46:	d105      	bne.n	800da54 <_malloc_r+0x180>
 800da48:	f023 0303 	bic.w	r3, r3, #3
 800da4c:	0052      	lsls	r2, r2, #1
 800da4e:	3304      	adds	r3, #4
 800da50:	4210      	tst	r0, r2
 800da52:	d0fb      	beq.n	800da4c <_malloc_r+0x178>
 800da54:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800da58:	469e      	mov	lr, r3
 800da5a:	46c1      	mov	r9, r8
 800da5c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800da60:	454c      	cmp	r4, r9
 800da62:	f040 80bb 	bne.w	800dbdc <_malloc_r+0x308>
 800da66:	f10e 0e01 	add.w	lr, lr, #1
 800da6a:	f109 0908 	add.w	r9, r9, #8
 800da6e:	f01e 0f03 	tst.w	lr, #3
 800da72:	d1f3      	bne.n	800da5c <_malloc_r+0x188>
 800da74:	0798      	lsls	r0, r3, #30
 800da76:	f040 80e5 	bne.w	800dc44 <_malloc_r+0x370>
 800da7a:	6873      	ldr	r3, [r6, #4]
 800da7c:	ea23 0302 	bic.w	r3, r3, r2
 800da80:	6073      	str	r3, [r6, #4]
 800da82:	0052      	lsls	r2, r2, #1
 800da84:	6870      	ldr	r0, [r6, #4]
 800da86:	4290      	cmp	r0, r2
 800da88:	d302      	bcc.n	800da90 <_malloc_r+0x1bc>
 800da8a:	2a00      	cmp	r2, #0
 800da8c:	f040 80e6 	bne.w	800dc5c <_malloc_r+0x388>
 800da90:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800da94:	f8da 3004 	ldr.w	r3, [sl, #4]
 800da98:	f023 0903 	bic.w	r9, r3, #3
 800da9c:	45b9      	cmp	r9, r7
 800da9e:	d304      	bcc.n	800daaa <_malloc_r+0x1d6>
 800daa0:	eba9 0207 	sub.w	r2, r9, r7
 800daa4:	2a0f      	cmp	r2, #15
 800daa6:	f300 8142 	bgt.w	800dd2e <_malloc_r+0x45a>
 800daaa:	4b47      	ldr	r3, [pc, #284]	@ (800dbc8 <_malloc_r+0x2f4>)
 800daac:	2008      	movs	r0, #8
 800daae:	eb0a 0b09 	add.w	fp, sl, r9
 800dab2:	6819      	ldr	r1, [r3, #0]
 800dab4:	3110      	adds	r1, #16
 800dab6:	4439      	add	r1, r7
 800dab8:	9101      	str	r1, [sp, #4]
 800daba:	f000 fc91 	bl	800e3e0 <sysconf>
 800dabe:	4a43      	ldr	r2, [pc, #268]	@ (800dbcc <_malloc_r+0x2f8>)
 800dac0:	4680      	mov	r8, r0
 800dac2:	9901      	ldr	r1, [sp, #4]
 800dac4:	6813      	ldr	r3, [r2, #0]
 800dac6:	3301      	adds	r3, #1
 800dac8:	bf1e      	ittt	ne
 800daca:	f101 31ff 	addne.w	r1, r1, #4294967295
 800dace:	4243      	negne	r3, r0
 800dad0:	1809      	addne	r1, r1, r0
 800dad2:	4628      	mov	r0, r5
 800dad4:	bf18      	it	ne
 800dad6:	4019      	andne	r1, r3
 800dad8:	9101      	str	r1, [sp, #4]
 800dada:	f000 fc31 	bl	800e340 <_sbrk_r>
 800dade:	1c42      	adds	r2, r0, #1
 800dae0:	4604      	mov	r4, r0
 800dae2:	f000 80f7 	beq.w	800dcd4 <_malloc_r+0x400>
 800dae6:	4583      	cmp	fp, r0
 800dae8:	9901      	ldr	r1, [sp, #4]
 800daea:	4a38      	ldr	r2, [pc, #224]	@ (800dbcc <_malloc_r+0x2f8>)
 800daec:	d902      	bls.n	800daf4 <_malloc_r+0x220>
 800daee:	45b2      	cmp	sl, r6
 800daf0:	f040 80f0 	bne.w	800dcd4 <_malloc_r+0x400>
 800daf4:	4b36      	ldr	r3, [pc, #216]	@ (800dbd0 <_malloc_r+0x2fc>)
 800daf6:	45a3      	cmp	fp, r4
 800daf8:	f108 3cff 	add.w	ip, r8, #4294967295
 800dafc:	6818      	ldr	r0, [r3, #0]
 800dafe:	eb00 0e01 	add.w	lr, r0, r1
 800db02:	f8c3 e000 	str.w	lr, [r3]
 800db06:	f040 80ab 	bne.w	800dc60 <_malloc_r+0x38c>
 800db0a:	ea1b 0f0c 	tst.w	fp, ip
 800db0e:	f040 80a7 	bne.w	800dc60 <_malloc_r+0x38c>
 800db12:	4449      	add	r1, r9
 800db14:	68b2      	ldr	r2, [r6, #8]
 800db16:	f041 0101 	orr.w	r1, r1, #1
 800db1a:	6051      	str	r1, [r2, #4]
 800db1c:	4a2d      	ldr	r2, [pc, #180]	@ (800dbd4 <_malloc_r+0x300>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	6811      	ldr	r1, [r2, #0]
 800db22:	428b      	cmp	r3, r1
 800db24:	bf88      	it	hi
 800db26:	6013      	strhi	r3, [r2, #0]
 800db28:	4a2b      	ldr	r2, [pc, #172]	@ (800dbd8 <_malloc_r+0x304>)
 800db2a:	6811      	ldr	r1, [r2, #0]
 800db2c:	428b      	cmp	r3, r1
 800db2e:	bf88      	it	hi
 800db30:	6013      	strhi	r3, [r2, #0]
 800db32:	e0cf      	b.n	800dcd4 <_malloc_r+0x400>
 800db34:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 800db38:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800db3c:	d218      	bcs.n	800db70 <_malloc_r+0x29c>
 800db3e:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800db42:	3238      	adds	r2, #56	@ 0x38
 800db44:	f102 0e01 	add.w	lr, r2, #1
 800db48:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800db4c:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800db50:	45f0      	cmp	r8, lr
 800db52:	d12b      	bne.n	800dbac <_malloc_r+0x2d8>
 800db54:	1092      	asrs	r2, r2, #2
 800db56:	f04f 0c01 	mov.w	ip, #1
 800db5a:	fa0c f202 	lsl.w	r2, ip, r2
 800db5e:	4302      	orrs	r2, r0
 800db60:	6072      	str	r2, [r6, #4]
 800db62:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800db66:	f8c8 4008 	str.w	r4, [r8, #8]
 800db6a:	f8ce 400c 	str.w	r4, [lr, #12]
 800db6e:	e763      	b.n	800da38 <_malloc_r+0x164>
 800db70:	2a14      	cmp	r2, #20
 800db72:	d801      	bhi.n	800db78 <_malloc_r+0x2a4>
 800db74:	325b      	adds	r2, #91	@ 0x5b
 800db76:	e7e5      	b.n	800db44 <_malloc_r+0x270>
 800db78:	2a54      	cmp	r2, #84	@ 0x54
 800db7a:	d803      	bhi.n	800db84 <_malloc_r+0x2b0>
 800db7c:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800db80:	326e      	adds	r2, #110	@ 0x6e
 800db82:	e7df      	b.n	800db44 <_malloc_r+0x270>
 800db84:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800db88:	d803      	bhi.n	800db92 <_malloc_r+0x2be>
 800db8a:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800db8e:	3277      	adds	r2, #119	@ 0x77
 800db90:	e7d8      	b.n	800db44 <_malloc_r+0x270>
 800db92:	f240 5e54 	movw	lr, #1364	@ 0x554
 800db96:	4572      	cmp	r2, lr
 800db98:	bf96      	itet	ls
 800db9a:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800db9e:	227e      	movhi	r2, #126	@ 0x7e
 800dba0:	327c      	addls	r2, #124	@ 0x7c
 800dba2:	e7cf      	b.n	800db44 <_malloc_r+0x270>
 800dba4:	f8de e008 	ldr.w	lr, [lr, #8]
 800dba8:	45f0      	cmp	r8, lr
 800dbaa:	d005      	beq.n	800dbb8 <_malloc_r+0x2e4>
 800dbac:	f8de 2004 	ldr.w	r2, [lr, #4]
 800dbb0:	f022 0203 	bic.w	r2, r2, #3
 800dbb4:	4562      	cmp	r2, ip
 800dbb6:	d8f5      	bhi.n	800dba4 <_malloc_r+0x2d0>
 800dbb8:	f8de 800c 	ldr.w	r8, [lr, #12]
 800dbbc:	e7d1      	b.n	800db62 <_malloc_r+0x28e>
 800dbbe:	bf00      	nop
 800dbc0:	20000058 	.word	0x20000058
 800dbc4:	20000060 	.word	0x20000060
 800dbc8:	20001ad4 	.word	0x20001ad4
 800dbcc:	20000050 	.word	0x20000050
 800dbd0:	20001aa4 	.word	0x20001aa4
 800dbd4:	20001ad0 	.word	0x20001ad0
 800dbd8:	20001acc 	.word	0x20001acc
 800dbdc:	6860      	ldr	r0, [r4, #4]
 800dbde:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800dbe2:	f020 0003 	bic.w	r0, r0, #3
 800dbe6:	eba0 0a07 	sub.w	sl, r0, r7
 800dbea:	f1ba 0f0f 	cmp.w	sl, #15
 800dbee:	dd12      	ble.n	800dc16 <_malloc_r+0x342>
 800dbf0:	68a3      	ldr	r3, [r4, #8]
 800dbf2:	19e2      	adds	r2, r4, r7
 800dbf4:	f047 0701 	orr.w	r7, r7, #1
 800dbf8:	6067      	str	r7, [r4, #4]
 800dbfa:	f8c3 c00c 	str.w	ip, [r3, #12]
 800dbfe:	f8cc 3008 	str.w	r3, [ip, #8]
 800dc02:	f04a 0301 	orr.w	r3, sl, #1
 800dc06:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800dc0a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800dc0e:	6053      	str	r3, [r2, #4]
 800dc10:	f844 a000 	str.w	sl, [r4, r0]
 800dc14:	e68e      	b.n	800d934 <_malloc_r+0x60>
 800dc16:	f1ba 0f00 	cmp.w	sl, #0
 800dc1a:	db11      	blt.n	800dc40 <_malloc_r+0x36c>
 800dc1c:	4420      	add	r0, r4
 800dc1e:	6843      	ldr	r3, [r0, #4]
 800dc20:	f043 0301 	orr.w	r3, r3, #1
 800dc24:	6043      	str	r3, [r0, #4]
 800dc26:	4628      	mov	r0, r5
 800dc28:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800dc2c:	f8c3 c00c 	str.w	ip, [r3, #12]
 800dc30:	f8cc 3008 	str.w	r3, [ip, #8]
 800dc34:	f000 f88e 	bl	800dd54 <__malloc_unlock>
 800dc38:	4620      	mov	r0, r4
 800dc3a:	b003      	add	sp, #12
 800dc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc40:	4664      	mov	r4, ip
 800dc42:	e70d      	b.n	800da60 <_malloc_r+0x18c>
 800dc44:	f858 0908 	ldr.w	r0, [r8], #-8
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	4540      	cmp	r0, r8
 800dc4c:	f43f af12 	beq.w	800da74 <_malloc_r+0x1a0>
 800dc50:	e717      	b.n	800da82 <_malloc_r+0x1ae>
 800dc52:	3304      	adds	r3, #4
 800dc54:	0052      	lsls	r2, r2, #1
 800dc56:	4210      	tst	r0, r2
 800dc58:	d0fb      	beq.n	800dc52 <_malloc_r+0x37e>
 800dc5a:	e6fb      	b.n	800da54 <_malloc_r+0x180>
 800dc5c:	4673      	mov	r3, lr
 800dc5e:	e7fa      	b.n	800dc56 <_malloc_r+0x382>
 800dc60:	6810      	ldr	r0, [r2, #0]
 800dc62:	3001      	adds	r0, #1
 800dc64:	bf17      	itett	ne
 800dc66:	eba4 0b0b 	subne.w	fp, r4, fp
 800dc6a:	6014      	streq	r4, [r2, #0]
 800dc6c:	eb0b 020e 	addne.w	r2, fp, lr
 800dc70:	601a      	strne	r2, [r3, #0]
 800dc72:	f014 0b07 	ands.w	fp, r4, #7
 800dc76:	bf16      	itet	ne
 800dc78:	f1cb 0008 	rsbne	r0, fp, #8
 800dc7c:	4658      	moveq	r0, fp
 800dc7e:	1824      	addne	r4, r4, r0
 800dc80:	4480      	add	r8, r0
 800dc82:	4628      	mov	r0, r5
 800dc84:	1862      	adds	r2, r4, r1
 800dc86:	ea02 010c 	and.w	r1, r2, ip
 800dc8a:	9201      	str	r2, [sp, #4]
 800dc8c:	eba8 0801 	sub.w	r8, r8, r1
 800dc90:	ea08 080c 	and.w	r8, r8, ip
 800dc94:	4641      	mov	r1, r8
 800dc96:	f000 fb53 	bl	800e340 <_sbrk_r>
 800dc9a:	1c43      	adds	r3, r0, #1
 800dc9c:	9a01      	ldr	r2, [sp, #4]
 800dc9e:	4b29      	ldr	r3, [pc, #164]	@ (800dd44 <_malloc_r+0x470>)
 800dca0:	d107      	bne.n	800dcb2 <_malloc_r+0x3de>
 800dca2:	f1bb 0f00 	cmp.w	fp, #0
 800dca6:	d023      	beq.n	800dcf0 <_malloc_r+0x41c>
 800dca8:	f1ab 0008 	sub.w	r0, fp, #8
 800dcac:	f04f 0800 	mov.w	r8, #0
 800dcb0:	4410      	add	r0, r2
 800dcb2:	1b00      	subs	r0, r0, r4
 800dcb4:	681a      	ldr	r2, [r3, #0]
 800dcb6:	45b2      	cmp	sl, r6
 800dcb8:	60b4      	str	r4, [r6, #8]
 800dcba:	4440      	add	r0, r8
 800dcbc:	4442      	add	r2, r8
 800dcbe:	f040 0001 	orr.w	r0, r0, #1
 800dcc2:	601a      	str	r2, [r3, #0]
 800dcc4:	6060      	str	r0, [r4, #4]
 800dcc6:	f43f af29 	beq.w	800db1c <_malloc_r+0x248>
 800dcca:	f1b9 0f0f 	cmp.w	r9, #15
 800dcce:	d812      	bhi.n	800dcf6 <_malloc_r+0x422>
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	6063      	str	r3, [r4, #4]
 800dcd4:	68b3      	ldr	r3, [r6, #8]
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	f023 0303 	bic.w	r3, r3, #3
 800dcdc:	42bb      	cmp	r3, r7
 800dcde:	eba3 0207 	sub.w	r2, r3, r7
 800dce2:	d301      	bcc.n	800dce8 <_malloc_r+0x414>
 800dce4:	2a0f      	cmp	r2, #15
 800dce6:	dc22      	bgt.n	800dd2e <_malloc_r+0x45a>
 800dce8:	4628      	mov	r0, r5
 800dcea:	f000 f833 	bl	800dd54 <__malloc_unlock>
 800dcee:	e5fd      	b.n	800d8ec <_malloc_r+0x18>
 800dcf0:	4610      	mov	r0, r2
 800dcf2:	46d8      	mov	r8, fp
 800dcf4:	e7dd      	b.n	800dcb2 <_malloc_r+0x3de>
 800dcf6:	f8da 2004 	ldr.w	r2, [sl, #4]
 800dcfa:	f1a9 090c 	sub.w	r9, r9, #12
 800dcfe:	2105      	movs	r1, #5
 800dd00:	f029 0907 	bic.w	r9, r9, #7
 800dd04:	f002 0201 	and.w	r2, r2, #1
 800dd08:	ea42 0209 	orr.w	r2, r2, r9
 800dd0c:	f1b9 0f0f 	cmp.w	r9, #15
 800dd10:	f8ca 2004 	str.w	r2, [sl, #4]
 800dd14:	eb0a 0209 	add.w	r2, sl, r9
 800dd18:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800dd1c:	f67f aefe 	bls.w	800db1c <_malloc_r+0x248>
 800dd20:	f10a 0108 	add.w	r1, sl, #8
 800dd24:	4628      	mov	r0, r5
 800dd26:	f000 fbdb 	bl	800e4e0 <_free_r>
 800dd2a:	4b06      	ldr	r3, [pc, #24]	@ (800dd44 <_malloc_r+0x470>)
 800dd2c:	e6f6      	b.n	800db1c <_malloc_r+0x248>
 800dd2e:	68b4      	ldr	r4, [r6, #8]
 800dd30:	f047 0301 	orr.w	r3, r7, #1
 800dd34:	f042 0201 	orr.w	r2, r2, #1
 800dd38:	4427      	add	r7, r4
 800dd3a:	6063      	str	r3, [r4, #4]
 800dd3c:	60b7      	str	r7, [r6, #8]
 800dd3e:	607a      	str	r2, [r7, #4]
 800dd40:	e5f8      	b.n	800d934 <_malloc_r+0x60>
 800dd42:	bf00      	nop
 800dd44:	20001aa4 	.word	0x20001aa4

0800dd48 <__malloc_lock>:
 800dd48:	4801      	ldr	r0, [pc, #4]	@ (800dd50 <__malloc_lock+0x8>)
 800dd4a:	f000 bb47 	b.w	800e3dc <__retarget_lock_acquire_recursive>
 800dd4e:	bf00      	nop
 800dd50:	20001c18 	.word	0x20001c18

0800dd54 <__malloc_unlock>:
 800dd54:	4801      	ldr	r0, [pc, #4]	@ (800dd5c <__malloc_unlock+0x8>)
 800dd56:	f000 bb42 	b.w	800e3de <__retarget_lock_release_recursive>
 800dd5a:	bf00      	nop
 800dd5c:	20001c18 	.word	0x20001c18

0800dd60 <_strtol_l.constprop.0>:
 800dd60:	2b24      	cmp	r3, #36	@ 0x24
 800dd62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd66:	4686      	mov	lr, r0
 800dd68:	4690      	mov	r8, r2
 800dd6a:	d801      	bhi.n	800dd70 <_strtol_l.constprop.0+0x10>
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d106      	bne.n	800dd7e <_strtol_l.constprop.0+0x1e>
 800dd70:	f000 fb08 	bl	800e384 <__errno>
 800dd74:	2316      	movs	r3, #22
 800dd76:	6003      	str	r3, [r0, #0]
 800dd78:	2000      	movs	r0, #0
 800dd7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd7e:	460d      	mov	r5, r1
 800dd80:	4833      	ldr	r0, [pc, #204]	@ (800de50 <_strtol_l.constprop.0+0xf0>)
 800dd82:	462a      	mov	r2, r5
 800dd84:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd88:	5d06      	ldrb	r6, [r0, r4]
 800dd8a:	f016 0608 	ands.w	r6, r6, #8
 800dd8e:	d1f8      	bne.n	800dd82 <_strtol_l.constprop.0+0x22>
 800dd90:	2c2d      	cmp	r4, #45	@ 0x2d
 800dd92:	d12d      	bne.n	800ddf0 <_strtol_l.constprop.0+0x90>
 800dd94:	782c      	ldrb	r4, [r5, #0]
 800dd96:	2601      	movs	r6, #1
 800dd98:	1c95      	adds	r5, r2, #2
 800dd9a:	f033 0210 	bics.w	r2, r3, #16
 800dd9e:	d109      	bne.n	800ddb4 <_strtol_l.constprop.0+0x54>
 800dda0:	2c30      	cmp	r4, #48	@ 0x30
 800dda2:	d12a      	bne.n	800ddfa <_strtol_l.constprop.0+0x9a>
 800dda4:	782a      	ldrb	r2, [r5, #0]
 800dda6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ddaa:	2a58      	cmp	r2, #88	@ 0x58
 800ddac:	d125      	bne.n	800ddfa <_strtol_l.constprop.0+0x9a>
 800ddae:	786c      	ldrb	r4, [r5, #1]
 800ddb0:	2310      	movs	r3, #16
 800ddb2:	3502      	adds	r5, #2
 800ddb4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ddb8:	2200      	movs	r2, #0
 800ddba:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ddbe:	4610      	mov	r0, r2
 800ddc0:	fbbc f9f3 	udiv	r9, ip, r3
 800ddc4:	fb03 ca19 	mls	sl, r3, r9, ip
 800ddc8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ddcc:	2f09      	cmp	r7, #9
 800ddce:	d81b      	bhi.n	800de08 <_strtol_l.constprop.0+0xa8>
 800ddd0:	463c      	mov	r4, r7
 800ddd2:	42a3      	cmp	r3, r4
 800ddd4:	dd27      	ble.n	800de26 <_strtol_l.constprop.0+0xc6>
 800ddd6:	1c57      	adds	r7, r2, #1
 800ddd8:	d007      	beq.n	800ddea <_strtol_l.constprop.0+0x8a>
 800ddda:	4581      	cmp	r9, r0
 800dddc:	d320      	bcc.n	800de20 <_strtol_l.constprop.0+0xc0>
 800ddde:	d101      	bne.n	800dde4 <_strtol_l.constprop.0+0x84>
 800dde0:	45a2      	cmp	sl, r4
 800dde2:	db1d      	blt.n	800de20 <_strtol_l.constprop.0+0xc0>
 800dde4:	fb00 4003 	mla	r0, r0, r3, r4
 800dde8:	2201      	movs	r2, #1
 800ddea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ddee:	e7eb      	b.n	800ddc8 <_strtol_l.constprop.0+0x68>
 800ddf0:	2c2b      	cmp	r4, #43	@ 0x2b
 800ddf2:	bf04      	itt	eq
 800ddf4:	782c      	ldrbeq	r4, [r5, #0]
 800ddf6:	1c95      	addeq	r5, r2, #2
 800ddf8:	e7cf      	b.n	800dd9a <_strtol_l.constprop.0+0x3a>
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d1da      	bne.n	800ddb4 <_strtol_l.constprop.0+0x54>
 800ddfe:	2c30      	cmp	r4, #48	@ 0x30
 800de00:	bf0c      	ite	eq
 800de02:	2308      	moveq	r3, #8
 800de04:	230a      	movne	r3, #10
 800de06:	e7d5      	b.n	800ddb4 <_strtol_l.constprop.0+0x54>
 800de08:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800de0c:	2f19      	cmp	r7, #25
 800de0e:	d801      	bhi.n	800de14 <_strtol_l.constprop.0+0xb4>
 800de10:	3c37      	subs	r4, #55	@ 0x37
 800de12:	e7de      	b.n	800ddd2 <_strtol_l.constprop.0+0x72>
 800de14:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800de18:	2f19      	cmp	r7, #25
 800de1a:	d804      	bhi.n	800de26 <_strtol_l.constprop.0+0xc6>
 800de1c:	3c57      	subs	r4, #87	@ 0x57
 800de1e:	e7d8      	b.n	800ddd2 <_strtol_l.constprop.0+0x72>
 800de20:	f04f 32ff 	mov.w	r2, #4294967295
 800de24:	e7e1      	b.n	800ddea <_strtol_l.constprop.0+0x8a>
 800de26:	1c53      	adds	r3, r2, #1
 800de28:	d108      	bne.n	800de3c <_strtol_l.constprop.0+0xdc>
 800de2a:	2322      	movs	r3, #34	@ 0x22
 800de2c:	4660      	mov	r0, ip
 800de2e:	f8ce 3000 	str.w	r3, [lr]
 800de32:	f1b8 0f00 	cmp.w	r8, #0
 800de36:	d0a0      	beq.n	800dd7a <_strtol_l.constprop.0+0x1a>
 800de38:	1e69      	subs	r1, r5, #1
 800de3a:	e006      	b.n	800de4a <_strtol_l.constprop.0+0xea>
 800de3c:	b106      	cbz	r6, 800de40 <_strtol_l.constprop.0+0xe0>
 800de3e:	4240      	negs	r0, r0
 800de40:	f1b8 0f00 	cmp.w	r8, #0
 800de44:	d099      	beq.n	800dd7a <_strtol_l.constprop.0+0x1a>
 800de46:	2a00      	cmp	r2, #0
 800de48:	d1f6      	bne.n	800de38 <_strtol_l.constprop.0+0xd8>
 800de4a:	f8c8 1000 	str.w	r1, [r8]
 800de4e:	e794      	b.n	800dd7a <_strtol_l.constprop.0+0x1a>
 800de50:	08014839 	.word	0x08014839

0800de54 <strtol>:
 800de54:	4613      	mov	r3, r2
 800de56:	460a      	mov	r2, r1
 800de58:	4601      	mov	r1, r0
 800de5a:	4802      	ldr	r0, [pc, #8]	@ (800de64 <strtol+0x10>)
 800de5c:	6800      	ldr	r0, [r0, #0]
 800de5e:	f7ff bf7f 	b.w	800dd60 <_strtol_l.constprop.0>
 800de62:	bf00      	nop
 800de64:	2000046c 	.word	0x2000046c

0800de68 <std>:
 800de68:	2300      	movs	r3, #0
 800de6a:	b510      	push	{r4, lr}
 800de6c:	4604      	mov	r4, r0
 800de6e:	6083      	str	r3, [r0, #8]
 800de70:	8181      	strh	r1, [r0, #12]
 800de72:	4619      	mov	r1, r3
 800de74:	6643      	str	r3, [r0, #100]	@ 0x64
 800de76:	81c2      	strh	r2, [r0, #14]
 800de78:	2208      	movs	r2, #8
 800de7a:	6183      	str	r3, [r0, #24]
 800de7c:	e9c0 3300 	strd	r3, r3, [r0]
 800de80:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de84:	305c      	adds	r0, #92	@ 0x5c
 800de86:	f000 f9fb 	bl	800e280 <memset>
 800de8a:	4b0d      	ldr	r3, [pc, #52]	@ (800dec0 <std+0x58>)
 800de8c:	61e4      	str	r4, [r4, #28]
 800de8e:	6223      	str	r3, [r4, #32]
 800de90:	4b0c      	ldr	r3, [pc, #48]	@ (800dec4 <std+0x5c>)
 800de92:	6263      	str	r3, [r4, #36]	@ 0x24
 800de94:	4b0c      	ldr	r3, [pc, #48]	@ (800dec8 <std+0x60>)
 800de96:	62a3      	str	r3, [r4, #40]	@ 0x28
 800de98:	4b0c      	ldr	r3, [pc, #48]	@ (800decc <std+0x64>)
 800de9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800de9c:	4b0c      	ldr	r3, [pc, #48]	@ (800ded0 <std+0x68>)
 800de9e:	429c      	cmp	r4, r3
 800dea0:	d006      	beq.n	800deb0 <std+0x48>
 800dea2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dea6:	4294      	cmp	r4, r2
 800dea8:	d002      	beq.n	800deb0 <std+0x48>
 800deaa:	33d0      	adds	r3, #208	@ 0xd0
 800deac:	429c      	cmp	r4, r3
 800deae:	d105      	bne.n	800debc <std+0x54>
 800deb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800deb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800deb8:	f000 ba8e 	b.w	800e3d8 <__retarget_lock_init_recursive>
 800debc:	bd10      	pop	{r4, pc}
 800debe:	bf00      	nop
 800dec0:	0800e155 	.word	0x0800e155
 800dec4:	0800e177 	.word	0x0800e177
 800dec8:	0800e1af 	.word	0x0800e1af
 800decc:	0800e1d3 	.word	0x0800e1d3
 800ded0:	20001ad8 	.word	0x20001ad8

0800ded4 <stdio_exit_handler>:
 800ded4:	4a02      	ldr	r2, [pc, #8]	@ (800dee0 <stdio_exit_handler+0xc>)
 800ded6:	4903      	ldr	r1, [pc, #12]	@ (800dee4 <stdio_exit_handler+0x10>)
 800ded8:	4803      	ldr	r0, [pc, #12]	@ (800dee8 <stdio_exit_handler+0x14>)
 800deda:	f000 b869 	b.w	800dfb0 <_fwalk_sglue>
 800dede:	bf00      	nop
 800dee0:	20000460 	.word	0x20000460
 800dee4:	080118d5 	.word	0x080118d5
 800dee8:	20000470 	.word	0x20000470

0800deec <cleanup_stdio>:
 800deec:	6841      	ldr	r1, [r0, #4]
 800deee:	4b0c      	ldr	r3, [pc, #48]	@ (800df20 <cleanup_stdio+0x34>)
 800def0:	4299      	cmp	r1, r3
 800def2:	b510      	push	{r4, lr}
 800def4:	4604      	mov	r4, r0
 800def6:	d001      	beq.n	800defc <cleanup_stdio+0x10>
 800def8:	f003 fcec 	bl	80118d4 <_fclose_r>
 800defc:	68a1      	ldr	r1, [r4, #8]
 800defe:	4b09      	ldr	r3, [pc, #36]	@ (800df24 <cleanup_stdio+0x38>)
 800df00:	4299      	cmp	r1, r3
 800df02:	d002      	beq.n	800df0a <cleanup_stdio+0x1e>
 800df04:	4620      	mov	r0, r4
 800df06:	f003 fce5 	bl	80118d4 <_fclose_r>
 800df0a:	68e1      	ldr	r1, [r4, #12]
 800df0c:	4b06      	ldr	r3, [pc, #24]	@ (800df28 <cleanup_stdio+0x3c>)
 800df0e:	4299      	cmp	r1, r3
 800df10:	d004      	beq.n	800df1c <cleanup_stdio+0x30>
 800df12:	4620      	mov	r0, r4
 800df14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df18:	f003 bcdc 	b.w	80118d4 <_fclose_r>
 800df1c:	bd10      	pop	{r4, pc}
 800df1e:	bf00      	nop
 800df20:	20001ad8 	.word	0x20001ad8
 800df24:	20001b40 	.word	0x20001b40
 800df28:	20001ba8 	.word	0x20001ba8

0800df2c <global_stdio_init.part.0>:
 800df2c:	b510      	push	{r4, lr}
 800df2e:	4b0b      	ldr	r3, [pc, #44]	@ (800df5c <global_stdio_init.part.0+0x30>)
 800df30:	2104      	movs	r1, #4
 800df32:	4c0b      	ldr	r4, [pc, #44]	@ (800df60 <global_stdio_init.part.0+0x34>)
 800df34:	4a0b      	ldr	r2, [pc, #44]	@ (800df64 <global_stdio_init.part.0+0x38>)
 800df36:	4620      	mov	r0, r4
 800df38:	601a      	str	r2, [r3, #0]
 800df3a:	2200      	movs	r2, #0
 800df3c:	f7ff ff94 	bl	800de68 <std>
 800df40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800df44:	2201      	movs	r2, #1
 800df46:	2109      	movs	r1, #9
 800df48:	f7ff ff8e 	bl	800de68 <std>
 800df4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800df50:	2202      	movs	r2, #2
 800df52:	2112      	movs	r1, #18
 800df54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df58:	f7ff bf86 	b.w	800de68 <std>
 800df5c:	20001c10 	.word	0x20001c10
 800df60:	20001ad8 	.word	0x20001ad8
 800df64:	0800ded5 	.word	0x0800ded5

0800df68 <__sfp_lock_acquire>:
 800df68:	4801      	ldr	r0, [pc, #4]	@ (800df70 <__sfp_lock_acquire+0x8>)
 800df6a:	f000 ba37 	b.w	800e3dc <__retarget_lock_acquire_recursive>
 800df6e:	bf00      	nop
 800df70:	20001c1a 	.word	0x20001c1a

0800df74 <__sfp_lock_release>:
 800df74:	4801      	ldr	r0, [pc, #4]	@ (800df7c <__sfp_lock_release+0x8>)
 800df76:	f000 ba32 	b.w	800e3de <__retarget_lock_release_recursive>
 800df7a:	bf00      	nop
 800df7c:	20001c1a 	.word	0x20001c1a

0800df80 <__sinit>:
 800df80:	b510      	push	{r4, lr}
 800df82:	4604      	mov	r4, r0
 800df84:	f7ff fff0 	bl	800df68 <__sfp_lock_acquire>
 800df88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800df8a:	b11b      	cbz	r3, 800df94 <__sinit+0x14>
 800df8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df90:	f7ff bff0 	b.w	800df74 <__sfp_lock_release>
 800df94:	4b04      	ldr	r3, [pc, #16]	@ (800dfa8 <__sinit+0x28>)
 800df96:	6363      	str	r3, [r4, #52]	@ 0x34
 800df98:	4b04      	ldr	r3, [pc, #16]	@ (800dfac <__sinit+0x2c>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d1f5      	bne.n	800df8c <__sinit+0xc>
 800dfa0:	f7ff ffc4 	bl	800df2c <global_stdio_init.part.0>
 800dfa4:	e7f2      	b.n	800df8c <__sinit+0xc>
 800dfa6:	bf00      	nop
 800dfa8:	0800deed 	.word	0x0800deed
 800dfac:	20001c10 	.word	0x20001c10

0800dfb0 <_fwalk_sglue>:
 800dfb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfb4:	4607      	mov	r7, r0
 800dfb6:	4688      	mov	r8, r1
 800dfb8:	4614      	mov	r4, r2
 800dfba:	2600      	movs	r6, #0
 800dfbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dfc0:	f1b9 0901 	subs.w	r9, r9, #1
 800dfc4:	d505      	bpl.n	800dfd2 <_fwalk_sglue+0x22>
 800dfc6:	6824      	ldr	r4, [r4, #0]
 800dfc8:	2c00      	cmp	r4, #0
 800dfca:	d1f7      	bne.n	800dfbc <_fwalk_sglue+0xc>
 800dfcc:	4630      	mov	r0, r6
 800dfce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfd2:	89ab      	ldrh	r3, [r5, #12]
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	d907      	bls.n	800dfe8 <_fwalk_sglue+0x38>
 800dfd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dfdc:	3301      	adds	r3, #1
 800dfde:	d003      	beq.n	800dfe8 <_fwalk_sglue+0x38>
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	4638      	mov	r0, r7
 800dfe4:	47c0      	blx	r8
 800dfe6:	4306      	orrs	r6, r0
 800dfe8:	3568      	adds	r5, #104	@ 0x68
 800dfea:	e7e9      	b.n	800dfc0 <_fwalk_sglue+0x10>

0800dfec <printf>:
 800dfec:	b40f      	push	{r0, r1, r2, r3}
 800dfee:	b507      	push	{r0, r1, r2, lr}
 800dff0:	4906      	ldr	r1, [pc, #24]	@ (800e00c <printf+0x20>)
 800dff2:	ab04      	add	r3, sp, #16
 800dff4:	6808      	ldr	r0, [r1, #0]
 800dff6:	f853 2b04 	ldr.w	r2, [r3], #4
 800dffa:	6881      	ldr	r1, [r0, #8]
 800dffc:	9301      	str	r3, [sp, #4]
 800dffe:	f001 fd07 	bl	800fa10 <_vfprintf_r>
 800e002:	b003      	add	sp, #12
 800e004:	f85d eb04 	ldr.w	lr, [sp], #4
 800e008:	b004      	add	sp, #16
 800e00a:	4770      	bx	lr
 800e00c:	2000046c 	.word	0x2000046c

0800e010 <_puts_r>:
 800e010:	b530      	push	{r4, r5, lr}
 800e012:	4605      	mov	r5, r0
 800e014:	b089      	sub	sp, #36	@ 0x24
 800e016:	4608      	mov	r0, r1
 800e018:	460c      	mov	r4, r1
 800e01a:	f7f2 f937 	bl	800028c <strlen>
 800e01e:	4b1e      	ldr	r3, [pc, #120]	@ (800e098 <_puts_r+0x88>)
 800e020:	9306      	str	r3, [sp, #24]
 800e022:	2301      	movs	r3, #1
 800e024:	e9cd 4004 	strd	r4, r0, [sp, #16]
 800e028:	9307      	str	r3, [sp, #28]
 800e02a:	4418      	add	r0, r3
 800e02c:	ab04      	add	r3, sp, #16
 800e02e:	68ac      	ldr	r4, [r5, #8]
 800e030:	9003      	str	r0, [sp, #12]
 800e032:	9301      	str	r3, [sp, #4]
 800e034:	2302      	movs	r3, #2
 800e036:	9302      	str	r3, [sp, #8]
 800e038:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800e03a:	b913      	cbnz	r3, 800e042 <_puts_r+0x32>
 800e03c:	4628      	mov	r0, r5
 800e03e:	f7ff ff9f 	bl	800df80 <__sinit>
 800e042:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e044:	07db      	lsls	r3, r3, #31
 800e046:	d405      	bmi.n	800e054 <_puts_r+0x44>
 800e048:	89a3      	ldrh	r3, [r4, #12]
 800e04a:	0598      	lsls	r0, r3, #22
 800e04c:	d402      	bmi.n	800e054 <_puts_r+0x44>
 800e04e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e050:	f000 f9c4 	bl	800e3dc <__retarget_lock_acquire_recursive>
 800e054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e058:	0499      	lsls	r1, r3, #18
 800e05a:	d406      	bmi.n	800e06a <_puts_r+0x5a>
 800e05c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e060:	81a3      	strh	r3, [r4, #12]
 800e062:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e064:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e068:	6663      	str	r3, [r4, #100]	@ 0x64
 800e06a:	4628      	mov	r0, r5
 800e06c:	aa01      	add	r2, sp, #4
 800e06e:	4621      	mov	r1, r4
 800e070:	f003 fd34 	bl	8011adc <__sfvwrite_r>
 800e074:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e076:	2800      	cmp	r0, #0
 800e078:	bf0c      	ite	eq
 800e07a:	250a      	moveq	r5, #10
 800e07c:	f04f 35ff 	movne.w	r5, #4294967295
 800e080:	07da      	lsls	r2, r3, #31
 800e082:	d405      	bmi.n	800e090 <_puts_r+0x80>
 800e084:	89a3      	ldrh	r3, [r4, #12]
 800e086:	059b      	lsls	r3, r3, #22
 800e088:	d402      	bmi.n	800e090 <_puts_r+0x80>
 800e08a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e08c:	f000 f9a7 	bl	800e3de <__retarget_lock_release_recursive>
 800e090:	4628      	mov	r0, r5
 800e092:	b009      	add	sp, #36	@ 0x24
 800e094:	bd30      	pop	{r4, r5, pc}
 800e096:	bf00      	nop
 800e098:	08014be2 	.word	0x08014be2

0800e09c <puts>:
 800e09c:	4b02      	ldr	r3, [pc, #8]	@ (800e0a8 <puts+0xc>)
 800e09e:	4601      	mov	r1, r0
 800e0a0:	6818      	ldr	r0, [r3, #0]
 800e0a2:	f7ff bfb5 	b.w	800e010 <_puts_r>
 800e0a6:	bf00      	nop
 800e0a8:	2000046c 	.word	0x2000046c

0800e0ac <snprintf>:
 800e0ac:	b40c      	push	{r2, r3}
 800e0ae:	4b18      	ldr	r3, [pc, #96]	@ (800e110 <snprintf+0x64>)
 800e0b0:	b530      	push	{r4, r5, lr}
 800e0b2:	1e0c      	subs	r4, r1, #0
 800e0b4:	b09d      	sub	sp, #116	@ 0x74
 800e0b6:	681d      	ldr	r5, [r3, #0]
 800e0b8:	da08      	bge.n	800e0cc <snprintf+0x20>
 800e0ba:	238b      	movs	r3, #139	@ 0x8b
 800e0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e0c0:	602b      	str	r3, [r5, #0]
 800e0c2:	b01d      	add	sp, #116	@ 0x74
 800e0c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0c8:	b002      	add	sp, #8
 800e0ca:	4770      	bx	lr
 800e0cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e0d0:	9002      	str	r0, [sp, #8]
 800e0d2:	9006      	str	r0, [sp, #24]
 800e0d4:	a902      	add	r1, sp, #8
 800e0d6:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e0da:	bf14      	ite	ne
 800e0dc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e0e0:	4623      	moveq	r3, r4
 800e0e2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	9304      	str	r3, [sp, #16]
 800e0e8:	9307      	str	r3, [sp, #28]
 800e0ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e0ee:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e0f2:	ab21      	add	r3, sp, #132	@ 0x84
 800e0f4:	9301      	str	r3, [sp, #4]
 800e0f6:	f000 fab3 	bl	800e660 <_svfprintf_r>
 800e0fa:	1c43      	adds	r3, r0, #1
 800e0fc:	bfbc      	itt	lt
 800e0fe:	238b      	movlt	r3, #139	@ 0x8b
 800e100:	602b      	strlt	r3, [r5, #0]
 800e102:	2c00      	cmp	r4, #0
 800e104:	d0dd      	beq.n	800e0c2 <snprintf+0x16>
 800e106:	9b02      	ldr	r3, [sp, #8]
 800e108:	2200      	movs	r2, #0
 800e10a:	701a      	strb	r2, [r3, #0]
 800e10c:	e7d9      	b.n	800e0c2 <snprintf+0x16>
 800e10e:	bf00      	nop
 800e110:	2000046c 	.word	0x2000046c

0800e114 <sprintf>:
 800e114:	b40e      	push	{r1, r2, r3}
 800e116:	b500      	push	{lr}
 800e118:	b09c      	sub	sp, #112	@ 0x70
 800e11a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e11e:	ab1d      	add	r3, sp, #116	@ 0x74
 800e120:	9002      	str	r0, [sp, #8]
 800e122:	9006      	str	r0, [sp, #24]
 800e124:	9107      	str	r1, [sp, #28]
 800e126:	9104      	str	r1, [sp, #16]
 800e128:	4808      	ldr	r0, [pc, #32]	@ (800e14c <sprintf+0x38>)
 800e12a:	4909      	ldr	r1, [pc, #36]	@ (800e150 <sprintf+0x3c>)
 800e12c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e130:	9105      	str	r1, [sp, #20]
 800e132:	a902      	add	r1, sp, #8
 800e134:	6800      	ldr	r0, [r0, #0]
 800e136:	9301      	str	r3, [sp, #4]
 800e138:	f000 fa92 	bl	800e660 <_svfprintf_r>
 800e13c:	9b02      	ldr	r3, [sp, #8]
 800e13e:	2200      	movs	r2, #0
 800e140:	701a      	strb	r2, [r3, #0]
 800e142:	b01c      	add	sp, #112	@ 0x70
 800e144:	f85d eb04 	ldr.w	lr, [sp], #4
 800e148:	b003      	add	sp, #12
 800e14a:	4770      	bx	lr
 800e14c:	2000046c 	.word	0x2000046c
 800e150:	ffff0208 	.word	0xffff0208

0800e154 <__sread>:
 800e154:	b510      	push	{r4, lr}
 800e156:	460c      	mov	r4, r1
 800e158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e15c:	f000 f8de 	bl	800e31c <_read_r>
 800e160:	2800      	cmp	r0, #0
 800e162:	bfab      	itete	ge
 800e164:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 800e166:	89a3      	ldrhlt	r3, [r4, #12]
 800e168:	181b      	addge	r3, r3, r0
 800e16a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e16e:	bfac      	ite	ge
 800e170:	6523      	strge	r3, [r4, #80]	@ 0x50
 800e172:	81a3      	strhlt	r3, [r4, #12]
 800e174:	bd10      	pop	{r4, pc}

0800e176 <__swrite>:
 800e176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e17a:	461f      	mov	r7, r3
 800e17c:	898b      	ldrh	r3, [r1, #12]
 800e17e:	4605      	mov	r5, r0
 800e180:	460c      	mov	r4, r1
 800e182:	05db      	lsls	r3, r3, #23
 800e184:	4616      	mov	r6, r2
 800e186:	d505      	bpl.n	800e194 <__swrite+0x1e>
 800e188:	2302      	movs	r3, #2
 800e18a:	2200      	movs	r2, #0
 800e18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e190:	f000 f8b2 	bl	800e2f8 <_lseek_r>
 800e194:	89a3      	ldrh	r3, [r4, #12]
 800e196:	4632      	mov	r2, r6
 800e198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e19c:	4628      	mov	r0, r5
 800e19e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e1a2:	81a3      	strh	r3, [r4, #12]
 800e1a4:	463b      	mov	r3, r7
 800e1a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1aa:	f000 b8d9 	b.w	800e360 <_write_r>

0800e1ae <__sseek>:
 800e1ae:	b510      	push	{r4, lr}
 800e1b0:	460c      	mov	r4, r1
 800e1b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1b6:	f000 f89f 	bl	800e2f8 <_lseek_r>
 800e1ba:	1c43      	adds	r3, r0, #1
 800e1bc:	89a3      	ldrh	r3, [r4, #12]
 800e1be:	bf15      	itete	ne
 800e1c0:	6520      	strne	r0, [r4, #80]	@ 0x50
 800e1c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e1c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e1ca:	81a3      	strheq	r3, [r4, #12]
 800e1cc:	bf18      	it	ne
 800e1ce:	81a3      	strhne	r3, [r4, #12]
 800e1d0:	bd10      	pop	{r4, pc}

0800e1d2 <__sclose>:
 800e1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1d6:	f000 b87f 	b.w	800e2d8 <_close_r>

0800e1da <_vsnprintf_r>:
 800e1da:	b530      	push	{r4, r5, lr}
 800e1dc:	4614      	mov	r4, r2
 800e1de:	b09b      	sub	sp, #108	@ 0x6c
 800e1e0:	4605      	mov	r5, r0
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	2c00      	cmp	r4, #0
 800e1e6:	da05      	bge.n	800e1f4 <_vsnprintf_r+0x1a>
 800e1e8:	238b      	movs	r3, #139	@ 0x8b
 800e1ea:	6003      	str	r3, [r0, #0]
 800e1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e1f0:	b01b      	add	sp, #108	@ 0x6c
 800e1f2:	bd30      	pop	{r4, r5, pc}
 800e1f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e1f8:	9100      	str	r1, [sp, #0]
 800e1fa:	9104      	str	r1, [sp, #16]
 800e1fc:	4669      	mov	r1, sp
 800e1fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e202:	bf14      	ite	ne
 800e204:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e208:	4623      	moveq	r3, r4
 800e20a:	9302      	str	r3, [sp, #8]
 800e20c:	9305      	str	r3, [sp, #20]
 800e20e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e212:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e216:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e218:	f000 fa22 	bl	800e660 <_svfprintf_r>
 800e21c:	1c43      	adds	r3, r0, #1
 800e21e:	bfbc      	itt	lt
 800e220:	238b      	movlt	r3, #139	@ 0x8b
 800e222:	602b      	strlt	r3, [r5, #0]
 800e224:	2c00      	cmp	r4, #0
 800e226:	d0e3      	beq.n	800e1f0 <_vsnprintf_r+0x16>
 800e228:	9b00      	ldr	r3, [sp, #0]
 800e22a:	2200      	movs	r2, #0
 800e22c:	701a      	strb	r2, [r3, #0]
 800e22e:	e7df      	b.n	800e1f0 <_vsnprintf_r+0x16>

0800e230 <vsnprintf>:
 800e230:	b507      	push	{r0, r1, r2, lr}
 800e232:	9300      	str	r3, [sp, #0]
 800e234:	4613      	mov	r3, r2
 800e236:	460a      	mov	r2, r1
 800e238:	4601      	mov	r1, r0
 800e23a:	4803      	ldr	r0, [pc, #12]	@ (800e248 <vsnprintf+0x18>)
 800e23c:	6800      	ldr	r0, [r0, #0]
 800e23e:	f7ff ffcc 	bl	800e1da <_vsnprintf_r>
 800e242:	b003      	add	sp, #12
 800e244:	f85d fb04 	ldr.w	pc, [sp], #4
 800e248:	2000046c 	.word	0x2000046c

0800e24c <memmove>:
 800e24c:	4288      	cmp	r0, r1
 800e24e:	b510      	push	{r4, lr}
 800e250:	eb01 0402 	add.w	r4, r1, r2
 800e254:	d902      	bls.n	800e25c <memmove+0x10>
 800e256:	4284      	cmp	r4, r0
 800e258:	4623      	mov	r3, r4
 800e25a:	d807      	bhi.n	800e26c <memmove+0x20>
 800e25c:	1e43      	subs	r3, r0, #1
 800e25e:	42a1      	cmp	r1, r4
 800e260:	d008      	beq.n	800e274 <memmove+0x28>
 800e262:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e266:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e26a:	e7f8      	b.n	800e25e <memmove+0x12>
 800e26c:	4402      	add	r2, r0
 800e26e:	4601      	mov	r1, r0
 800e270:	428a      	cmp	r2, r1
 800e272:	d100      	bne.n	800e276 <memmove+0x2a>
 800e274:	bd10      	pop	{r4, pc}
 800e276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e27a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e27e:	e7f7      	b.n	800e270 <memmove+0x24>

0800e280 <memset>:
 800e280:	4402      	add	r2, r0
 800e282:	4603      	mov	r3, r0
 800e284:	4293      	cmp	r3, r2
 800e286:	d100      	bne.n	800e28a <memset+0xa>
 800e288:	4770      	bx	lr
 800e28a:	f803 1b01 	strb.w	r1, [r3], #1
 800e28e:	e7f9      	b.n	800e284 <memset+0x4>

0800e290 <strchr>:
 800e290:	b2c9      	uxtb	r1, r1
 800e292:	4603      	mov	r3, r0
 800e294:	4618      	mov	r0, r3
 800e296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e29a:	b112      	cbz	r2, 800e2a2 <strchr+0x12>
 800e29c:	428a      	cmp	r2, r1
 800e29e:	d1f9      	bne.n	800e294 <strchr+0x4>
 800e2a0:	4770      	bx	lr
 800e2a2:	2900      	cmp	r1, #0
 800e2a4:	bf18      	it	ne
 800e2a6:	2000      	movne	r0, #0
 800e2a8:	4770      	bx	lr

0800e2aa <strstr>:
 800e2aa:	780a      	ldrb	r2, [r1, #0]
 800e2ac:	b570      	push	{r4, r5, r6, lr}
 800e2ae:	b96a      	cbnz	r2, 800e2cc <strstr+0x22>
 800e2b0:	bd70      	pop	{r4, r5, r6, pc}
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d109      	bne.n	800e2ca <strstr+0x20>
 800e2b6:	460c      	mov	r4, r1
 800e2b8:	4605      	mov	r5, r0
 800e2ba:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d0f6      	beq.n	800e2b0 <strstr+0x6>
 800e2c2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e2c6:	429e      	cmp	r6, r3
 800e2c8:	d0f7      	beq.n	800e2ba <strstr+0x10>
 800e2ca:	3001      	adds	r0, #1
 800e2cc:	7803      	ldrb	r3, [r0, #0]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d1ef      	bne.n	800e2b2 <strstr+0x8>
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	e7ec      	b.n	800e2b0 <strstr+0x6>
	...

0800e2d8 <_close_r>:
 800e2d8:	b538      	push	{r3, r4, r5, lr}
 800e2da:	2300      	movs	r3, #0
 800e2dc:	4d05      	ldr	r5, [pc, #20]	@ (800e2f4 <_close_r+0x1c>)
 800e2de:	4604      	mov	r4, r0
 800e2e0:	4608      	mov	r0, r1
 800e2e2:	602b      	str	r3, [r5, #0]
 800e2e4:	f7f4 fbaa 	bl	8002a3c <_close>
 800e2e8:	1c43      	adds	r3, r0, #1
 800e2ea:	d102      	bne.n	800e2f2 <_close_r+0x1a>
 800e2ec:	682b      	ldr	r3, [r5, #0]
 800e2ee:	b103      	cbz	r3, 800e2f2 <_close_r+0x1a>
 800e2f0:	6023      	str	r3, [r4, #0]
 800e2f2:	bd38      	pop	{r3, r4, r5, pc}
 800e2f4:	20001c14 	.word	0x20001c14

0800e2f8 <_lseek_r>:
 800e2f8:	b538      	push	{r3, r4, r5, lr}
 800e2fa:	4604      	mov	r4, r0
 800e2fc:	4d06      	ldr	r5, [pc, #24]	@ (800e318 <_lseek_r+0x20>)
 800e2fe:	4608      	mov	r0, r1
 800e300:	4611      	mov	r1, r2
 800e302:	2200      	movs	r2, #0
 800e304:	602a      	str	r2, [r5, #0]
 800e306:	461a      	mov	r2, r3
 800e308:	f7f4 fbbf 	bl	8002a8a <_lseek>
 800e30c:	1c43      	adds	r3, r0, #1
 800e30e:	d102      	bne.n	800e316 <_lseek_r+0x1e>
 800e310:	682b      	ldr	r3, [r5, #0]
 800e312:	b103      	cbz	r3, 800e316 <_lseek_r+0x1e>
 800e314:	6023      	str	r3, [r4, #0]
 800e316:	bd38      	pop	{r3, r4, r5, pc}
 800e318:	20001c14 	.word	0x20001c14

0800e31c <_read_r>:
 800e31c:	b538      	push	{r3, r4, r5, lr}
 800e31e:	4604      	mov	r4, r0
 800e320:	4d06      	ldr	r5, [pc, #24]	@ (800e33c <_read_r+0x20>)
 800e322:	4608      	mov	r0, r1
 800e324:	4611      	mov	r1, r2
 800e326:	2200      	movs	r2, #0
 800e328:	602a      	str	r2, [r5, #0]
 800e32a:	461a      	mov	r2, r3
 800e32c:	f7f4 fb4d 	bl	80029ca <_read>
 800e330:	1c43      	adds	r3, r0, #1
 800e332:	d102      	bne.n	800e33a <_read_r+0x1e>
 800e334:	682b      	ldr	r3, [r5, #0]
 800e336:	b103      	cbz	r3, 800e33a <_read_r+0x1e>
 800e338:	6023      	str	r3, [r4, #0]
 800e33a:	bd38      	pop	{r3, r4, r5, pc}
 800e33c:	20001c14 	.word	0x20001c14

0800e340 <_sbrk_r>:
 800e340:	b538      	push	{r3, r4, r5, lr}
 800e342:	2300      	movs	r3, #0
 800e344:	4d05      	ldr	r5, [pc, #20]	@ (800e35c <_sbrk_r+0x1c>)
 800e346:	4604      	mov	r4, r0
 800e348:	4608      	mov	r0, r1
 800e34a:	602b      	str	r3, [r5, #0]
 800e34c:	f7f4 fbaa 	bl	8002aa4 <_sbrk>
 800e350:	1c43      	adds	r3, r0, #1
 800e352:	d102      	bne.n	800e35a <_sbrk_r+0x1a>
 800e354:	682b      	ldr	r3, [r5, #0]
 800e356:	b103      	cbz	r3, 800e35a <_sbrk_r+0x1a>
 800e358:	6023      	str	r3, [r4, #0]
 800e35a:	bd38      	pop	{r3, r4, r5, pc}
 800e35c:	20001c14 	.word	0x20001c14

0800e360 <_write_r>:
 800e360:	b538      	push	{r3, r4, r5, lr}
 800e362:	4604      	mov	r4, r0
 800e364:	4d06      	ldr	r5, [pc, #24]	@ (800e380 <_write_r+0x20>)
 800e366:	4608      	mov	r0, r1
 800e368:	4611      	mov	r1, r2
 800e36a:	2200      	movs	r2, #0
 800e36c:	602a      	str	r2, [r5, #0]
 800e36e:	461a      	mov	r2, r3
 800e370:	f7f4 fb48 	bl	8002a04 <_write>
 800e374:	1c43      	adds	r3, r0, #1
 800e376:	d102      	bne.n	800e37e <_write_r+0x1e>
 800e378:	682b      	ldr	r3, [r5, #0]
 800e37a:	b103      	cbz	r3, 800e37e <_write_r+0x1e>
 800e37c:	6023      	str	r3, [r4, #0]
 800e37e:	bd38      	pop	{r3, r4, r5, pc}
 800e380:	20001c14 	.word	0x20001c14

0800e384 <__errno>:
 800e384:	4b01      	ldr	r3, [pc, #4]	@ (800e38c <__errno+0x8>)
 800e386:	6818      	ldr	r0, [r3, #0]
 800e388:	4770      	bx	lr
 800e38a:	bf00      	nop
 800e38c:	2000046c 	.word	0x2000046c

0800e390 <__libc_init_array>:
 800e390:	b570      	push	{r4, r5, r6, lr}
 800e392:	4d0d      	ldr	r5, [pc, #52]	@ (800e3c8 <__libc_init_array+0x38>)
 800e394:	2600      	movs	r6, #0
 800e396:	4c0d      	ldr	r4, [pc, #52]	@ (800e3cc <__libc_init_array+0x3c>)
 800e398:	1b64      	subs	r4, r4, r5
 800e39a:	10a4      	asrs	r4, r4, #2
 800e39c:	42a6      	cmp	r6, r4
 800e39e:	d109      	bne.n	800e3b4 <__libc_init_array+0x24>
 800e3a0:	4d0b      	ldr	r5, [pc, #44]	@ (800e3d0 <__libc_init_array+0x40>)
 800e3a2:	2600      	movs	r6, #0
 800e3a4:	4c0b      	ldr	r4, [pc, #44]	@ (800e3d4 <__libc_init_array+0x44>)
 800e3a6:	f005 fbb5 	bl	8013b14 <_init>
 800e3aa:	1b64      	subs	r4, r4, r5
 800e3ac:	10a4      	asrs	r4, r4, #2
 800e3ae:	42a6      	cmp	r6, r4
 800e3b0:	d105      	bne.n	800e3be <__libc_init_array+0x2e>
 800e3b2:	bd70      	pop	{r4, r5, r6, pc}
 800e3b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3b8:	3601      	adds	r6, #1
 800e3ba:	4798      	blx	r3
 800e3bc:	e7ee      	b.n	800e39c <__libc_init_array+0xc>
 800e3be:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3c2:	3601      	adds	r6, #1
 800e3c4:	4798      	blx	r3
 800e3c6:	e7f2      	b.n	800e3ae <__libc_init_array+0x1e>
 800e3c8:	08014bec 	.word	0x08014bec
 800e3cc:	08014bec 	.word	0x08014bec
 800e3d0:	08014bec 	.word	0x08014bec
 800e3d4:	08014bf4 	.word	0x08014bf4

0800e3d8 <__retarget_lock_init_recursive>:
 800e3d8:	4770      	bx	lr

0800e3da <__retarget_lock_close_recursive>:
 800e3da:	4770      	bx	lr

0800e3dc <__retarget_lock_acquire_recursive>:
 800e3dc:	4770      	bx	lr

0800e3de <__retarget_lock_release_recursive>:
 800e3de:	4770      	bx	lr

0800e3e0 <sysconf>:
 800e3e0:	2808      	cmp	r0, #8
 800e3e2:	b508      	push	{r3, lr}
 800e3e4:	d006      	beq.n	800e3f4 <sysconf+0x14>
 800e3e6:	f7ff ffcd 	bl	800e384 <__errno>
 800e3ea:	2316      	movs	r3, #22
 800e3ec:	6003      	str	r3, [r0, #0]
 800e3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e3f2:	bd08      	pop	{r3, pc}
 800e3f4:	2080      	movs	r0, #128	@ 0x80
 800e3f6:	e7fc      	b.n	800e3f2 <sysconf+0x12>

0800e3f8 <memcpy>:
 800e3f8:	440a      	add	r2, r1
 800e3fa:	1e43      	subs	r3, r0, #1
 800e3fc:	4291      	cmp	r1, r2
 800e3fe:	d100      	bne.n	800e402 <memcpy+0xa>
 800e400:	4770      	bx	lr
 800e402:	b510      	push	{r4, lr}
 800e404:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e408:	4291      	cmp	r1, r2
 800e40a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e40e:	d1f9      	bne.n	800e404 <memcpy+0xc>
 800e410:	bd10      	pop	{r4, pc}
	...

0800e414 <register_fini>:
 800e414:	4b02      	ldr	r3, [pc, #8]	@ (800e420 <register_fini+0xc>)
 800e416:	b113      	cbz	r3, 800e41e <register_fini+0xa>
 800e418:	4802      	ldr	r0, [pc, #8]	@ (800e424 <register_fini+0x10>)
 800e41a:	f000 b805 	b.w	800e428 <atexit>
 800e41e:	4770      	bx	lr
 800e420:	00000000 	.word	0x00000000
 800e424:	08011f31 	.word	0x08011f31

0800e428 <atexit>:
 800e428:	2300      	movs	r3, #0
 800e42a:	4601      	mov	r1, r0
 800e42c:	461a      	mov	r2, r3
 800e42e:	4618      	mov	r0, r3
 800e430:	f003 bdd6 	b.w	8011fe0 <__register_exitproc>

0800e434 <_malloc_trim_r>:
 800e434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e438:	4606      	mov	r6, r0
 800e43a:	4f26      	ldr	r7, [pc, #152]	@ (800e4d4 <_malloc_trim_r+0xa0>)
 800e43c:	2008      	movs	r0, #8
 800e43e:	4689      	mov	r9, r1
 800e440:	f7ff ffce 	bl	800e3e0 <sysconf>
 800e444:	4680      	mov	r8, r0
 800e446:	4630      	mov	r0, r6
 800e448:	f7ff fc7e 	bl	800dd48 <__malloc_lock>
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	685d      	ldr	r5, [r3, #4]
 800e450:	f025 0503 	bic.w	r5, r5, #3
 800e454:	f1a5 0411 	sub.w	r4, r5, #17
 800e458:	eba4 0409 	sub.w	r4, r4, r9
 800e45c:	4444      	add	r4, r8
 800e45e:	fbb4 f4f8 	udiv	r4, r4, r8
 800e462:	3c01      	subs	r4, #1
 800e464:	fb08 f404 	mul.w	r4, r8, r4
 800e468:	45a0      	cmp	r8, r4
 800e46a:	dd05      	ble.n	800e478 <_malloc_trim_r+0x44>
 800e46c:	4630      	mov	r0, r6
 800e46e:	f7ff fc71 	bl	800dd54 <__malloc_unlock>
 800e472:	2000      	movs	r0, #0
 800e474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e478:	2100      	movs	r1, #0
 800e47a:	4630      	mov	r0, r6
 800e47c:	f7ff ff60 	bl	800e340 <_sbrk_r>
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	442b      	add	r3, r5
 800e484:	4298      	cmp	r0, r3
 800e486:	d1f1      	bne.n	800e46c <_malloc_trim_r+0x38>
 800e488:	4261      	negs	r1, r4
 800e48a:	4630      	mov	r0, r6
 800e48c:	f7ff ff58 	bl	800e340 <_sbrk_r>
 800e490:	3001      	adds	r0, #1
 800e492:	d110      	bne.n	800e4b6 <_malloc_trim_r+0x82>
 800e494:	2100      	movs	r1, #0
 800e496:	4630      	mov	r0, r6
 800e498:	f7ff ff52 	bl	800e340 <_sbrk_r>
 800e49c:	68ba      	ldr	r2, [r7, #8]
 800e49e:	1a83      	subs	r3, r0, r2
 800e4a0:	2b0f      	cmp	r3, #15
 800e4a2:	dde3      	ble.n	800e46c <_malloc_trim_r+0x38>
 800e4a4:	490c      	ldr	r1, [pc, #48]	@ (800e4d8 <_malloc_trim_r+0xa4>)
 800e4a6:	f043 0301 	orr.w	r3, r3, #1
 800e4aa:	6809      	ldr	r1, [r1, #0]
 800e4ac:	6053      	str	r3, [r2, #4]
 800e4ae:	1a40      	subs	r0, r0, r1
 800e4b0:	490a      	ldr	r1, [pc, #40]	@ (800e4dc <_malloc_trim_r+0xa8>)
 800e4b2:	6008      	str	r0, [r1, #0]
 800e4b4:	e7da      	b.n	800e46c <_malloc_trim_r+0x38>
 800e4b6:	1b2d      	subs	r5, r5, r4
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	4a08      	ldr	r2, [pc, #32]	@ (800e4dc <_malloc_trim_r+0xa8>)
 800e4bc:	4630      	mov	r0, r6
 800e4be:	f045 0501 	orr.w	r5, r5, #1
 800e4c2:	605d      	str	r5, [r3, #4]
 800e4c4:	6813      	ldr	r3, [r2, #0]
 800e4c6:	1b1b      	subs	r3, r3, r4
 800e4c8:	6013      	str	r3, [r2, #0]
 800e4ca:	f7ff fc43 	bl	800dd54 <__malloc_unlock>
 800e4ce:	2001      	movs	r0, #1
 800e4d0:	e7d0      	b.n	800e474 <_malloc_trim_r+0x40>
 800e4d2:	bf00      	nop
 800e4d4:	20000058 	.word	0x20000058
 800e4d8:	20000050 	.word	0x20000050
 800e4dc:	20001aa4 	.word	0x20001aa4

0800e4e0 <_free_r>:
 800e4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4e2:	4604      	mov	r4, r0
 800e4e4:	460f      	mov	r7, r1
 800e4e6:	2900      	cmp	r1, #0
 800e4e8:	f000 80b1 	beq.w	800e64e <_free_r+0x16e>
 800e4ec:	f7ff fc2c 	bl	800dd48 <__malloc_lock>
 800e4f0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800e4f4:	f1a7 0308 	sub.w	r3, r7, #8
 800e4f8:	4d55      	ldr	r5, [pc, #340]	@ (800e650 <_free_r+0x170>)
 800e4fa:	f022 0001 	bic.w	r0, r2, #1
 800e4fe:	f002 0201 	and.w	r2, r2, #1
 800e502:	68a9      	ldr	r1, [r5, #8]
 800e504:	eb03 0c00 	add.w	ip, r3, r0
 800e508:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800e50c:	4561      	cmp	r1, ip
 800e50e:	f026 0603 	bic.w	r6, r6, #3
 800e512:	d11b      	bne.n	800e54c <_free_r+0x6c>
 800e514:	4406      	add	r6, r0
 800e516:	b93a      	cbnz	r2, 800e528 <_free_r+0x48>
 800e518:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800e51c:	1a9b      	subs	r3, r3, r2
 800e51e:	4416      	add	r6, r2
 800e520:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800e524:	60ca      	str	r2, [r1, #12]
 800e526:	6091      	str	r1, [r2, #8]
 800e528:	f046 0201 	orr.w	r2, r6, #1
 800e52c:	605a      	str	r2, [r3, #4]
 800e52e:	60ab      	str	r3, [r5, #8]
 800e530:	4b48      	ldr	r3, [pc, #288]	@ (800e654 <_free_r+0x174>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	42b3      	cmp	r3, r6
 800e536:	d804      	bhi.n	800e542 <_free_r+0x62>
 800e538:	4b47      	ldr	r3, [pc, #284]	@ (800e658 <_free_r+0x178>)
 800e53a:	4620      	mov	r0, r4
 800e53c:	6819      	ldr	r1, [r3, #0]
 800e53e:	f7ff ff79 	bl	800e434 <_malloc_trim_r>
 800e542:	4620      	mov	r0, r4
 800e544:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e548:	f7ff bc04 	b.w	800dd54 <__malloc_unlock>
 800e54c:	f8cc 6004 	str.w	r6, [ip, #4]
 800e550:	2a00      	cmp	r2, #0
 800e552:	d138      	bne.n	800e5c6 <_free_r+0xe6>
 800e554:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800e558:	f105 0708 	add.w	r7, r5, #8
 800e55c:	1a5b      	subs	r3, r3, r1
 800e55e:	4408      	add	r0, r1
 800e560:	6899      	ldr	r1, [r3, #8]
 800e562:	42b9      	cmp	r1, r7
 800e564:	d031      	beq.n	800e5ca <_free_r+0xea>
 800e566:	68df      	ldr	r7, [r3, #12]
 800e568:	60cf      	str	r7, [r1, #12]
 800e56a:	60b9      	str	r1, [r7, #8]
 800e56c:	eb0c 0106 	add.w	r1, ip, r6
 800e570:	6849      	ldr	r1, [r1, #4]
 800e572:	07c9      	lsls	r1, r1, #31
 800e574:	d40b      	bmi.n	800e58e <_free_r+0xae>
 800e576:	4430      	add	r0, r6
 800e578:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800e57c:	bb3a      	cbnz	r2, 800e5ce <_free_r+0xee>
 800e57e:	4e37      	ldr	r6, [pc, #220]	@ (800e65c <_free_r+0x17c>)
 800e580:	42b1      	cmp	r1, r6
 800e582:	d124      	bne.n	800e5ce <_free_r+0xee>
 800e584:	2201      	movs	r2, #1
 800e586:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800e58a:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800e58e:	f040 0101 	orr.w	r1, r0, #1
 800e592:	6059      	str	r1, [r3, #4]
 800e594:	5018      	str	r0, [r3, r0]
 800e596:	2a00      	cmp	r2, #0
 800e598:	d1d3      	bne.n	800e542 <_free_r+0x62>
 800e59a:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800e59e:	d21b      	bcs.n	800e5d8 <_free_r+0xf8>
 800e5a0:	08c2      	lsrs	r2, r0, #3
 800e5a2:	2101      	movs	r1, #1
 800e5a4:	0940      	lsrs	r0, r0, #5
 800e5a6:	3201      	adds	r2, #1
 800e5a8:	4081      	lsls	r1, r0
 800e5aa:	6868      	ldr	r0, [r5, #4]
 800e5ac:	4301      	orrs	r1, r0
 800e5ae:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 800e5b2:	6069      	str	r1, [r5, #4]
 800e5b4:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 800e5b8:	3908      	subs	r1, #8
 800e5ba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e5be:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 800e5c2:	60c3      	str	r3, [r0, #12]
 800e5c4:	e7bd      	b.n	800e542 <_free_r+0x62>
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	e7d0      	b.n	800e56c <_free_r+0x8c>
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	e7ce      	b.n	800e56c <_free_r+0x8c>
 800e5ce:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800e5d2:	60ce      	str	r6, [r1, #12]
 800e5d4:	60b1      	str	r1, [r6, #8]
 800e5d6:	e7da      	b.n	800e58e <_free_r+0xae>
 800e5d8:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 800e5dc:	ea4f 2250 	mov.w	r2, r0, lsr #9
 800e5e0:	d214      	bcs.n	800e60c <_free_r+0x12c>
 800e5e2:	0982      	lsrs	r2, r0, #6
 800e5e4:	3238      	adds	r2, #56	@ 0x38
 800e5e6:	1c51      	adds	r1, r2, #1
 800e5e8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800e5ec:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800e5f0:	428e      	cmp	r6, r1
 800e5f2:	d125      	bne.n	800e640 <_free_r+0x160>
 800e5f4:	2001      	movs	r0, #1
 800e5f6:	1092      	asrs	r2, r2, #2
 800e5f8:	fa00 f202 	lsl.w	r2, r0, r2
 800e5fc:	6868      	ldr	r0, [r5, #4]
 800e5fe:	4302      	orrs	r2, r0
 800e600:	606a      	str	r2, [r5, #4]
 800e602:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800e606:	60b3      	str	r3, [r6, #8]
 800e608:	60cb      	str	r3, [r1, #12]
 800e60a:	e79a      	b.n	800e542 <_free_r+0x62>
 800e60c:	2a14      	cmp	r2, #20
 800e60e:	d801      	bhi.n	800e614 <_free_r+0x134>
 800e610:	325b      	adds	r2, #91	@ 0x5b
 800e612:	e7e8      	b.n	800e5e6 <_free_r+0x106>
 800e614:	2a54      	cmp	r2, #84	@ 0x54
 800e616:	d802      	bhi.n	800e61e <_free_r+0x13e>
 800e618:	0b02      	lsrs	r2, r0, #12
 800e61a:	326e      	adds	r2, #110	@ 0x6e
 800e61c:	e7e3      	b.n	800e5e6 <_free_r+0x106>
 800e61e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800e622:	d802      	bhi.n	800e62a <_free_r+0x14a>
 800e624:	0bc2      	lsrs	r2, r0, #15
 800e626:	3277      	adds	r2, #119	@ 0x77
 800e628:	e7dd      	b.n	800e5e6 <_free_r+0x106>
 800e62a:	f240 5154 	movw	r1, #1364	@ 0x554
 800e62e:	428a      	cmp	r2, r1
 800e630:	bf96      	itet	ls
 800e632:	0c82      	lsrls	r2, r0, #18
 800e634:	227e      	movhi	r2, #126	@ 0x7e
 800e636:	327c      	addls	r2, #124	@ 0x7c
 800e638:	e7d5      	b.n	800e5e6 <_free_r+0x106>
 800e63a:	6889      	ldr	r1, [r1, #8]
 800e63c:	428e      	cmp	r6, r1
 800e63e:	d004      	beq.n	800e64a <_free_r+0x16a>
 800e640:	684a      	ldr	r2, [r1, #4]
 800e642:	f022 0203 	bic.w	r2, r2, #3
 800e646:	4282      	cmp	r2, r0
 800e648:	d8f7      	bhi.n	800e63a <_free_r+0x15a>
 800e64a:	68ce      	ldr	r6, [r1, #12]
 800e64c:	e7d9      	b.n	800e602 <_free_r+0x122>
 800e64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e650:	20000058 	.word	0x20000058
 800e654:	20000054 	.word	0x20000054
 800e658:	20001ad4 	.word	0x20001ad4
 800e65c:	20000060 	.word	0x20000060

0800e660 <_svfprintf_r>:
 800e660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e664:	b0d3      	sub	sp, #332	@ 0x14c
 800e666:	468b      	mov	fp, r1
 800e668:	4691      	mov	r9, r2
 800e66a:	461e      	mov	r6, r3
 800e66c:	9003      	str	r0, [sp, #12]
 800e66e:	f003 fc5b 	bl	8011f28 <_localeconv_r>
 800e672:	6803      	ldr	r3, [r0, #0]
 800e674:	4618      	mov	r0, r3
 800e676:	9316      	str	r3, [sp, #88]	@ 0x58
 800e678:	f7f1 fe08 	bl	800028c <strlen>
 800e67c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800e680:	900d      	str	r0, [sp, #52]	@ 0x34
 800e682:	061b      	lsls	r3, r3, #24
 800e684:	d515      	bpl.n	800e6b2 <_svfprintf_r+0x52>
 800e686:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e68a:	b993      	cbnz	r3, 800e6b2 <_svfprintf_r+0x52>
 800e68c:	2140      	movs	r1, #64	@ 0x40
 800e68e:	9803      	ldr	r0, [sp, #12]
 800e690:	f7ff f920 	bl	800d8d4 <_malloc_r>
 800e694:	f8cb 0000 	str.w	r0, [fp]
 800e698:	f8cb 0010 	str.w	r0, [fp, #16]
 800e69c:	b930      	cbnz	r0, 800e6ac <_svfprintf_r+0x4c>
 800e69e:	230c      	movs	r3, #12
 800e6a0:	9a03      	ldr	r2, [sp, #12]
 800e6a2:	6013      	str	r3, [r2, #0]
 800e6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e6a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e6aa:	e1f6      	b.n	800ea9a <_svfprintf_r+0x43a>
 800e6ac:	2340      	movs	r3, #64	@ 0x40
 800e6ae:	f8cb 3014 	str.w	r3, [fp, #20]
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	ac29      	add	r4, sp, #164	@ 0xa4
 800e6b6:	ed9f 7b98 	vldr	d7, [pc, #608]	@ 800e918 <_svfprintf_r+0x2b8>
 800e6ba:	9426      	str	r4, [sp, #152]	@ 0x98
 800e6bc:	9304      	str	r3, [sp, #16]
 800e6be:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6c0:	9312      	str	r3, [sp, #72]	@ 0x48
 800e6c2:	9317      	str	r3, [sp, #92]	@ 0x5c
 800e6c4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e6c6:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 800e6ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e6ce:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 800e6d2:	464b      	mov	r3, r9
 800e6d4:	461d      	mov	r5, r3
 800e6d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6da:	b10a      	cbz	r2, 800e6e0 <_svfprintf_r+0x80>
 800e6dc:	2a25      	cmp	r2, #37	@ 0x25
 800e6de:	d1f9      	bne.n	800e6d4 <_svfprintf_r+0x74>
 800e6e0:	ebb5 0709 	subs.w	r7, r5, r9
 800e6e4:	d00d      	beq.n	800e702 <_svfprintf_r+0xa2>
 800e6e6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800e6e8:	443b      	add	r3, r7
 800e6ea:	9328      	str	r3, [sp, #160]	@ 0xa0
 800e6ec:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	2b07      	cmp	r3, #7
 800e6f2:	9327      	str	r3, [sp, #156]	@ 0x9c
 800e6f4:	e9c4 9700 	strd	r9, r7, [r4]
 800e6f8:	dc75      	bgt.n	800e7e6 <_svfprintf_r+0x186>
 800e6fa:	3408      	adds	r4, #8
 800e6fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6fe:	443b      	add	r3, r7
 800e700:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e702:	782b      	ldrb	r3, [r5, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	f001 8142 	beq.w	800f98e <_svfprintf_r+0x132e>
 800e70a:	2200      	movs	r2, #0
 800e70c:	1c6b      	adds	r3, r5, #1
 800e70e:	f04f 38ff 	mov.w	r8, #4294967295
 800e712:	4615      	mov	r5, r2
 800e714:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800e718:	920e      	str	r2, [sp, #56]	@ 0x38
 800e71a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e71e:	9206      	str	r2, [sp, #24]
 800e720:	930c      	str	r3, [sp, #48]	@ 0x30
 800e722:	9b06      	ldr	r3, [sp, #24]
 800e724:	3b20      	subs	r3, #32
 800e726:	2b5a      	cmp	r3, #90	@ 0x5a
 800e728:	f200 859e 	bhi.w	800f268 <_svfprintf_r+0xc08>
 800e72c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e730:	059c009d 	.word	0x059c009d
 800e734:	00a5059c 	.word	0x00a5059c
 800e738:	059c059c 	.word	0x059c059c
 800e73c:	0085059c 	.word	0x0085059c
 800e740:	059c059c 	.word	0x059c059c
 800e744:	00b200a8 	.word	0x00b200a8
 800e748:	00af059c 	.word	0x00af059c
 800e74c:	059c00b4 	.word	0x059c00b4
 800e750:	00d100ce 	.word	0x00d100ce
 800e754:	00d100d1 	.word	0x00d100d1
 800e758:	00d100d1 	.word	0x00d100d1
 800e75c:	00d100d1 	.word	0x00d100d1
 800e760:	00d100d1 	.word	0x00d100d1
 800e764:	059c059c 	.word	0x059c059c
 800e768:	059c059c 	.word	0x059c059c
 800e76c:	059c059c 	.word	0x059c059c
 800e770:	0146059c 	.word	0x0146059c
 800e774:	0107059c 	.word	0x0107059c
 800e778:	0146011a 	.word	0x0146011a
 800e77c:	01460146 	.word	0x01460146
 800e780:	059c059c 	.word	0x059c059c
 800e784:	059c059c 	.word	0x059c059c
 800e788:	059c00e2 	.word	0x059c00e2
 800e78c:	0497059c 	.word	0x0497059c
 800e790:	059c059c 	.word	0x059c059c
 800e794:	04e1059c 	.word	0x04e1059c
 800e798:	0502059c 	.word	0x0502059c
 800e79c:	059c059c 	.word	0x059c059c
 800e7a0:	059c0524 	.word	0x059c0524
 800e7a4:	059c059c 	.word	0x059c059c
 800e7a8:	059c059c 	.word	0x059c059c
 800e7ac:	059c059c 	.word	0x059c059c
 800e7b0:	0146059c 	.word	0x0146059c
 800e7b4:	0107059c 	.word	0x0107059c
 800e7b8:	0146011c 	.word	0x0146011c
 800e7bc:	01460146 	.word	0x01460146
 800e7c0:	011c00e5 	.word	0x011c00e5
 800e7c4:	059c0101 	.word	0x059c0101
 800e7c8:	059c00fa 	.word	0x059c00fa
 800e7cc:	04990478 	.word	0x04990478
 800e7d0:	010104d0 	.word	0x010104d0
 800e7d4:	04e1059c 	.word	0x04e1059c
 800e7d8:	0504009b 	.word	0x0504009b
 800e7dc:	059c059c 	.word	0x059c059c
 800e7e0:	059c0065 	.word	0x059c0065
 800e7e4:	009b      	.short	0x009b
 800e7e6:	aa26      	add	r2, sp, #152	@ 0x98
 800e7e8:	4659      	mov	r1, fp
 800e7ea:	9803      	ldr	r0, [sp, #12]
 800e7ec:	f004 ff94 	bl	8013718 <__ssprint_r>
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	f040 814d 	bne.w	800ea90 <_svfprintf_r+0x430>
 800e7f6:	ac29      	add	r4, sp, #164	@ 0xa4
 800e7f8:	e780      	b.n	800e6fc <_svfprintf_r+0x9c>
 800e7fa:	4b49      	ldr	r3, [pc, #292]	@ (800e920 <_svfprintf_r+0x2c0>)
 800e7fc:	9319      	str	r3, [sp, #100]	@ 0x64
 800e7fe:	f015 0320 	ands.w	r3, r5, #32
 800e802:	f000 84bc 	beq.w	800f17e <_svfprintf_r+0xb1e>
 800e806:	3607      	adds	r6, #7
 800e808:	f026 0307 	bic.w	r3, r6, #7
 800e80c:	461a      	mov	r2, r3
 800e80e:	685f      	ldr	r7, [r3, #4]
 800e810:	f852 6b08 	ldr.w	r6, [r2], #8
 800e814:	9207      	str	r2, [sp, #28]
 800e816:	07eb      	lsls	r3, r5, #31
 800e818:	d50a      	bpl.n	800e830 <_svfprintf_r+0x1d0>
 800e81a:	ea56 0307 	orrs.w	r3, r6, r7
 800e81e:	d007      	beq.n	800e830 <_svfprintf_r+0x1d0>
 800e820:	2330      	movs	r3, #48	@ 0x30
 800e822:	f045 0502 	orr.w	r5, r5, #2
 800e826:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 800e82a:	9b06      	ldr	r3, [sp, #24]
 800e82c:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800e830:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800e834:	2302      	movs	r3, #2
 800e836:	f000 bc22 	b.w	800f07e <_svfprintf_r+0xa1e>
 800e83a:	9803      	ldr	r0, [sp, #12]
 800e83c:	f003 fb74 	bl	8011f28 <_localeconv_r>
 800e840:	6843      	ldr	r3, [r0, #4]
 800e842:	4618      	mov	r0, r3
 800e844:	9317      	str	r3, [sp, #92]	@ 0x5c
 800e846:	f7f1 fd21 	bl	800028c <strlen>
 800e84a:	9012      	str	r0, [sp, #72]	@ 0x48
 800e84c:	9803      	ldr	r0, [sp, #12]
 800e84e:	f003 fb6b 	bl	8011f28 <_localeconv_r>
 800e852:	6883      	ldr	r3, [r0, #8]
 800e854:	9309      	str	r3, [sp, #36]	@ 0x24
 800e856:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e858:	b12b      	cbz	r3, 800e866 <_svfprintf_r+0x206>
 800e85a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e85c:	b11b      	cbz	r3, 800e866 <_svfprintf_r+0x206>
 800e85e:	781b      	ldrb	r3, [r3, #0]
 800e860:	b10b      	cbz	r3, 800e866 <_svfprintf_r+0x206>
 800e862:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 800e866:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e868:	e757      	b.n	800e71a <_svfprintf_r+0xba>
 800e86a:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d1f9      	bne.n	800e866 <_svfprintf_r+0x206>
 800e872:	2320      	movs	r3, #32
 800e874:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800e878:	e7f5      	b.n	800e866 <_svfprintf_r+0x206>
 800e87a:	f045 0501 	orr.w	r5, r5, #1
 800e87e:	e7f2      	b.n	800e866 <_svfprintf_r+0x206>
 800e880:	f856 3b04 	ldr.w	r3, [r6], #4
 800e884:	2b00      	cmp	r3, #0
 800e886:	930e      	str	r3, [sp, #56]	@ 0x38
 800e888:	daed      	bge.n	800e866 <_svfprintf_r+0x206>
 800e88a:	425b      	negs	r3, r3
 800e88c:	930e      	str	r3, [sp, #56]	@ 0x38
 800e88e:	f045 0504 	orr.w	r5, r5, #4
 800e892:	e7e8      	b.n	800e866 <_svfprintf_r+0x206>
 800e894:	232b      	movs	r3, #43	@ 0x2b
 800e896:	e7ed      	b.n	800e874 <_svfprintf_r+0x214>
 800e898:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e89a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e89e:	2a2a      	cmp	r2, #42	@ 0x2a
 800e8a0:	9206      	str	r2, [sp, #24]
 800e8a2:	d10f      	bne.n	800e8c4 <_svfprintf_r+0x264>
 800e8a4:	f856 2b04 	ldr.w	r2, [r6], #4
 800e8a8:	930c      	str	r3, [sp, #48]	@ 0x30
 800e8aa:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 800e8ae:	e7da      	b.n	800e866 <_svfprintf_r+0x206>
 800e8b0:	fb01 2808 	mla	r8, r1, r8, r2
 800e8b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8b8:	9206      	str	r2, [sp, #24]
 800e8ba:	9a06      	ldr	r2, [sp, #24]
 800e8bc:	3a30      	subs	r2, #48	@ 0x30
 800e8be:	2a09      	cmp	r2, #9
 800e8c0:	d9f6      	bls.n	800e8b0 <_svfprintf_r+0x250>
 800e8c2:	e72d      	b.n	800e720 <_svfprintf_r+0xc0>
 800e8c4:	f04f 0800 	mov.w	r8, #0
 800e8c8:	210a      	movs	r1, #10
 800e8ca:	e7f6      	b.n	800e8ba <_svfprintf_r+0x25a>
 800e8cc:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 800e8d0:	e7c9      	b.n	800e866 <_svfprintf_r+0x206>
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e8d6:	210a      	movs	r1, #10
 800e8d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e8da:	9a06      	ldr	r2, [sp, #24]
 800e8dc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800e8de:	3a30      	subs	r2, #48	@ 0x30
 800e8e0:	fb01 2200 	mla	r2, r1, r0, r2
 800e8e4:	920e      	str	r2, [sp, #56]	@ 0x38
 800e8e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8ea:	9206      	str	r2, [sp, #24]
 800e8ec:	3a30      	subs	r2, #48	@ 0x30
 800e8ee:	2a09      	cmp	r2, #9
 800e8f0:	d9f3      	bls.n	800e8da <_svfprintf_r+0x27a>
 800e8f2:	e715      	b.n	800e720 <_svfprintf_r+0xc0>
 800e8f4:	f045 0508 	orr.w	r5, r5, #8
 800e8f8:	e7b5      	b.n	800e866 <_svfprintf_r+0x206>
 800e8fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e8fc:	781b      	ldrb	r3, [r3, #0]
 800e8fe:	2b68      	cmp	r3, #104	@ 0x68
 800e900:	bf05      	ittet	eq
 800e902:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 800e904:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 800e908:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 800e90c:	3301      	addeq	r3, #1
 800e90e:	bf08      	it	eq
 800e910:	930c      	streq	r3, [sp, #48]	@ 0x30
 800e912:	e7a8      	b.n	800e866 <_svfprintf_r+0x206>
 800e914:	f3af 8000 	nop.w
	...
 800e920:	08014949 	.word	0x08014949
 800e924:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	2b6c      	cmp	r3, #108	@ 0x6c
 800e92a:	d105      	bne.n	800e938 <_svfprintf_r+0x2d8>
 800e92c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e92e:	3301      	adds	r3, #1
 800e930:	930c      	str	r3, [sp, #48]	@ 0x30
 800e932:	f045 0520 	orr.w	r5, r5, #32
 800e936:	e796      	b.n	800e866 <_svfprintf_r+0x206>
 800e938:	f045 0510 	orr.w	r5, r5, #16
 800e93c:	e793      	b.n	800e866 <_svfprintf_r+0x206>
 800e93e:	4632      	mov	r2, r6
 800e940:	f852 3b04 	ldr.w	r3, [r2], #4
 800e944:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800e948:	2300      	movs	r3, #0
 800e94a:	9207      	str	r2, [sp, #28]
 800e94c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800e950:	469a      	mov	sl, r3
 800e952:	f04f 0801 	mov.w	r8, #1
 800e956:	461f      	mov	r7, r3
 800e958:	461e      	mov	r6, r3
 800e95a:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 800e95e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e960:	9308      	str	r3, [sp, #32]
 800e962:	e1ce      	b.n	800ed02 <_svfprintf_r+0x6a2>
 800e964:	f045 0510 	orr.w	r5, r5, #16
 800e968:	06af      	lsls	r7, r5, #26
 800e96a:	d512      	bpl.n	800e992 <_svfprintf_r+0x332>
 800e96c:	3607      	adds	r6, #7
 800e96e:	f026 0307 	bic.w	r3, r6, #7
 800e972:	461a      	mov	r2, r3
 800e974:	685f      	ldr	r7, [r3, #4]
 800e976:	f852 6b08 	ldr.w	r6, [r2], #8
 800e97a:	9207      	str	r2, [sp, #28]
 800e97c:	2f00      	cmp	r7, #0
 800e97e:	da06      	bge.n	800e98e <_svfprintf_r+0x32e>
 800e980:	4276      	negs	r6, r6
 800e982:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800e986:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800e98a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800e98e:	2301      	movs	r3, #1
 800e990:	e378      	b.n	800f084 <_svfprintf_r+0xa24>
 800e992:	4633      	mov	r3, r6
 800e994:	06ee      	lsls	r6, r5, #27
 800e996:	f853 7b04 	ldr.w	r7, [r3], #4
 800e99a:	9307      	str	r3, [sp, #28]
 800e99c:	d502      	bpl.n	800e9a4 <_svfprintf_r+0x344>
 800e99e:	463e      	mov	r6, r7
 800e9a0:	17ff      	asrs	r7, r7, #31
 800e9a2:	e7eb      	b.n	800e97c <_svfprintf_r+0x31c>
 800e9a4:	0668      	lsls	r0, r5, #25
 800e9a6:	d503      	bpl.n	800e9b0 <_svfprintf_r+0x350>
 800e9a8:	b23e      	sxth	r6, r7
 800e9aa:	f347 37c0 	sbfx	r7, r7, #15, #1
 800e9ae:	e7e5      	b.n	800e97c <_svfprintf_r+0x31c>
 800e9b0:	05a9      	lsls	r1, r5, #22
 800e9b2:	d5f4      	bpl.n	800e99e <_svfprintf_r+0x33e>
 800e9b4:	b27e      	sxtb	r6, r7
 800e9b6:	f347 17c0 	sbfx	r7, r7, #7, #1
 800e9ba:	e7df      	b.n	800e97c <_svfprintf_r+0x31c>
 800e9bc:	3607      	adds	r6, #7
 800e9be:	f04f 32ff 	mov.w	r2, #4294967295
 800e9c2:	f026 0307 	bic.w	r3, r6, #7
 800e9c6:	ecb3 7b02 	vldmia	r3!, {d7}
 800e9ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e9ce:	9307      	str	r3, [sp, #28]
 800e9d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800e9d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e9da:	931b      	str	r3, [sp, #108]	@ 0x6c
 800e9dc:	4b80      	ldr	r3, [pc, #512]	@ (800ebe0 <_svfprintf_r+0x580>)
 800e9de:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800e9e2:	f7f2 f8b1 	bl	8000b48 <__aeabi_dcmpun>
 800e9e6:	bb10      	cbnz	r0, 800ea2e <_svfprintf_r+0x3ce>
 800e9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e9ec:	4b7c      	ldr	r3, [pc, #496]	@ (800ebe0 <_svfprintf_r+0x580>)
 800e9ee:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800e9f2:	f7f2 f88b 	bl	8000b0c <__aeabi_dcmple>
 800e9f6:	b9d0      	cbnz	r0, 800ea2e <_svfprintf_r+0x3ce>
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ea00:	f7f2 f87a 	bl	8000af8 <__aeabi_dcmplt>
 800ea04:	b110      	cbz	r0, 800ea0c <_svfprintf_r+0x3ac>
 800ea06:	232d      	movs	r3, #45	@ 0x2d
 800ea08:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800ea0c:	4a75      	ldr	r2, [pc, #468]	@ (800ebe4 <_svfprintf_r+0x584>)
 800ea0e:	4b76      	ldr	r3, [pc, #472]	@ (800ebe8 <_svfprintf_r+0x588>)
 800ea10:	9906      	ldr	r1, [sp, #24]
 800ea12:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 800ea16:	f04f 0a00 	mov.w	sl, #0
 800ea1a:	f04f 0803 	mov.w	r8, #3
 800ea1e:	2947      	cmp	r1, #71	@ 0x47
 800ea20:	bfd4      	ite	le
 800ea22:	4691      	movle	r9, r2
 800ea24:	4699      	movgt	r9, r3
 800ea26:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 800ea2a:	f000 bfe7 	b.w	800f9fc <_svfprintf_r+0x139c>
 800ea2e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800ea32:	4610      	mov	r0, r2
 800ea34:	4619      	mov	r1, r3
 800ea36:	f7f2 f887 	bl	8000b48 <__aeabi_dcmpun>
 800ea3a:	4682      	mov	sl, r0
 800ea3c:	b140      	cbz	r0, 800ea50 <_svfprintf_r+0x3f0>
 800ea3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea40:	4a6a      	ldr	r2, [pc, #424]	@ (800ebec <_svfprintf_r+0x58c>)
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	bfbc      	itt	lt
 800ea46:	232d      	movlt	r3, #45	@ 0x2d
 800ea48:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 800ea4c:	4b68      	ldr	r3, [pc, #416]	@ (800ebf0 <_svfprintf_r+0x590>)
 800ea4e:	e7df      	b.n	800ea10 <_svfprintf_r+0x3b0>
 800ea50:	9b06      	ldr	r3, [sp, #24]
 800ea52:	2b61      	cmp	r3, #97	@ 0x61
 800ea54:	d025      	beq.n	800eaa2 <_svfprintf_r+0x442>
 800ea56:	2b41      	cmp	r3, #65	@ 0x41
 800ea58:	d125      	bne.n	800eaa6 <_svfprintf_r+0x446>
 800ea5a:	2358      	movs	r3, #88	@ 0x58
 800ea5c:	2230      	movs	r2, #48	@ 0x30
 800ea5e:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 800ea62:	f045 0502 	orr.w	r5, r5, #2
 800ea66:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800ea6a:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 800ea6e:	f340 80a5 	ble.w	800ebbc <_svfprintf_r+0x55c>
 800ea72:	f108 0101 	add.w	r1, r8, #1
 800ea76:	9803      	ldr	r0, [sp, #12]
 800ea78:	f7fe ff2c 	bl	800d8d4 <_malloc_r>
 800ea7c:	4681      	mov	r9, r0
 800ea7e:	2800      	cmp	r0, #0
 800ea80:	f040 80a1 	bne.w	800ebc6 <_svfprintf_r+0x566>
 800ea84:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800ea88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea8c:	f8ab 300c 	strh.w	r3, [fp, #12]
 800ea90:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800ea94:	065b      	lsls	r3, r3, #25
 800ea96:	f53f ae05 	bmi.w	800e6a4 <_svfprintf_r+0x44>
 800ea9a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800ea9c:	b053      	add	sp, #332	@ 0x14c
 800ea9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaa2:	2378      	movs	r3, #120	@ 0x78
 800eaa4:	e7da      	b.n	800ea5c <_svfprintf_r+0x3fc>
 800eaa6:	f1b8 3fff 	cmp.w	r8, #4294967295
 800eaaa:	f000 808e 	beq.w	800ebca <_svfprintf_r+0x56a>
 800eaae:	9b06      	ldr	r3, [sp, #24]
 800eab0:	f023 0320 	bic.w	r3, r3, #32
 800eab4:	2b47      	cmp	r3, #71	@ 0x47
 800eab6:	d105      	bne.n	800eac4 <_svfprintf_r+0x464>
 800eab8:	f1b8 0f00 	cmp.w	r8, #0
 800eabc:	d102      	bne.n	800eac4 <_svfprintf_r+0x464>
 800eabe:	46c2      	mov	sl, r8
 800eac0:	f04f 0801 	mov.w	r8, #1
 800eac4:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800eac8:	9311      	str	r3, [sp, #68]	@ 0x44
 800eaca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eacc:	2b00      	cmp	r3, #0
 800eace:	da7f      	bge.n	800ebd0 <_svfprintf_r+0x570>
 800ead0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ead2:	9314      	str	r3, [sp, #80]	@ 0x50
 800ead4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ead6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800eada:	9315      	str	r3, [sp, #84]	@ 0x54
 800eadc:	232d      	movs	r3, #45	@ 0x2d
 800eade:	931c      	str	r3, [sp, #112]	@ 0x70
 800eae0:	9b06      	ldr	r3, [sp, #24]
 800eae2:	f023 0320 	bic.w	r3, r3, #32
 800eae6:	2b41      	cmp	r3, #65	@ 0x41
 800eae8:	9308      	str	r3, [sp, #32]
 800eaea:	f040 81e2 	bne.w	800eeb2 <_svfprintf_r+0x852>
 800eaee:	a820      	add	r0, sp, #128	@ 0x80
 800eaf0:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800eaf4:	f003 fa3e 	bl	8011f74 <frexp>
 800eaf8:	2200      	movs	r2, #0
 800eafa:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800eafe:	ec51 0b10 	vmov	r0, r1, d0
 800eb02:	f7f1 fd87 	bl	8000614 <__aeabi_dmul>
 800eb06:	4602      	mov	r2, r0
 800eb08:	460b      	mov	r3, r1
 800eb0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	2300      	movs	r3, #0
 800eb12:	f7f1 ffe7 	bl	8000ae4 <__aeabi_dcmpeq>
 800eb16:	b108      	cbz	r0, 800eb1c <_svfprintf_r+0x4bc>
 800eb18:	2301      	movs	r3, #1
 800eb1a:	9320      	str	r3, [sp, #128]	@ 0x80
 800eb1c:	4a35      	ldr	r2, [pc, #212]	@ (800ebf4 <_svfprintf_r+0x594>)
 800eb1e:	f108 37ff 	add.w	r7, r8, #4294967295
 800eb22:	4b35      	ldr	r3, [pc, #212]	@ (800ebf8 <_svfprintf_r+0x598>)
 800eb24:	464e      	mov	r6, r9
 800eb26:	9906      	ldr	r1, [sp, #24]
 800eb28:	2961      	cmp	r1, #97	@ 0x61
 800eb2a:	bf18      	it	ne
 800eb2c:	461a      	movne	r2, r3
 800eb2e:	9210      	str	r2, [sp, #64]	@ 0x40
 800eb30:	2200      	movs	r2, #0
 800eb32:	4b32      	ldr	r3, [pc, #200]	@ (800ebfc <_svfprintf_r+0x59c>)
 800eb34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb38:	f7f1 fd6c 	bl	8000614 <__aeabi_dmul>
 800eb3c:	4602      	mov	r2, r0
 800eb3e:	460b      	mov	r3, r1
 800eb40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eb44:	f7f2 f816 	bl	8000b74 <__aeabi_d2iz>
 800eb48:	9013      	str	r0, [sp, #76]	@ 0x4c
 800eb4a:	f7f1 fcf9 	bl	8000540 <__aeabi_i2d>
 800eb4e:	4602      	mov	r2, r0
 800eb50:	460b      	mov	r3, r1
 800eb52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb56:	f7f1 fba5 	bl	80002a4 <__aeabi_dsub>
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eb62:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800eb64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800eb66:	5c9b      	ldrb	r3, [r3, r2]
 800eb68:	1c7a      	adds	r2, r7, #1
 800eb6a:	f806 3b01 	strb.w	r3, [r6], #1
 800eb6e:	d006      	beq.n	800eb7e <_svfprintf_r+0x51e>
 800eb70:	1e7b      	subs	r3, r7, #1
 800eb72:	2200      	movs	r2, #0
 800eb74:	931d      	str	r3, [sp, #116]	@ 0x74
 800eb76:	2300      	movs	r3, #0
 800eb78:	f7f1 ffb4 	bl	8000ae4 <__aeabi_dcmpeq>
 800eb7c:	b370      	cbz	r0, 800ebdc <_svfprintf_r+0x57c>
 800eb7e:	2200      	movs	r2, #0
 800eb80:	4b1f      	ldr	r3, [pc, #124]	@ (800ec00 <_svfprintf_r+0x5a0>)
 800eb82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb86:	f7f1 ffd5 	bl	8000b34 <__aeabi_dcmpgt>
 800eb8a:	2800      	cmp	r0, #0
 800eb8c:	d13a      	bne.n	800ec04 <_svfprintf_r+0x5a4>
 800eb8e:	2200      	movs	r2, #0
 800eb90:	4b1b      	ldr	r3, [pc, #108]	@ (800ec00 <_svfprintf_r+0x5a0>)
 800eb92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb96:	f7f1 ffa5 	bl	8000ae4 <__aeabi_dcmpeq>
 800eb9a:	b110      	cbz	r0, 800eba2 <_svfprintf_r+0x542>
 800eb9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eb9e:	07db      	lsls	r3, r3, #31
 800eba0:	d430      	bmi.n	800ec04 <_svfprintf_r+0x5a4>
 800eba2:	4633      	mov	r3, r6
 800eba4:	19f1      	adds	r1, r6, r7
 800eba6:	2030      	movs	r0, #48	@ 0x30
 800eba8:	1aca      	subs	r2, r1, r3
 800ebaa:	2a00      	cmp	r2, #0
 800ebac:	f280 817e 	bge.w	800eeac <_svfprintf_r+0x84c>
 800ebb0:	1c7b      	adds	r3, r7, #1
 800ebb2:	3701      	adds	r7, #1
 800ebb4:	bfb8      	it	lt
 800ebb6:	2300      	movlt	r3, #0
 800ebb8:	441e      	add	r6, r3
 800ebba:	e037      	b.n	800ec2c <_svfprintf_r+0x5cc>
 800ebbc:	f04f 0a00 	mov.w	sl, #0
 800ebc0:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 800ebc4:	e77e      	b.n	800eac4 <_svfprintf_r+0x464>
 800ebc6:	4682      	mov	sl, r0
 800ebc8:	e77c      	b.n	800eac4 <_svfprintf_r+0x464>
 800ebca:	f04f 0806 	mov.w	r8, #6
 800ebce:	e779      	b.n	800eac4 <_svfprintf_r+0x464>
 800ebd0:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 800ebda:	e780      	b.n	800eade <_svfprintf_r+0x47e>
 800ebdc:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 800ebde:	e7a7      	b.n	800eb30 <_svfprintf_r+0x4d0>
 800ebe0:	7fefffff 	.word	0x7fefffff
 800ebe4:	08014939 	.word	0x08014939
 800ebe8:	0801493d 	.word	0x0801493d
 800ebec:	08014941 	.word	0x08014941
 800ebf0:	08014945 	.word	0x08014945
 800ebf4:	08014949 	.word	0x08014949
 800ebf8:	0801495a 	.word	0x0801495a
 800ebfc:	40300000 	.word	0x40300000
 800ec00:	3fe00000 	.word	0x3fe00000
 800ec04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ec06:	2030      	movs	r0, #48	@ 0x30
 800ec08:	9624      	str	r6, [sp, #144]	@ 0x90
 800ec0a:	7bd9      	ldrb	r1, [r3, #15]
 800ec0c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ec0e:	1e53      	subs	r3, r2, #1
 800ec10:	9324      	str	r3, [sp, #144]	@ 0x90
 800ec12:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800ec16:	428b      	cmp	r3, r1
 800ec18:	f000 8145 	beq.w	800eea6 <_svfprintf_r+0x846>
 800ec1c:	2b39      	cmp	r3, #57	@ 0x39
 800ec1e:	bf0b      	itete	eq
 800ec20:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 800ec22:	3301      	addne	r3, #1
 800ec24:	7a9b      	ldrbeq	r3, [r3, #10]
 800ec26:	b2db      	uxtbne	r3, r3
 800ec28:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ec2c:	eba6 0309 	sub.w	r3, r6, r9
 800ec30:	9304      	str	r3, [sp, #16]
 800ec32:	9b08      	ldr	r3, [sp, #32]
 800ec34:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ec36:	2b47      	cmp	r3, #71	@ 0x47
 800ec38:	f040 8183 	bne.w	800ef42 <_svfprintf_r+0x8e2>
 800ec3c:	1cf1      	adds	r1, r6, #3
 800ec3e:	db02      	blt.n	800ec46 <_svfprintf_r+0x5e6>
 800ec40:	4546      	cmp	r6, r8
 800ec42:	f340 81a1 	ble.w	800ef88 <_svfprintf_r+0x928>
 800ec46:	9b06      	ldr	r3, [sp, #24]
 800ec48:	3b02      	subs	r3, #2
 800ec4a:	9306      	str	r3, [sp, #24]
 800ec4c:	9906      	ldr	r1, [sp, #24]
 800ec4e:	1e73      	subs	r3, r6, #1
 800ec50:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800ec54:	f021 0120 	bic.w	r1, r1, #32
 800ec58:	9320      	str	r3, [sp, #128]	@ 0x80
 800ec5a:	2941      	cmp	r1, #65	@ 0x41
 800ec5c:	bf05      	ittet	eq
 800ec5e:	320f      	addeq	r2, #15
 800ec60:	2101      	moveq	r1, #1
 800ec62:	2100      	movne	r1, #0
 800ec64:	b2d2      	uxtbeq	r2, r2
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	bfb8      	it	lt
 800ec6a:	f1c6 0301 	rsblt	r3, r6, #1
 800ec6e:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 800ec72:	bfb4      	ite	lt
 800ec74:	222d      	movlt	r2, #45	@ 0x2d
 800ec76:	222b      	movge	r2, #43	@ 0x2b
 800ec78:	2b09      	cmp	r3, #9
 800ec7a:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 800ec7e:	f340 8176 	ble.w	800ef6e <_svfprintf_r+0x90e>
 800ec82:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800ec86:	270a      	movs	r7, #10
 800ec88:	4602      	mov	r2, r0
 800ec8a:	3801      	subs	r0, #1
 800ec8c:	fbb3 f6f7 	udiv	r6, r3, r7
 800ec90:	fb07 3116 	mls	r1, r7, r6, r3
 800ec94:	3130      	adds	r1, #48	@ 0x30
 800ec96:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ec9a:	4619      	mov	r1, r3
 800ec9c:	4633      	mov	r3, r6
 800ec9e:	2963      	cmp	r1, #99	@ 0x63
 800eca0:	dcf2      	bgt.n	800ec88 <_svfprintf_r+0x628>
 800eca2:	3330      	adds	r3, #48	@ 0x30
 800eca4:	1e91      	subs	r1, r2, #2
 800eca6:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 800ecaa:	f800 3c01 	strb.w	r3, [r0, #-1]
 800ecae:	460b      	mov	r3, r1
 800ecb0:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800ecb4:	4283      	cmp	r3, r0
 800ecb6:	f0c0 8155 	bcc.w	800ef64 <_svfprintf_r+0x904>
 800ecba:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 800ecbe:	1a9b      	subs	r3, r3, r2
 800ecc0:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800ecc4:	4281      	cmp	r1, r0
 800ecc6:	bf88      	it	hi
 800ecc8:	2300      	movhi	r3, #0
 800ecca:	441a      	add	r2, r3
 800eccc:	ab22      	add	r3, sp, #136	@ 0x88
 800ecce:	1ad3      	subs	r3, r2, r3
 800ecd0:	9a04      	ldr	r2, [sp, #16]
 800ecd2:	2a01      	cmp	r2, #1
 800ecd4:	eb03 0802 	add.w	r8, r3, r2
 800ecd8:	9318      	str	r3, [sp, #96]	@ 0x60
 800ecda:	dc01      	bgt.n	800ece0 <_svfprintf_r+0x680>
 800ecdc:	07ea      	lsls	r2, r5, #31
 800ecde:	d501      	bpl.n	800ece4 <_svfprintf_r+0x684>
 800ece0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ece2:	4498      	add	r8, r3
 800ece4:	2700      	movs	r7, #0
 800ece6:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800ecea:	463e      	mov	r6, r7
 800ecec:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800ecf0:	9708      	str	r7, [sp, #32]
 800ecf2:	9311      	str	r3, [sp, #68]	@ 0x44
 800ecf4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	f040 818e 	bne.w	800f018 <_svfprintf_r+0x9b8>
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800ed00:	9310      	str	r3, [sp, #64]	@ 0x40
 800ed02:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed04:	4543      	cmp	r3, r8
 800ed06:	bfb8      	it	lt
 800ed08:	4643      	movlt	r3, r8
 800ed0a:	9311      	str	r3, [sp, #68]	@ 0x44
 800ed0c:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800ed10:	b113      	cbz	r3, 800ed18 <_svfprintf_r+0x6b8>
 800ed12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ed14:	3301      	adds	r3, #1
 800ed16:	9311      	str	r3, [sp, #68]	@ 0x44
 800ed18:	f015 0302 	ands.w	r3, r5, #2
 800ed1c:	931c      	str	r3, [sp, #112]	@ 0x70
 800ed1e:	bf1e      	ittt	ne
 800ed20:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 800ed22:	3302      	addne	r3, #2
 800ed24:	9311      	strne	r3, [sp, #68]	@ 0x44
 800ed26:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 800ed2a:	931d      	str	r3, [sp, #116]	@ 0x74
 800ed2c:	d122      	bne.n	800ed74 <_svfprintf_r+0x714>
 800ed2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed30:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ed32:	1a9b      	subs	r3, r3, r2
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ed38:	dd1c      	ble.n	800ed74 <_svfprintf_r+0x714>
 800ed3a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800ed3c:	f104 0108 	add.w	r1, r4, #8
 800ed40:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800ed44:	2810      	cmp	r0, #16
 800ed46:	489d      	ldr	r0, [pc, #628]	@ (800efbc <_svfprintf_r+0x95c>)
 800ed48:	f102 0201 	add.w	r2, r2, #1
 800ed4c:	6020      	str	r0, [r4, #0]
 800ed4e:	f300 8297 	bgt.w	800f280 <_svfprintf_r+0xc20>
 800ed52:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800ed54:	2a07      	cmp	r2, #7
 800ed56:	4403      	add	r3, r0
 800ed58:	6060      	str	r0, [r4, #4]
 800ed5a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800ed5e:	f340 82a4 	ble.w	800f2aa <_svfprintf_r+0xc4a>
 800ed62:	aa26      	add	r2, sp, #152	@ 0x98
 800ed64:	4659      	mov	r1, fp
 800ed66:	9803      	ldr	r0, [sp, #12]
 800ed68:	f004 fcd6 	bl	8013718 <__ssprint_r>
 800ed6c:	2800      	cmp	r0, #0
 800ed6e:	f040 85ec 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800ed72:	ac29      	add	r4, sp, #164	@ 0xa4
 800ed74:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 800ed78:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800ed7a:	b16a      	cbz	r2, 800ed98 <_svfprintf_r+0x738>
 800ed7c:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 800ed80:	6022      	str	r2, [r4, #0]
 800ed82:	2201      	movs	r2, #1
 800ed84:	4413      	add	r3, r2
 800ed86:	6062      	str	r2, [r4, #4]
 800ed88:	9328      	str	r3, [sp, #160]	@ 0xa0
 800ed8a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800ed8c:	4413      	add	r3, r2
 800ed8e:	2b07      	cmp	r3, #7
 800ed90:	9327      	str	r3, [sp, #156]	@ 0x9c
 800ed92:	f300 828c 	bgt.w	800f2ae <_svfprintf_r+0xc4e>
 800ed96:	3408      	adds	r4, #8
 800ed98:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ed9a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800ed9c:	b162      	cbz	r2, 800edb8 <_svfprintf_r+0x758>
 800ed9e:	aa1f      	add	r2, sp, #124	@ 0x7c
 800eda0:	6022      	str	r2, [r4, #0]
 800eda2:	2202      	movs	r2, #2
 800eda4:	4413      	add	r3, r2
 800eda6:	6062      	str	r2, [r4, #4]
 800eda8:	9328      	str	r3, [sp, #160]	@ 0xa0
 800edaa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800edac:	3301      	adds	r3, #1
 800edae:	2b07      	cmp	r3, #7
 800edb0:	9327      	str	r3, [sp, #156]	@ 0x9c
 800edb2:	f300 8286 	bgt.w	800f2c2 <_svfprintf_r+0xc62>
 800edb6:	3408      	adds	r4, #8
 800edb8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800edba:	2b80      	cmp	r3, #128	@ 0x80
 800edbc:	d122      	bne.n	800ee04 <_svfprintf_r+0x7a4>
 800edbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800edc0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800edc2:	1a9b      	subs	r3, r3, r2
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800edc8:	dd1c      	ble.n	800ee04 <_svfprintf_r+0x7a4>
 800edca:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800edcc:	f104 0108 	add.w	r1, r4, #8
 800edd0:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800edd4:	2810      	cmp	r0, #16
 800edd6:	487a      	ldr	r0, [pc, #488]	@ (800efc0 <_svfprintf_r+0x960>)
 800edd8:	f102 0201 	add.w	r2, r2, #1
 800eddc:	6020      	str	r0, [r4, #0]
 800edde:	f300 827a 	bgt.w	800f2d6 <_svfprintf_r+0xc76>
 800ede2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800ede4:	2a07      	cmp	r2, #7
 800ede6:	4403      	add	r3, r0
 800ede8:	6060      	str	r0, [r4, #4]
 800edea:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800edee:	f340 8287 	ble.w	800f300 <_svfprintf_r+0xca0>
 800edf2:	aa26      	add	r2, sp, #152	@ 0x98
 800edf4:	4659      	mov	r1, fp
 800edf6:	9803      	ldr	r0, [sp, #12]
 800edf8:	f004 fc8e 	bl	8013718 <__ssprint_r>
 800edfc:	2800      	cmp	r0, #0
 800edfe:	f040 85a4 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800ee02:	ac29      	add	r4, sp, #164	@ 0xa4
 800ee04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ee06:	eba3 0308 	sub.w	r3, r3, r8
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	9310      	str	r3, [sp, #64]	@ 0x40
 800ee0e:	dd1c      	ble.n	800ee4a <_svfprintf_r+0x7ea>
 800ee10:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ee12:	f104 0108 	add.w	r1, r4, #8
 800ee16:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800ee1a:	2810      	cmp	r0, #16
 800ee1c:	4868      	ldr	r0, [pc, #416]	@ (800efc0 <_svfprintf_r+0x960>)
 800ee1e:	f102 0201 	add.w	r2, r2, #1
 800ee22:	6020      	str	r0, [r4, #0]
 800ee24:	f300 826e 	bgt.w	800f304 <_svfprintf_r+0xca4>
 800ee28:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ee2a:	2a07      	cmp	r2, #7
 800ee2c:	4403      	add	r3, r0
 800ee2e:	6060      	str	r0, [r4, #4]
 800ee30:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800ee34:	f340 827b 	ble.w	800f32e <_svfprintf_r+0xcce>
 800ee38:	aa26      	add	r2, sp, #152	@ 0x98
 800ee3a:	4659      	mov	r1, fp
 800ee3c:	9803      	ldr	r0, [sp, #12]
 800ee3e:	f004 fc6b 	bl	8013718 <__ssprint_r>
 800ee42:	2800      	cmp	r0, #0
 800ee44:	f040 8581 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800ee48:	ac29      	add	r4, sp, #164	@ 0xa4
 800ee4a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800ee4c:	05ea      	lsls	r2, r5, #23
 800ee4e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ee50:	f100 8274 	bmi.w	800f33c <_svfprintf_r+0xcdc>
 800ee54:	4443      	add	r3, r8
 800ee56:	9328      	str	r3, [sp, #160]	@ 0xa0
 800ee58:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	2b07      	cmp	r3, #7
 800ee5e:	9327      	str	r3, [sp, #156]	@ 0x9c
 800ee60:	e9c4 9800 	strd	r9, r8, [r4]
 800ee64:	f300 82b0 	bgt.w	800f3c8 <_svfprintf_r+0xd68>
 800ee68:	3408      	adds	r4, #8
 800ee6a:	076a      	lsls	r2, r5, #29
 800ee6c:	f100 854f 	bmi.w	800f90e <_svfprintf_r+0x12ae>
 800ee70:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ee72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ee76:	428a      	cmp	r2, r1
 800ee78:	bfac      	ite	ge
 800ee7a:	189b      	addge	r3, r3, r2
 800ee7c:	185b      	addlt	r3, r3, r1
 800ee7e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ee80:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800ee82:	b13b      	cbz	r3, 800ee94 <_svfprintf_r+0x834>
 800ee84:	aa26      	add	r2, sp, #152	@ 0x98
 800ee86:	4659      	mov	r1, fp
 800ee88:	9803      	ldr	r0, [sp, #12]
 800ee8a:	f004 fc45 	bl	8013718 <__ssprint_r>
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	f040 855b 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800ee94:	2300      	movs	r3, #0
 800ee96:	9327      	str	r3, [sp, #156]	@ 0x9c
 800ee98:	f1ba 0f00 	cmp.w	sl, #0
 800ee9c:	f040 8571 	bne.w	800f982 <_svfprintf_r+0x1322>
 800eea0:	9e07      	ldr	r6, [sp, #28]
 800eea2:	ac29      	add	r4, sp, #164	@ 0xa4
 800eea4:	e0c5      	b.n	800f032 <_svfprintf_r+0x9d2>
 800eea6:	f802 0c01 	strb.w	r0, [r2, #-1]
 800eeaa:	e6af      	b.n	800ec0c <_svfprintf_r+0x5ac>
 800eeac:	f803 0b01 	strb.w	r0, [r3], #1
 800eeb0:	e67a      	b.n	800eba8 <_svfprintf_r+0x548>
 800eeb2:	9b08      	ldr	r3, [sp, #32]
 800eeb4:	2b46      	cmp	r3, #70	@ 0x46
 800eeb6:	d005      	beq.n	800eec4 <_svfprintf_r+0x864>
 800eeb8:	2b45      	cmp	r3, #69	@ 0x45
 800eeba:	d11a      	bne.n	800eef2 <_svfprintf_r+0x892>
 800eebc:	f108 0601 	add.w	r6, r8, #1
 800eec0:	2102      	movs	r1, #2
 800eec2:	e001      	b.n	800eec8 <_svfprintf_r+0x868>
 800eec4:	4646      	mov	r6, r8
 800eec6:	2103      	movs	r1, #3
 800eec8:	ab24      	add	r3, sp, #144	@ 0x90
 800eeca:	4632      	mov	r2, r6
 800eecc:	9803      	ldr	r0, [sp, #12]
 800eece:	9301      	str	r3, [sp, #4]
 800eed0:	ab21      	add	r3, sp, #132	@ 0x84
 800eed2:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800eed6:	9300      	str	r3, [sp, #0]
 800eed8:	ab20      	add	r3, sp, #128	@ 0x80
 800eeda:	f003 f951 	bl	8012180 <_dtoa_r>
 800eede:	9b08      	ldr	r3, [sp, #32]
 800eee0:	4681      	mov	r9, r0
 800eee2:	2b47      	cmp	r3, #71	@ 0x47
 800eee4:	d119      	bne.n	800ef1a <_svfprintf_r+0x8ba>
 800eee6:	07e8      	lsls	r0, r5, #31
 800eee8:	d405      	bmi.n	800eef6 <_svfprintf_r+0x896>
 800eeea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800eeec:	eba3 0309 	sub.w	r3, r3, r9
 800eef0:	e69e      	b.n	800ec30 <_svfprintf_r+0x5d0>
 800eef2:	4646      	mov	r6, r8
 800eef4:	e7e4      	b.n	800eec0 <_svfprintf_r+0x860>
 800eef6:	eb09 0706 	add.w	r7, r9, r6
 800eefa:	2200      	movs	r2, #0
 800eefc:	2300      	movs	r3, #0
 800eefe:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800ef02:	f7f1 fdef 	bl	8000ae4 <__aeabi_dcmpeq>
 800ef06:	b100      	cbz	r0, 800ef0a <_svfprintf_r+0x8aa>
 800ef08:	9724      	str	r7, [sp, #144]	@ 0x90
 800ef0a:	2230      	movs	r2, #48	@ 0x30
 800ef0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ef0e:	429f      	cmp	r7, r3
 800ef10:	d9eb      	bls.n	800eeea <_svfprintf_r+0x88a>
 800ef12:	1c59      	adds	r1, r3, #1
 800ef14:	9124      	str	r1, [sp, #144]	@ 0x90
 800ef16:	701a      	strb	r2, [r3, #0]
 800ef18:	e7f8      	b.n	800ef0c <_svfprintf_r+0x8ac>
 800ef1a:	9b08      	ldr	r3, [sp, #32]
 800ef1c:	1987      	adds	r7, r0, r6
 800ef1e:	2b46      	cmp	r3, #70	@ 0x46
 800ef20:	d1eb      	bne.n	800eefa <_svfprintf_r+0x89a>
 800ef22:	7803      	ldrb	r3, [r0, #0]
 800ef24:	2b30      	cmp	r3, #48	@ 0x30
 800ef26:	d109      	bne.n	800ef3c <_svfprintf_r+0x8dc>
 800ef28:	2200      	movs	r2, #0
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800ef30:	f7f1 fdd8 	bl	8000ae4 <__aeabi_dcmpeq>
 800ef34:	b910      	cbnz	r0, 800ef3c <_svfprintf_r+0x8dc>
 800ef36:	f1c6 0601 	rsb	r6, r6, #1
 800ef3a:	9620      	str	r6, [sp, #128]	@ 0x80
 800ef3c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ef3e:	441f      	add	r7, r3
 800ef40:	e7db      	b.n	800eefa <_svfprintf_r+0x89a>
 800ef42:	9b08      	ldr	r3, [sp, #32]
 800ef44:	2b46      	cmp	r3, #70	@ 0x46
 800ef46:	f47f ae81 	bne.w	800ec4c <_svfprintf_r+0x5ec>
 800ef4a:	f005 0301 	and.w	r3, r5, #1
 800ef4e:	2e00      	cmp	r6, #0
 800ef50:	ea43 0308 	orr.w	r3, r3, r8
 800ef54:	dd25      	ble.n	800efa2 <_svfprintf_r+0x942>
 800ef56:	b37b      	cbz	r3, 800efb8 <_svfprintf_r+0x958>
 800ef58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ef5a:	18f3      	adds	r3, r6, r3
 800ef5c:	4498      	add	r8, r3
 800ef5e:	2366      	movs	r3, #102	@ 0x66
 800ef60:	9306      	str	r3, [sp, #24]
 800ef62:	e033      	b.n	800efcc <_svfprintf_r+0x96c>
 800ef64:	f813 7b01 	ldrb.w	r7, [r3], #1
 800ef68:	f806 7f01 	strb.w	r7, [r6, #1]!
 800ef6c:	e6a2      	b.n	800ecb4 <_svfprintf_r+0x654>
 800ef6e:	b941      	cbnz	r1, 800ef82 <_svfprintf_r+0x922>
 800ef70:	2230      	movs	r2, #48	@ 0x30
 800ef72:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 800ef76:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 800ef7a:	3330      	adds	r3, #48	@ 0x30
 800ef7c:	f802 3b01 	strb.w	r3, [r2], #1
 800ef80:	e6a4      	b.n	800eccc <_svfprintf_r+0x66c>
 800ef82:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800ef86:	e7f8      	b.n	800ef7a <_svfprintf_r+0x91a>
 800ef88:	9b04      	ldr	r3, [sp, #16]
 800ef8a:	429e      	cmp	r6, r3
 800ef8c:	da0d      	bge.n	800efaa <_svfprintf_r+0x94a>
 800ef8e:	9b04      	ldr	r3, [sp, #16]
 800ef90:	2e00      	cmp	r6, #0
 800ef92:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ef94:	eb03 0802 	add.w	r8, r3, r2
 800ef98:	dc0c      	bgt.n	800efb4 <_svfprintf_r+0x954>
 800ef9a:	f1c6 0301 	rsb	r3, r6, #1
 800ef9e:	4498      	add	r8, r3
 800efa0:	e008      	b.n	800efb4 <_svfprintf_r+0x954>
 800efa2:	b17b      	cbz	r3, 800efc4 <_svfprintf_r+0x964>
 800efa4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800efa6:	3301      	adds	r3, #1
 800efa8:	e7d8      	b.n	800ef5c <_svfprintf_r+0x8fc>
 800efaa:	07eb      	lsls	r3, r5, #31
 800efac:	d521      	bpl.n	800eff2 <_svfprintf_r+0x992>
 800efae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800efb0:	eb06 0803 	add.w	r8, r6, r3
 800efb4:	2367      	movs	r3, #103	@ 0x67
 800efb6:	e7d3      	b.n	800ef60 <_svfprintf_r+0x900>
 800efb8:	46b0      	mov	r8, r6
 800efba:	e7d0      	b.n	800ef5e <_svfprintf_r+0x8fe>
 800efbc:	0801497d 	.word	0x0801497d
 800efc0:	0801496d 	.word	0x0801496d
 800efc4:	2366      	movs	r3, #102	@ 0x66
 800efc6:	f04f 0801 	mov.w	r8, #1
 800efca:	9306      	str	r3, [sp, #24]
 800efcc:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 800efd0:	9308      	str	r3, [sp, #32]
 800efd2:	d01f      	beq.n	800f014 <_svfprintf_r+0x9b4>
 800efd4:	2700      	movs	r7, #0
 800efd6:	2e00      	cmp	r6, #0
 800efd8:	9708      	str	r7, [sp, #32]
 800efda:	f77f ae8b 	ble.w	800ecf4 <_svfprintf_r+0x694>
 800efde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	2bff      	cmp	r3, #255	@ 0xff
 800efe4:	d107      	bne.n	800eff6 <_svfprintf_r+0x996>
 800efe6:	9b08      	ldr	r3, [sp, #32]
 800efe8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800efea:	443b      	add	r3, r7
 800efec:	fb02 8803 	mla	r8, r2, r3, r8
 800eff0:	e680      	b.n	800ecf4 <_svfprintf_r+0x694>
 800eff2:	46b0      	mov	r8, r6
 800eff4:	e7de      	b.n	800efb4 <_svfprintf_r+0x954>
 800eff6:	42b3      	cmp	r3, r6
 800eff8:	daf5      	bge.n	800efe6 <_svfprintf_r+0x986>
 800effa:	1af6      	subs	r6, r6, r3
 800effc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800effe:	785b      	ldrb	r3, [r3, #1]
 800f000:	b133      	cbz	r3, 800f010 <_svfprintf_r+0x9b0>
 800f002:	9b08      	ldr	r3, [sp, #32]
 800f004:	3301      	adds	r3, #1
 800f006:	9308      	str	r3, [sp, #32]
 800f008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f00a:	3301      	adds	r3, #1
 800f00c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f00e:	e7e6      	b.n	800efde <_svfprintf_r+0x97e>
 800f010:	3701      	adds	r7, #1
 800f012:	e7e4      	b.n	800efde <_svfprintf_r+0x97e>
 800f014:	9f08      	ldr	r7, [sp, #32]
 800f016:	e66d      	b.n	800ecf4 <_svfprintf_r+0x694>
 800f018:	232d      	movs	r3, #45	@ 0x2d
 800f01a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800f01e:	e66d      	b.n	800ecfc <_svfprintf_r+0x69c>
 800f020:	06af      	lsls	r7, r5, #26
 800f022:	d50a      	bpl.n	800f03a <_svfprintf_r+0x9da>
 800f024:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f026:	6833      	ldr	r3, [r6, #0]
 800f028:	17d2      	asrs	r2, r2, #31
 800f02a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f02c:	e9c3 1200 	strd	r1, r2, [r3]
 800f030:	3604      	adds	r6, #4
 800f032:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 800f036:	f7ff bb4c 	b.w	800e6d2 <_svfprintf_r+0x72>
 800f03a:	06e8      	lsls	r0, r5, #27
 800f03c:	d503      	bpl.n	800f046 <_svfprintf_r+0x9e6>
 800f03e:	6833      	ldr	r3, [r6, #0]
 800f040:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f042:	601a      	str	r2, [r3, #0]
 800f044:	e7f4      	b.n	800f030 <_svfprintf_r+0x9d0>
 800f046:	0669      	lsls	r1, r5, #25
 800f048:	d503      	bpl.n	800f052 <_svfprintf_r+0x9f2>
 800f04a:	6833      	ldr	r3, [r6, #0]
 800f04c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f04e:	801a      	strh	r2, [r3, #0]
 800f050:	e7ee      	b.n	800f030 <_svfprintf_r+0x9d0>
 800f052:	05aa      	lsls	r2, r5, #22
 800f054:	d5f3      	bpl.n	800f03e <_svfprintf_r+0x9de>
 800f056:	6833      	ldr	r3, [r6, #0]
 800f058:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f05a:	701a      	strb	r2, [r3, #0]
 800f05c:	e7e8      	b.n	800f030 <_svfprintf_r+0x9d0>
 800f05e:	f045 0510 	orr.w	r5, r5, #16
 800f062:	f015 0320 	ands.w	r3, r5, #32
 800f066:	d020      	beq.n	800f0aa <_svfprintf_r+0xa4a>
 800f068:	3607      	adds	r6, #7
 800f06a:	f026 0307 	bic.w	r3, r6, #7
 800f06e:	461a      	mov	r2, r3
 800f070:	685f      	ldr	r7, [r3, #4]
 800f072:	f852 6b08 	ldr.w	r6, [r2], #8
 800f076:	9207      	str	r2, [sp, #28]
 800f078:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800f07c:	2300      	movs	r3, #0
 800f07e:	2200      	movs	r2, #0
 800f080:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800f084:	f1b8 3fff 	cmp.w	r8, #4294967295
 800f088:	f000 848c 	beq.w	800f9a4 <_svfprintf_r+0x1344>
 800f08c:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 800f090:	9208      	str	r2, [sp, #32]
 800f092:	ea56 0207 	orrs.w	r2, r6, r7
 800f096:	f040 848a 	bne.w	800f9ae <_svfprintf_r+0x134e>
 800f09a:	f1b8 0f00 	cmp.w	r8, #0
 800f09e:	f000 80db 	beq.w	800f258 <_svfprintf_r+0xbf8>
 800f0a2:	2b01      	cmp	r3, #1
 800f0a4:	f040 8486 	bne.w	800f9b4 <_svfprintf_r+0x1354>
 800f0a8:	e083      	b.n	800f1b2 <_svfprintf_r+0xb52>
 800f0aa:	4632      	mov	r2, r6
 800f0ac:	f015 0710 	ands.w	r7, r5, #16
 800f0b0:	f852 6b04 	ldr.w	r6, [r2], #4
 800f0b4:	9207      	str	r2, [sp, #28]
 800f0b6:	d001      	beq.n	800f0bc <_svfprintf_r+0xa5c>
 800f0b8:	461f      	mov	r7, r3
 800f0ba:	e7dd      	b.n	800f078 <_svfprintf_r+0xa18>
 800f0bc:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800f0c0:	d001      	beq.n	800f0c6 <_svfprintf_r+0xa66>
 800f0c2:	b2b6      	uxth	r6, r6
 800f0c4:	e7d8      	b.n	800f078 <_svfprintf_r+0xa18>
 800f0c6:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800f0ca:	d0d5      	beq.n	800f078 <_svfprintf_r+0xa18>
 800f0cc:	b2f6      	uxtb	r6, r6
 800f0ce:	e7f3      	b.n	800f0b8 <_svfprintf_r+0xa58>
 800f0d0:	4633      	mov	r3, r6
 800f0d2:	2278      	movs	r2, #120	@ 0x78
 800f0d4:	2700      	movs	r7, #0
 800f0d6:	f045 0502 	orr.w	r5, r5, #2
 800f0da:	f853 6b04 	ldr.w	r6, [r3], #4
 800f0de:	9206      	str	r2, [sp, #24]
 800f0e0:	9307      	str	r3, [sp, #28]
 800f0e2:	f647 0330 	movw	r3, #30768	@ 0x7830
 800f0e6:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 800f0ea:	4b92      	ldr	r3, [pc, #584]	@ (800f334 <_svfprintf_r+0xcd4>)
 800f0ec:	9319      	str	r3, [sp, #100]	@ 0x64
 800f0ee:	2302      	movs	r3, #2
 800f0f0:	e7c5      	b.n	800f07e <_svfprintf_r+0xa1e>
 800f0f2:	4633      	mov	r3, r6
 800f0f4:	f1b8 3fff 	cmp.w	r8, #4294967295
 800f0f8:	f04f 0600 	mov.w	r6, #0
 800f0fc:	f853 9b04 	ldr.w	r9, [r3], #4
 800f100:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 800f104:	9307      	str	r3, [sp, #28]
 800f106:	d00f      	beq.n	800f128 <_svfprintf_r+0xac8>
 800f108:	4642      	mov	r2, r8
 800f10a:	4631      	mov	r1, r6
 800f10c:	4648      	mov	r0, r9
 800f10e:	f002 ff23 	bl	8011f58 <memchr>
 800f112:	4682      	mov	sl, r0
 800f114:	2800      	cmp	r0, #0
 800f116:	f43f ac86 	beq.w	800ea26 <_svfprintf_r+0x3c6>
 800f11a:	eba0 0809 	sub.w	r8, r0, r9
 800f11e:	46b2      	mov	sl, r6
 800f120:	4637      	mov	r7, r6
 800f122:	9610      	str	r6, [sp, #64]	@ 0x40
 800f124:	9608      	str	r6, [sp, #32]
 800f126:	e5ec      	b.n	800ed02 <_svfprintf_r+0x6a2>
 800f128:	4648      	mov	r0, r9
 800f12a:	46b2      	mov	sl, r6
 800f12c:	f7f1 f8ae 	bl	800028c <strlen>
 800f130:	4680      	mov	r8, r0
 800f132:	e478      	b.n	800ea26 <_svfprintf_r+0x3c6>
 800f134:	f045 0510 	orr.w	r5, r5, #16
 800f138:	f015 0320 	ands.w	r3, r5, #32
 800f13c:	d009      	beq.n	800f152 <_svfprintf_r+0xaf2>
 800f13e:	3607      	adds	r6, #7
 800f140:	f026 0307 	bic.w	r3, r6, #7
 800f144:	461a      	mov	r2, r3
 800f146:	685f      	ldr	r7, [r3, #4]
 800f148:	f852 6b08 	ldr.w	r6, [r2], #8
 800f14c:	9207      	str	r2, [sp, #28]
 800f14e:	2301      	movs	r3, #1
 800f150:	e795      	b.n	800f07e <_svfprintf_r+0xa1e>
 800f152:	4632      	mov	r2, r6
 800f154:	f015 0710 	ands.w	r7, r5, #16
 800f158:	f852 6b04 	ldr.w	r6, [r2], #4
 800f15c:	9207      	str	r2, [sp, #28]
 800f15e:	d001      	beq.n	800f164 <_svfprintf_r+0xb04>
 800f160:	461f      	mov	r7, r3
 800f162:	e7f4      	b.n	800f14e <_svfprintf_r+0xaee>
 800f164:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800f168:	d001      	beq.n	800f16e <_svfprintf_r+0xb0e>
 800f16a:	b2b6      	uxth	r6, r6
 800f16c:	e7ef      	b.n	800f14e <_svfprintf_r+0xaee>
 800f16e:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800f172:	d0ec      	beq.n	800f14e <_svfprintf_r+0xaee>
 800f174:	b2f6      	uxtb	r6, r6
 800f176:	e7f3      	b.n	800f160 <_svfprintf_r+0xb00>
 800f178:	4b6f      	ldr	r3, [pc, #444]	@ (800f338 <_svfprintf_r+0xcd8>)
 800f17a:	f7ff bb3f 	b.w	800e7fc <_svfprintf_r+0x19c>
 800f17e:	4632      	mov	r2, r6
 800f180:	f015 0710 	ands.w	r7, r5, #16
 800f184:	f852 6b04 	ldr.w	r6, [r2], #4
 800f188:	9207      	str	r2, [sp, #28]
 800f18a:	d002      	beq.n	800f192 <_svfprintf_r+0xb32>
 800f18c:	461f      	mov	r7, r3
 800f18e:	f7ff bb42 	b.w	800e816 <_svfprintf_r+0x1b6>
 800f192:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800f196:	d002      	beq.n	800f19e <_svfprintf_r+0xb3e>
 800f198:	b2b6      	uxth	r6, r6
 800f19a:	f7ff bb3c 	b.w	800e816 <_svfprintf_r+0x1b6>
 800f19e:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800f1a2:	f43f ab38 	beq.w	800e816 <_svfprintf_r+0x1b6>
 800f1a6:	b2f6      	uxtb	r6, r6
 800f1a8:	e7f0      	b.n	800f18c <_svfprintf_r+0xb2c>
 800f1aa:	2e0a      	cmp	r6, #10
 800f1ac:	f177 0300 	sbcs.w	r3, r7, #0
 800f1b0:	d207      	bcs.n	800f1c2 <_svfprintf_r+0xb62>
 800f1b2:	3630      	adds	r6, #48	@ 0x30
 800f1b4:	b2f6      	uxtb	r6, r6
 800f1b6:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 800f1ba:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 800f1be:	f000 bc15 	b.w	800f9ec <_svfprintf_r+0x138c>
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	ad52      	add	r5, sp, #328	@ 0x148
 800f1c6:	9304      	str	r3, [sp, #16]
 800f1c8:	9b08      	ldr	r3, [sp, #32]
 800f1ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f1ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800f1d0:	220a      	movs	r2, #10
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	4630      	mov	r0, r6
 800f1d6:	4639      	mov	r1, r7
 800f1d8:	f7f1 fcf4 	bl	8000bc4 <__aeabi_uldivmod>
 800f1dc:	9b04      	ldr	r3, [sp, #16]
 800f1de:	3230      	adds	r2, #48	@ 0x30
 800f1e0:	468a      	mov	sl, r1
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	f105 39ff 	add.w	r9, r5, #4294967295
 800f1e8:	9011      	str	r0, [sp, #68]	@ 0x44
 800f1ea:	9304      	str	r3, [sp, #16]
 800f1ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f1ee:	f805 2c01 	strb.w	r2, [r5, #-1]
 800f1f2:	b1d3      	cbz	r3, 800f22a <_svfprintf_r+0xbca>
 800f1f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1f6:	9a04      	ldr	r2, [sp, #16]
 800f1f8:	781b      	ldrb	r3, [r3, #0]
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d115      	bne.n	800f22a <_svfprintf_r+0xbca>
 800f1fe:	2aff      	cmp	r2, #255	@ 0xff
 800f200:	d013      	beq.n	800f22a <_svfprintf_r+0xbca>
 800f202:	2e0a      	cmp	r6, #10
 800f204:	f177 0300 	sbcs.w	r3, r7, #0
 800f208:	d30f      	bcc.n	800f22a <_svfprintf_r+0xbca>
 800f20a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f20c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800f20e:	eba9 0903 	sub.w	r9, r9, r3
 800f212:	461a      	mov	r2, r3
 800f214:	4648      	mov	r0, r9
 800f216:	f002 fe6d 	bl	8011ef4 <strncpy>
 800f21a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f21c:	785b      	ldrb	r3, [r3, #1]
 800f21e:	b11b      	cbz	r3, 800f228 <_svfprintf_r+0xbc8>
 800f220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f222:	3301      	adds	r3, #1
 800f224:	9309      	str	r3, [sp, #36]	@ 0x24
 800f226:	2300      	movs	r3, #0
 800f228:	9304      	str	r3, [sp, #16]
 800f22a:	2e0a      	cmp	r6, #10
 800f22c:	f177 0700 	sbcs.w	r7, r7, #0
 800f230:	f0c0 83dc 	bcc.w	800f9ec <_svfprintf_r+0x138c>
 800f234:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800f236:	4657      	mov	r7, sl
 800f238:	464d      	mov	r5, r9
 800f23a:	e7c9      	b.n	800f1d0 <_svfprintf_r+0xb70>
 800f23c:	f006 030f 	and.w	r3, r6, #15
 800f240:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f242:	0936      	lsrs	r6, r6, #4
 800f244:	5cd3      	ldrb	r3, [r2, r3]
 800f246:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 800f24a:	093f      	lsrs	r7, r7, #4
 800f24c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800f250:	ea56 0307 	orrs.w	r3, r6, r7
 800f254:	d1f2      	bne.n	800f23c <_svfprintf_r+0xbdc>
 800f256:	e3c9      	b.n	800f9ec <_svfprintf_r+0x138c>
 800f258:	b91b      	cbnz	r3, 800f262 <_svfprintf_r+0xc02>
 800f25a:	07e9      	lsls	r1, r5, #31
 800f25c:	d501      	bpl.n	800f262 <_svfprintf_r+0xc02>
 800f25e:	2630      	movs	r6, #48	@ 0x30
 800f260:	e7a9      	b.n	800f1b6 <_svfprintf_r+0xb56>
 800f262:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800f266:	e3c1      	b.n	800f9ec <_svfprintf_r+0x138c>
 800f268:	9b06      	ldr	r3, [sp, #24]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	f000 838f 	beq.w	800f98e <_svfprintf_r+0x132e>
 800f270:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800f274:	2300      	movs	r3, #0
 800f276:	9607      	str	r6, [sp, #28]
 800f278:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800f27c:	f7ff bb68 	b.w	800e950 <_svfprintf_r+0x2f0>
 800f280:	2010      	movs	r0, #16
 800f282:	2a07      	cmp	r2, #7
 800f284:	4403      	add	r3, r0
 800f286:	6060      	str	r0, [r4, #4]
 800f288:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800f28c:	dd08      	ble.n	800f2a0 <_svfprintf_r+0xc40>
 800f28e:	aa26      	add	r2, sp, #152	@ 0x98
 800f290:	4659      	mov	r1, fp
 800f292:	9803      	ldr	r0, [sp, #12]
 800f294:	f004 fa40 	bl	8013718 <__ssprint_r>
 800f298:	2800      	cmp	r0, #0
 800f29a:	f040 8356 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f29e:	a929      	add	r1, sp, #164	@ 0xa4
 800f2a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f2a2:	460c      	mov	r4, r1
 800f2a4:	3b10      	subs	r3, #16
 800f2a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f2a8:	e547      	b.n	800ed3a <_svfprintf_r+0x6da>
 800f2aa:	460c      	mov	r4, r1
 800f2ac:	e562      	b.n	800ed74 <_svfprintf_r+0x714>
 800f2ae:	aa26      	add	r2, sp, #152	@ 0x98
 800f2b0:	4659      	mov	r1, fp
 800f2b2:	9803      	ldr	r0, [sp, #12]
 800f2b4:	f004 fa30 	bl	8013718 <__ssprint_r>
 800f2b8:	2800      	cmp	r0, #0
 800f2ba:	f040 8346 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f2be:	ac29      	add	r4, sp, #164	@ 0xa4
 800f2c0:	e56a      	b.n	800ed98 <_svfprintf_r+0x738>
 800f2c2:	aa26      	add	r2, sp, #152	@ 0x98
 800f2c4:	4659      	mov	r1, fp
 800f2c6:	9803      	ldr	r0, [sp, #12]
 800f2c8:	f004 fa26 	bl	8013718 <__ssprint_r>
 800f2cc:	2800      	cmp	r0, #0
 800f2ce:	f040 833c 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f2d2:	ac29      	add	r4, sp, #164	@ 0xa4
 800f2d4:	e570      	b.n	800edb8 <_svfprintf_r+0x758>
 800f2d6:	2010      	movs	r0, #16
 800f2d8:	2a07      	cmp	r2, #7
 800f2da:	4403      	add	r3, r0
 800f2dc:	6060      	str	r0, [r4, #4]
 800f2de:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800f2e2:	dd08      	ble.n	800f2f6 <_svfprintf_r+0xc96>
 800f2e4:	aa26      	add	r2, sp, #152	@ 0x98
 800f2e6:	4659      	mov	r1, fp
 800f2e8:	9803      	ldr	r0, [sp, #12]
 800f2ea:	f004 fa15 	bl	8013718 <__ssprint_r>
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	f040 832b 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f2f4:	a929      	add	r1, sp, #164	@ 0xa4
 800f2f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f2f8:	460c      	mov	r4, r1
 800f2fa:	3b10      	subs	r3, #16
 800f2fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f2fe:	e564      	b.n	800edca <_svfprintf_r+0x76a>
 800f300:	460c      	mov	r4, r1
 800f302:	e57f      	b.n	800ee04 <_svfprintf_r+0x7a4>
 800f304:	2010      	movs	r0, #16
 800f306:	2a07      	cmp	r2, #7
 800f308:	4403      	add	r3, r0
 800f30a:	6060      	str	r0, [r4, #4]
 800f30c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800f310:	dd08      	ble.n	800f324 <_svfprintf_r+0xcc4>
 800f312:	aa26      	add	r2, sp, #152	@ 0x98
 800f314:	4659      	mov	r1, fp
 800f316:	9803      	ldr	r0, [sp, #12]
 800f318:	f004 f9fe 	bl	8013718 <__ssprint_r>
 800f31c:	2800      	cmp	r0, #0
 800f31e:	f040 8314 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f322:	a929      	add	r1, sp, #164	@ 0xa4
 800f324:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f326:	460c      	mov	r4, r1
 800f328:	3b10      	subs	r3, #16
 800f32a:	9310      	str	r3, [sp, #64]	@ 0x40
 800f32c:	e570      	b.n	800ee10 <_svfprintf_r+0x7b0>
 800f32e:	460c      	mov	r4, r1
 800f330:	e58b      	b.n	800ee4a <_svfprintf_r+0x7ea>
 800f332:	bf00      	nop
 800f334:	08014949 	.word	0x08014949
 800f338:	0801495a 	.word	0x0801495a
 800f33c:	9b06      	ldr	r3, [sp, #24]
 800f33e:	2b65      	cmp	r3, #101	@ 0x65
 800f340:	f340 8246 	ble.w	800f7d0 <_svfprintf_r+0x1170>
 800f344:	2200      	movs	r2, #0
 800f346:	2300      	movs	r3, #0
 800f348:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f34c:	f7f1 fbca 	bl	8000ae4 <__aeabi_dcmpeq>
 800f350:	2800      	cmp	r0, #0
 800f352:	d06a      	beq.n	800f42a <_svfprintf_r+0xdca>
 800f354:	4b73      	ldr	r3, [pc, #460]	@ (800f524 <_svfprintf_r+0xec4>)
 800f356:	6023      	str	r3, [r4, #0]
 800f358:	2301      	movs	r3, #1
 800f35a:	6063      	str	r3, [r4, #4]
 800f35c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f35e:	3301      	adds	r3, #1
 800f360:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f362:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800f364:	3301      	adds	r3, #1
 800f366:	2b07      	cmp	r3, #7
 800f368:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f36a:	dc37      	bgt.n	800f3dc <_svfprintf_r+0xd7c>
 800f36c:	3408      	adds	r4, #8
 800f36e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f370:	9a04      	ldr	r2, [sp, #16]
 800f372:	4293      	cmp	r3, r2
 800f374:	db02      	blt.n	800f37c <_svfprintf_r+0xd1c>
 800f376:	07ef      	lsls	r7, r5, #31
 800f378:	f57f ad77 	bpl.w	800ee6a <_svfprintf_r+0x80a>
 800f37c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f37e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f380:	6023      	str	r3, [r4, #0]
 800f382:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f384:	6063      	str	r3, [r4, #4]
 800f386:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f388:	4413      	add	r3, r2
 800f38a:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f38c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800f38e:	3301      	adds	r3, #1
 800f390:	2b07      	cmp	r3, #7
 800f392:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f394:	dc2c      	bgt.n	800f3f0 <_svfprintf_r+0xd90>
 800f396:	3408      	adds	r4, #8
 800f398:	9b04      	ldr	r3, [sp, #16]
 800f39a:	1e5e      	subs	r6, r3, #1
 800f39c:	2e00      	cmp	r6, #0
 800f39e:	f77f ad64 	ble.w	800ee6a <_svfprintf_r+0x80a>
 800f3a2:	4f61      	ldr	r7, [pc, #388]	@ (800f528 <_svfprintf_r+0xec8>)
 800f3a4:	f04f 0810 	mov.w	r8, #16
 800f3a8:	2e10      	cmp	r6, #16
 800f3aa:	f104 0108 	add.w	r1, r4, #8
 800f3ae:	6027      	str	r7, [r4, #0]
 800f3b0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800f3b4:	f103 0301 	add.w	r3, r3, #1
 800f3b8:	dc24      	bgt.n	800f404 <_svfprintf_r+0xda4>
 800f3ba:	6066      	str	r6, [r4, #4]
 800f3bc:	2b07      	cmp	r3, #7
 800f3be:	4416      	add	r6, r2
 800f3c0:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800f3c4:	f340 82a0 	ble.w	800f908 <_svfprintf_r+0x12a8>
 800f3c8:	aa26      	add	r2, sp, #152	@ 0x98
 800f3ca:	4659      	mov	r1, fp
 800f3cc:	9803      	ldr	r0, [sp, #12]
 800f3ce:	f004 f9a3 	bl	8013718 <__ssprint_r>
 800f3d2:	2800      	cmp	r0, #0
 800f3d4:	f040 82b9 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f3d8:	ac29      	add	r4, sp, #164	@ 0xa4
 800f3da:	e546      	b.n	800ee6a <_svfprintf_r+0x80a>
 800f3dc:	aa26      	add	r2, sp, #152	@ 0x98
 800f3de:	4659      	mov	r1, fp
 800f3e0:	9803      	ldr	r0, [sp, #12]
 800f3e2:	f004 f999 	bl	8013718 <__ssprint_r>
 800f3e6:	2800      	cmp	r0, #0
 800f3e8:	f040 82af 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f3ec:	ac29      	add	r4, sp, #164	@ 0xa4
 800f3ee:	e7be      	b.n	800f36e <_svfprintf_r+0xd0e>
 800f3f0:	aa26      	add	r2, sp, #152	@ 0x98
 800f3f2:	4659      	mov	r1, fp
 800f3f4:	9803      	ldr	r0, [sp, #12]
 800f3f6:	f004 f98f 	bl	8013718 <__ssprint_r>
 800f3fa:	2800      	cmp	r0, #0
 800f3fc:	f040 82a5 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f400:	ac29      	add	r4, sp, #164	@ 0xa4
 800f402:	e7c9      	b.n	800f398 <_svfprintf_r+0xd38>
 800f404:	3210      	adds	r2, #16
 800f406:	2b07      	cmp	r3, #7
 800f408:	f8c4 8004 	str.w	r8, [r4, #4]
 800f40c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800f410:	dd08      	ble.n	800f424 <_svfprintf_r+0xdc4>
 800f412:	aa26      	add	r2, sp, #152	@ 0x98
 800f414:	4659      	mov	r1, fp
 800f416:	9803      	ldr	r0, [sp, #12]
 800f418:	f004 f97e 	bl	8013718 <__ssprint_r>
 800f41c:	2800      	cmp	r0, #0
 800f41e:	f040 8294 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f422:	a929      	add	r1, sp, #164	@ 0xa4
 800f424:	3e10      	subs	r6, #16
 800f426:	460c      	mov	r4, r1
 800f428:	e7be      	b.n	800f3a8 <_svfprintf_r+0xd48>
 800f42a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	dc7d      	bgt.n	800f52c <_svfprintf_r+0xecc>
 800f430:	4b3c      	ldr	r3, [pc, #240]	@ (800f524 <_svfprintf_r+0xec4>)
 800f432:	6023      	str	r3, [r4, #0]
 800f434:	2301      	movs	r3, #1
 800f436:	6063      	str	r3, [r4, #4]
 800f438:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f43a:	3301      	adds	r3, #1
 800f43c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f43e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800f440:	3301      	adds	r3, #1
 800f442:	2b07      	cmp	r3, #7
 800f444:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f446:	dc46      	bgt.n	800f4d6 <_svfprintf_r+0xe76>
 800f448:	3408      	adds	r4, #8
 800f44a:	9904      	ldr	r1, [sp, #16]
 800f44c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f44e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800f450:	430b      	orrs	r3, r1
 800f452:	f005 0101 	and.w	r1, r5, #1
 800f456:	430b      	orrs	r3, r1
 800f458:	f43f ad07 	beq.w	800ee6a <_svfprintf_r+0x80a>
 800f45c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f45e:	6023      	str	r3, [r4, #0]
 800f460:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f462:	441a      	add	r2, r3
 800f464:	6063      	str	r3, [r4, #4]
 800f466:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800f468:	9228      	str	r2, [sp, #160]	@ 0xa0
 800f46a:	3301      	adds	r3, #1
 800f46c:	2b07      	cmp	r3, #7
 800f46e:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f470:	dc3b      	bgt.n	800f4ea <_svfprintf_r+0xe8a>
 800f472:	f104 0308 	add.w	r3, r4, #8
 800f476:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f478:	2e00      	cmp	r6, #0
 800f47a:	da1b      	bge.n	800f4b4 <_svfprintf_r+0xe54>
 800f47c:	4276      	negs	r6, r6
 800f47e:	461a      	mov	r2, r3
 800f480:	4f29      	ldr	r7, [pc, #164]	@ (800f528 <_svfprintf_r+0xec8>)
 800f482:	2410      	movs	r4, #16
 800f484:	2e10      	cmp	r6, #16
 800f486:	f103 0308 	add.w	r3, r3, #8
 800f48a:	6017      	str	r7, [r2, #0]
 800f48c:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 800f490:	f101 0101 	add.w	r1, r1, #1
 800f494:	dc33      	bgt.n	800f4fe <_svfprintf_r+0xe9e>
 800f496:	6056      	str	r6, [r2, #4]
 800f498:	2907      	cmp	r1, #7
 800f49a:	4406      	add	r6, r0
 800f49c:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 800f4a0:	dd08      	ble.n	800f4b4 <_svfprintf_r+0xe54>
 800f4a2:	aa26      	add	r2, sp, #152	@ 0x98
 800f4a4:	4659      	mov	r1, fp
 800f4a6:	9803      	ldr	r0, [sp, #12]
 800f4a8:	f004 f936 	bl	8013718 <__ssprint_r>
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	f040 824c 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f4b2:	ab29      	add	r3, sp, #164	@ 0xa4
 800f4b4:	9a04      	ldr	r2, [sp, #16]
 800f4b6:	9904      	ldr	r1, [sp, #16]
 800f4b8:	605a      	str	r2, [r3, #4]
 800f4ba:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800f4bc:	f8c3 9000 	str.w	r9, [r3]
 800f4c0:	440a      	add	r2, r1
 800f4c2:	9228      	str	r2, [sp, #160]	@ 0xa0
 800f4c4:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800f4c6:	3201      	adds	r2, #1
 800f4c8:	2a07      	cmp	r2, #7
 800f4ca:	9227      	str	r2, [sp, #156]	@ 0x9c
 800f4cc:	f73f af7c 	bgt.w	800f3c8 <_svfprintf_r+0xd68>
 800f4d0:	f103 0408 	add.w	r4, r3, #8
 800f4d4:	e4c9      	b.n	800ee6a <_svfprintf_r+0x80a>
 800f4d6:	aa26      	add	r2, sp, #152	@ 0x98
 800f4d8:	4659      	mov	r1, fp
 800f4da:	9803      	ldr	r0, [sp, #12]
 800f4dc:	f004 f91c 	bl	8013718 <__ssprint_r>
 800f4e0:	2800      	cmp	r0, #0
 800f4e2:	f040 8232 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f4e6:	ac29      	add	r4, sp, #164	@ 0xa4
 800f4e8:	e7af      	b.n	800f44a <_svfprintf_r+0xdea>
 800f4ea:	aa26      	add	r2, sp, #152	@ 0x98
 800f4ec:	4659      	mov	r1, fp
 800f4ee:	9803      	ldr	r0, [sp, #12]
 800f4f0:	f004 f912 	bl	8013718 <__ssprint_r>
 800f4f4:	2800      	cmp	r0, #0
 800f4f6:	f040 8228 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f4fa:	ab29      	add	r3, sp, #164	@ 0xa4
 800f4fc:	e7bb      	b.n	800f476 <_svfprintf_r+0xe16>
 800f4fe:	3010      	adds	r0, #16
 800f500:	2907      	cmp	r1, #7
 800f502:	6054      	str	r4, [r2, #4]
 800f504:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 800f508:	dd08      	ble.n	800f51c <_svfprintf_r+0xebc>
 800f50a:	aa26      	add	r2, sp, #152	@ 0x98
 800f50c:	4659      	mov	r1, fp
 800f50e:	9803      	ldr	r0, [sp, #12]
 800f510:	f004 f902 	bl	8013718 <__ssprint_r>
 800f514:	2800      	cmp	r0, #0
 800f516:	f040 8218 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f51a:	ab29      	add	r3, sp, #164	@ 0xa4
 800f51c:	3e10      	subs	r6, #16
 800f51e:	461a      	mov	r2, r3
 800f520:	e7b0      	b.n	800f484 <_svfprintf_r+0xe24>
 800f522:	bf00      	nop
 800f524:	0801496b 	.word	0x0801496b
 800f528:	0801496d 	.word	0x0801496d
 800f52c:	9b04      	ldr	r3, [sp, #16]
 800f52e:	444b      	add	r3, r9
 800f530:	9306      	str	r3, [sp, #24]
 800f532:	9b04      	ldr	r3, [sp, #16]
 800f534:	42b3      	cmp	r3, r6
 800f536:	bfa8      	it	ge
 800f538:	4633      	movge	r3, r6
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	4698      	mov	r8, r3
 800f53e:	dd0b      	ble.n	800f558 <_svfprintf_r+0xef8>
 800f540:	e9c4 9300 	strd	r9, r3, [r4]
 800f544:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f546:	4443      	add	r3, r8
 800f548:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f54a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800f54c:	3301      	adds	r3, #1
 800f54e:	2b07      	cmp	r3, #7
 800f550:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f552:	f300 8089 	bgt.w	800f668 <_svfprintf_r+0x1008>
 800f556:	3408      	adds	r4, #8
 800f558:	4643      	mov	r3, r8
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	bfac      	ite	ge
 800f55e:	eba6 0808 	subge.w	r8, r6, r8
 800f562:	46b0      	movlt	r8, r6
 800f564:	f1b8 0f00 	cmp.w	r8, #0
 800f568:	dd1b      	ble.n	800f5a2 <_svfprintf_r+0xf42>
 800f56a:	4898      	ldr	r0, [pc, #608]	@ (800f7cc <_svfprintf_r+0x116c>)
 800f56c:	f1b8 0f10 	cmp.w	r8, #16
 800f570:	f104 0108 	add.w	r1, r4, #8
 800f574:	6020      	str	r0, [r4, #0]
 800f576:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800f57a:	f102 0201 	add.w	r2, r2, #1
 800f57e:	dc7d      	bgt.n	800f67c <_svfprintf_r+0x101c>
 800f580:	4443      	add	r3, r8
 800f582:	2a07      	cmp	r2, #7
 800f584:	f8c4 8004 	str.w	r8, [r4, #4]
 800f588:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800f58c:	f340 808a 	ble.w	800f6a4 <_svfprintf_r+0x1044>
 800f590:	aa26      	add	r2, sp, #152	@ 0x98
 800f592:	4659      	mov	r1, fp
 800f594:	9803      	ldr	r0, [sp, #12]
 800f596:	f004 f8bf 	bl	8013718 <__ssprint_r>
 800f59a:	2800      	cmp	r0, #0
 800f59c:	f040 81d5 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f5a0:	ac29      	add	r4, sp, #164	@ 0xa4
 800f5a2:	eb09 0806 	add.w	r8, r9, r6
 800f5a6:	056e      	lsls	r6, r5, #21
 800f5a8:	d508      	bpl.n	800f5bc <_svfprintf_r+0xf5c>
 800f5aa:	9b08      	ldr	r3, [sp, #32]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d17b      	bne.n	800f6a8 <_svfprintf_r+0x1048>
 800f5b0:	2f00      	cmp	r7, #0
 800f5b2:	d17b      	bne.n	800f6ac <_svfprintf_r+0x104c>
 800f5b4:	9b06      	ldr	r3, [sp, #24]
 800f5b6:	4598      	cmp	r8, r3
 800f5b8:	bf28      	it	cs
 800f5ba:	4698      	movcs	r8, r3
 800f5bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f5be:	9a04      	ldr	r2, [sp, #16]
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	db01      	blt.n	800f5c8 <_svfprintf_r+0xf68>
 800f5c4:	07e8      	lsls	r0, r5, #31
 800f5c6:	d50e      	bpl.n	800f5e6 <_svfprintf_r+0xf86>
 800f5c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f5ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f5cc:	6023      	str	r3, [r4, #0]
 800f5ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f5d0:	6063      	str	r3, [r4, #4]
 800f5d2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f5d4:	4413      	add	r3, r2
 800f5d6:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f5d8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800f5da:	3301      	adds	r3, #1
 800f5dc:	2b07      	cmp	r3, #7
 800f5de:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f5e0:	f300 80df 	bgt.w	800f7a2 <_svfprintf_r+0x1142>
 800f5e4:	3408      	adds	r4, #8
 800f5e6:	9b04      	ldr	r3, [sp, #16]
 800f5e8:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 800f5ea:	1bdf      	subs	r7, r3, r7
 800f5ec:	9b06      	ldr	r3, [sp, #24]
 800f5ee:	eba3 0308 	sub.w	r3, r3, r8
 800f5f2:	429f      	cmp	r7, r3
 800f5f4:	bfa8      	it	ge
 800f5f6:	461f      	movge	r7, r3
 800f5f8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f5fa:	2f00      	cmp	r7, #0
 800f5fc:	dd0a      	ble.n	800f614 <_svfprintf_r+0xfb4>
 800f5fe:	443b      	add	r3, r7
 800f600:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f602:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800f604:	3301      	adds	r3, #1
 800f606:	2b07      	cmp	r3, #7
 800f608:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f60a:	e9c4 8700 	strd	r8, r7, [r4]
 800f60e:	f300 80d2 	bgt.w	800f7b6 <_svfprintf_r+0x1156>
 800f612:	3408      	adds	r4, #8
 800f614:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f616:	2f00      	cmp	r7, #0
 800f618:	9b04      	ldr	r3, [sp, #16]
 800f61a:	eba3 0606 	sub.w	r6, r3, r6
 800f61e:	bfa8      	it	ge
 800f620:	1bf6      	subge	r6, r6, r7
 800f622:	2e00      	cmp	r6, #0
 800f624:	f77f ac21 	ble.w	800ee6a <_svfprintf_r+0x80a>
 800f628:	4f68      	ldr	r7, [pc, #416]	@ (800f7cc <_svfprintf_r+0x116c>)
 800f62a:	f04f 0810 	mov.w	r8, #16
 800f62e:	2e10      	cmp	r6, #16
 800f630:	f104 0108 	add.w	r1, r4, #8
 800f634:	6027      	str	r7, [r4, #0]
 800f636:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800f63a:	f103 0301 	add.w	r3, r3, #1
 800f63e:	f77f aebc 	ble.w	800f3ba <_svfprintf_r+0xd5a>
 800f642:	3210      	adds	r2, #16
 800f644:	2b07      	cmp	r3, #7
 800f646:	f8c4 8004 	str.w	r8, [r4, #4]
 800f64a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800f64e:	dd08      	ble.n	800f662 <_svfprintf_r+0x1002>
 800f650:	aa26      	add	r2, sp, #152	@ 0x98
 800f652:	4659      	mov	r1, fp
 800f654:	9803      	ldr	r0, [sp, #12]
 800f656:	f004 f85f 	bl	8013718 <__ssprint_r>
 800f65a:	2800      	cmp	r0, #0
 800f65c:	f040 8175 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f660:	a929      	add	r1, sp, #164	@ 0xa4
 800f662:	3e10      	subs	r6, #16
 800f664:	460c      	mov	r4, r1
 800f666:	e7e2      	b.n	800f62e <_svfprintf_r+0xfce>
 800f668:	aa26      	add	r2, sp, #152	@ 0x98
 800f66a:	4659      	mov	r1, fp
 800f66c:	9803      	ldr	r0, [sp, #12]
 800f66e:	f004 f853 	bl	8013718 <__ssprint_r>
 800f672:	2800      	cmp	r0, #0
 800f674:	f040 8169 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f678:	ac29      	add	r4, sp, #164	@ 0xa4
 800f67a:	e76d      	b.n	800f558 <_svfprintf_r+0xef8>
 800f67c:	2010      	movs	r0, #16
 800f67e:	2a07      	cmp	r2, #7
 800f680:	4403      	add	r3, r0
 800f682:	6060      	str	r0, [r4, #4]
 800f684:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800f688:	dd08      	ble.n	800f69c <_svfprintf_r+0x103c>
 800f68a:	aa26      	add	r2, sp, #152	@ 0x98
 800f68c:	4659      	mov	r1, fp
 800f68e:	9803      	ldr	r0, [sp, #12]
 800f690:	f004 f842 	bl	8013718 <__ssprint_r>
 800f694:	2800      	cmp	r0, #0
 800f696:	f040 8158 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f69a:	a929      	add	r1, sp, #164	@ 0xa4
 800f69c:	f1a8 0810 	sub.w	r8, r8, #16
 800f6a0:	460c      	mov	r4, r1
 800f6a2:	e762      	b.n	800f56a <_svfprintf_r+0xf0a>
 800f6a4:	460c      	mov	r4, r1
 800f6a6:	e77c      	b.n	800f5a2 <_svfprintf_r+0xf42>
 800f6a8:	2f00      	cmp	r7, #0
 800f6aa:	d04a      	beq.n	800f742 <_svfprintf_r+0x10e2>
 800f6ac:	3f01      	subs	r7, #1
 800f6ae:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f6b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f6b2:	6023      	str	r3, [r4, #0]
 800f6b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f6b6:	6063      	str	r3, [r4, #4]
 800f6b8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f6ba:	4413      	add	r3, r2
 800f6bc:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f6be:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	2b07      	cmp	r3, #7
 800f6c4:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f6c6:	dc43      	bgt.n	800f750 <_svfprintf_r+0x10f0>
 800f6c8:	3408      	adds	r4, #8
 800f6ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6cc:	781a      	ldrb	r2, [r3, #0]
 800f6ce:	9b06      	ldr	r3, [sp, #24]
 800f6d0:	eba3 0308 	sub.w	r3, r3, r8
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	bfa8      	it	ge
 800f6d8:	461a      	movge	r2, r3
 800f6da:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f6dc:	2a00      	cmp	r2, #0
 800f6de:	4691      	mov	r9, r2
 800f6e0:	dd09      	ble.n	800f6f6 <_svfprintf_r+0x1096>
 800f6e2:	4413      	add	r3, r2
 800f6e4:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f6e6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	2b07      	cmp	r3, #7
 800f6ec:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f6ee:	e9c4 8200 	strd	r8, r2, [r4]
 800f6f2:	dc37      	bgt.n	800f764 <_svfprintf_r+0x1104>
 800f6f4:	3408      	adds	r4, #8
 800f6f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6f8:	f1b9 0f00 	cmp.w	r9, #0
 800f6fc:	781e      	ldrb	r6, [r3, #0]
 800f6fe:	bfa8      	it	ge
 800f700:	eba6 0609 	subge.w	r6, r6, r9
 800f704:	2e00      	cmp	r6, #0
 800f706:	dd18      	ble.n	800f73a <_svfprintf_r+0x10da>
 800f708:	4830      	ldr	r0, [pc, #192]	@ (800f7cc <_svfprintf_r+0x116c>)
 800f70a:	2e10      	cmp	r6, #16
 800f70c:	f104 0108 	add.w	r1, r4, #8
 800f710:	6020      	str	r0, [r4, #0]
 800f712:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800f716:	f103 0301 	add.w	r3, r3, #1
 800f71a:	dc2d      	bgt.n	800f778 <_svfprintf_r+0x1118>
 800f71c:	6066      	str	r6, [r4, #4]
 800f71e:	2b07      	cmp	r3, #7
 800f720:	4416      	add	r6, r2
 800f722:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800f726:	dd3a      	ble.n	800f79e <_svfprintf_r+0x113e>
 800f728:	aa26      	add	r2, sp, #152	@ 0x98
 800f72a:	4659      	mov	r1, fp
 800f72c:	9803      	ldr	r0, [sp, #12]
 800f72e:	f003 fff3 	bl	8013718 <__ssprint_r>
 800f732:	2800      	cmp	r0, #0
 800f734:	f040 8109 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f738:	ac29      	add	r4, sp, #164	@ 0xa4
 800f73a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	4498      	add	r8, r3
 800f740:	e733      	b.n	800f5aa <_svfprintf_r+0xf4a>
 800f742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f744:	3b01      	subs	r3, #1
 800f746:	9309      	str	r3, [sp, #36]	@ 0x24
 800f748:	9b08      	ldr	r3, [sp, #32]
 800f74a:	3b01      	subs	r3, #1
 800f74c:	9308      	str	r3, [sp, #32]
 800f74e:	e7ae      	b.n	800f6ae <_svfprintf_r+0x104e>
 800f750:	aa26      	add	r2, sp, #152	@ 0x98
 800f752:	4659      	mov	r1, fp
 800f754:	9803      	ldr	r0, [sp, #12]
 800f756:	f003 ffdf 	bl	8013718 <__ssprint_r>
 800f75a:	2800      	cmp	r0, #0
 800f75c:	f040 80f5 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f760:	ac29      	add	r4, sp, #164	@ 0xa4
 800f762:	e7b2      	b.n	800f6ca <_svfprintf_r+0x106a>
 800f764:	aa26      	add	r2, sp, #152	@ 0x98
 800f766:	4659      	mov	r1, fp
 800f768:	9803      	ldr	r0, [sp, #12]
 800f76a:	f003 ffd5 	bl	8013718 <__ssprint_r>
 800f76e:	2800      	cmp	r0, #0
 800f770:	f040 80eb 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f774:	ac29      	add	r4, sp, #164	@ 0xa4
 800f776:	e7be      	b.n	800f6f6 <_svfprintf_r+0x1096>
 800f778:	2010      	movs	r0, #16
 800f77a:	2b07      	cmp	r3, #7
 800f77c:	4402      	add	r2, r0
 800f77e:	6060      	str	r0, [r4, #4]
 800f780:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800f784:	dd08      	ble.n	800f798 <_svfprintf_r+0x1138>
 800f786:	aa26      	add	r2, sp, #152	@ 0x98
 800f788:	4659      	mov	r1, fp
 800f78a:	9803      	ldr	r0, [sp, #12]
 800f78c:	f003 ffc4 	bl	8013718 <__ssprint_r>
 800f790:	2800      	cmp	r0, #0
 800f792:	f040 80da 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f796:	a929      	add	r1, sp, #164	@ 0xa4
 800f798:	3e10      	subs	r6, #16
 800f79a:	460c      	mov	r4, r1
 800f79c:	e7b4      	b.n	800f708 <_svfprintf_r+0x10a8>
 800f79e:	460c      	mov	r4, r1
 800f7a0:	e7cb      	b.n	800f73a <_svfprintf_r+0x10da>
 800f7a2:	aa26      	add	r2, sp, #152	@ 0x98
 800f7a4:	4659      	mov	r1, fp
 800f7a6:	9803      	ldr	r0, [sp, #12]
 800f7a8:	f003 ffb6 	bl	8013718 <__ssprint_r>
 800f7ac:	2800      	cmp	r0, #0
 800f7ae:	f040 80cc 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f7b2:	ac29      	add	r4, sp, #164	@ 0xa4
 800f7b4:	e717      	b.n	800f5e6 <_svfprintf_r+0xf86>
 800f7b6:	aa26      	add	r2, sp, #152	@ 0x98
 800f7b8:	4659      	mov	r1, fp
 800f7ba:	9803      	ldr	r0, [sp, #12]
 800f7bc:	f003 ffac 	bl	8013718 <__ssprint_r>
 800f7c0:	2800      	cmp	r0, #0
 800f7c2:	f040 80c2 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f7c6:	ac29      	add	r4, sp, #164	@ 0xa4
 800f7c8:	e724      	b.n	800f614 <_svfprintf_r+0xfb4>
 800f7ca:	bf00      	nop
 800f7cc:	0801496d 	.word	0x0801496d
 800f7d0:	9904      	ldr	r1, [sp, #16]
 800f7d2:	f104 0608 	add.w	r6, r4, #8
 800f7d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f7d8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800f7da:	2901      	cmp	r1, #1
 800f7dc:	f103 0301 	add.w	r3, r3, #1
 800f7e0:	f102 0201 	add.w	r2, r2, #1
 800f7e4:	dc02      	bgt.n	800f7ec <_svfprintf_r+0x118c>
 800f7e6:	07e9      	lsls	r1, r5, #31
 800f7e8:	f140 8083 	bpl.w	800f8f2 <_svfprintf_r+0x1292>
 800f7ec:	2101      	movs	r1, #1
 800f7ee:	2a07      	cmp	r2, #7
 800f7f0:	f8c4 9000 	str.w	r9, [r4]
 800f7f4:	6061      	str	r1, [r4, #4]
 800f7f6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800f7fa:	dd08      	ble.n	800f80e <_svfprintf_r+0x11ae>
 800f7fc:	aa26      	add	r2, sp, #152	@ 0x98
 800f7fe:	4659      	mov	r1, fp
 800f800:	9803      	ldr	r0, [sp, #12]
 800f802:	f003 ff89 	bl	8013718 <__ssprint_r>
 800f806:	2800      	cmp	r0, #0
 800f808:	f040 809f 	bne.w	800f94a <_svfprintf_r+0x12ea>
 800f80c:	ae29      	add	r6, sp, #164	@ 0xa4
 800f80e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f810:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f812:	6033      	str	r3, [r6, #0]
 800f814:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f816:	6073      	str	r3, [r6, #4]
 800f818:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f81a:	4413      	add	r3, r2
 800f81c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f81e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800f820:	3301      	adds	r3, #1
 800f822:	2b07      	cmp	r3, #7
 800f824:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f826:	dc33      	bgt.n	800f890 <_svfprintf_r+0x1230>
 800f828:	3608      	adds	r6, #8
 800f82a:	9b04      	ldr	r3, [sp, #16]
 800f82c:	2200      	movs	r2, #0
 800f82e:	1e5c      	subs	r4, r3, #1
 800f830:	2300      	movs	r3, #0
 800f832:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f836:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 800f83a:	f7f1 f953 	bl	8000ae4 <__aeabi_dcmpeq>
 800f83e:	2800      	cmp	r0, #0
 800f840:	d12f      	bne.n	800f8a2 <_svfprintf_r+0x1242>
 800f842:	f109 0201 	add.w	r2, r9, #1
 800f846:	f108 0301 	add.w	r3, r8, #1
 800f84a:	3f01      	subs	r7, #1
 800f84c:	2b07      	cmp	r3, #7
 800f84e:	e9c6 2400 	strd	r2, r4, [r6]
 800f852:	9a04      	ldr	r2, [sp, #16]
 800f854:	4417      	add	r7, r2
 800f856:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 800f85a:	dd53      	ble.n	800f904 <_svfprintf_r+0x12a4>
 800f85c:	aa26      	add	r2, sp, #152	@ 0x98
 800f85e:	4659      	mov	r1, fp
 800f860:	9803      	ldr	r0, [sp, #12]
 800f862:	f003 ff59 	bl	8013718 <__ssprint_r>
 800f866:	2800      	cmp	r0, #0
 800f868:	d16f      	bne.n	800f94a <_svfprintf_r+0x12ea>
 800f86a:	ae29      	add	r6, sp, #164	@ 0xa4
 800f86c:	ab22      	add	r3, sp, #136	@ 0x88
 800f86e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800f870:	6033      	str	r3, [r6, #0]
 800f872:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f874:	6073      	str	r3, [r6, #4]
 800f876:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f878:	4413      	add	r3, r2
 800f87a:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f87c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800f87e:	3301      	adds	r3, #1
 800f880:	2b07      	cmp	r3, #7
 800f882:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f884:	f73f ada0 	bgt.w	800f3c8 <_svfprintf_r+0xd68>
 800f888:	f106 0408 	add.w	r4, r6, #8
 800f88c:	f7ff baed 	b.w	800ee6a <_svfprintf_r+0x80a>
 800f890:	aa26      	add	r2, sp, #152	@ 0x98
 800f892:	4659      	mov	r1, fp
 800f894:	9803      	ldr	r0, [sp, #12]
 800f896:	f003 ff3f 	bl	8013718 <__ssprint_r>
 800f89a:	2800      	cmp	r0, #0
 800f89c:	d155      	bne.n	800f94a <_svfprintf_r+0x12ea>
 800f89e:	ae29      	add	r6, sp, #164	@ 0xa4
 800f8a0:	e7c3      	b.n	800f82a <_svfprintf_r+0x11ca>
 800f8a2:	9b04      	ldr	r3, [sp, #16]
 800f8a4:	2b01      	cmp	r3, #1
 800f8a6:	dde1      	ble.n	800f86c <_svfprintf_r+0x120c>
 800f8a8:	4f57      	ldr	r7, [pc, #348]	@ (800fa08 <_svfprintf_r+0x13a8>)
 800f8aa:	f04f 0810 	mov.w	r8, #16
 800f8ae:	2c10      	cmp	r4, #16
 800f8b0:	f106 0108 	add.w	r1, r6, #8
 800f8b4:	6037      	str	r7, [r6, #0]
 800f8b6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800f8ba:	f103 0301 	add.w	r3, r3, #1
 800f8be:	dc07      	bgt.n	800f8d0 <_svfprintf_r+0x1270>
 800f8c0:	6074      	str	r4, [r6, #4]
 800f8c2:	2b07      	cmp	r3, #7
 800f8c4:	4414      	add	r4, r2
 800f8c6:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 800f8ca:	dcc7      	bgt.n	800f85c <_svfprintf_r+0x11fc>
 800f8cc:	460e      	mov	r6, r1
 800f8ce:	e7cd      	b.n	800f86c <_svfprintf_r+0x120c>
 800f8d0:	3210      	adds	r2, #16
 800f8d2:	2b07      	cmp	r3, #7
 800f8d4:	f8c6 8004 	str.w	r8, [r6, #4]
 800f8d8:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800f8dc:	dd06      	ble.n	800f8ec <_svfprintf_r+0x128c>
 800f8de:	aa26      	add	r2, sp, #152	@ 0x98
 800f8e0:	4659      	mov	r1, fp
 800f8e2:	9803      	ldr	r0, [sp, #12]
 800f8e4:	f003 ff18 	bl	8013718 <__ssprint_r>
 800f8e8:	bb78      	cbnz	r0, 800f94a <_svfprintf_r+0x12ea>
 800f8ea:	a929      	add	r1, sp, #164	@ 0xa4
 800f8ec:	3c10      	subs	r4, #16
 800f8ee:	460e      	mov	r6, r1
 800f8f0:	e7dd      	b.n	800f8ae <_svfprintf_r+0x124e>
 800f8f2:	2101      	movs	r1, #1
 800f8f4:	2a07      	cmp	r2, #7
 800f8f6:	f8c4 9000 	str.w	r9, [r4]
 800f8fa:	6061      	str	r1, [r4, #4]
 800f8fc:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800f900:	ddb4      	ble.n	800f86c <_svfprintf_r+0x120c>
 800f902:	e7ab      	b.n	800f85c <_svfprintf_r+0x11fc>
 800f904:	3608      	adds	r6, #8
 800f906:	e7b1      	b.n	800f86c <_svfprintf_r+0x120c>
 800f908:	460c      	mov	r4, r1
 800f90a:	f7ff baae 	b.w	800ee6a <_svfprintf_r+0x80a>
 800f90e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f910:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f912:	1a9d      	subs	r5, r3, r2
 800f914:	2d00      	cmp	r5, #0
 800f916:	f77f aaab 	ble.w	800ee70 <_svfprintf_r+0x810>
 800f91a:	4e3c      	ldr	r6, [pc, #240]	@ (800fa0c <_svfprintf_r+0x13ac>)
 800f91c:	2710      	movs	r7, #16
 800f91e:	2d10      	cmp	r5, #16
 800f920:	6026      	str	r6, [r4, #0]
 800f922:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800f926:	f103 0301 	add.w	r3, r3, #1
 800f92a:	dc18      	bgt.n	800f95e <_svfprintf_r+0x12fe>
 800f92c:	442a      	add	r2, r5
 800f92e:	2b07      	cmp	r3, #7
 800f930:	6065      	str	r5, [r4, #4]
 800f932:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800f936:	f77f aa9b 	ble.w	800ee70 <_svfprintf_r+0x810>
 800f93a:	aa26      	add	r2, sp, #152	@ 0x98
 800f93c:	4659      	mov	r1, fp
 800f93e:	9803      	ldr	r0, [sp, #12]
 800f940:	f003 feea 	bl	8013718 <__ssprint_r>
 800f944:	2800      	cmp	r0, #0
 800f946:	f43f aa93 	beq.w	800ee70 <_svfprintf_r+0x810>
 800f94a:	f1ba 0f00 	cmp.w	sl, #0
 800f94e:	f43f a89f 	beq.w	800ea90 <_svfprintf_r+0x430>
 800f952:	4651      	mov	r1, sl
 800f954:	9803      	ldr	r0, [sp, #12]
 800f956:	f7fe fdc3 	bl	800e4e0 <_free_r>
 800f95a:	f7ff b899 	b.w	800ea90 <_svfprintf_r+0x430>
 800f95e:	3210      	adds	r2, #16
 800f960:	2b07      	cmp	r3, #7
 800f962:	6067      	str	r7, [r4, #4]
 800f964:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800f968:	dc02      	bgt.n	800f970 <_svfprintf_r+0x1310>
 800f96a:	3408      	adds	r4, #8
 800f96c:	3d10      	subs	r5, #16
 800f96e:	e7d6      	b.n	800f91e <_svfprintf_r+0x12be>
 800f970:	aa26      	add	r2, sp, #152	@ 0x98
 800f972:	4659      	mov	r1, fp
 800f974:	9803      	ldr	r0, [sp, #12]
 800f976:	f003 fecf 	bl	8013718 <__ssprint_r>
 800f97a:	2800      	cmp	r0, #0
 800f97c:	d1e5      	bne.n	800f94a <_svfprintf_r+0x12ea>
 800f97e:	ac29      	add	r4, sp, #164	@ 0xa4
 800f980:	e7f4      	b.n	800f96c <_svfprintf_r+0x130c>
 800f982:	4651      	mov	r1, sl
 800f984:	9803      	ldr	r0, [sp, #12]
 800f986:	f7fe fdab 	bl	800e4e0 <_free_r>
 800f98a:	f7ff ba89 	b.w	800eea0 <_svfprintf_r+0x840>
 800f98e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f990:	2b00      	cmp	r3, #0
 800f992:	f43f a87d 	beq.w	800ea90 <_svfprintf_r+0x430>
 800f996:	aa26      	add	r2, sp, #152	@ 0x98
 800f998:	4659      	mov	r1, fp
 800f99a:	9803      	ldr	r0, [sp, #12]
 800f99c:	f003 febc 	bl	8013718 <__ssprint_r>
 800f9a0:	f7ff b876 	b.w	800ea90 <_svfprintf_r+0x430>
 800f9a4:	ea56 0207 	orrs.w	r2, r6, r7
 800f9a8:	9508      	str	r5, [sp, #32]
 800f9aa:	f43f ab7a 	beq.w	800f0a2 <_svfprintf_r+0xa42>
 800f9ae:	2b01      	cmp	r3, #1
 800f9b0:	f43f abfb 	beq.w	800f1aa <_svfprintf_r+0xb4a>
 800f9b4:	2b02      	cmp	r3, #2
 800f9b6:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800f9ba:	f43f ac3f 	beq.w	800f23c <_svfprintf_r+0xbdc>
 800f9be:	f006 0307 	and.w	r3, r6, #7
 800f9c2:	08f6      	lsrs	r6, r6, #3
 800f9c4:	464a      	mov	r2, r9
 800f9c6:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800f9ca:	3330      	adds	r3, #48	@ 0x30
 800f9cc:	08ff      	lsrs	r7, r7, #3
 800f9ce:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800f9d2:	ea56 0107 	orrs.w	r1, r6, r7
 800f9d6:	d1f2      	bne.n	800f9be <_svfprintf_r+0x135e>
 800f9d8:	9908      	ldr	r1, [sp, #32]
 800f9da:	07c8      	lsls	r0, r1, #31
 800f9dc:	d506      	bpl.n	800f9ec <_svfprintf_r+0x138c>
 800f9de:	2b30      	cmp	r3, #48	@ 0x30
 800f9e0:	d004      	beq.n	800f9ec <_svfprintf_r+0x138c>
 800f9e2:	2330      	movs	r3, #48	@ 0x30
 800f9e4:	f809 3c01 	strb.w	r3, [r9, #-1]
 800f9e8:	f1a2 0902 	sub.w	r9, r2, #2
 800f9ec:	ab52      	add	r3, sp, #328	@ 0x148
 800f9ee:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 800f9f2:	9d08      	ldr	r5, [sp, #32]
 800f9f4:	f04f 0a00 	mov.w	sl, #0
 800f9f8:	eba3 0809 	sub.w	r8, r3, r9
 800f9fc:	4657      	mov	r7, sl
 800f9fe:	4656      	mov	r6, sl
 800fa00:	f8cd a020 	str.w	sl, [sp, #32]
 800fa04:	f7ff b97d 	b.w	800ed02 <_svfprintf_r+0x6a2>
 800fa08:	0801496d 	.word	0x0801496d
 800fa0c:	0801497d 	.word	0x0801497d

0800fa10 <_vfprintf_r>:
 800fa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa14:	b0d3      	sub	sp, #332	@ 0x14c
 800fa16:	468b      	mov	fp, r1
 800fa18:	4690      	mov	r8, r2
 800fa1a:	461c      	mov	r4, r3
 800fa1c:	461e      	mov	r6, r3
 800fa1e:	9003      	str	r0, [sp, #12]
 800fa20:	f002 fa82 	bl	8011f28 <_localeconv_r>
 800fa24:	6803      	ldr	r3, [r0, #0]
 800fa26:	4618      	mov	r0, r3
 800fa28:	9316      	str	r3, [sp, #88]	@ 0x58
 800fa2a:	f7f0 fc2f 	bl	800028c <strlen>
 800fa2e:	9b03      	ldr	r3, [sp, #12]
 800fa30:	900d      	str	r0, [sp, #52]	@ 0x34
 800fa32:	b123      	cbz	r3, 800fa3e <_vfprintf_r+0x2e>
 800fa34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa36:	b913      	cbnz	r3, 800fa3e <_vfprintf_r+0x2e>
 800fa38:	9803      	ldr	r0, [sp, #12]
 800fa3a:	f7fe faa1 	bl	800df80 <__sinit>
 800fa3e:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 800fa42:	07da      	lsls	r2, r3, #31
 800fa44:	d407      	bmi.n	800fa56 <_vfprintf_r+0x46>
 800fa46:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800fa4a:	059b      	lsls	r3, r3, #22
 800fa4c:	d403      	bmi.n	800fa56 <_vfprintf_r+0x46>
 800fa4e:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800fa52:	f7fe fcc3 	bl	800e3dc <__retarget_lock_acquire_recursive>
 800fa56:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 800fa5a:	049f      	lsls	r7, r3, #18
 800fa5c:	d409      	bmi.n	800fa72 <_vfprintf_r+0x62>
 800fa5e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800fa62:	f8ab 300c 	strh.w	r3, [fp, #12]
 800fa66:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 800fa6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fa6e:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 800fa72:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800fa76:	071d      	lsls	r5, r3, #28
 800fa78:	d502      	bpl.n	800fa80 <_vfprintf_r+0x70>
 800fa7a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800fa7e:	b9c3      	cbnz	r3, 800fab2 <_vfprintf_r+0xa2>
 800fa80:	4659      	mov	r1, fp
 800fa82:	9803      	ldr	r0, [sp, #12]
 800fa84:	f002 f976 	bl	8011d74 <__swsetup_r>
 800fa88:	b198      	cbz	r0, 800fab2 <_vfprintf_r+0xa2>
 800fa8a:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 800fa8e:	07d8      	lsls	r0, r3, #31
 800fa90:	d506      	bpl.n	800faa0 <_vfprintf_r+0x90>
 800fa92:	f04f 33ff 	mov.w	r3, #4294967295
 800fa96:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fa98:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800fa9a:	b053      	add	sp, #332	@ 0x14c
 800fa9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faa0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800faa4:	0599      	lsls	r1, r3, #22
 800faa6:	d4f4      	bmi.n	800fa92 <_vfprintf_r+0x82>
 800faa8:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800faac:	f7fe fc97 	bl	800e3de <__retarget_lock_release_recursive>
 800fab0:	e7ef      	b.n	800fa92 <_vfprintf_r+0x82>
 800fab2:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 800fab6:	f003 021a 	and.w	r2, r3, #26
 800faba:	2a0a      	cmp	r2, #10
 800fabc:	d116      	bne.n	800faec <_vfprintf_r+0xdc>
 800fabe:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 800fac2:	2a00      	cmp	r2, #0
 800fac4:	db12      	blt.n	800faec <_vfprintf_r+0xdc>
 800fac6:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 800faca:	07d2      	lsls	r2, r2, #31
 800facc:	d405      	bmi.n	800fada <_vfprintf_r+0xca>
 800face:	059b      	lsls	r3, r3, #22
 800fad0:	d403      	bmi.n	800fada <_vfprintf_r+0xca>
 800fad2:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800fad6:	f7fe fc82 	bl	800e3de <__retarget_lock_release_recursive>
 800fada:	4623      	mov	r3, r4
 800fadc:	4642      	mov	r2, r8
 800fade:	4659      	mov	r1, fp
 800fae0:	9803      	ldr	r0, [sp, #12]
 800fae2:	b053      	add	sp, #332	@ 0x14c
 800fae4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae8:	f001 b9ba 	b.w	8010e60 <__sbprintf>
 800faec:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 800fd38 <_vfprintf_r+0x328>
 800faf0:	2300      	movs	r3, #0
 800faf2:	ac29      	add	r4, sp, #164	@ 0xa4
 800faf4:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 800faf8:	9426      	str	r4, [sp, #152]	@ 0x98
 800fafa:	9304      	str	r3, [sp, #16]
 800fafc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fafe:	9312      	str	r3, [sp, #72]	@ 0x48
 800fb00:	9317      	str	r3, [sp, #92]	@ 0x5c
 800fb02:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fb04:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800fb08:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 800fb0c:	4643      	mov	r3, r8
 800fb0e:	461d      	mov	r5, r3
 800fb10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb14:	b10a      	cbz	r2, 800fb1a <_vfprintf_r+0x10a>
 800fb16:	2a25      	cmp	r2, #37	@ 0x25
 800fb18:	d1f9      	bne.n	800fb0e <_vfprintf_r+0xfe>
 800fb1a:	ebb5 0708 	subs.w	r7, r5, r8
 800fb1e:	d00d      	beq.n	800fb3c <_vfprintf_r+0x12c>
 800fb20:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800fb22:	443b      	add	r3, r7
 800fb24:	9328      	str	r3, [sp, #160]	@ 0xa0
 800fb26:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800fb28:	3301      	adds	r3, #1
 800fb2a:	2b07      	cmp	r3, #7
 800fb2c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800fb2e:	e9c4 8700 	strd	r8, r7, [r4]
 800fb32:	dc75      	bgt.n	800fc20 <_vfprintf_r+0x210>
 800fb34:	3408      	adds	r4, #8
 800fb36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb38:	443b      	add	r3, r7
 800fb3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fb3c:	782b      	ldrb	r3, [r5, #0]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	f001 814b 	beq.w	8010dda <_vfprintf_r+0x13ca>
 800fb44:	2200      	movs	r2, #0
 800fb46:	1c6b      	adds	r3, r5, #1
 800fb48:	f04f 39ff 	mov.w	r9, #4294967295
 800fb4c:	4615      	mov	r5, r2
 800fb4e:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800fb52:	920e      	str	r2, [sp, #56]	@ 0x38
 800fb54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb58:	9206      	str	r2, [sp, #24]
 800fb5a:	930c      	str	r3, [sp, #48]	@ 0x30
 800fb5c:	9b06      	ldr	r3, [sp, #24]
 800fb5e:	3b20      	subs	r3, #32
 800fb60:	2b5a      	cmp	r3, #90	@ 0x5a
 800fb62:	f200 85a6 	bhi.w	80106b2 <_vfprintf_r+0xca2>
 800fb66:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fb6a:	009d      	.short	0x009d
 800fb6c:	05a405a4 	.word	0x05a405a4
 800fb70:	05a400a5 	.word	0x05a400a5
 800fb74:	05a405a4 	.word	0x05a405a4
 800fb78:	05a40085 	.word	0x05a40085
 800fb7c:	00a805a4 	.word	0x00a805a4
 800fb80:	05a400b2 	.word	0x05a400b2
 800fb84:	00b400af 	.word	0x00b400af
 800fb88:	00ce05a4 	.word	0x00ce05a4
 800fb8c:	00d100d1 	.word	0x00d100d1
 800fb90:	00d100d1 	.word	0x00d100d1
 800fb94:	00d100d1 	.word	0x00d100d1
 800fb98:	00d100d1 	.word	0x00d100d1
 800fb9c:	05a400d1 	.word	0x05a400d1
 800fba0:	05a405a4 	.word	0x05a405a4
 800fba4:	05a405a4 	.word	0x05a405a4
 800fba8:	05a405a4 	.word	0x05a405a4
 800fbac:	05a40146 	.word	0x05a40146
 800fbb0:	011a0107 	.word	0x011a0107
 800fbb4:	01460146 	.word	0x01460146
 800fbb8:	05a40146 	.word	0x05a40146
 800fbbc:	05a405a4 	.word	0x05a405a4
 800fbc0:	00e205a4 	.word	0x00e205a4
 800fbc4:	05a405a4 	.word	0x05a405a4
 800fbc8:	05a4049f 	.word	0x05a4049f
 800fbcc:	05a405a4 	.word	0x05a405a4
 800fbd0:	05a404e9 	.word	0x05a404e9
 800fbd4:	05a4050a 	.word	0x05a4050a
 800fbd8:	052c05a4 	.word	0x052c05a4
 800fbdc:	05a405a4 	.word	0x05a405a4
 800fbe0:	05a405a4 	.word	0x05a405a4
 800fbe4:	05a405a4 	.word	0x05a405a4
 800fbe8:	05a405a4 	.word	0x05a405a4
 800fbec:	05a40146 	.word	0x05a40146
 800fbf0:	011c0107 	.word	0x011c0107
 800fbf4:	01460146 	.word	0x01460146
 800fbf8:	00ed0146 	.word	0x00ed0146
 800fbfc:	0101011c 	.word	0x0101011c
 800fc00:	00fa05a4 	.word	0x00fa05a4
 800fc04:	048305a4 	.word	0x048305a4
 800fc08:	04d804a1 	.word	0x04d804a1
 800fc0c:	05a40101 	.word	0x05a40101
 800fc10:	009b04e9 	.word	0x009b04e9
 800fc14:	05a4050c 	.word	0x05a4050c
 800fc18:	006505a4 	.word	0x006505a4
 800fc1c:	009b05a4 	.word	0x009b05a4
 800fc20:	aa26      	add	r2, sp, #152	@ 0x98
 800fc22:	4659      	mov	r1, fp
 800fc24:	9803      	ldr	r0, [sp, #12]
 800fc26:	f001 f95b 	bl	8010ee0 <__sprint_r>
 800fc2a:	2800      	cmp	r0, #0
 800fc2c:	f040 814d 	bne.w	800feca <_vfprintf_r+0x4ba>
 800fc30:	ac29      	add	r4, sp, #164	@ 0xa4
 800fc32:	e780      	b.n	800fb36 <_vfprintf_r+0x126>
 800fc34:	4b42      	ldr	r3, [pc, #264]	@ (800fd40 <_vfprintf_r+0x330>)
 800fc36:	9319      	str	r3, [sp, #100]	@ 0x64
 800fc38:	f015 0320 	ands.w	r3, r5, #32
 800fc3c:	f000 84c4 	beq.w	80105c8 <_vfprintf_r+0xbb8>
 800fc40:	3607      	adds	r6, #7
 800fc42:	f026 0307 	bic.w	r3, r6, #7
 800fc46:	461a      	mov	r2, r3
 800fc48:	685f      	ldr	r7, [r3, #4]
 800fc4a:	f852 6b08 	ldr.w	r6, [r2], #8
 800fc4e:	9207      	str	r2, [sp, #28]
 800fc50:	07eb      	lsls	r3, r5, #31
 800fc52:	d50a      	bpl.n	800fc6a <_vfprintf_r+0x25a>
 800fc54:	ea56 0307 	orrs.w	r3, r6, r7
 800fc58:	d007      	beq.n	800fc6a <_vfprintf_r+0x25a>
 800fc5a:	2330      	movs	r3, #48	@ 0x30
 800fc5c:	f045 0502 	orr.w	r5, r5, #2
 800fc60:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 800fc64:	9b06      	ldr	r3, [sp, #24]
 800fc66:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800fc6a:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800fc6e:	2302      	movs	r3, #2
 800fc70:	f000 bc2a 	b.w	80104c8 <_vfprintf_r+0xab8>
 800fc74:	9803      	ldr	r0, [sp, #12]
 800fc76:	f002 f957 	bl	8011f28 <_localeconv_r>
 800fc7a:	6843      	ldr	r3, [r0, #4]
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	9317      	str	r3, [sp, #92]	@ 0x5c
 800fc80:	f7f0 fb04 	bl	800028c <strlen>
 800fc84:	9012      	str	r0, [sp, #72]	@ 0x48
 800fc86:	9803      	ldr	r0, [sp, #12]
 800fc88:	f002 f94e 	bl	8011f28 <_localeconv_r>
 800fc8c:	6883      	ldr	r3, [r0, #8]
 800fc8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc90:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fc92:	b12b      	cbz	r3, 800fca0 <_vfprintf_r+0x290>
 800fc94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc96:	b11b      	cbz	r3, 800fca0 <_vfprintf_r+0x290>
 800fc98:	781b      	ldrb	r3, [r3, #0]
 800fc9a:	b10b      	cbz	r3, 800fca0 <_vfprintf_r+0x290>
 800fc9c:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 800fca0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fca2:	e757      	b.n	800fb54 <_vfprintf_r+0x144>
 800fca4:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d1f9      	bne.n	800fca0 <_vfprintf_r+0x290>
 800fcac:	2320      	movs	r3, #32
 800fcae:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800fcb2:	e7f5      	b.n	800fca0 <_vfprintf_r+0x290>
 800fcb4:	f045 0501 	orr.w	r5, r5, #1
 800fcb8:	e7f2      	b.n	800fca0 <_vfprintf_r+0x290>
 800fcba:	f856 3b04 	ldr.w	r3, [r6], #4
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	930e      	str	r3, [sp, #56]	@ 0x38
 800fcc2:	daed      	bge.n	800fca0 <_vfprintf_r+0x290>
 800fcc4:	425b      	negs	r3, r3
 800fcc6:	930e      	str	r3, [sp, #56]	@ 0x38
 800fcc8:	f045 0504 	orr.w	r5, r5, #4
 800fccc:	e7e8      	b.n	800fca0 <_vfprintf_r+0x290>
 800fcce:	232b      	movs	r3, #43	@ 0x2b
 800fcd0:	e7ed      	b.n	800fcae <_vfprintf_r+0x29e>
 800fcd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fcd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcd8:	2a2a      	cmp	r2, #42	@ 0x2a
 800fcda:	9206      	str	r2, [sp, #24]
 800fcdc:	d10f      	bne.n	800fcfe <_vfprintf_r+0x2ee>
 800fcde:	f856 2b04 	ldr.w	r2, [r6], #4
 800fce2:	930c      	str	r3, [sp, #48]	@ 0x30
 800fce4:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 800fce8:	e7da      	b.n	800fca0 <_vfprintf_r+0x290>
 800fcea:	fb01 2909 	mla	r9, r1, r9, r2
 800fcee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcf2:	9206      	str	r2, [sp, #24]
 800fcf4:	9a06      	ldr	r2, [sp, #24]
 800fcf6:	3a30      	subs	r2, #48	@ 0x30
 800fcf8:	2a09      	cmp	r2, #9
 800fcfa:	d9f6      	bls.n	800fcea <_vfprintf_r+0x2da>
 800fcfc:	e72d      	b.n	800fb5a <_vfprintf_r+0x14a>
 800fcfe:	f04f 0900 	mov.w	r9, #0
 800fd02:	210a      	movs	r1, #10
 800fd04:	e7f6      	b.n	800fcf4 <_vfprintf_r+0x2e4>
 800fd06:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 800fd0a:	e7c9      	b.n	800fca0 <_vfprintf_r+0x290>
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd10:	210a      	movs	r1, #10
 800fd12:	920e      	str	r2, [sp, #56]	@ 0x38
 800fd14:	9a06      	ldr	r2, [sp, #24]
 800fd16:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800fd18:	3a30      	subs	r2, #48	@ 0x30
 800fd1a:	fb01 2200 	mla	r2, r1, r0, r2
 800fd1e:	920e      	str	r2, [sp, #56]	@ 0x38
 800fd20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd24:	9206      	str	r2, [sp, #24]
 800fd26:	3a30      	subs	r2, #48	@ 0x30
 800fd28:	2a09      	cmp	r2, #9
 800fd2a:	d9f3      	bls.n	800fd14 <_vfprintf_r+0x304>
 800fd2c:	e715      	b.n	800fb5a <_vfprintf_r+0x14a>
 800fd2e:	f045 0508 	orr.w	r5, r5, #8
 800fd32:	e7b5      	b.n	800fca0 <_vfprintf_r+0x290>
 800fd34:	f3af 8000 	nop.w
	...
 800fd40:	08014949 	.word	0x08014949
 800fd44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd46:	781b      	ldrb	r3, [r3, #0]
 800fd48:	2b68      	cmp	r3, #104	@ 0x68
 800fd4a:	bf05      	ittet	eq
 800fd4c:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 800fd4e:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 800fd52:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 800fd56:	3301      	addeq	r3, #1
 800fd58:	bf08      	it	eq
 800fd5a:	930c      	streq	r3, [sp, #48]	@ 0x30
 800fd5c:	e7a0      	b.n	800fca0 <_vfprintf_r+0x290>
 800fd5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	2b6c      	cmp	r3, #108	@ 0x6c
 800fd64:	d105      	bne.n	800fd72 <_vfprintf_r+0x362>
 800fd66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd68:	3301      	adds	r3, #1
 800fd6a:	930c      	str	r3, [sp, #48]	@ 0x30
 800fd6c:	f045 0520 	orr.w	r5, r5, #32
 800fd70:	e796      	b.n	800fca0 <_vfprintf_r+0x290>
 800fd72:	f045 0510 	orr.w	r5, r5, #16
 800fd76:	e793      	b.n	800fca0 <_vfprintf_r+0x290>
 800fd78:	4632      	mov	r2, r6
 800fd7a:	f852 3b04 	ldr.w	r3, [r2], #4
 800fd7e:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800fd82:	2300      	movs	r3, #0
 800fd84:	9207      	str	r2, [sp, #28]
 800fd86:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800fd8a:	469a      	mov	sl, r3
 800fd8c:	f04f 0901 	mov.w	r9, #1
 800fd90:	461f      	mov	r7, r3
 800fd92:	461e      	mov	r6, r3
 800fd94:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 800fd98:	9310      	str	r3, [sp, #64]	@ 0x40
 800fd9a:	9308      	str	r3, [sp, #32]
 800fd9c:	e1d7      	b.n	801014e <_vfprintf_r+0x73e>
 800fd9e:	f045 0510 	orr.w	r5, r5, #16
 800fda2:	06af      	lsls	r7, r5, #26
 800fda4:	d512      	bpl.n	800fdcc <_vfprintf_r+0x3bc>
 800fda6:	3607      	adds	r6, #7
 800fda8:	f026 0307 	bic.w	r3, r6, #7
 800fdac:	461a      	mov	r2, r3
 800fdae:	685f      	ldr	r7, [r3, #4]
 800fdb0:	f852 6b08 	ldr.w	r6, [r2], #8
 800fdb4:	9207      	str	r2, [sp, #28]
 800fdb6:	2f00      	cmp	r7, #0
 800fdb8:	da06      	bge.n	800fdc8 <_vfprintf_r+0x3b8>
 800fdba:	4276      	negs	r6, r6
 800fdbc:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800fdc0:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800fdc4:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800fdc8:	2301      	movs	r3, #1
 800fdca:	e380      	b.n	80104ce <_vfprintf_r+0xabe>
 800fdcc:	4633      	mov	r3, r6
 800fdce:	06ee      	lsls	r6, r5, #27
 800fdd0:	f853 7b04 	ldr.w	r7, [r3], #4
 800fdd4:	9307      	str	r3, [sp, #28]
 800fdd6:	d502      	bpl.n	800fdde <_vfprintf_r+0x3ce>
 800fdd8:	463e      	mov	r6, r7
 800fdda:	17ff      	asrs	r7, r7, #31
 800fddc:	e7eb      	b.n	800fdb6 <_vfprintf_r+0x3a6>
 800fdde:	0668      	lsls	r0, r5, #25
 800fde0:	d503      	bpl.n	800fdea <_vfprintf_r+0x3da>
 800fde2:	b23e      	sxth	r6, r7
 800fde4:	f347 37c0 	sbfx	r7, r7, #15, #1
 800fde8:	e7e5      	b.n	800fdb6 <_vfprintf_r+0x3a6>
 800fdea:	05a9      	lsls	r1, r5, #22
 800fdec:	d5f4      	bpl.n	800fdd8 <_vfprintf_r+0x3c8>
 800fdee:	b27e      	sxtb	r6, r7
 800fdf0:	f347 17c0 	sbfx	r7, r7, #7, #1
 800fdf4:	e7df      	b.n	800fdb6 <_vfprintf_r+0x3a6>
 800fdf6:	3607      	adds	r6, #7
 800fdf8:	f04f 32ff 	mov.w	r2, #4294967295
 800fdfc:	f026 0307 	bic.w	r3, r6, #7
 800fe00:	ecb3 7b02 	vldmia	r3!, {d7}
 800fe04:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800fe08:	9307      	str	r3, [sp, #28]
 800fe0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe0c:	931a      	str	r3, [sp, #104]	@ 0x68
 800fe0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fe10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fe14:	931b      	str	r3, [sp, #108]	@ 0x6c
 800fe16:	4b85      	ldr	r3, [pc, #532]	@ (801002c <_vfprintf_r+0x61c>)
 800fe18:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800fe1c:	f7f0 fe94 	bl	8000b48 <__aeabi_dcmpun>
 800fe20:	bb10      	cbnz	r0, 800fe68 <_vfprintf_r+0x458>
 800fe22:	f04f 32ff 	mov.w	r2, #4294967295
 800fe26:	4b81      	ldr	r3, [pc, #516]	@ (801002c <_vfprintf_r+0x61c>)
 800fe28:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800fe2c:	f7f0 fe6e 	bl	8000b0c <__aeabi_dcmple>
 800fe30:	b9d0      	cbnz	r0, 800fe68 <_vfprintf_r+0x458>
 800fe32:	2200      	movs	r2, #0
 800fe34:	2300      	movs	r3, #0
 800fe36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fe3a:	f7f0 fe5d 	bl	8000af8 <__aeabi_dcmplt>
 800fe3e:	b110      	cbz	r0, 800fe46 <_vfprintf_r+0x436>
 800fe40:	232d      	movs	r3, #45	@ 0x2d
 800fe42:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800fe46:	4a7a      	ldr	r2, [pc, #488]	@ (8010030 <_vfprintf_r+0x620>)
 800fe48:	4b7a      	ldr	r3, [pc, #488]	@ (8010034 <_vfprintf_r+0x624>)
 800fe4a:	9906      	ldr	r1, [sp, #24]
 800fe4c:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 800fe50:	f04f 0a00 	mov.w	sl, #0
 800fe54:	f04f 0903 	mov.w	r9, #3
 800fe58:	2947      	cmp	r1, #71	@ 0x47
 800fe5a:	bfd4      	ite	le
 800fe5c:	4690      	movle	r8, r2
 800fe5e:	4698      	movgt	r8, r3
 800fe60:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 800fe64:	f000 bff4 	b.w	8010e50 <_vfprintf_r+0x1440>
 800fe68:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800fe6c:	4610      	mov	r0, r2
 800fe6e:	4619      	mov	r1, r3
 800fe70:	f7f0 fe6a 	bl	8000b48 <__aeabi_dcmpun>
 800fe74:	4682      	mov	sl, r0
 800fe76:	b140      	cbz	r0, 800fe8a <_vfprintf_r+0x47a>
 800fe78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fe7a:	4a6f      	ldr	r2, [pc, #444]	@ (8010038 <_vfprintf_r+0x628>)
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	bfbc      	itt	lt
 800fe80:	232d      	movlt	r3, #45	@ 0x2d
 800fe82:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 800fe86:	4b6d      	ldr	r3, [pc, #436]	@ (801003c <_vfprintf_r+0x62c>)
 800fe88:	e7df      	b.n	800fe4a <_vfprintf_r+0x43a>
 800fe8a:	9b06      	ldr	r3, [sp, #24]
 800fe8c:	2b61      	cmp	r3, #97	@ 0x61
 800fe8e:	d02e      	beq.n	800feee <_vfprintf_r+0x4de>
 800fe90:	2b41      	cmp	r3, #65	@ 0x41
 800fe92:	d12e      	bne.n	800fef2 <_vfprintf_r+0x4e2>
 800fe94:	2358      	movs	r3, #88	@ 0x58
 800fe96:	2230      	movs	r2, #48	@ 0x30
 800fe98:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 800fe9c:	f045 0502 	orr.w	r5, r5, #2
 800fea0:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800fea4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 800fea8:	f340 80ae 	ble.w	8010008 <_vfprintf_r+0x5f8>
 800feac:	f109 0101 	add.w	r1, r9, #1
 800feb0:	9803      	ldr	r0, [sp, #12]
 800feb2:	f7fd fd0f 	bl	800d8d4 <_malloc_r>
 800feb6:	4680      	mov	r8, r0
 800feb8:	2800      	cmp	r0, #0
 800feba:	f040 80aa 	bne.w	8010012 <_vfprintf_r+0x602>
 800febe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800fec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fec6:	f8ab 300c 	strh.w	r3, [fp, #12]
 800feca:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 800fece:	07d9      	lsls	r1, r3, #31
 800fed0:	d407      	bmi.n	800fee2 <_vfprintf_r+0x4d2>
 800fed2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800fed6:	059a      	lsls	r2, r3, #22
 800fed8:	d403      	bmi.n	800fee2 <_vfprintf_r+0x4d2>
 800feda:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800fede:	f7fe fa7e 	bl	800e3de <__retarget_lock_release_recursive>
 800fee2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800fee6:	065b      	lsls	r3, r3, #25
 800fee8:	f57f add6 	bpl.w	800fa98 <_vfprintf_r+0x88>
 800feec:	e5d1      	b.n	800fa92 <_vfprintf_r+0x82>
 800feee:	2378      	movs	r3, #120	@ 0x78
 800fef0:	e7d1      	b.n	800fe96 <_vfprintf_r+0x486>
 800fef2:	f1b9 3fff 	cmp.w	r9, #4294967295
 800fef6:	f000 808e 	beq.w	8010016 <_vfprintf_r+0x606>
 800fefa:	9b06      	ldr	r3, [sp, #24]
 800fefc:	f023 0320 	bic.w	r3, r3, #32
 800ff00:	2b47      	cmp	r3, #71	@ 0x47
 800ff02:	d105      	bne.n	800ff10 <_vfprintf_r+0x500>
 800ff04:	f1b9 0f00 	cmp.w	r9, #0
 800ff08:	d102      	bne.n	800ff10 <_vfprintf_r+0x500>
 800ff0a:	46ca      	mov	sl, r9
 800ff0c:	f04f 0901 	mov.w	r9, #1
 800ff10:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800ff14:	9311      	str	r3, [sp, #68]	@ 0x44
 800ff16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	da7f      	bge.n	801001c <_vfprintf_r+0x60c>
 800ff1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff1e:	9314      	str	r3, [sp, #80]	@ 0x50
 800ff20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff22:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ff26:	9315      	str	r3, [sp, #84]	@ 0x54
 800ff28:	232d      	movs	r3, #45	@ 0x2d
 800ff2a:	931c      	str	r3, [sp, #112]	@ 0x70
 800ff2c:	9b06      	ldr	r3, [sp, #24]
 800ff2e:	f023 0320 	bic.w	r3, r3, #32
 800ff32:	2b41      	cmp	r3, #65	@ 0x41
 800ff34:	9308      	str	r3, [sp, #32]
 800ff36:	f040 81e4 	bne.w	8010302 <_vfprintf_r+0x8f2>
 800ff3a:	a820      	add	r0, sp, #128	@ 0x80
 800ff3c:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800ff40:	f002 f818 	bl	8011f74 <frexp>
 800ff44:	2200      	movs	r2, #0
 800ff46:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800ff4a:	ec51 0b10 	vmov	r0, r1, d0
 800ff4e:	f7f0 fb61 	bl	8000614 <__aeabi_dmul>
 800ff52:	4602      	mov	r2, r0
 800ff54:	460b      	mov	r3, r1
 800ff56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	f7f0 fdc1 	bl	8000ae4 <__aeabi_dcmpeq>
 800ff62:	b108      	cbz	r0, 800ff68 <_vfprintf_r+0x558>
 800ff64:	2301      	movs	r3, #1
 800ff66:	9320      	str	r3, [sp, #128]	@ 0x80
 800ff68:	4a35      	ldr	r2, [pc, #212]	@ (8010040 <_vfprintf_r+0x630>)
 800ff6a:	f109 37ff 	add.w	r7, r9, #4294967295
 800ff6e:	4b35      	ldr	r3, [pc, #212]	@ (8010044 <_vfprintf_r+0x634>)
 800ff70:	4646      	mov	r6, r8
 800ff72:	9906      	ldr	r1, [sp, #24]
 800ff74:	2961      	cmp	r1, #97	@ 0x61
 800ff76:	bf18      	it	ne
 800ff78:	461a      	movne	r2, r3
 800ff7a:	9210      	str	r2, [sp, #64]	@ 0x40
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	4b32      	ldr	r3, [pc, #200]	@ (8010048 <_vfprintf_r+0x638>)
 800ff80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff84:	f7f0 fb46 	bl	8000614 <__aeabi_dmul>
 800ff88:	4602      	mov	r2, r0
 800ff8a:	460b      	mov	r3, r1
 800ff8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ff90:	f7f0 fdf0 	bl	8000b74 <__aeabi_d2iz>
 800ff94:	9013      	str	r0, [sp, #76]	@ 0x4c
 800ff96:	f7f0 fad3 	bl	8000540 <__aeabi_i2d>
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ffa2:	f7f0 f97f 	bl	80002a4 <__aeabi_dsub>
 800ffa6:	4602      	mov	r2, r0
 800ffa8:	460b      	mov	r3, r1
 800ffaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ffae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ffb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ffb2:	5c9b      	ldrb	r3, [r3, r2]
 800ffb4:	1c7a      	adds	r2, r7, #1
 800ffb6:	f806 3b01 	strb.w	r3, [r6], #1
 800ffba:	d006      	beq.n	800ffca <_vfprintf_r+0x5ba>
 800ffbc:	1e7b      	subs	r3, r7, #1
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	931d      	str	r3, [sp, #116]	@ 0x74
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	f7f0 fd8e 	bl	8000ae4 <__aeabi_dcmpeq>
 800ffc8:	b370      	cbz	r0, 8010028 <_vfprintf_r+0x618>
 800ffca:	2200      	movs	r2, #0
 800ffcc:	4b1f      	ldr	r3, [pc, #124]	@ (801004c <_vfprintf_r+0x63c>)
 800ffce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ffd2:	f7f0 fdaf 	bl	8000b34 <__aeabi_dcmpgt>
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	d13a      	bne.n	8010050 <_vfprintf_r+0x640>
 800ffda:	2200      	movs	r2, #0
 800ffdc:	4b1b      	ldr	r3, [pc, #108]	@ (801004c <_vfprintf_r+0x63c>)
 800ffde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ffe2:	f7f0 fd7f 	bl	8000ae4 <__aeabi_dcmpeq>
 800ffe6:	b110      	cbz	r0, 800ffee <_vfprintf_r+0x5de>
 800ffe8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ffea:	07db      	lsls	r3, r3, #31
 800ffec:	d430      	bmi.n	8010050 <_vfprintf_r+0x640>
 800ffee:	4633      	mov	r3, r6
 800fff0:	19f1      	adds	r1, r6, r7
 800fff2:	2030      	movs	r0, #48	@ 0x30
 800fff4:	1aca      	subs	r2, r1, r3
 800fff6:	2a00      	cmp	r2, #0
 800fff8:	f280 8180 	bge.w	80102fc <_vfprintf_r+0x8ec>
 800fffc:	1c7b      	adds	r3, r7, #1
 800fffe:	3701      	adds	r7, #1
 8010000:	bfb8      	it	lt
 8010002:	2300      	movlt	r3, #0
 8010004:	441e      	add	r6, r3
 8010006:	e037      	b.n	8010078 <_vfprintf_r+0x668>
 8010008:	f04f 0a00 	mov.w	sl, #0
 801000c:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8010010:	e77e      	b.n	800ff10 <_vfprintf_r+0x500>
 8010012:	4682      	mov	sl, r0
 8010014:	e77c      	b.n	800ff10 <_vfprintf_r+0x500>
 8010016:	f04f 0906 	mov.w	r9, #6
 801001a:	e779      	b.n	800ff10 <_vfprintf_r+0x500>
 801001c:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8010020:	2300      	movs	r3, #0
 8010022:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8010026:	e780      	b.n	800ff2a <_vfprintf_r+0x51a>
 8010028:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 801002a:	e7a7      	b.n	800ff7c <_vfprintf_r+0x56c>
 801002c:	7fefffff 	.word	0x7fefffff
 8010030:	08014939 	.word	0x08014939
 8010034:	0801493d 	.word	0x0801493d
 8010038:	08014941 	.word	0x08014941
 801003c:	08014945 	.word	0x08014945
 8010040:	08014949 	.word	0x08014949
 8010044:	0801495a 	.word	0x0801495a
 8010048:	40300000 	.word	0x40300000
 801004c:	3fe00000 	.word	0x3fe00000
 8010050:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010052:	2030      	movs	r0, #48	@ 0x30
 8010054:	9624      	str	r6, [sp, #144]	@ 0x90
 8010056:	7bd9      	ldrb	r1, [r3, #15]
 8010058:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801005a:	1e53      	subs	r3, r2, #1
 801005c:	9324      	str	r3, [sp, #144]	@ 0x90
 801005e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8010062:	428b      	cmp	r3, r1
 8010064:	f000 8147 	beq.w	80102f6 <_vfprintf_r+0x8e6>
 8010068:	2b39      	cmp	r3, #57	@ 0x39
 801006a:	bf0b      	itete	eq
 801006c:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 801006e:	3301      	addne	r3, #1
 8010070:	7a9b      	ldrbeq	r3, [r3, #10]
 8010072:	b2db      	uxtbne	r3, r3
 8010074:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010078:	eba6 0308 	sub.w	r3, r6, r8
 801007c:	9304      	str	r3, [sp, #16]
 801007e:	9b08      	ldr	r3, [sp, #32]
 8010080:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010082:	2b47      	cmp	r3, #71	@ 0x47
 8010084:	f040 8185 	bne.w	8010392 <_vfprintf_r+0x982>
 8010088:	1cf1      	adds	r1, r6, #3
 801008a:	db02      	blt.n	8010092 <_vfprintf_r+0x682>
 801008c:	45b1      	cmp	r9, r6
 801008e:	f280 81a3 	bge.w	80103d8 <_vfprintf_r+0x9c8>
 8010092:	9b06      	ldr	r3, [sp, #24]
 8010094:	3b02      	subs	r3, #2
 8010096:	9306      	str	r3, [sp, #24]
 8010098:	9906      	ldr	r1, [sp, #24]
 801009a:	1e73      	subs	r3, r6, #1
 801009c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80100a0:	f021 0120 	bic.w	r1, r1, #32
 80100a4:	9320      	str	r3, [sp, #128]	@ 0x80
 80100a6:	2941      	cmp	r1, #65	@ 0x41
 80100a8:	bf05      	ittet	eq
 80100aa:	320f      	addeq	r2, #15
 80100ac:	2101      	moveq	r1, #1
 80100ae:	2100      	movne	r1, #0
 80100b0:	b2d2      	uxtbeq	r2, r2
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	bfb8      	it	lt
 80100b6:	f1c6 0301 	rsblt	r3, r6, #1
 80100ba:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 80100be:	bfb4      	ite	lt
 80100c0:	222d      	movlt	r2, #45	@ 0x2d
 80100c2:	222b      	movge	r2, #43	@ 0x2b
 80100c4:	2b09      	cmp	r3, #9
 80100c6:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 80100ca:	f340 8178 	ble.w	80103be <_vfprintf_r+0x9ae>
 80100ce:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 80100d2:	270a      	movs	r7, #10
 80100d4:	4602      	mov	r2, r0
 80100d6:	3801      	subs	r0, #1
 80100d8:	fbb3 f6f7 	udiv	r6, r3, r7
 80100dc:	fb07 3116 	mls	r1, r7, r6, r3
 80100e0:	3130      	adds	r1, #48	@ 0x30
 80100e2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80100e6:	4619      	mov	r1, r3
 80100e8:	4633      	mov	r3, r6
 80100ea:	2963      	cmp	r1, #99	@ 0x63
 80100ec:	dcf2      	bgt.n	80100d4 <_vfprintf_r+0x6c4>
 80100ee:	3330      	adds	r3, #48	@ 0x30
 80100f0:	1e91      	subs	r1, r2, #2
 80100f2:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 80100f6:	f800 3c01 	strb.w	r3, [r0, #-1]
 80100fa:	460b      	mov	r3, r1
 80100fc:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8010100:	4283      	cmp	r3, r0
 8010102:	f0c0 8157 	bcc.w	80103b4 <_vfprintf_r+0x9a4>
 8010106:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 801010a:	1a9b      	subs	r3, r3, r2
 801010c:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8010110:	4281      	cmp	r1, r0
 8010112:	bf88      	it	hi
 8010114:	2300      	movhi	r3, #0
 8010116:	441a      	add	r2, r3
 8010118:	ab22      	add	r3, sp, #136	@ 0x88
 801011a:	1ad3      	subs	r3, r2, r3
 801011c:	9a04      	ldr	r2, [sp, #16]
 801011e:	2a01      	cmp	r2, #1
 8010120:	eb03 0902 	add.w	r9, r3, r2
 8010124:	9318      	str	r3, [sp, #96]	@ 0x60
 8010126:	dc01      	bgt.n	801012c <_vfprintf_r+0x71c>
 8010128:	07ea      	lsls	r2, r5, #31
 801012a:	d501      	bpl.n	8010130 <_vfprintf_r+0x720>
 801012c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801012e:	4499      	add	r9, r3
 8010130:	2700      	movs	r7, #0
 8010132:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8010136:	463e      	mov	r6, r7
 8010138:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 801013c:	9708      	str	r7, [sp, #32]
 801013e:	9311      	str	r3, [sp, #68]	@ 0x44
 8010140:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010142:	2b00      	cmp	r3, #0
 8010144:	f040 8190 	bne.w	8010468 <_vfprintf_r+0xa58>
 8010148:	2300      	movs	r3, #0
 801014a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801014c:	9310      	str	r3, [sp, #64]	@ 0x40
 801014e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010150:	454b      	cmp	r3, r9
 8010152:	bfb8      	it	lt
 8010154:	464b      	movlt	r3, r9
 8010156:	9311      	str	r3, [sp, #68]	@ 0x44
 8010158:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 801015c:	b113      	cbz	r3, 8010164 <_vfprintf_r+0x754>
 801015e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010160:	3301      	adds	r3, #1
 8010162:	9311      	str	r3, [sp, #68]	@ 0x44
 8010164:	f015 0302 	ands.w	r3, r5, #2
 8010168:	931c      	str	r3, [sp, #112]	@ 0x70
 801016a:	bf1e      	ittt	ne
 801016c:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 801016e:	3302      	addne	r3, #2
 8010170:	9311      	strne	r3, [sp, #68]	@ 0x44
 8010172:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8010176:	931d      	str	r3, [sp, #116]	@ 0x74
 8010178:	d122      	bne.n	80101c0 <_vfprintf_r+0x7b0>
 801017a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801017c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801017e:	1a9b      	subs	r3, r3, r2
 8010180:	2b00      	cmp	r3, #0
 8010182:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010184:	dd1c      	ble.n	80101c0 <_vfprintf_r+0x7b0>
 8010186:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010188:	f104 0108 	add.w	r1, r4, #8
 801018c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8010190:	2810      	cmp	r0, #16
 8010192:	489e      	ldr	r0, [pc, #632]	@ (801040c <_vfprintf_r+0x9fc>)
 8010194:	f102 0201 	add.w	r2, r2, #1
 8010198:	6020      	str	r0, [r4, #0]
 801019a:	f300 8296 	bgt.w	80106ca <_vfprintf_r+0xcba>
 801019e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80101a0:	2a07      	cmp	r2, #7
 80101a2:	4403      	add	r3, r0
 80101a4:	6060      	str	r0, [r4, #4]
 80101a6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80101aa:	f340 82a3 	ble.w	80106f4 <_vfprintf_r+0xce4>
 80101ae:	aa26      	add	r2, sp, #152	@ 0x98
 80101b0:	4659      	mov	r1, fp
 80101b2:	9803      	ldr	r0, [sp, #12]
 80101b4:	f000 fe94 	bl	8010ee0 <__sprint_r>
 80101b8:	2800      	cmp	r0, #0
 80101ba:	f040 85ec 	bne.w	8010d96 <_vfprintf_r+0x1386>
 80101be:	ac29      	add	r4, sp, #164	@ 0xa4
 80101c0:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 80101c4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80101c6:	b16a      	cbz	r2, 80101e4 <_vfprintf_r+0x7d4>
 80101c8:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 80101cc:	6022      	str	r2, [r4, #0]
 80101ce:	2201      	movs	r2, #1
 80101d0:	4413      	add	r3, r2
 80101d2:	6062      	str	r2, [r4, #4]
 80101d4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80101d6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80101d8:	4413      	add	r3, r2
 80101da:	2b07      	cmp	r3, #7
 80101dc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80101de:	f300 828b 	bgt.w	80106f8 <_vfprintf_r+0xce8>
 80101e2:	3408      	adds	r4, #8
 80101e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80101e6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80101e8:	b162      	cbz	r2, 8010204 <_vfprintf_r+0x7f4>
 80101ea:	aa1f      	add	r2, sp, #124	@ 0x7c
 80101ec:	6022      	str	r2, [r4, #0]
 80101ee:	2202      	movs	r2, #2
 80101f0:	4413      	add	r3, r2
 80101f2:	6062      	str	r2, [r4, #4]
 80101f4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80101f6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80101f8:	3301      	adds	r3, #1
 80101fa:	2b07      	cmp	r3, #7
 80101fc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80101fe:	f300 8285 	bgt.w	801070c <_vfprintf_r+0xcfc>
 8010202:	3408      	adds	r4, #8
 8010204:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010206:	2b80      	cmp	r3, #128	@ 0x80
 8010208:	d122      	bne.n	8010250 <_vfprintf_r+0x840>
 801020a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801020c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801020e:	1a9b      	subs	r3, r3, r2
 8010210:	2b00      	cmp	r3, #0
 8010212:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010214:	dd1c      	ble.n	8010250 <_vfprintf_r+0x840>
 8010216:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010218:	f104 0108 	add.w	r1, r4, #8
 801021c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8010220:	2810      	cmp	r0, #16
 8010222:	487b      	ldr	r0, [pc, #492]	@ (8010410 <_vfprintf_r+0xa00>)
 8010224:	f102 0201 	add.w	r2, r2, #1
 8010228:	6020      	str	r0, [r4, #0]
 801022a:	f300 8279 	bgt.w	8010720 <_vfprintf_r+0xd10>
 801022e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010230:	2a07      	cmp	r2, #7
 8010232:	4403      	add	r3, r0
 8010234:	6060      	str	r0, [r4, #4]
 8010236:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801023a:	f340 8286 	ble.w	801074a <_vfprintf_r+0xd3a>
 801023e:	aa26      	add	r2, sp, #152	@ 0x98
 8010240:	4659      	mov	r1, fp
 8010242:	9803      	ldr	r0, [sp, #12]
 8010244:	f000 fe4c 	bl	8010ee0 <__sprint_r>
 8010248:	2800      	cmp	r0, #0
 801024a:	f040 85a4 	bne.w	8010d96 <_vfprintf_r+0x1386>
 801024e:	ac29      	add	r4, sp, #164	@ 0xa4
 8010250:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010252:	eba3 0309 	sub.w	r3, r3, r9
 8010256:	2b00      	cmp	r3, #0
 8010258:	9310      	str	r3, [sp, #64]	@ 0x40
 801025a:	dd1c      	ble.n	8010296 <_vfprintf_r+0x886>
 801025c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801025e:	f104 0108 	add.w	r1, r4, #8
 8010262:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8010266:	2810      	cmp	r0, #16
 8010268:	4869      	ldr	r0, [pc, #420]	@ (8010410 <_vfprintf_r+0xa00>)
 801026a:	f102 0201 	add.w	r2, r2, #1
 801026e:	6020      	str	r0, [r4, #0]
 8010270:	f300 826d 	bgt.w	801074e <_vfprintf_r+0xd3e>
 8010274:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010276:	2a07      	cmp	r2, #7
 8010278:	4403      	add	r3, r0
 801027a:	6060      	str	r0, [r4, #4]
 801027c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010280:	f340 827a 	ble.w	8010778 <_vfprintf_r+0xd68>
 8010284:	aa26      	add	r2, sp, #152	@ 0x98
 8010286:	4659      	mov	r1, fp
 8010288:	9803      	ldr	r0, [sp, #12]
 801028a:	f000 fe29 	bl	8010ee0 <__sprint_r>
 801028e:	2800      	cmp	r0, #0
 8010290:	f040 8581 	bne.w	8010d96 <_vfprintf_r+0x1386>
 8010294:	ac29      	add	r4, sp, #164	@ 0xa4
 8010296:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010298:	05e8      	lsls	r0, r5, #23
 801029a:	9310      	str	r3, [sp, #64]	@ 0x40
 801029c:	f100 8272 	bmi.w	8010784 <_vfprintf_r+0xd74>
 80102a0:	444b      	add	r3, r9
 80102a2:	9328      	str	r3, [sp, #160]	@ 0xa0
 80102a4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80102a6:	3301      	adds	r3, #1
 80102a8:	2b07      	cmp	r3, #7
 80102aa:	9327      	str	r3, [sp, #156]	@ 0x9c
 80102ac:	e9c4 8900 	strd	r8, r9, [r4]
 80102b0:	f300 82ae 	bgt.w	8010810 <_vfprintf_r+0xe00>
 80102b4:	3408      	adds	r4, #8
 80102b6:	0768      	lsls	r0, r5, #29
 80102b8:	f100 854f 	bmi.w	8010d5a <_vfprintf_r+0x134a>
 80102bc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80102be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80102c2:	428a      	cmp	r2, r1
 80102c4:	bfac      	ite	ge
 80102c6:	189b      	addge	r3, r3, r2
 80102c8:	185b      	addlt	r3, r3, r1
 80102ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80102cc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80102ce:	b13b      	cbz	r3, 80102e0 <_vfprintf_r+0x8d0>
 80102d0:	aa26      	add	r2, sp, #152	@ 0x98
 80102d2:	4659      	mov	r1, fp
 80102d4:	9803      	ldr	r0, [sp, #12]
 80102d6:	f000 fe03 	bl	8010ee0 <__sprint_r>
 80102da:	2800      	cmp	r0, #0
 80102dc:	f040 855b 	bne.w	8010d96 <_vfprintf_r+0x1386>
 80102e0:	2300      	movs	r3, #0
 80102e2:	9327      	str	r3, [sp, #156]	@ 0x9c
 80102e4:	f1ba 0f00 	cmp.w	sl, #0
 80102e8:	f040 8571 	bne.w	8010dce <_vfprintf_r+0x13be>
 80102ec:	9e07      	ldr	r6, [sp, #28]
 80102ee:	ac29      	add	r4, sp, #164	@ 0xa4
 80102f0:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 80102f4:	e40a      	b.n	800fb0c <_vfprintf_r+0xfc>
 80102f6:	f802 0c01 	strb.w	r0, [r2, #-1]
 80102fa:	e6ad      	b.n	8010058 <_vfprintf_r+0x648>
 80102fc:	f803 0b01 	strb.w	r0, [r3], #1
 8010300:	e678      	b.n	800fff4 <_vfprintf_r+0x5e4>
 8010302:	9b08      	ldr	r3, [sp, #32]
 8010304:	2b46      	cmp	r3, #70	@ 0x46
 8010306:	d005      	beq.n	8010314 <_vfprintf_r+0x904>
 8010308:	2b45      	cmp	r3, #69	@ 0x45
 801030a:	d11a      	bne.n	8010342 <_vfprintf_r+0x932>
 801030c:	f109 0601 	add.w	r6, r9, #1
 8010310:	2102      	movs	r1, #2
 8010312:	e001      	b.n	8010318 <_vfprintf_r+0x908>
 8010314:	464e      	mov	r6, r9
 8010316:	2103      	movs	r1, #3
 8010318:	ab24      	add	r3, sp, #144	@ 0x90
 801031a:	4632      	mov	r2, r6
 801031c:	9803      	ldr	r0, [sp, #12]
 801031e:	9301      	str	r3, [sp, #4]
 8010320:	ab21      	add	r3, sp, #132	@ 0x84
 8010322:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8010326:	9300      	str	r3, [sp, #0]
 8010328:	ab20      	add	r3, sp, #128	@ 0x80
 801032a:	f001 ff29 	bl	8012180 <_dtoa_r>
 801032e:	9b08      	ldr	r3, [sp, #32]
 8010330:	4680      	mov	r8, r0
 8010332:	2b47      	cmp	r3, #71	@ 0x47
 8010334:	d119      	bne.n	801036a <_vfprintf_r+0x95a>
 8010336:	07e8      	lsls	r0, r5, #31
 8010338:	d405      	bmi.n	8010346 <_vfprintf_r+0x936>
 801033a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801033c:	eba3 0308 	sub.w	r3, r3, r8
 8010340:	e69c      	b.n	801007c <_vfprintf_r+0x66c>
 8010342:	464e      	mov	r6, r9
 8010344:	e7e4      	b.n	8010310 <_vfprintf_r+0x900>
 8010346:	eb08 0706 	add.w	r7, r8, r6
 801034a:	2200      	movs	r2, #0
 801034c:	2300      	movs	r3, #0
 801034e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8010352:	f7f0 fbc7 	bl	8000ae4 <__aeabi_dcmpeq>
 8010356:	b100      	cbz	r0, 801035a <_vfprintf_r+0x94a>
 8010358:	9724      	str	r7, [sp, #144]	@ 0x90
 801035a:	2230      	movs	r2, #48	@ 0x30
 801035c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801035e:	429f      	cmp	r7, r3
 8010360:	d9eb      	bls.n	801033a <_vfprintf_r+0x92a>
 8010362:	1c59      	adds	r1, r3, #1
 8010364:	9124      	str	r1, [sp, #144]	@ 0x90
 8010366:	701a      	strb	r2, [r3, #0]
 8010368:	e7f8      	b.n	801035c <_vfprintf_r+0x94c>
 801036a:	9b08      	ldr	r3, [sp, #32]
 801036c:	1987      	adds	r7, r0, r6
 801036e:	2b46      	cmp	r3, #70	@ 0x46
 8010370:	d1eb      	bne.n	801034a <_vfprintf_r+0x93a>
 8010372:	7803      	ldrb	r3, [r0, #0]
 8010374:	2b30      	cmp	r3, #48	@ 0x30
 8010376:	d109      	bne.n	801038c <_vfprintf_r+0x97c>
 8010378:	2200      	movs	r2, #0
 801037a:	2300      	movs	r3, #0
 801037c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8010380:	f7f0 fbb0 	bl	8000ae4 <__aeabi_dcmpeq>
 8010384:	b910      	cbnz	r0, 801038c <_vfprintf_r+0x97c>
 8010386:	f1c6 0601 	rsb	r6, r6, #1
 801038a:	9620      	str	r6, [sp, #128]	@ 0x80
 801038c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801038e:	441f      	add	r7, r3
 8010390:	e7db      	b.n	801034a <_vfprintf_r+0x93a>
 8010392:	9b08      	ldr	r3, [sp, #32]
 8010394:	2b46      	cmp	r3, #70	@ 0x46
 8010396:	f47f ae7f 	bne.w	8010098 <_vfprintf_r+0x688>
 801039a:	f005 0301 	and.w	r3, r5, #1
 801039e:	2e00      	cmp	r6, #0
 80103a0:	ea43 0309 	orr.w	r3, r3, r9
 80103a4:	dd25      	ble.n	80103f2 <_vfprintf_r+0x9e2>
 80103a6:	b37b      	cbz	r3, 8010408 <_vfprintf_r+0x9f8>
 80103a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80103aa:	18f3      	adds	r3, r6, r3
 80103ac:	4499      	add	r9, r3
 80103ae:	2366      	movs	r3, #102	@ 0x66
 80103b0:	9306      	str	r3, [sp, #24]
 80103b2:	e033      	b.n	801041c <_vfprintf_r+0xa0c>
 80103b4:	f813 7b01 	ldrb.w	r7, [r3], #1
 80103b8:	f806 7f01 	strb.w	r7, [r6, #1]!
 80103bc:	e6a0      	b.n	8010100 <_vfprintf_r+0x6f0>
 80103be:	b941      	cbnz	r1, 80103d2 <_vfprintf_r+0x9c2>
 80103c0:	2230      	movs	r2, #48	@ 0x30
 80103c2:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 80103c6:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 80103ca:	3330      	adds	r3, #48	@ 0x30
 80103cc:	f802 3b01 	strb.w	r3, [r2], #1
 80103d0:	e6a2      	b.n	8010118 <_vfprintf_r+0x708>
 80103d2:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 80103d6:	e7f8      	b.n	80103ca <_vfprintf_r+0x9ba>
 80103d8:	9b04      	ldr	r3, [sp, #16]
 80103da:	42b3      	cmp	r3, r6
 80103dc:	dd0d      	ble.n	80103fa <_vfprintf_r+0x9ea>
 80103de:	9b04      	ldr	r3, [sp, #16]
 80103e0:	2e00      	cmp	r6, #0
 80103e2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80103e4:	eb03 0902 	add.w	r9, r3, r2
 80103e8:	dc0c      	bgt.n	8010404 <_vfprintf_r+0x9f4>
 80103ea:	f1c6 0301 	rsb	r3, r6, #1
 80103ee:	4499      	add	r9, r3
 80103f0:	e008      	b.n	8010404 <_vfprintf_r+0x9f4>
 80103f2:	b17b      	cbz	r3, 8010414 <_vfprintf_r+0xa04>
 80103f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80103f6:	3301      	adds	r3, #1
 80103f8:	e7d8      	b.n	80103ac <_vfprintf_r+0x99c>
 80103fa:	07eb      	lsls	r3, r5, #31
 80103fc:	d521      	bpl.n	8010442 <_vfprintf_r+0xa32>
 80103fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010400:	eb06 0903 	add.w	r9, r6, r3
 8010404:	2367      	movs	r3, #103	@ 0x67
 8010406:	e7d3      	b.n	80103b0 <_vfprintf_r+0x9a0>
 8010408:	46b1      	mov	r9, r6
 801040a:	e7d0      	b.n	80103ae <_vfprintf_r+0x99e>
 801040c:	0801499d 	.word	0x0801499d
 8010410:	0801498d 	.word	0x0801498d
 8010414:	2366      	movs	r3, #102	@ 0x66
 8010416:	f04f 0901 	mov.w	r9, #1
 801041a:	9306      	str	r3, [sp, #24]
 801041c:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8010420:	9308      	str	r3, [sp, #32]
 8010422:	d01f      	beq.n	8010464 <_vfprintf_r+0xa54>
 8010424:	2700      	movs	r7, #0
 8010426:	2e00      	cmp	r6, #0
 8010428:	9708      	str	r7, [sp, #32]
 801042a:	f77f ae89 	ble.w	8010140 <_vfprintf_r+0x730>
 801042e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	2bff      	cmp	r3, #255	@ 0xff
 8010434:	d107      	bne.n	8010446 <_vfprintf_r+0xa36>
 8010436:	9b08      	ldr	r3, [sp, #32]
 8010438:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801043a:	443b      	add	r3, r7
 801043c:	fb02 9903 	mla	r9, r2, r3, r9
 8010440:	e67e      	b.n	8010140 <_vfprintf_r+0x730>
 8010442:	46b1      	mov	r9, r6
 8010444:	e7de      	b.n	8010404 <_vfprintf_r+0x9f4>
 8010446:	42b3      	cmp	r3, r6
 8010448:	daf5      	bge.n	8010436 <_vfprintf_r+0xa26>
 801044a:	1af6      	subs	r6, r6, r3
 801044c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801044e:	785b      	ldrb	r3, [r3, #1]
 8010450:	b133      	cbz	r3, 8010460 <_vfprintf_r+0xa50>
 8010452:	9b08      	ldr	r3, [sp, #32]
 8010454:	3301      	adds	r3, #1
 8010456:	9308      	str	r3, [sp, #32]
 8010458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801045a:	3301      	adds	r3, #1
 801045c:	9309      	str	r3, [sp, #36]	@ 0x24
 801045e:	e7e6      	b.n	801042e <_vfprintf_r+0xa1e>
 8010460:	3701      	adds	r7, #1
 8010462:	e7e4      	b.n	801042e <_vfprintf_r+0xa1e>
 8010464:	9f08      	ldr	r7, [sp, #32]
 8010466:	e66b      	b.n	8010140 <_vfprintf_r+0x730>
 8010468:	232d      	movs	r3, #45	@ 0x2d
 801046a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801046e:	e66b      	b.n	8010148 <_vfprintf_r+0x738>
 8010470:	06af      	lsls	r7, r5, #26
 8010472:	d507      	bpl.n	8010484 <_vfprintf_r+0xa74>
 8010474:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010476:	6833      	ldr	r3, [r6, #0]
 8010478:	17d2      	asrs	r2, r2, #31
 801047a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801047c:	e9c3 1200 	strd	r1, r2, [r3]
 8010480:	3604      	adds	r6, #4
 8010482:	e735      	b.n	80102f0 <_vfprintf_r+0x8e0>
 8010484:	06e8      	lsls	r0, r5, #27
 8010486:	d503      	bpl.n	8010490 <_vfprintf_r+0xa80>
 8010488:	6833      	ldr	r3, [r6, #0]
 801048a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801048c:	601a      	str	r2, [r3, #0]
 801048e:	e7f7      	b.n	8010480 <_vfprintf_r+0xa70>
 8010490:	0669      	lsls	r1, r5, #25
 8010492:	d503      	bpl.n	801049c <_vfprintf_r+0xa8c>
 8010494:	6833      	ldr	r3, [r6, #0]
 8010496:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010498:	801a      	strh	r2, [r3, #0]
 801049a:	e7f1      	b.n	8010480 <_vfprintf_r+0xa70>
 801049c:	05aa      	lsls	r2, r5, #22
 801049e:	d5f3      	bpl.n	8010488 <_vfprintf_r+0xa78>
 80104a0:	6833      	ldr	r3, [r6, #0]
 80104a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80104a4:	701a      	strb	r2, [r3, #0]
 80104a6:	e7eb      	b.n	8010480 <_vfprintf_r+0xa70>
 80104a8:	f045 0510 	orr.w	r5, r5, #16
 80104ac:	f015 0320 	ands.w	r3, r5, #32
 80104b0:	d020      	beq.n	80104f4 <_vfprintf_r+0xae4>
 80104b2:	3607      	adds	r6, #7
 80104b4:	f026 0307 	bic.w	r3, r6, #7
 80104b8:	461a      	mov	r2, r3
 80104ba:	685f      	ldr	r7, [r3, #4]
 80104bc:	f852 6b08 	ldr.w	r6, [r2], #8
 80104c0:	9207      	str	r2, [sp, #28]
 80104c2:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80104c6:	2300      	movs	r3, #0
 80104c8:	2200      	movs	r2, #0
 80104ca:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 80104ce:	f1b9 3fff 	cmp.w	r9, #4294967295
 80104d2:	f000 8491 	beq.w	8010df8 <_vfprintf_r+0x13e8>
 80104d6:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 80104da:	9208      	str	r2, [sp, #32]
 80104dc:	ea56 0207 	orrs.w	r2, r6, r7
 80104e0:	f040 848f 	bne.w	8010e02 <_vfprintf_r+0x13f2>
 80104e4:	f1b9 0f00 	cmp.w	r9, #0
 80104e8:	f000 80db 	beq.w	80106a2 <_vfprintf_r+0xc92>
 80104ec:	2b01      	cmp	r3, #1
 80104ee:	f040 848b 	bne.w	8010e08 <_vfprintf_r+0x13f8>
 80104f2:	e083      	b.n	80105fc <_vfprintf_r+0xbec>
 80104f4:	4632      	mov	r2, r6
 80104f6:	f015 0710 	ands.w	r7, r5, #16
 80104fa:	f852 6b04 	ldr.w	r6, [r2], #4
 80104fe:	9207      	str	r2, [sp, #28]
 8010500:	d001      	beq.n	8010506 <_vfprintf_r+0xaf6>
 8010502:	461f      	mov	r7, r3
 8010504:	e7dd      	b.n	80104c2 <_vfprintf_r+0xab2>
 8010506:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801050a:	d001      	beq.n	8010510 <_vfprintf_r+0xb00>
 801050c:	b2b6      	uxth	r6, r6
 801050e:	e7d8      	b.n	80104c2 <_vfprintf_r+0xab2>
 8010510:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8010514:	d0d5      	beq.n	80104c2 <_vfprintf_r+0xab2>
 8010516:	b2f6      	uxtb	r6, r6
 8010518:	e7f3      	b.n	8010502 <_vfprintf_r+0xaf2>
 801051a:	4633      	mov	r3, r6
 801051c:	2278      	movs	r2, #120	@ 0x78
 801051e:	2700      	movs	r7, #0
 8010520:	f045 0502 	orr.w	r5, r5, #2
 8010524:	f853 6b04 	ldr.w	r6, [r3], #4
 8010528:	9206      	str	r2, [sp, #24]
 801052a:	9307      	str	r3, [sp, #28]
 801052c:	f647 0330 	movw	r3, #30768	@ 0x7830
 8010530:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8010534:	4b91      	ldr	r3, [pc, #580]	@ (801077c <_vfprintf_r+0xd6c>)
 8010536:	9319      	str	r3, [sp, #100]	@ 0x64
 8010538:	2302      	movs	r3, #2
 801053a:	e7c5      	b.n	80104c8 <_vfprintf_r+0xab8>
 801053c:	4633      	mov	r3, r6
 801053e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8010542:	f04f 0600 	mov.w	r6, #0
 8010546:	f853 8b04 	ldr.w	r8, [r3], #4
 801054a:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 801054e:	9307      	str	r3, [sp, #28]
 8010550:	d00f      	beq.n	8010572 <_vfprintf_r+0xb62>
 8010552:	464a      	mov	r2, r9
 8010554:	4631      	mov	r1, r6
 8010556:	4640      	mov	r0, r8
 8010558:	f001 fcfe 	bl	8011f58 <memchr>
 801055c:	4682      	mov	sl, r0
 801055e:	2800      	cmp	r0, #0
 8010560:	f43f ac7e 	beq.w	800fe60 <_vfprintf_r+0x450>
 8010564:	eba0 0908 	sub.w	r9, r0, r8
 8010568:	46b2      	mov	sl, r6
 801056a:	4637      	mov	r7, r6
 801056c:	9610      	str	r6, [sp, #64]	@ 0x40
 801056e:	9608      	str	r6, [sp, #32]
 8010570:	e5ed      	b.n	801014e <_vfprintf_r+0x73e>
 8010572:	4640      	mov	r0, r8
 8010574:	46b2      	mov	sl, r6
 8010576:	f7ef fe89 	bl	800028c <strlen>
 801057a:	4681      	mov	r9, r0
 801057c:	e470      	b.n	800fe60 <_vfprintf_r+0x450>
 801057e:	f045 0510 	orr.w	r5, r5, #16
 8010582:	f015 0320 	ands.w	r3, r5, #32
 8010586:	d009      	beq.n	801059c <_vfprintf_r+0xb8c>
 8010588:	3607      	adds	r6, #7
 801058a:	f026 0307 	bic.w	r3, r6, #7
 801058e:	461a      	mov	r2, r3
 8010590:	685f      	ldr	r7, [r3, #4]
 8010592:	f852 6b08 	ldr.w	r6, [r2], #8
 8010596:	9207      	str	r2, [sp, #28]
 8010598:	2301      	movs	r3, #1
 801059a:	e795      	b.n	80104c8 <_vfprintf_r+0xab8>
 801059c:	4632      	mov	r2, r6
 801059e:	f015 0710 	ands.w	r7, r5, #16
 80105a2:	f852 6b04 	ldr.w	r6, [r2], #4
 80105a6:	9207      	str	r2, [sp, #28]
 80105a8:	d001      	beq.n	80105ae <_vfprintf_r+0xb9e>
 80105aa:	461f      	mov	r7, r3
 80105ac:	e7f4      	b.n	8010598 <_vfprintf_r+0xb88>
 80105ae:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80105b2:	d001      	beq.n	80105b8 <_vfprintf_r+0xba8>
 80105b4:	b2b6      	uxth	r6, r6
 80105b6:	e7ef      	b.n	8010598 <_vfprintf_r+0xb88>
 80105b8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80105bc:	d0ec      	beq.n	8010598 <_vfprintf_r+0xb88>
 80105be:	b2f6      	uxtb	r6, r6
 80105c0:	e7f3      	b.n	80105aa <_vfprintf_r+0xb9a>
 80105c2:	4b6f      	ldr	r3, [pc, #444]	@ (8010780 <_vfprintf_r+0xd70>)
 80105c4:	f7ff bb37 	b.w	800fc36 <_vfprintf_r+0x226>
 80105c8:	4632      	mov	r2, r6
 80105ca:	f015 0710 	ands.w	r7, r5, #16
 80105ce:	f852 6b04 	ldr.w	r6, [r2], #4
 80105d2:	9207      	str	r2, [sp, #28]
 80105d4:	d002      	beq.n	80105dc <_vfprintf_r+0xbcc>
 80105d6:	461f      	mov	r7, r3
 80105d8:	f7ff bb3a 	b.w	800fc50 <_vfprintf_r+0x240>
 80105dc:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80105e0:	d002      	beq.n	80105e8 <_vfprintf_r+0xbd8>
 80105e2:	b2b6      	uxth	r6, r6
 80105e4:	f7ff bb34 	b.w	800fc50 <_vfprintf_r+0x240>
 80105e8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80105ec:	f43f ab30 	beq.w	800fc50 <_vfprintf_r+0x240>
 80105f0:	b2f6      	uxtb	r6, r6
 80105f2:	e7f0      	b.n	80105d6 <_vfprintf_r+0xbc6>
 80105f4:	2e0a      	cmp	r6, #10
 80105f6:	f177 0300 	sbcs.w	r3, r7, #0
 80105fa:	d207      	bcs.n	801060c <_vfprintf_r+0xbfc>
 80105fc:	3630      	adds	r6, #48	@ 0x30
 80105fe:	b2f6      	uxtb	r6, r6
 8010600:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 8010604:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8010608:	f000 bc1a 	b.w	8010e40 <_vfprintf_r+0x1430>
 801060c:	2300      	movs	r3, #0
 801060e:	ad52      	add	r5, sp, #328	@ 0x148
 8010610:	9304      	str	r3, [sp, #16]
 8010612:	9b08      	ldr	r3, [sp, #32]
 8010614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010618:	9310      	str	r3, [sp, #64]	@ 0x40
 801061a:	220a      	movs	r2, #10
 801061c:	2300      	movs	r3, #0
 801061e:	4630      	mov	r0, r6
 8010620:	4639      	mov	r1, r7
 8010622:	f7f0 facf 	bl	8000bc4 <__aeabi_uldivmod>
 8010626:	9b04      	ldr	r3, [sp, #16]
 8010628:	3230      	adds	r2, #48	@ 0x30
 801062a:	468a      	mov	sl, r1
 801062c:	3301      	adds	r3, #1
 801062e:	f105 38ff 	add.w	r8, r5, #4294967295
 8010632:	9011      	str	r0, [sp, #68]	@ 0x44
 8010634:	9304      	str	r3, [sp, #16]
 8010636:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010638:	f805 2c01 	strb.w	r2, [r5, #-1]
 801063c:	b1d3      	cbz	r3, 8010674 <_vfprintf_r+0xc64>
 801063e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010640:	9a04      	ldr	r2, [sp, #16]
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	429a      	cmp	r2, r3
 8010646:	d115      	bne.n	8010674 <_vfprintf_r+0xc64>
 8010648:	2aff      	cmp	r2, #255	@ 0xff
 801064a:	d013      	beq.n	8010674 <_vfprintf_r+0xc64>
 801064c:	2e0a      	cmp	r6, #10
 801064e:	f177 0300 	sbcs.w	r3, r7, #0
 8010652:	d30f      	bcc.n	8010674 <_vfprintf_r+0xc64>
 8010654:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010656:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8010658:	eba8 0803 	sub.w	r8, r8, r3
 801065c:	461a      	mov	r2, r3
 801065e:	4640      	mov	r0, r8
 8010660:	f001 fc48 	bl	8011ef4 <strncpy>
 8010664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010666:	785b      	ldrb	r3, [r3, #1]
 8010668:	b11b      	cbz	r3, 8010672 <_vfprintf_r+0xc62>
 801066a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801066c:	3301      	adds	r3, #1
 801066e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010670:	2300      	movs	r3, #0
 8010672:	9304      	str	r3, [sp, #16]
 8010674:	2e0a      	cmp	r6, #10
 8010676:	f177 0700 	sbcs.w	r7, r7, #0
 801067a:	f0c0 83e1 	bcc.w	8010e40 <_vfprintf_r+0x1430>
 801067e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8010680:	4657      	mov	r7, sl
 8010682:	4645      	mov	r5, r8
 8010684:	e7c9      	b.n	801061a <_vfprintf_r+0xc0a>
 8010686:	f006 030f 	and.w	r3, r6, #15
 801068a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801068c:	0936      	lsrs	r6, r6, #4
 801068e:	5cd3      	ldrb	r3, [r2, r3]
 8010690:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8010694:	093f      	lsrs	r7, r7, #4
 8010696:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801069a:	ea56 0307 	orrs.w	r3, r6, r7
 801069e:	d1f2      	bne.n	8010686 <_vfprintf_r+0xc76>
 80106a0:	e3ce      	b.n	8010e40 <_vfprintf_r+0x1430>
 80106a2:	b91b      	cbnz	r3, 80106ac <_vfprintf_r+0xc9c>
 80106a4:	07ed      	lsls	r5, r5, #31
 80106a6:	d501      	bpl.n	80106ac <_vfprintf_r+0xc9c>
 80106a8:	2630      	movs	r6, #48	@ 0x30
 80106aa:	e7a9      	b.n	8010600 <_vfprintf_r+0xbf0>
 80106ac:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 80106b0:	e3c6      	b.n	8010e40 <_vfprintf_r+0x1430>
 80106b2:	9b06      	ldr	r3, [sp, #24]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	f000 8390 	beq.w	8010dda <_vfprintf_r+0x13ca>
 80106ba:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 80106be:	2300      	movs	r3, #0
 80106c0:	9607      	str	r6, [sp, #28]
 80106c2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80106c6:	f7ff bb60 	b.w	800fd8a <_vfprintf_r+0x37a>
 80106ca:	2010      	movs	r0, #16
 80106cc:	2a07      	cmp	r2, #7
 80106ce:	4403      	add	r3, r0
 80106d0:	6060      	str	r0, [r4, #4]
 80106d2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80106d6:	dd08      	ble.n	80106ea <_vfprintf_r+0xcda>
 80106d8:	aa26      	add	r2, sp, #152	@ 0x98
 80106da:	4659      	mov	r1, fp
 80106dc:	9803      	ldr	r0, [sp, #12]
 80106de:	f000 fbff 	bl	8010ee0 <__sprint_r>
 80106e2:	2800      	cmp	r0, #0
 80106e4:	f040 8357 	bne.w	8010d96 <_vfprintf_r+0x1386>
 80106e8:	a929      	add	r1, sp, #164	@ 0xa4
 80106ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80106ec:	460c      	mov	r4, r1
 80106ee:	3b10      	subs	r3, #16
 80106f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80106f2:	e548      	b.n	8010186 <_vfprintf_r+0x776>
 80106f4:	460c      	mov	r4, r1
 80106f6:	e563      	b.n	80101c0 <_vfprintf_r+0x7b0>
 80106f8:	aa26      	add	r2, sp, #152	@ 0x98
 80106fa:	4659      	mov	r1, fp
 80106fc:	9803      	ldr	r0, [sp, #12]
 80106fe:	f000 fbef 	bl	8010ee0 <__sprint_r>
 8010702:	2800      	cmp	r0, #0
 8010704:	f040 8347 	bne.w	8010d96 <_vfprintf_r+0x1386>
 8010708:	ac29      	add	r4, sp, #164	@ 0xa4
 801070a:	e56b      	b.n	80101e4 <_vfprintf_r+0x7d4>
 801070c:	aa26      	add	r2, sp, #152	@ 0x98
 801070e:	4659      	mov	r1, fp
 8010710:	9803      	ldr	r0, [sp, #12]
 8010712:	f000 fbe5 	bl	8010ee0 <__sprint_r>
 8010716:	2800      	cmp	r0, #0
 8010718:	f040 833d 	bne.w	8010d96 <_vfprintf_r+0x1386>
 801071c:	ac29      	add	r4, sp, #164	@ 0xa4
 801071e:	e571      	b.n	8010204 <_vfprintf_r+0x7f4>
 8010720:	2010      	movs	r0, #16
 8010722:	2a07      	cmp	r2, #7
 8010724:	4403      	add	r3, r0
 8010726:	6060      	str	r0, [r4, #4]
 8010728:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801072c:	dd08      	ble.n	8010740 <_vfprintf_r+0xd30>
 801072e:	aa26      	add	r2, sp, #152	@ 0x98
 8010730:	4659      	mov	r1, fp
 8010732:	9803      	ldr	r0, [sp, #12]
 8010734:	f000 fbd4 	bl	8010ee0 <__sprint_r>
 8010738:	2800      	cmp	r0, #0
 801073a:	f040 832c 	bne.w	8010d96 <_vfprintf_r+0x1386>
 801073e:	a929      	add	r1, sp, #164	@ 0xa4
 8010740:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010742:	460c      	mov	r4, r1
 8010744:	3b10      	subs	r3, #16
 8010746:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010748:	e565      	b.n	8010216 <_vfprintf_r+0x806>
 801074a:	460c      	mov	r4, r1
 801074c:	e580      	b.n	8010250 <_vfprintf_r+0x840>
 801074e:	2010      	movs	r0, #16
 8010750:	2a07      	cmp	r2, #7
 8010752:	4403      	add	r3, r0
 8010754:	6060      	str	r0, [r4, #4]
 8010756:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801075a:	dd08      	ble.n	801076e <_vfprintf_r+0xd5e>
 801075c:	aa26      	add	r2, sp, #152	@ 0x98
 801075e:	4659      	mov	r1, fp
 8010760:	9803      	ldr	r0, [sp, #12]
 8010762:	f000 fbbd 	bl	8010ee0 <__sprint_r>
 8010766:	2800      	cmp	r0, #0
 8010768:	f040 8315 	bne.w	8010d96 <_vfprintf_r+0x1386>
 801076c:	a929      	add	r1, sp, #164	@ 0xa4
 801076e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010770:	460c      	mov	r4, r1
 8010772:	3b10      	subs	r3, #16
 8010774:	9310      	str	r3, [sp, #64]	@ 0x40
 8010776:	e571      	b.n	801025c <_vfprintf_r+0x84c>
 8010778:	460c      	mov	r4, r1
 801077a:	e58c      	b.n	8010296 <_vfprintf_r+0x886>
 801077c:	08014949 	.word	0x08014949
 8010780:	0801495a 	.word	0x0801495a
 8010784:	9b06      	ldr	r3, [sp, #24]
 8010786:	2b65      	cmp	r3, #101	@ 0x65
 8010788:	f340 8245 	ble.w	8010c16 <_vfprintf_r+0x1206>
 801078c:	2200      	movs	r2, #0
 801078e:	2300      	movs	r3, #0
 8010790:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010794:	f7f0 f9a6 	bl	8000ae4 <__aeabi_dcmpeq>
 8010798:	2800      	cmp	r0, #0
 801079a:	d06a      	beq.n	8010872 <_vfprintf_r+0xe62>
 801079c:	4b73      	ldr	r3, [pc, #460]	@ (801096c <_vfprintf_r+0xf5c>)
 801079e:	6023      	str	r3, [r4, #0]
 80107a0:	2301      	movs	r3, #1
 80107a2:	6063      	str	r3, [r4, #4]
 80107a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80107a6:	3301      	adds	r3, #1
 80107a8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80107aa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80107ac:	3301      	adds	r3, #1
 80107ae:	2b07      	cmp	r3, #7
 80107b0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80107b2:	dc37      	bgt.n	8010824 <_vfprintf_r+0xe14>
 80107b4:	3408      	adds	r4, #8
 80107b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80107b8:	9a04      	ldr	r2, [sp, #16]
 80107ba:	4293      	cmp	r3, r2
 80107bc:	db02      	blt.n	80107c4 <_vfprintf_r+0xdb4>
 80107be:	07e9      	lsls	r1, r5, #31
 80107c0:	f57f ad79 	bpl.w	80102b6 <_vfprintf_r+0x8a6>
 80107c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80107c6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80107c8:	6023      	str	r3, [r4, #0]
 80107ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80107cc:	6063      	str	r3, [r4, #4]
 80107ce:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80107d0:	4413      	add	r3, r2
 80107d2:	9328      	str	r3, [sp, #160]	@ 0xa0
 80107d4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80107d6:	3301      	adds	r3, #1
 80107d8:	2b07      	cmp	r3, #7
 80107da:	9327      	str	r3, [sp, #156]	@ 0x9c
 80107dc:	dc2c      	bgt.n	8010838 <_vfprintf_r+0xe28>
 80107de:	3408      	adds	r4, #8
 80107e0:	9b04      	ldr	r3, [sp, #16]
 80107e2:	1e5e      	subs	r6, r3, #1
 80107e4:	2e00      	cmp	r6, #0
 80107e6:	f77f ad66 	ble.w	80102b6 <_vfprintf_r+0x8a6>
 80107ea:	4f61      	ldr	r7, [pc, #388]	@ (8010970 <_vfprintf_r+0xf60>)
 80107ec:	f04f 0810 	mov.w	r8, #16
 80107f0:	2e10      	cmp	r6, #16
 80107f2:	f104 0108 	add.w	r1, r4, #8
 80107f6:	6027      	str	r7, [r4, #0]
 80107f8:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80107fc:	f103 0301 	add.w	r3, r3, #1
 8010800:	dc24      	bgt.n	801084c <_vfprintf_r+0xe3c>
 8010802:	6066      	str	r6, [r4, #4]
 8010804:	2b07      	cmp	r3, #7
 8010806:	4416      	add	r6, r2
 8010808:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 801080c:	f340 82a2 	ble.w	8010d54 <_vfprintf_r+0x1344>
 8010810:	aa26      	add	r2, sp, #152	@ 0x98
 8010812:	4659      	mov	r1, fp
 8010814:	9803      	ldr	r0, [sp, #12]
 8010816:	f000 fb63 	bl	8010ee0 <__sprint_r>
 801081a:	2800      	cmp	r0, #0
 801081c:	f040 82bb 	bne.w	8010d96 <_vfprintf_r+0x1386>
 8010820:	ac29      	add	r4, sp, #164	@ 0xa4
 8010822:	e548      	b.n	80102b6 <_vfprintf_r+0x8a6>
 8010824:	aa26      	add	r2, sp, #152	@ 0x98
 8010826:	4659      	mov	r1, fp
 8010828:	9803      	ldr	r0, [sp, #12]
 801082a:	f000 fb59 	bl	8010ee0 <__sprint_r>
 801082e:	2800      	cmp	r0, #0
 8010830:	f040 82b1 	bne.w	8010d96 <_vfprintf_r+0x1386>
 8010834:	ac29      	add	r4, sp, #164	@ 0xa4
 8010836:	e7be      	b.n	80107b6 <_vfprintf_r+0xda6>
 8010838:	aa26      	add	r2, sp, #152	@ 0x98
 801083a:	4659      	mov	r1, fp
 801083c:	9803      	ldr	r0, [sp, #12]
 801083e:	f000 fb4f 	bl	8010ee0 <__sprint_r>
 8010842:	2800      	cmp	r0, #0
 8010844:	f040 82a7 	bne.w	8010d96 <_vfprintf_r+0x1386>
 8010848:	ac29      	add	r4, sp, #164	@ 0xa4
 801084a:	e7c9      	b.n	80107e0 <_vfprintf_r+0xdd0>
 801084c:	3210      	adds	r2, #16
 801084e:	2b07      	cmp	r3, #7
 8010850:	f8c4 8004 	str.w	r8, [r4, #4]
 8010854:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8010858:	dd08      	ble.n	801086c <_vfprintf_r+0xe5c>
 801085a:	aa26      	add	r2, sp, #152	@ 0x98
 801085c:	4659      	mov	r1, fp
 801085e:	9803      	ldr	r0, [sp, #12]
 8010860:	f000 fb3e 	bl	8010ee0 <__sprint_r>
 8010864:	2800      	cmp	r0, #0
 8010866:	f040 8296 	bne.w	8010d96 <_vfprintf_r+0x1386>
 801086a:	a929      	add	r1, sp, #164	@ 0xa4
 801086c:	3e10      	subs	r6, #16
 801086e:	460c      	mov	r4, r1
 8010870:	e7be      	b.n	80107f0 <_vfprintf_r+0xde0>
 8010872:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010874:	2b00      	cmp	r3, #0
 8010876:	dc7d      	bgt.n	8010974 <_vfprintf_r+0xf64>
 8010878:	4b3c      	ldr	r3, [pc, #240]	@ (801096c <_vfprintf_r+0xf5c>)
 801087a:	6023      	str	r3, [r4, #0]
 801087c:	2301      	movs	r3, #1
 801087e:	6063      	str	r3, [r4, #4]
 8010880:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010882:	3301      	adds	r3, #1
 8010884:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010886:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010888:	3301      	adds	r3, #1
 801088a:	2b07      	cmp	r3, #7
 801088c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801088e:	dc46      	bgt.n	801091e <_vfprintf_r+0xf0e>
 8010890:	3408      	adds	r4, #8
 8010892:	9904      	ldr	r1, [sp, #16]
 8010894:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010896:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8010898:	430b      	orrs	r3, r1
 801089a:	f005 0101 	and.w	r1, r5, #1
 801089e:	430b      	orrs	r3, r1
 80108a0:	f43f ad09 	beq.w	80102b6 <_vfprintf_r+0x8a6>
 80108a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80108a6:	6023      	str	r3, [r4, #0]
 80108a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80108aa:	441a      	add	r2, r3
 80108ac:	6063      	str	r3, [r4, #4]
 80108ae:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80108b0:	9228      	str	r2, [sp, #160]	@ 0xa0
 80108b2:	3301      	adds	r3, #1
 80108b4:	2b07      	cmp	r3, #7
 80108b6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80108b8:	dc3b      	bgt.n	8010932 <_vfprintf_r+0xf22>
 80108ba:	f104 0308 	add.w	r3, r4, #8
 80108be:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80108c0:	2e00      	cmp	r6, #0
 80108c2:	da1b      	bge.n	80108fc <_vfprintf_r+0xeec>
 80108c4:	4276      	negs	r6, r6
 80108c6:	461a      	mov	r2, r3
 80108c8:	4f29      	ldr	r7, [pc, #164]	@ (8010970 <_vfprintf_r+0xf60>)
 80108ca:	2410      	movs	r4, #16
 80108cc:	2e10      	cmp	r6, #16
 80108ce:	f103 0308 	add.w	r3, r3, #8
 80108d2:	6017      	str	r7, [r2, #0]
 80108d4:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 80108d8:	f101 0101 	add.w	r1, r1, #1
 80108dc:	dc33      	bgt.n	8010946 <_vfprintf_r+0xf36>
 80108de:	6056      	str	r6, [r2, #4]
 80108e0:	2907      	cmp	r1, #7
 80108e2:	4406      	add	r6, r0
 80108e4:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 80108e8:	dd08      	ble.n	80108fc <_vfprintf_r+0xeec>
 80108ea:	aa26      	add	r2, sp, #152	@ 0x98
 80108ec:	4659      	mov	r1, fp
 80108ee:	9803      	ldr	r0, [sp, #12]
 80108f0:	f000 faf6 	bl	8010ee0 <__sprint_r>
 80108f4:	2800      	cmp	r0, #0
 80108f6:	f040 824e 	bne.w	8010d96 <_vfprintf_r+0x1386>
 80108fa:	ab29      	add	r3, sp, #164	@ 0xa4
 80108fc:	9a04      	ldr	r2, [sp, #16]
 80108fe:	9904      	ldr	r1, [sp, #16]
 8010900:	605a      	str	r2, [r3, #4]
 8010902:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8010904:	f8c3 8000 	str.w	r8, [r3]
 8010908:	440a      	add	r2, r1
 801090a:	9228      	str	r2, [sp, #160]	@ 0xa0
 801090c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801090e:	3201      	adds	r2, #1
 8010910:	2a07      	cmp	r2, #7
 8010912:	9227      	str	r2, [sp, #156]	@ 0x9c
 8010914:	f73f af7c 	bgt.w	8010810 <_vfprintf_r+0xe00>
 8010918:	f103 0408 	add.w	r4, r3, #8
 801091c:	e4cb      	b.n	80102b6 <_vfprintf_r+0x8a6>
 801091e:	aa26      	add	r2, sp, #152	@ 0x98
 8010920:	4659      	mov	r1, fp
 8010922:	9803      	ldr	r0, [sp, #12]
 8010924:	f000 fadc 	bl	8010ee0 <__sprint_r>
 8010928:	2800      	cmp	r0, #0
 801092a:	f040 8234 	bne.w	8010d96 <_vfprintf_r+0x1386>
 801092e:	ac29      	add	r4, sp, #164	@ 0xa4
 8010930:	e7af      	b.n	8010892 <_vfprintf_r+0xe82>
 8010932:	aa26      	add	r2, sp, #152	@ 0x98
 8010934:	4659      	mov	r1, fp
 8010936:	9803      	ldr	r0, [sp, #12]
 8010938:	f000 fad2 	bl	8010ee0 <__sprint_r>
 801093c:	2800      	cmp	r0, #0
 801093e:	f040 822a 	bne.w	8010d96 <_vfprintf_r+0x1386>
 8010942:	ab29      	add	r3, sp, #164	@ 0xa4
 8010944:	e7bb      	b.n	80108be <_vfprintf_r+0xeae>
 8010946:	3010      	adds	r0, #16
 8010948:	2907      	cmp	r1, #7
 801094a:	6054      	str	r4, [r2, #4]
 801094c:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8010950:	dd08      	ble.n	8010964 <_vfprintf_r+0xf54>
 8010952:	aa26      	add	r2, sp, #152	@ 0x98
 8010954:	4659      	mov	r1, fp
 8010956:	9803      	ldr	r0, [sp, #12]
 8010958:	f000 fac2 	bl	8010ee0 <__sprint_r>
 801095c:	2800      	cmp	r0, #0
 801095e:	f040 821a 	bne.w	8010d96 <_vfprintf_r+0x1386>
 8010962:	ab29      	add	r3, sp, #164	@ 0xa4
 8010964:	3e10      	subs	r6, #16
 8010966:	461a      	mov	r2, r3
 8010968:	e7b0      	b.n	80108cc <_vfprintf_r+0xebc>
 801096a:	bf00      	nop
 801096c:	0801496b 	.word	0x0801496b
 8010970:	0801498d 	.word	0x0801498d
 8010974:	9b04      	ldr	r3, [sp, #16]
 8010976:	4443      	add	r3, r8
 8010978:	9313      	str	r3, [sp, #76]	@ 0x4c
 801097a:	9b04      	ldr	r3, [sp, #16]
 801097c:	42b3      	cmp	r3, r6
 801097e:	bfa8      	it	ge
 8010980:	4633      	movge	r3, r6
 8010982:	2b00      	cmp	r3, #0
 8010984:	4699      	mov	r9, r3
 8010986:	dd0b      	ble.n	80109a0 <_vfprintf_r+0xf90>
 8010988:	e9c4 8300 	strd	r8, r3, [r4]
 801098c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801098e:	444b      	add	r3, r9
 8010990:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010992:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010994:	3301      	adds	r3, #1
 8010996:	2b07      	cmp	r3, #7
 8010998:	9327      	str	r3, [sp, #156]	@ 0x9c
 801099a:	f300 8089 	bgt.w	8010ab0 <_vfprintf_r+0x10a0>
 801099e:	3408      	adds	r4, #8
 80109a0:	f1b9 0f00 	cmp.w	r9, #0
 80109a4:	bfac      	ite	ge
 80109a6:	eba6 0309 	subge.w	r3, r6, r9
 80109aa:	4633      	movlt	r3, r6
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	9306      	str	r3, [sp, #24]
 80109b0:	dd1c      	ble.n	80109ec <_vfprintf_r+0xfdc>
 80109b2:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 8010d18 <_vfprintf_r+0x1308>
 80109b6:	9806      	ldr	r0, [sp, #24]
 80109b8:	f104 0108 	add.w	r1, r4, #8
 80109bc:	f8c4 9000 	str.w	r9, [r4]
 80109c0:	2810      	cmp	r0, #16
 80109c2:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80109c6:	f102 0201 	add.w	r2, r2, #1
 80109ca:	dc7b      	bgt.n	8010ac4 <_vfprintf_r+0x10b4>
 80109cc:	4403      	add	r3, r0
 80109ce:	2a07      	cmp	r2, #7
 80109d0:	6060      	str	r0, [r4, #4]
 80109d2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80109d6:	f340 808a 	ble.w	8010aee <_vfprintf_r+0x10de>
 80109da:	aa26      	add	r2, sp, #152	@ 0x98
 80109dc:	4659      	mov	r1, fp
 80109de:	9803      	ldr	r0, [sp, #12]
 80109e0:	f000 fa7e 	bl	8010ee0 <__sprint_r>
 80109e4:	2800      	cmp	r0, #0
 80109e6:	f040 81d6 	bne.w	8010d96 <_vfprintf_r+0x1386>
 80109ea:	ac29      	add	r4, sp, #164	@ 0xa4
 80109ec:	056a      	lsls	r2, r5, #21
 80109ee:	44b0      	add	r8, r6
 80109f0:	d508      	bpl.n	8010a04 <_vfprintf_r+0xff4>
 80109f2:	9b08      	ldr	r3, [sp, #32]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d17c      	bne.n	8010af2 <_vfprintf_r+0x10e2>
 80109f8:	2f00      	cmp	r7, #0
 80109fa:	d17c      	bne.n	8010af6 <_vfprintf_r+0x10e6>
 80109fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80109fe:	4598      	cmp	r8, r3
 8010a00:	bf28      	it	cs
 8010a02:	4698      	movcs	r8, r3
 8010a04:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010a06:	9a04      	ldr	r2, [sp, #16]
 8010a08:	4293      	cmp	r3, r2
 8010a0a:	db01      	blt.n	8010a10 <_vfprintf_r+0x1000>
 8010a0c:	07eb      	lsls	r3, r5, #31
 8010a0e:	d50e      	bpl.n	8010a2e <_vfprintf_r+0x101e>
 8010a10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010a12:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010a14:	6023      	str	r3, [r4, #0]
 8010a16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a18:	6063      	str	r3, [r4, #4]
 8010a1a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010a1c:	4413      	add	r3, r2
 8010a1e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010a20:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010a22:	3301      	adds	r3, #1
 8010a24:	2b07      	cmp	r3, #7
 8010a26:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010a28:	f300 80e1 	bgt.w	8010bee <_vfprintf_r+0x11de>
 8010a2c:	3408      	adds	r4, #8
 8010a2e:	9b04      	ldr	r3, [sp, #16]
 8010a30:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8010a32:	1bdf      	subs	r7, r3, r7
 8010a34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010a36:	eba3 0308 	sub.w	r3, r3, r8
 8010a3a:	429f      	cmp	r7, r3
 8010a3c:	bfa8      	it	ge
 8010a3e:	461f      	movge	r7, r3
 8010a40:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010a42:	2f00      	cmp	r7, #0
 8010a44:	dd0a      	ble.n	8010a5c <_vfprintf_r+0x104c>
 8010a46:	443b      	add	r3, r7
 8010a48:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010a4a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010a4c:	3301      	adds	r3, #1
 8010a4e:	2b07      	cmp	r3, #7
 8010a50:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010a52:	e9c4 8700 	strd	r8, r7, [r4]
 8010a56:	f300 80d4 	bgt.w	8010c02 <_vfprintf_r+0x11f2>
 8010a5a:	3408      	adds	r4, #8
 8010a5c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010a5e:	2f00      	cmp	r7, #0
 8010a60:	9b04      	ldr	r3, [sp, #16]
 8010a62:	eba3 0606 	sub.w	r6, r3, r6
 8010a66:	bfa8      	it	ge
 8010a68:	1bf6      	subge	r6, r6, r7
 8010a6a:	2e00      	cmp	r6, #0
 8010a6c:	f77f ac23 	ble.w	80102b6 <_vfprintf_r+0x8a6>
 8010a70:	4fa9      	ldr	r7, [pc, #676]	@ (8010d18 <_vfprintf_r+0x1308>)
 8010a72:	f04f 0810 	mov.w	r8, #16
 8010a76:	2e10      	cmp	r6, #16
 8010a78:	f104 0108 	add.w	r1, r4, #8
 8010a7c:	6027      	str	r7, [r4, #0]
 8010a7e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8010a82:	f103 0301 	add.w	r3, r3, #1
 8010a86:	f77f aebc 	ble.w	8010802 <_vfprintf_r+0xdf2>
 8010a8a:	3210      	adds	r2, #16
 8010a8c:	2b07      	cmp	r3, #7
 8010a8e:	f8c4 8004 	str.w	r8, [r4, #4]
 8010a92:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8010a96:	dd08      	ble.n	8010aaa <_vfprintf_r+0x109a>
 8010a98:	aa26      	add	r2, sp, #152	@ 0x98
 8010a9a:	4659      	mov	r1, fp
 8010a9c:	9803      	ldr	r0, [sp, #12]
 8010a9e:	f000 fa1f 	bl	8010ee0 <__sprint_r>
 8010aa2:	2800      	cmp	r0, #0
 8010aa4:	f040 8177 	bne.w	8010d96 <_vfprintf_r+0x1386>
 8010aa8:	a929      	add	r1, sp, #164	@ 0xa4
 8010aaa:	3e10      	subs	r6, #16
 8010aac:	460c      	mov	r4, r1
 8010aae:	e7e2      	b.n	8010a76 <_vfprintf_r+0x1066>
 8010ab0:	aa26      	add	r2, sp, #152	@ 0x98
 8010ab2:	4659      	mov	r1, fp
 8010ab4:	9803      	ldr	r0, [sp, #12]
 8010ab6:	f000 fa13 	bl	8010ee0 <__sprint_r>
 8010aba:	2800      	cmp	r0, #0
 8010abc:	f040 816b 	bne.w	8010d96 <_vfprintf_r+0x1386>
 8010ac0:	ac29      	add	r4, sp, #164	@ 0xa4
 8010ac2:	e76d      	b.n	80109a0 <_vfprintf_r+0xf90>
 8010ac4:	2010      	movs	r0, #16
 8010ac6:	2a07      	cmp	r2, #7
 8010ac8:	4403      	add	r3, r0
 8010aca:	6060      	str	r0, [r4, #4]
 8010acc:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010ad0:	dd08      	ble.n	8010ae4 <_vfprintf_r+0x10d4>
 8010ad2:	aa26      	add	r2, sp, #152	@ 0x98
 8010ad4:	4659      	mov	r1, fp
 8010ad6:	9803      	ldr	r0, [sp, #12]
 8010ad8:	f000 fa02 	bl	8010ee0 <__sprint_r>
 8010adc:	2800      	cmp	r0, #0
 8010ade:	f040 815a 	bne.w	8010d96 <_vfprintf_r+0x1386>
 8010ae2:	a929      	add	r1, sp, #164	@ 0xa4
 8010ae4:	9b06      	ldr	r3, [sp, #24]
 8010ae6:	460c      	mov	r4, r1
 8010ae8:	3b10      	subs	r3, #16
 8010aea:	9306      	str	r3, [sp, #24]
 8010aec:	e763      	b.n	80109b6 <_vfprintf_r+0xfa6>
 8010aee:	460c      	mov	r4, r1
 8010af0:	e77c      	b.n	80109ec <_vfprintf_r+0xfdc>
 8010af2:	2f00      	cmp	r7, #0
 8010af4:	d04b      	beq.n	8010b8e <_vfprintf_r+0x117e>
 8010af6:	3f01      	subs	r7, #1
 8010af8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010afa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010afc:	6023      	str	r3, [r4, #0]
 8010afe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010b00:	6063      	str	r3, [r4, #4]
 8010b02:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010b04:	4413      	add	r3, r2
 8010b06:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010b08:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010b0a:	3301      	adds	r3, #1
 8010b0c:	2b07      	cmp	r3, #7
 8010b0e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010b10:	dc44      	bgt.n	8010b9c <_vfprintf_r+0x118c>
 8010b12:	3408      	adds	r4, #8
 8010b14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b16:	f893 9000 	ldrb.w	r9, [r3]
 8010b1a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010b1c:	eba3 0308 	sub.w	r3, r3, r8
 8010b20:	4599      	cmp	r9, r3
 8010b22:	bfa8      	it	ge
 8010b24:	4699      	movge	r9, r3
 8010b26:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010b28:	f1b9 0f00 	cmp.w	r9, #0
 8010b2c:	dd09      	ble.n	8010b42 <_vfprintf_r+0x1132>
 8010b2e:	444b      	add	r3, r9
 8010b30:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010b32:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010b34:	3301      	adds	r3, #1
 8010b36:	2b07      	cmp	r3, #7
 8010b38:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010b3a:	e9c4 8900 	strd	r8, r9, [r4]
 8010b3e:	dc37      	bgt.n	8010bb0 <_vfprintf_r+0x11a0>
 8010b40:	3408      	adds	r4, #8
 8010b42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b44:	f1b9 0f00 	cmp.w	r9, #0
 8010b48:	781e      	ldrb	r6, [r3, #0]
 8010b4a:	bfa8      	it	ge
 8010b4c:	eba6 0609 	subge.w	r6, r6, r9
 8010b50:	2e00      	cmp	r6, #0
 8010b52:	dd18      	ble.n	8010b86 <_vfprintf_r+0x1176>
 8010b54:	4870      	ldr	r0, [pc, #448]	@ (8010d18 <_vfprintf_r+0x1308>)
 8010b56:	2e10      	cmp	r6, #16
 8010b58:	f104 0108 	add.w	r1, r4, #8
 8010b5c:	6020      	str	r0, [r4, #0]
 8010b5e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8010b62:	f103 0301 	add.w	r3, r3, #1
 8010b66:	dc2d      	bgt.n	8010bc4 <_vfprintf_r+0x11b4>
 8010b68:	6066      	str	r6, [r4, #4]
 8010b6a:	2b07      	cmp	r3, #7
 8010b6c:	4416      	add	r6, r2
 8010b6e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8010b72:	dd3a      	ble.n	8010bea <_vfprintf_r+0x11da>
 8010b74:	aa26      	add	r2, sp, #152	@ 0x98
 8010b76:	4659      	mov	r1, fp
 8010b78:	9803      	ldr	r0, [sp, #12]
 8010b7a:	f000 f9b1 	bl	8010ee0 <__sprint_r>
 8010b7e:	2800      	cmp	r0, #0
 8010b80:	f040 8109 	bne.w	8010d96 <_vfprintf_r+0x1386>
 8010b84:	ac29      	add	r4, sp, #164	@ 0xa4
 8010b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b88:	781b      	ldrb	r3, [r3, #0]
 8010b8a:	4498      	add	r8, r3
 8010b8c:	e731      	b.n	80109f2 <_vfprintf_r+0xfe2>
 8010b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b90:	3b01      	subs	r3, #1
 8010b92:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b94:	9b08      	ldr	r3, [sp, #32]
 8010b96:	3b01      	subs	r3, #1
 8010b98:	9308      	str	r3, [sp, #32]
 8010b9a:	e7ad      	b.n	8010af8 <_vfprintf_r+0x10e8>
 8010b9c:	aa26      	add	r2, sp, #152	@ 0x98
 8010b9e:	4659      	mov	r1, fp
 8010ba0:	9803      	ldr	r0, [sp, #12]
 8010ba2:	f000 f99d 	bl	8010ee0 <__sprint_r>
 8010ba6:	2800      	cmp	r0, #0
 8010ba8:	f040 80f5 	bne.w	8010d96 <_vfprintf_r+0x1386>
 8010bac:	ac29      	add	r4, sp, #164	@ 0xa4
 8010bae:	e7b1      	b.n	8010b14 <_vfprintf_r+0x1104>
 8010bb0:	aa26      	add	r2, sp, #152	@ 0x98
 8010bb2:	4659      	mov	r1, fp
 8010bb4:	9803      	ldr	r0, [sp, #12]
 8010bb6:	f000 f993 	bl	8010ee0 <__sprint_r>
 8010bba:	2800      	cmp	r0, #0
 8010bbc:	f040 80eb 	bne.w	8010d96 <_vfprintf_r+0x1386>
 8010bc0:	ac29      	add	r4, sp, #164	@ 0xa4
 8010bc2:	e7be      	b.n	8010b42 <_vfprintf_r+0x1132>
 8010bc4:	2010      	movs	r0, #16
 8010bc6:	2b07      	cmp	r3, #7
 8010bc8:	4402      	add	r2, r0
 8010bca:	6060      	str	r0, [r4, #4]
 8010bcc:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8010bd0:	dd08      	ble.n	8010be4 <_vfprintf_r+0x11d4>
 8010bd2:	aa26      	add	r2, sp, #152	@ 0x98
 8010bd4:	4659      	mov	r1, fp
 8010bd6:	9803      	ldr	r0, [sp, #12]
 8010bd8:	f000 f982 	bl	8010ee0 <__sprint_r>
 8010bdc:	2800      	cmp	r0, #0
 8010bde:	f040 80da 	bne.w	8010d96 <_vfprintf_r+0x1386>
 8010be2:	a929      	add	r1, sp, #164	@ 0xa4
 8010be4:	3e10      	subs	r6, #16
 8010be6:	460c      	mov	r4, r1
 8010be8:	e7b4      	b.n	8010b54 <_vfprintf_r+0x1144>
 8010bea:	460c      	mov	r4, r1
 8010bec:	e7cb      	b.n	8010b86 <_vfprintf_r+0x1176>
 8010bee:	aa26      	add	r2, sp, #152	@ 0x98
 8010bf0:	4659      	mov	r1, fp
 8010bf2:	9803      	ldr	r0, [sp, #12]
 8010bf4:	f000 f974 	bl	8010ee0 <__sprint_r>
 8010bf8:	2800      	cmp	r0, #0
 8010bfa:	f040 80cc 	bne.w	8010d96 <_vfprintf_r+0x1386>
 8010bfe:	ac29      	add	r4, sp, #164	@ 0xa4
 8010c00:	e715      	b.n	8010a2e <_vfprintf_r+0x101e>
 8010c02:	aa26      	add	r2, sp, #152	@ 0x98
 8010c04:	4659      	mov	r1, fp
 8010c06:	9803      	ldr	r0, [sp, #12]
 8010c08:	f000 f96a 	bl	8010ee0 <__sprint_r>
 8010c0c:	2800      	cmp	r0, #0
 8010c0e:	f040 80c2 	bne.w	8010d96 <_vfprintf_r+0x1386>
 8010c12:	ac29      	add	r4, sp, #164	@ 0xa4
 8010c14:	e722      	b.n	8010a5c <_vfprintf_r+0x104c>
 8010c16:	9904      	ldr	r1, [sp, #16]
 8010c18:	f104 0608 	add.w	r6, r4, #8
 8010c1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010c1e:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8010c20:	2901      	cmp	r1, #1
 8010c22:	f103 0301 	add.w	r3, r3, #1
 8010c26:	f102 0201 	add.w	r2, r2, #1
 8010c2a:	dc02      	bgt.n	8010c32 <_vfprintf_r+0x1222>
 8010c2c:	07ef      	lsls	r7, r5, #31
 8010c2e:	f140 8086 	bpl.w	8010d3e <_vfprintf_r+0x132e>
 8010c32:	2101      	movs	r1, #1
 8010c34:	2a07      	cmp	r2, #7
 8010c36:	f8c4 8000 	str.w	r8, [r4]
 8010c3a:	6061      	str	r1, [r4, #4]
 8010c3c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010c40:	dd08      	ble.n	8010c54 <_vfprintf_r+0x1244>
 8010c42:	aa26      	add	r2, sp, #152	@ 0x98
 8010c44:	4659      	mov	r1, fp
 8010c46:	9803      	ldr	r0, [sp, #12]
 8010c48:	f000 f94a 	bl	8010ee0 <__sprint_r>
 8010c4c:	2800      	cmp	r0, #0
 8010c4e:	f040 80a2 	bne.w	8010d96 <_vfprintf_r+0x1386>
 8010c52:	ae29      	add	r6, sp, #164	@ 0xa4
 8010c54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010c56:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010c58:	6033      	str	r3, [r6, #0]
 8010c5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010c5c:	6073      	str	r3, [r6, #4]
 8010c5e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010c60:	4413      	add	r3, r2
 8010c62:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010c64:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010c66:	3301      	adds	r3, #1
 8010c68:	2b07      	cmp	r3, #7
 8010c6a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010c6c:	dc33      	bgt.n	8010cd6 <_vfprintf_r+0x12c6>
 8010c6e:	3608      	adds	r6, #8
 8010c70:	9b04      	ldr	r3, [sp, #16]
 8010c72:	2200      	movs	r2, #0
 8010c74:	1e5c      	subs	r4, r3, #1
 8010c76:	2300      	movs	r3, #0
 8010c78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010c7c:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 8010c80:	f7ef ff30 	bl	8000ae4 <__aeabi_dcmpeq>
 8010c84:	2800      	cmp	r0, #0
 8010c86:	d12f      	bne.n	8010ce8 <_vfprintf_r+0x12d8>
 8010c88:	f108 0201 	add.w	r2, r8, #1
 8010c8c:	f109 0301 	add.w	r3, r9, #1
 8010c90:	3f01      	subs	r7, #1
 8010c92:	2b07      	cmp	r3, #7
 8010c94:	e9c6 2400 	strd	r2, r4, [r6]
 8010c98:	9a04      	ldr	r2, [sp, #16]
 8010c9a:	4417      	add	r7, r2
 8010c9c:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8010ca0:	dd56      	ble.n	8010d50 <_vfprintf_r+0x1340>
 8010ca2:	aa26      	add	r2, sp, #152	@ 0x98
 8010ca4:	4659      	mov	r1, fp
 8010ca6:	9803      	ldr	r0, [sp, #12]
 8010ca8:	f000 f91a 	bl	8010ee0 <__sprint_r>
 8010cac:	2800      	cmp	r0, #0
 8010cae:	d172      	bne.n	8010d96 <_vfprintf_r+0x1386>
 8010cb0:	ae29      	add	r6, sp, #164	@ 0xa4
 8010cb2:	ab22      	add	r3, sp, #136	@ 0x88
 8010cb4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8010cb6:	6033      	str	r3, [r6, #0]
 8010cb8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8010cba:	6073      	str	r3, [r6, #4]
 8010cbc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010cbe:	4413      	add	r3, r2
 8010cc0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010cc2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010cc4:	3301      	adds	r3, #1
 8010cc6:	2b07      	cmp	r3, #7
 8010cc8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010cca:	f73f ada1 	bgt.w	8010810 <_vfprintf_r+0xe00>
 8010cce:	f106 0408 	add.w	r4, r6, #8
 8010cd2:	f7ff baf0 	b.w	80102b6 <_vfprintf_r+0x8a6>
 8010cd6:	aa26      	add	r2, sp, #152	@ 0x98
 8010cd8:	4659      	mov	r1, fp
 8010cda:	9803      	ldr	r0, [sp, #12]
 8010cdc:	f000 f900 	bl	8010ee0 <__sprint_r>
 8010ce0:	2800      	cmp	r0, #0
 8010ce2:	d158      	bne.n	8010d96 <_vfprintf_r+0x1386>
 8010ce4:	ae29      	add	r6, sp, #164	@ 0xa4
 8010ce6:	e7c3      	b.n	8010c70 <_vfprintf_r+0x1260>
 8010ce8:	9b04      	ldr	r3, [sp, #16]
 8010cea:	2b01      	cmp	r3, #1
 8010cec:	dde1      	ble.n	8010cb2 <_vfprintf_r+0x12a2>
 8010cee:	4f0a      	ldr	r7, [pc, #40]	@ (8010d18 <_vfprintf_r+0x1308>)
 8010cf0:	f04f 0810 	mov.w	r8, #16
 8010cf4:	2c10      	cmp	r4, #16
 8010cf6:	f106 0108 	add.w	r1, r6, #8
 8010cfa:	6037      	str	r7, [r6, #0]
 8010cfc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8010d00:	f103 0301 	add.w	r3, r3, #1
 8010d04:	dc0a      	bgt.n	8010d1c <_vfprintf_r+0x130c>
 8010d06:	6074      	str	r4, [r6, #4]
 8010d08:	2b07      	cmp	r3, #7
 8010d0a:	4414      	add	r4, r2
 8010d0c:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 8010d10:	dcc7      	bgt.n	8010ca2 <_vfprintf_r+0x1292>
 8010d12:	460e      	mov	r6, r1
 8010d14:	e7cd      	b.n	8010cb2 <_vfprintf_r+0x12a2>
 8010d16:	bf00      	nop
 8010d18:	0801498d 	.word	0x0801498d
 8010d1c:	3210      	adds	r2, #16
 8010d1e:	2b07      	cmp	r3, #7
 8010d20:	f8c6 8004 	str.w	r8, [r6, #4]
 8010d24:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8010d28:	dd06      	ble.n	8010d38 <_vfprintf_r+0x1328>
 8010d2a:	aa26      	add	r2, sp, #152	@ 0x98
 8010d2c:	4659      	mov	r1, fp
 8010d2e:	9803      	ldr	r0, [sp, #12]
 8010d30:	f000 f8d6 	bl	8010ee0 <__sprint_r>
 8010d34:	bb78      	cbnz	r0, 8010d96 <_vfprintf_r+0x1386>
 8010d36:	a929      	add	r1, sp, #164	@ 0xa4
 8010d38:	3c10      	subs	r4, #16
 8010d3a:	460e      	mov	r6, r1
 8010d3c:	e7da      	b.n	8010cf4 <_vfprintf_r+0x12e4>
 8010d3e:	2101      	movs	r1, #1
 8010d40:	2a07      	cmp	r2, #7
 8010d42:	f8c4 8000 	str.w	r8, [r4]
 8010d46:	6061      	str	r1, [r4, #4]
 8010d48:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010d4c:	ddb1      	ble.n	8010cb2 <_vfprintf_r+0x12a2>
 8010d4e:	e7a8      	b.n	8010ca2 <_vfprintf_r+0x1292>
 8010d50:	3608      	adds	r6, #8
 8010d52:	e7ae      	b.n	8010cb2 <_vfprintf_r+0x12a2>
 8010d54:	460c      	mov	r4, r1
 8010d56:	f7ff baae 	b.w	80102b6 <_vfprintf_r+0x8a6>
 8010d5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d5c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010d5e:	1a9d      	subs	r5, r3, r2
 8010d60:	2d00      	cmp	r5, #0
 8010d62:	f77f aaab 	ble.w	80102bc <_vfprintf_r+0x8ac>
 8010d66:	4e3d      	ldr	r6, [pc, #244]	@ (8010e5c <_vfprintf_r+0x144c>)
 8010d68:	2710      	movs	r7, #16
 8010d6a:	2d10      	cmp	r5, #16
 8010d6c:	6026      	str	r6, [r4, #0]
 8010d6e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8010d72:	f103 0301 	add.w	r3, r3, #1
 8010d76:	dc18      	bgt.n	8010daa <_vfprintf_r+0x139a>
 8010d78:	6065      	str	r5, [r4, #4]
 8010d7a:	2b07      	cmp	r3, #7
 8010d7c:	4415      	add	r5, r2
 8010d7e:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 8010d82:	f77f aa9b 	ble.w	80102bc <_vfprintf_r+0x8ac>
 8010d86:	aa26      	add	r2, sp, #152	@ 0x98
 8010d88:	4659      	mov	r1, fp
 8010d8a:	9803      	ldr	r0, [sp, #12]
 8010d8c:	f000 f8a8 	bl	8010ee0 <__sprint_r>
 8010d90:	2800      	cmp	r0, #0
 8010d92:	f43f aa93 	beq.w	80102bc <_vfprintf_r+0x8ac>
 8010d96:	f1ba 0f00 	cmp.w	sl, #0
 8010d9a:	f43f a896 	beq.w	800feca <_vfprintf_r+0x4ba>
 8010d9e:	4651      	mov	r1, sl
 8010da0:	9803      	ldr	r0, [sp, #12]
 8010da2:	f7fd fb9d 	bl	800e4e0 <_free_r>
 8010da6:	f7ff b890 	b.w	800feca <_vfprintf_r+0x4ba>
 8010daa:	3210      	adds	r2, #16
 8010dac:	2b07      	cmp	r3, #7
 8010dae:	6067      	str	r7, [r4, #4]
 8010db0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8010db4:	dc02      	bgt.n	8010dbc <_vfprintf_r+0x13ac>
 8010db6:	3408      	adds	r4, #8
 8010db8:	3d10      	subs	r5, #16
 8010dba:	e7d6      	b.n	8010d6a <_vfprintf_r+0x135a>
 8010dbc:	aa26      	add	r2, sp, #152	@ 0x98
 8010dbe:	4659      	mov	r1, fp
 8010dc0:	9803      	ldr	r0, [sp, #12]
 8010dc2:	f000 f88d 	bl	8010ee0 <__sprint_r>
 8010dc6:	2800      	cmp	r0, #0
 8010dc8:	d1e5      	bne.n	8010d96 <_vfprintf_r+0x1386>
 8010dca:	ac29      	add	r4, sp, #164	@ 0xa4
 8010dcc:	e7f4      	b.n	8010db8 <_vfprintf_r+0x13a8>
 8010dce:	4651      	mov	r1, sl
 8010dd0:	9803      	ldr	r0, [sp, #12]
 8010dd2:	f7fd fb85 	bl	800e4e0 <_free_r>
 8010dd6:	f7ff ba89 	b.w	80102ec <_vfprintf_r+0x8dc>
 8010dda:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010ddc:	b91b      	cbnz	r3, 8010de6 <_vfprintf_r+0x13d6>
 8010dde:	2300      	movs	r3, #0
 8010de0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010de2:	f7ff b872 	b.w	800feca <_vfprintf_r+0x4ba>
 8010de6:	aa26      	add	r2, sp, #152	@ 0x98
 8010de8:	4659      	mov	r1, fp
 8010dea:	9803      	ldr	r0, [sp, #12]
 8010dec:	f000 f878 	bl	8010ee0 <__sprint_r>
 8010df0:	2800      	cmp	r0, #0
 8010df2:	d0f4      	beq.n	8010dde <_vfprintf_r+0x13ce>
 8010df4:	f7ff b869 	b.w	800feca <_vfprintf_r+0x4ba>
 8010df8:	ea56 0207 	orrs.w	r2, r6, r7
 8010dfc:	9508      	str	r5, [sp, #32]
 8010dfe:	f43f ab75 	beq.w	80104ec <_vfprintf_r+0xadc>
 8010e02:	2b01      	cmp	r3, #1
 8010e04:	f43f abf6 	beq.w	80105f4 <_vfprintf_r+0xbe4>
 8010e08:	2b02      	cmp	r3, #2
 8010e0a:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8010e0e:	f43f ac3a 	beq.w	8010686 <_vfprintf_r+0xc76>
 8010e12:	f006 0307 	and.w	r3, r6, #7
 8010e16:	08f6      	lsrs	r6, r6, #3
 8010e18:	4642      	mov	r2, r8
 8010e1a:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8010e1e:	3330      	adds	r3, #48	@ 0x30
 8010e20:	08ff      	lsrs	r7, r7, #3
 8010e22:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8010e26:	ea56 0107 	orrs.w	r1, r6, r7
 8010e2a:	d1f2      	bne.n	8010e12 <_vfprintf_r+0x1402>
 8010e2c:	9908      	ldr	r1, [sp, #32]
 8010e2e:	07ce      	lsls	r6, r1, #31
 8010e30:	d506      	bpl.n	8010e40 <_vfprintf_r+0x1430>
 8010e32:	2b30      	cmp	r3, #48	@ 0x30
 8010e34:	d004      	beq.n	8010e40 <_vfprintf_r+0x1430>
 8010e36:	2330      	movs	r3, #48	@ 0x30
 8010e38:	f808 3c01 	strb.w	r3, [r8, #-1]
 8010e3c:	f1a2 0802 	sub.w	r8, r2, #2
 8010e40:	ab52      	add	r3, sp, #328	@ 0x148
 8010e42:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8010e46:	9d08      	ldr	r5, [sp, #32]
 8010e48:	f04f 0a00 	mov.w	sl, #0
 8010e4c:	eba3 0908 	sub.w	r9, r3, r8
 8010e50:	4657      	mov	r7, sl
 8010e52:	4656      	mov	r6, sl
 8010e54:	f8cd a020 	str.w	sl, [sp, #32]
 8010e58:	f7ff b979 	b.w	801014e <_vfprintf_r+0x73e>
 8010e5c:	0801499d 	.word	0x0801499d

08010e60 <__sbprintf>:
 8010e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e62:	461f      	mov	r7, r3
 8010e64:	898b      	ldrh	r3, [r1, #12]
 8010e66:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8010e6a:	4615      	mov	r5, r2
 8010e6c:	f023 0302 	bic.w	r3, r3, #2
 8010e70:	4606      	mov	r6, r0
 8010e72:	a816      	add	r0, sp, #88	@ 0x58
 8010e74:	460c      	mov	r4, r1
 8010e76:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010e7a:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8010e7c:	9319      	str	r3, [sp, #100]	@ 0x64
 8010e7e:	89cb      	ldrh	r3, [r1, #14]
 8010e80:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010e84:	69cb      	ldr	r3, [r1, #28]
 8010e86:	9307      	str	r3, [sp, #28]
 8010e88:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8010e8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e8c:	ab1a      	add	r3, sp, #104	@ 0x68
 8010e8e:	9300      	str	r3, [sp, #0]
 8010e90:	9304      	str	r3, [sp, #16]
 8010e92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e96:	9302      	str	r3, [sp, #8]
 8010e98:	9305      	str	r3, [sp, #20]
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	9306      	str	r3, [sp, #24]
 8010e9e:	f7fd fa9b 	bl	800e3d8 <__retarget_lock_init_recursive>
 8010ea2:	462a      	mov	r2, r5
 8010ea4:	463b      	mov	r3, r7
 8010ea6:	4669      	mov	r1, sp
 8010ea8:	4630      	mov	r0, r6
 8010eaa:	f7fe fdb1 	bl	800fa10 <_vfprintf_r>
 8010eae:	1e05      	subs	r5, r0, #0
 8010eb0:	db07      	blt.n	8010ec2 <__sbprintf+0x62>
 8010eb2:	4669      	mov	r1, sp
 8010eb4:	4630      	mov	r0, r6
 8010eb6:	f000 fdeb 	bl	8011a90 <_fflush_r>
 8010eba:	2800      	cmp	r0, #0
 8010ebc:	bf18      	it	ne
 8010ebe:	f04f 35ff 	movne.w	r5, #4294967295
 8010ec2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010ec6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8010ec8:	065b      	lsls	r3, r3, #25
 8010eca:	bf42      	ittt	mi
 8010ecc:	89a3      	ldrhmi	r3, [r4, #12]
 8010ece:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8010ed2:	81a3      	strhmi	r3, [r4, #12]
 8010ed4:	f7fd fa81 	bl	800e3da <__retarget_lock_close_recursive>
 8010ed8:	4628      	mov	r0, r5
 8010eda:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8010ede:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010ee0 <__sprint_r>:
 8010ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee4:	6893      	ldr	r3, [r2, #8]
 8010ee6:	4680      	mov	r8, r0
 8010ee8:	460e      	mov	r6, r1
 8010eea:	4614      	mov	r4, r2
 8010eec:	b343      	cbz	r3, 8010f40 <__sprint_r+0x60>
 8010eee:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8010ef0:	049d      	lsls	r5, r3, #18
 8010ef2:	d522      	bpl.n	8010f3a <__sprint_r+0x5a>
 8010ef4:	6815      	ldr	r5, [r2, #0]
 8010ef6:	68a0      	ldr	r0, [r4, #8]
 8010ef8:	3508      	adds	r5, #8
 8010efa:	b928      	cbnz	r0, 8010f08 <__sprint_r+0x28>
 8010efc:	2300      	movs	r3, #0
 8010efe:	60a3      	str	r3, [r4, #8]
 8010f00:	2300      	movs	r3, #0
 8010f02:	6063      	str	r3, [r4, #4]
 8010f04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f08:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 8010f0c:	f04f 0900 	mov.w	r9, #0
 8010f10:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 8010f14:	45ca      	cmp	sl, r9
 8010f16:	dc05      	bgt.n	8010f24 <__sprint_r+0x44>
 8010f18:	68a3      	ldr	r3, [r4, #8]
 8010f1a:	f027 0703 	bic.w	r7, r7, #3
 8010f1e:	1bdb      	subs	r3, r3, r7
 8010f20:	60a3      	str	r3, [r4, #8]
 8010f22:	e7e8      	b.n	8010ef6 <__sprint_r+0x16>
 8010f24:	4632      	mov	r2, r6
 8010f26:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8010f2a:	4640      	mov	r0, r8
 8010f2c:	f000 ffb9 	bl	8011ea2 <_fputwc_r>
 8010f30:	1c43      	adds	r3, r0, #1
 8010f32:	d0e3      	beq.n	8010efc <__sprint_r+0x1c>
 8010f34:	f109 0901 	add.w	r9, r9, #1
 8010f38:	e7ec      	b.n	8010f14 <__sprint_r+0x34>
 8010f3a:	f000 fdcf 	bl	8011adc <__sfvwrite_r>
 8010f3e:	e7dd      	b.n	8010efc <__sprint_r+0x1c>
 8010f40:	4618      	mov	r0, r3
 8010f42:	e7dd      	b.n	8010f00 <__sprint_r+0x20>

08010f44 <_vfiprintf_r>:
 8010f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f48:	b0bb      	sub	sp, #236	@ 0xec
 8010f4a:	460f      	mov	r7, r1
 8010f4c:	4693      	mov	fp, r2
 8010f4e:	461c      	mov	r4, r3
 8010f50:	461d      	mov	r5, r3
 8010f52:	9000      	str	r0, [sp, #0]
 8010f54:	b118      	cbz	r0, 8010f5e <_vfiprintf_r+0x1a>
 8010f56:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010f58:	b90b      	cbnz	r3, 8010f5e <_vfiprintf_r+0x1a>
 8010f5a:	f7fd f811 	bl	800df80 <__sinit>
 8010f5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010f60:	07db      	lsls	r3, r3, #31
 8010f62:	d405      	bmi.n	8010f70 <_vfiprintf_r+0x2c>
 8010f64:	89bb      	ldrh	r3, [r7, #12]
 8010f66:	059e      	lsls	r6, r3, #22
 8010f68:	d402      	bmi.n	8010f70 <_vfiprintf_r+0x2c>
 8010f6a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010f6c:	f7fd fa36 	bl	800e3dc <__retarget_lock_acquire_recursive>
 8010f70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010f74:	0498      	lsls	r0, r3, #18
 8010f76:	d406      	bmi.n	8010f86 <_vfiprintf_r+0x42>
 8010f78:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8010f7c:	81bb      	strh	r3, [r7, #12]
 8010f7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010f80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010f84:	667b      	str	r3, [r7, #100]	@ 0x64
 8010f86:	89bb      	ldrh	r3, [r7, #12]
 8010f88:	0719      	lsls	r1, r3, #28
 8010f8a:	d501      	bpl.n	8010f90 <_vfiprintf_r+0x4c>
 8010f8c:	693b      	ldr	r3, [r7, #16]
 8010f8e:	b9ab      	cbnz	r3, 8010fbc <_vfiprintf_r+0x78>
 8010f90:	4639      	mov	r1, r7
 8010f92:	9800      	ldr	r0, [sp, #0]
 8010f94:	f000 feee 	bl	8011d74 <__swsetup_r>
 8010f98:	b180      	cbz	r0, 8010fbc <_vfiprintf_r+0x78>
 8010f9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010f9c:	07da      	lsls	r2, r3, #31
 8010f9e:	d506      	bpl.n	8010fae <_vfiprintf_r+0x6a>
 8010fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8010fa4:	9303      	str	r3, [sp, #12]
 8010fa6:	9803      	ldr	r0, [sp, #12]
 8010fa8:	b03b      	add	sp, #236	@ 0xec
 8010faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fae:	89bb      	ldrh	r3, [r7, #12]
 8010fb0:	059b      	lsls	r3, r3, #22
 8010fb2:	d4f5      	bmi.n	8010fa0 <_vfiprintf_r+0x5c>
 8010fb4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010fb6:	f7fd fa12 	bl	800e3de <__retarget_lock_release_recursive>
 8010fba:	e7f1      	b.n	8010fa0 <_vfiprintf_r+0x5c>
 8010fbc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010fc0:	f003 021a 	and.w	r2, r3, #26
 8010fc4:	2a0a      	cmp	r2, #10
 8010fc6:	d114      	bne.n	8010ff2 <_vfiprintf_r+0xae>
 8010fc8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010fcc:	2a00      	cmp	r2, #0
 8010fce:	db10      	blt.n	8010ff2 <_vfiprintf_r+0xae>
 8010fd0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010fd2:	07d6      	lsls	r6, r2, #31
 8010fd4:	d404      	bmi.n	8010fe0 <_vfiprintf_r+0x9c>
 8010fd6:	059d      	lsls	r5, r3, #22
 8010fd8:	d402      	bmi.n	8010fe0 <_vfiprintf_r+0x9c>
 8010fda:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010fdc:	f7fd f9ff 	bl	800e3de <__retarget_lock_release_recursive>
 8010fe0:	4623      	mov	r3, r4
 8010fe2:	465a      	mov	r2, fp
 8010fe4:	4639      	mov	r1, r7
 8010fe6:	9800      	ldr	r0, [sp, #0]
 8010fe8:	b03b      	add	sp, #236	@ 0xec
 8010fea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fee:	f000 bc31 	b.w	8011854 <__sbprintf>
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	ae11      	add	r6, sp, #68	@ 0x44
 8010ff6:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8010ffa:	960e      	str	r6, [sp, #56]	@ 0x38
 8010ffc:	9307      	str	r3, [sp, #28]
 8010ffe:	9309      	str	r3, [sp, #36]	@ 0x24
 8011000:	9303      	str	r3, [sp, #12]
 8011002:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8011006:	465b      	mov	r3, fp
 8011008:	461c      	mov	r4, r3
 801100a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801100e:	b10a      	cbz	r2, 8011014 <_vfiprintf_r+0xd0>
 8011010:	2a25      	cmp	r2, #37	@ 0x25
 8011012:	d1f9      	bne.n	8011008 <_vfiprintf_r+0xc4>
 8011014:	ebb4 080b 	subs.w	r8, r4, fp
 8011018:	d00d      	beq.n	8011036 <_vfiprintf_r+0xf2>
 801101a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801101c:	4443      	add	r3, r8
 801101e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011020:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011022:	3301      	adds	r3, #1
 8011024:	2b07      	cmp	r3, #7
 8011026:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011028:	e9c6 b800 	strd	fp, r8, [r6]
 801102c:	dc75      	bgt.n	801111a <_vfiprintf_r+0x1d6>
 801102e:	3608      	adds	r6, #8
 8011030:	9b03      	ldr	r3, [sp, #12]
 8011032:	4443      	add	r3, r8
 8011034:	9303      	str	r3, [sp, #12]
 8011036:	7823      	ldrb	r3, [r4, #0]
 8011038:	2b00      	cmp	r3, #0
 801103a:	f000 83cd 	beq.w	80117d8 <_vfiprintf_r+0x894>
 801103e:	2300      	movs	r3, #0
 8011040:	f04f 32ff 	mov.w	r2, #4294967295
 8011044:	3401      	adds	r4, #1
 8011046:	469a      	mov	sl, r3
 8011048:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801104c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8011050:	46a3      	mov	fp, r4
 8011052:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8011056:	f1a3 0220 	sub.w	r2, r3, #32
 801105a:	2a5a      	cmp	r2, #90	@ 0x5a
 801105c:	f200 8315 	bhi.w	801168a <_vfiprintf_r+0x746>
 8011060:	e8df f012 	tbh	[pc, r2, lsl #1]
 8011064:	0313009a 	.word	0x0313009a
 8011068:	00a20313 	.word	0x00a20313
 801106c:	03130313 	.word	0x03130313
 8011070:	00820313 	.word	0x00820313
 8011074:	03130313 	.word	0x03130313
 8011078:	00af00a5 	.word	0x00af00a5
 801107c:	00ac0313 	.word	0x00ac0313
 8011080:	031300b1 	.word	0x031300b1
 8011084:	00d000cd 	.word	0x00d000cd
 8011088:	00d000d0 	.word	0x00d000d0
 801108c:	00d000d0 	.word	0x00d000d0
 8011090:	00d000d0 	.word	0x00d000d0
 8011094:	00d000d0 	.word	0x00d000d0
 8011098:	03130313 	.word	0x03130313
 801109c:	03130313 	.word	0x03130313
 80110a0:	03130313 	.word	0x03130313
 80110a4:	03130313 	.word	0x03130313
 80110a8:	00f70313 	.word	0x00f70313
 80110ac:	03130104 	.word	0x03130104
 80110b0:	03130313 	.word	0x03130313
 80110b4:	03130313 	.word	0x03130313
 80110b8:	03130313 	.word	0x03130313
 80110bc:	03130313 	.word	0x03130313
 80110c0:	01520313 	.word	0x01520313
 80110c4:	03130313 	.word	0x03130313
 80110c8:	019a0313 	.word	0x019a0313
 80110cc:	02790313 	.word	0x02790313
 80110d0:	03130313 	.word	0x03130313
 80110d4:	03130299 	.word	0x03130299
 80110d8:	03130313 	.word	0x03130313
 80110dc:	03130313 	.word	0x03130313
 80110e0:	03130313 	.word	0x03130313
 80110e4:	03130313 	.word	0x03130313
 80110e8:	00f70313 	.word	0x00f70313
 80110ec:	03130106 	.word	0x03130106
 80110f0:	03130313 	.word	0x03130313
 80110f4:	010600e0 	.word	0x010600e0
 80110f8:	031300f1 	.word	0x031300f1
 80110fc:	031300eb 	.word	0x031300eb
 8011100:	01540132 	.word	0x01540132
 8011104:	00f10189 	.word	0x00f10189
 8011108:	019a0313 	.word	0x019a0313
 801110c:	027b0098 	.word	0x027b0098
 8011110:	03130313 	.word	0x03130313
 8011114:	03130065 	.word	0x03130065
 8011118:	0098      	.short	0x0098
 801111a:	aa0e      	add	r2, sp, #56	@ 0x38
 801111c:	4639      	mov	r1, r7
 801111e:	9800      	ldr	r0, [sp, #0]
 8011120:	f7ff fede 	bl	8010ee0 <__sprint_r>
 8011124:	2800      	cmp	r0, #0
 8011126:	f040 8336 	bne.w	8011796 <_vfiprintf_r+0x852>
 801112a:	ae11      	add	r6, sp, #68	@ 0x44
 801112c:	e780      	b.n	8011030 <_vfiprintf_r+0xec>
 801112e:	4a99      	ldr	r2, [pc, #612]	@ (8011394 <_vfiprintf_r+0x450>)
 8011130:	9205      	str	r2, [sp, #20]
 8011132:	f01a 0220 	ands.w	r2, sl, #32
 8011136:	f000 8230 	beq.w	801159a <_vfiprintf_r+0x656>
 801113a:	3507      	adds	r5, #7
 801113c:	f025 0507 	bic.w	r5, r5, #7
 8011140:	46a8      	mov	r8, r5
 8011142:	686d      	ldr	r5, [r5, #4]
 8011144:	f858 4b08 	ldr.w	r4, [r8], #8
 8011148:	f01a 0f01 	tst.w	sl, #1
 801114c:	d009      	beq.n	8011162 <_vfiprintf_r+0x21e>
 801114e:	ea54 0205 	orrs.w	r2, r4, r5
 8011152:	bf1f      	itttt	ne
 8011154:	2230      	movne	r2, #48	@ 0x30
 8011156:	f04a 0a02 	orrne.w	sl, sl, #2
 801115a:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 801115e:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 8011162:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8011166:	e112      	b.n	801138e <_vfiprintf_r+0x44a>
 8011168:	9800      	ldr	r0, [sp, #0]
 801116a:	f000 fedd 	bl	8011f28 <_localeconv_r>
 801116e:	6843      	ldr	r3, [r0, #4]
 8011170:	4618      	mov	r0, r3
 8011172:	9309      	str	r3, [sp, #36]	@ 0x24
 8011174:	f7ef f88a 	bl	800028c <strlen>
 8011178:	9007      	str	r0, [sp, #28]
 801117a:	9800      	ldr	r0, [sp, #0]
 801117c:	f000 fed4 	bl	8011f28 <_localeconv_r>
 8011180:	6883      	ldr	r3, [r0, #8]
 8011182:	9306      	str	r3, [sp, #24]
 8011184:	9b07      	ldr	r3, [sp, #28]
 8011186:	b12b      	cbz	r3, 8011194 <_vfiprintf_r+0x250>
 8011188:	9b06      	ldr	r3, [sp, #24]
 801118a:	b11b      	cbz	r3, 8011194 <_vfiprintf_r+0x250>
 801118c:	781b      	ldrb	r3, [r3, #0]
 801118e:	b10b      	cbz	r3, 8011194 <_vfiprintf_r+0x250>
 8011190:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8011194:	465c      	mov	r4, fp
 8011196:	e75b      	b.n	8011050 <_vfiprintf_r+0x10c>
 8011198:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801119c:	2b00      	cmp	r3, #0
 801119e:	d1f9      	bne.n	8011194 <_vfiprintf_r+0x250>
 80111a0:	2320      	movs	r3, #32
 80111a2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80111a6:	e7f5      	b.n	8011194 <_vfiprintf_r+0x250>
 80111a8:	f04a 0a01 	orr.w	sl, sl, #1
 80111ac:	e7f2      	b.n	8011194 <_vfiprintf_r+0x250>
 80111ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	9302      	str	r3, [sp, #8]
 80111b6:	daed      	bge.n	8011194 <_vfiprintf_r+0x250>
 80111b8:	425b      	negs	r3, r3
 80111ba:	9302      	str	r3, [sp, #8]
 80111bc:	f04a 0a04 	orr.w	sl, sl, #4
 80111c0:	e7e8      	b.n	8011194 <_vfiprintf_r+0x250>
 80111c2:	232b      	movs	r3, #43	@ 0x2b
 80111c4:	e7ed      	b.n	80111a2 <_vfiprintf_r+0x25e>
 80111c6:	465a      	mov	r2, fp
 80111c8:	f812 3b01 	ldrb.w	r3, [r2], #1
 80111cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80111ce:	d112      	bne.n	80111f6 <_vfiprintf_r+0x2b2>
 80111d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80111d4:	4693      	mov	fp, r2
 80111d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80111da:	9301      	str	r3, [sp, #4]
 80111dc:	e7da      	b.n	8011194 <_vfiprintf_r+0x250>
 80111de:	9b01      	ldr	r3, [sp, #4]
 80111e0:	fb00 1303 	mla	r3, r0, r3, r1
 80111e4:	9301      	str	r3, [sp, #4]
 80111e6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80111ea:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80111ee:	2909      	cmp	r1, #9
 80111f0:	d9f5      	bls.n	80111de <_vfiprintf_r+0x29a>
 80111f2:	4693      	mov	fp, r2
 80111f4:	e72f      	b.n	8011056 <_vfiprintf_r+0x112>
 80111f6:	2100      	movs	r1, #0
 80111f8:	200a      	movs	r0, #10
 80111fa:	9101      	str	r1, [sp, #4]
 80111fc:	e7f5      	b.n	80111ea <_vfiprintf_r+0x2a6>
 80111fe:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 8011202:	e7c7      	b.n	8011194 <_vfiprintf_r+0x250>
 8011204:	2100      	movs	r1, #0
 8011206:	465a      	mov	r2, fp
 8011208:	200a      	movs	r0, #10
 801120a:	9102      	str	r1, [sp, #8]
 801120c:	9902      	ldr	r1, [sp, #8]
 801120e:	3b30      	subs	r3, #48	@ 0x30
 8011210:	fb00 3301 	mla	r3, r0, r1, r3
 8011214:	9302      	str	r3, [sp, #8]
 8011216:	f812 3b01 	ldrb.w	r3, [r2], #1
 801121a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 801121e:	2909      	cmp	r1, #9
 8011220:	d9f4      	bls.n	801120c <_vfiprintf_r+0x2c8>
 8011222:	e7e6      	b.n	80111f2 <_vfiprintf_r+0x2ae>
 8011224:	f89b 3000 	ldrb.w	r3, [fp]
 8011228:	2b68      	cmp	r3, #104	@ 0x68
 801122a:	bf06      	itte	eq
 801122c:	f10b 0b01 	addeq.w	fp, fp, #1
 8011230:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8011234:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8011238:	e7ac      	b.n	8011194 <_vfiprintf_r+0x250>
 801123a:	f89b 3000 	ldrb.w	r3, [fp]
 801123e:	2b6c      	cmp	r3, #108	@ 0x6c
 8011240:	d104      	bne.n	801124c <_vfiprintf_r+0x308>
 8011242:	f10b 0b01 	add.w	fp, fp, #1
 8011246:	f04a 0a20 	orr.w	sl, sl, #32
 801124a:	e7a3      	b.n	8011194 <_vfiprintf_r+0x250>
 801124c:	f04a 0a10 	orr.w	sl, sl, #16
 8011250:	e7a0      	b.n	8011194 <_vfiprintf_r+0x250>
 8011252:	46a8      	mov	r8, r5
 8011254:	2400      	movs	r4, #0
 8011256:	f858 3b04 	ldr.w	r3, [r8], #4
 801125a:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 801125e:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8011262:	2301      	movs	r3, #1
 8011264:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 8011268:	9301      	str	r3, [sp, #4]
 801126a:	e0aa      	b.n	80113c2 <_vfiprintf_r+0x47e>
 801126c:	f04a 0a10 	orr.w	sl, sl, #16
 8011270:	f01a 0f20 	tst.w	sl, #32
 8011274:	d011      	beq.n	801129a <_vfiprintf_r+0x356>
 8011276:	3507      	adds	r5, #7
 8011278:	f025 0507 	bic.w	r5, r5, #7
 801127c:	46a8      	mov	r8, r5
 801127e:	686d      	ldr	r5, [r5, #4]
 8011280:	f858 4b08 	ldr.w	r4, [r8], #8
 8011284:	2d00      	cmp	r5, #0
 8011286:	da06      	bge.n	8011296 <_vfiprintf_r+0x352>
 8011288:	4264      	negs	r4, r4
 801128a:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 801128e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8011292:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8011296:	2301      	movs	r3, #1
 8011298:	e048      	b.n	801132c <_vfiprintf_r+0x3e8>
 801129a:	46a8      	mov	r8, r5
 801129c:	f01a 0f10 	tst.w	sl, #16
 80112a0:	f858 5b04 	ldr.w	r5, [r8], #4
 80112a4:	d002      	beq.n	80112ac <_vfiprintf_r+0x368>
 80112a6:	462c      	mov	r4, r5
 80112a8:	17ed      	asrs	r5, r5, #31
 80112aa:	e7eb      	b.n	8011284 <_vfiprintf_r+0x340>
 80112ac:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80112b0:	d003      	beq.n	80112ba <_vfiprintf_r+0x376>
 80112b2:	b22c      	sxth	r4, r5
 80112b4:	f345 35c0 	sbfx	r5, r5, #15, #1
 80112b8:	e7e4      	b.n	8011284 <_vfiprintf_r+0x340>
 80112ba:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 80112be:	d0f2      	beq.n	80112a6 <_vfiprintf_r+0x362>
 80112c0:	b26c      	sxtb	r4, r5
 80112c2:	f345 15c0 	sbfx	r5, r5, #7, #1
 80112c6:	e7dd      	b.n	8011284 <_vfiprintf_r+0x340>
 80112c8:	f01a 0f20 	tst.w	sl, #32
 80112cc:	d007      	beq.n	80112de <_vfiprintf_r+0x39a>
 80112ce:	9a03      	ldr	r2, [sp, #12]
 80112d0:	682b      	ldr	r3, [r5, #0]
 80112d2:	17d2      	asrs	r2, r2, #31
 80112d4:	9903      	ldr	r1, [sp, #12]
 80112d6:	e9c3 1200 	strd	r1, r2, [r3]
 80112da:	3504      	adds	r5, #4
 80112dc:	e693      	b.n	8011006 <_vfiprintf_r+0xc2>
 80112de:	f01a 0f10 	tst.w	sl, #16
 80112e2:	d003      	beq.n	80112ec <_vfiprintf_r+0x3a8>
 80112e4:	682b      	ldr	r3, [r5, #0]
 80112e6:	9a03      	ldr	r2, [sp, #12]
 80112e8:	601a      	str	r2, [r3, #0]
 80112ea:	e7f6      	b.n	80112da <_vfiprintf_r+0x396>
 80112ec:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80112f0:	d003      	beq.n	80112fa <_vfiprintf_r+0x3b6>
 80112f2:	682b      	ldr	r3, [r5, #0]
 80112f4:	9a03      	ldr	r2, [sp, #12]
 80112f6:	801a      	strh	r2, [r3, #0]
 80112f8:	e7ef      	b.n	80112da <_vfiprintf_r+0x396>
 80112fa:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 80112fe:	d0f1      	beq.n	80112e4 <_vfiprintf_r+0x3a0>
 8011300:	682b      	ldr	r3, [r5, #0]
 8011302:	9a03      	ldr	r2, [sp, #12]
 8011304:	701a      	strb	r2, [r3, #0]
 8011306:	e7e8      	b.n	80112da <_vfiprintf_r+0x396>
 8011308:	f04a 0a10 	orr.w	sl, sl, #16
 801130c:	f01a 0320 	ands.w	r3, sl, #32
 8011310:	d01f      	beq.n	8011352 <_vfiprintf_r+0x40e>
 8011312:	3507      	adds	r5, #7
 8011314:	f025 0507 	bic.w	r5, r5, #7
 8011318:	46a8      	mov	r8, r5
 801131a:	686d      	ldr	r5, [r5, #4]
 801131c:	f858 4b08 	ldr.w	r4, [r8], #8
 8011320:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8011324:	2300      	movs	r3, #0
 8011326:	2200      	movs	r2, #0
 8011328:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 801132c:	9a01      	ldr	r2, [sp, #4]
 801132e:	3201      	adds	r2, #1
 8011330:	f000 825f 	beq.w	80117f2 <_vfiprintf_r+0x8ae>
 8011334:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8011338:	9204      	str	r2, [sp, #16]
 801133a:	ea54 0205 	orrs.w	r2, r4, r5
 801133e:	f040 825e 	bne.w	80117fe <_vfiprintf_r+0x8ba>
 8011342:	9a01      	ldr	r2, [sp, #4]
 8011344:	2a00      	cmp	r2, #0
 8011346:	f000 8197 	beq.w	8011678 <_vfiprintf_r+0x734>
 801134a:	2b01      	cmp	r3, #1
 801134c:	f040 825a 	bne.w	8011804 <_vfiprintf_r+0x8c0>
 8011350:	e13a      	b.n	80115c8 <_vfiprintf_r+0x684>
 8011352:	46a8      	mov	r8, r5
 8011354:	f01a 0510 	ands.w	r5, sl, #16
 8011358:	f858 4b04 	ldr.w	r4, [r8], #4
 801135c:	d001      	beq.n	8011362 <_vfiprintf_r+0x41e>
 801135e:	461d      	mov	r5, r3
 8011360:	e7de      	b.n	8011320 <_vfiprintf_r+0x3dc>
 8011362:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8011366:	d001      	beq.n	801136c <_vfiprintf_r+0x428>
 8011368:	b2a4      	uxth	r4, r4
 801136a:	e7d9      	b.n	8011320 <_vfiprintf_r+0x3dc>
 801136c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8011370:	d0d6      	beq.n	8011320 <_vfiprintf_r+0x3dc>
 8011372:	b2e4      	uxtb	r4, r4
 8011374:	e7f3      	b.n	801135e <_vfiprintf_r+0x41a>
 8011376:	46a8      	mov	r8, r5
 8011378:	f647 0330 	movw	r3, #30768	@ 0x7830
 801137c:	2500      	movs	r5, #0
 801137e:	f04a 0a02 	orr.w	sl, sl, #2
 8011382:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8011386:	f858 4b04 	ldr.w	r4, [r8], #4
 801138a:	4b02      	ldr	r3, [pc, #8]	@ (8011394 <_vfiprintf_r+0x450>)
 801138c:	9305      	str	r3, [sp, #20]
 801138e:	2302      	movs	r3, #2
 8011390:	e7c9      	b.n	8011326 <_vfiprintf_r+0x3e2>
 8011392:	bf00      	nop
 8011394:	08014949 	.word	0x08014949
 8011398:	9b01      	ldr	r3, [sp, #4]
 801139a:	46a8      	mov	r8, r5
 801139c:	2500      	movs	r5, #0
 801139e:	1c5c      	adds	r4, r3, #1
 80113a0:	f858 9b04 	ldr.w	r9, [r8], #4
 80113a4:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 80113a8:	f000 80d0 	beq.w	801154c <_vfiprintf_r+0x608>
 80113ac:	461a      	mov	r2, r3
 80113ae:	4629      	mov	r1, r5
 80113b0:	4648      	mov	r0, r9
 80113b2:	f000 fdd1 	bl	8011f58 <memchr>
 80113b6:	4604      	mov	r4, r0
 80113b8:	b118      	cbz	r0, 80113c2 <_vfiprintf_r+0x47e>
 80113ba:	eba0 0309 	sub.w	r3, r0, r9
 80113be:	9301      	str	r3, [sp, #4]
 80113c0:	462c      	mov	r4, r5
 80113c2:	9b01      	ldr	r3, [sp, #4]
 80113c4:	42a3      	cmp	r3, r4
 80113c6:	bfb8      	it	lt
 80113c8:	4623      	movlt	r3, r4
 80113ca:	9304      	str	r3, [sp, #16]
 80113cc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80113d0:	b113      	cbz	r3, 80113d8 <_vfiprintf_r+0x494>
 80113d2:	9b04      	ldr	r3, [sp, #16]
 80113d4:	3301      	adds	r3, #1
 80113d6:	9304      	str	r3, [sp, #16]
 80113d8:	f01a 0302 	ands.w	r3, sl, #2
 80113dc:	9308      	str	r3, [sp, #32]
 80113de:	bf1e      	ittt	ne
 80113e0:	9b04      	ldrne	r3, [sp, #16]
 80113e2:	3302      	addne	r3, #2
 80113e4:	9304      	strne	r3, [sp, #16]
 80113e6:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 80113ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80113ec:	d11f      	bne.n	801142e <_vfiprintf_r+0x4ea>
 80113ee:	9b02      	ldr	r3, [sp, #8]
 80113f0:	9a04      	ldr	r2, [sp, #16]
 80113f2:	1a9d      	subs	r5, r3, r2
 80113f4:	2d00      	cmp	r5, #0
 80113f6:	dd1a      	ble.n	801142e <_vfiprintf_r+0x4ea>
 80113f8:	4ba9      	ldr	r3, [pc, #676]	@ (80116a0 <_vfiprintf_r+0x75c>)
 80113fa:	2d10      	cmp	r5, #16
 80113fc:	f106 0008 	add.w	r0, r6, #8
 8011400:	6033      	str	r3, [r6, #0]
 8011402:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8011406:	f102 0201 	add.w	r2, r2, #1
 801140a:	f300 814f 	bgt.w	80116ac <_vfiprintf_r+0x768>
 801140e:	6075      	str	r5, [r6, #4]
 8011410:	2a07      	cmp	r2, #7
 8011412:	4465      	add	r5, ip
 8011414:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8011418:	f340 815b 	ble.w	80116d2 <_vfiprintf_r+0x78e>
 801141c:	aa0e      	add	r2, sp, #56	@ 0x38
 801141e:	4639      	mov	r1, r7
 8011420:	9800      	ldr	r0, [sp, #0]
 8011422:	f7ff fd5d 	bl	8010ee0 <__sprint_r>
 8011426:	2800      	cmp	r0, #0
 8011428:	f040 81b5 	bne.w	8011796 <_vfiprintf_r+0x852>
 801142c:	ae11      	add	r6, sp, #68	@ 0x44
 801142e:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8011432:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8011436:	b161      	cbz	r1, 8011452 <_vfiprintf_r+0x50e>
 8011438:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 801143c:	3301      	adds	r3, #1
 801143e:	6031      	str	r1, [r6, #0]
 8011440:	2101      	movs	r1, #1
 8011442:	2b07      	cmp	r3, #7
 8011444:	440a      	add	r2, r1
 8011446:	6071      	str	r1, [r6, #4]
 8011448:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801144c:	f300 8143 	bgt.w	80116d6 <_vfiprintf_r+0x792>
 8011450:	3608      	adds	r6, #8
 8011452:	9908      	ldr	r1, [sp, #32]
 8011454:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8011458:	b159      	cbz	r1, 8011472 <_vfiprintf_r+0x52e>
 801145a:	a90d      	add	r1, sp, #52	@ 0x34
 801145c:	3301      	adds	r3, #1
 801145e:	6031      	str	r1, [r6, #0]
 8011460:	2102      	movs	r1, #2
 8011462:	2b07      	cmp	r3, #7
 8011464:	440a      	add	r2, r1
 8011466:	6071      	str	r1, [r6, #4]
 8011468:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801146c:	f300 813c 	bgt.w	80116e8 <_vfiprintf_r+0x7a4>
 8011470:	3608      	adds	r6, #8
 8011472:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011474:	2b80      	cmp	r3, #128	@ 0x80
 8011476:	d11f      	bne.n	80114b8 <_vfiprintf_r+0x574>
 8011478:	9b02      	ldr	r3, [sp, #8]
 801147a:	9a04      	ldr	r2, [sp, #16]
 801147c:	1a9d      	subs	r5, r3, r2
 801147e:	2d00      	cmp	r5, #0
 8011480:	dd1a      	ble.n	80114b8 <_vfiprintf_r+0x574>
 8011482:	4b88      	ldr	r3, [pc, #544]	@ (80116a4 <_vfiprintf_r+0x760>)
 8011484:	2d10      	cmp	r5, #16
 8011486:	f106 0008 	add.w	r0, r6, #8
 801148a:	6033      	str	r3, [r6, #0]
 801148c:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8011490:	f102 0201 	add.w	r2, r2, #1
 8011494:	f300 8131 	bgt.w	80116fa <_vfiprintf_r+0x7b6>
 8011498:	6075      	str	r5, [r6, #4]
 801149a:	2a07      	cmp	r2, #7
 801149c:	4465      	add	r5, ip
 801149e:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 80114a2:	f340 813d 	ble.w	8011720 <_vfiprintf_r+0x7dc>
 80114a6:	aa0e      	add	r2, sp, #56	@ 0x38
 80114a8:	4639      	mov	r1, r7
 80114aa:	9800      	ldr	r0, [sp, #0]
 80114ac:	f7ff fd18 	bl	8010ee0 <__sprint_r>
 80114b0:	2800      	cmp	r0, #0
 80114b2:	f040 8170 	bne.w	8011796 <_vfiprintf_r+0x852>
 80114b6:	ae11      	add	r6, sp, #68	@ 0x44
 80114b8:	9b01      	ldr	r3, [sp, #4]
 80114ba:	1ae4      	subs	r4, r4, r3
 80114bc:	2c00      	cmp	r4, #0
 80114be:	dd1a      	ble.n	80114f6 <_vfiprintf_r+0x5b2>
 80114c0:	4878      	ldr	r0, [pc, #480]	@ (80116a4 <_vfiprintf_r+0x760>)
 80114c2:	2c10      	cmp	r4, #16
 80114c4:	f106 0108 	add.w	r1, r6, #8
 80114c8:	6030      	str	r0, [r6, #0]
 80114ca:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80114ce:	f103 0301 	add.w	r3, r3, #1
 80114d2:	f300 8127 	bgt.w	8011724 <_vfiprintf_r+0x7e0>
 80114d6:	6074      	str	r4, [r6, #4]
 80114d8:	2b07      	cmp	r3, #7
 80114da:	4414      	add	r4, r2
 80114dc:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 80114e0:	f340 8131 	ble.w	8011746 <_vfiprintf_r+0x802>
 80114e4:	aa0e      	add	r2, sp, #56	@ 0x38
 80114e6:	4639      	mov	r1, r7
 80114e8:	9800      	ldr	r0, [sp, #0]
 80114ea:	f7ff fcf9 	bl	8010ee0 <__sprint_r>
 80114ee:	2800      	cmp	r0, #0
 80114f0:	f040 8151 	bne.w	8011796 <_vfiprintf_r+0x852>
 80114f4:	ae11      	add	r6, sp, #68	@ 0x44
 80114f6:	9b01      	ldr	r3, [sp, #4]
 80114f8:	9a01      	ldr	r2, [sp, #4]
 80114fa:	6073      	str	r3, [r6, #4]
 80114fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80114fe:	f8c6 9000 	str.w	r9, [r6]
 8011502:	4413      	add	r3, r2
 8011504:	9310      	str	r3, [sp, #64]	@ 0x40
 8011506:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011508:	3301      	adds	r3, #1
 801150a:	2b07      	cmp	r3, #7
 801150c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801150e:	f300 811c 	bgt.w	801174a <_vfiprintf_r+0x806>
 8011512:	f106 0308 	add.w	r3, r6, #8
 8011516:	f01a 0f04 	tst.w	sl, #4
 801151a:	f040 811e 	bne.w	801175a <_vfiprintf_r+0x816>
 801151e:	9904      	ldr	r1, [sp, #16]
 8011520:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011524:	428a      	cmp	r2, r1
 8011526:	bfac      	ite	ge
 8011528:	189b      	addge	r3, r3, r2
 801152a:	185b      	addlt	r3, r3, r1
 801152c:	9303      	str	r3, [sp, #12]
 801152e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011530:	b13b      	cbz	r3, 8011542 <_vfiprintf_r+0x5fe>
 8011532:	aa0e      	add	r2, sp, #56	@ 0x38
 8011534:	4639      	mov	r1, r7
 8011536:	9800      	ldr	r0, [sp, #0]
 8011538:	f7ff fcd2 	bl	8010ee0 <__sprint_r>
 801153c:	2800      	cmp	r0, #0
 801153e:	f040 812a 	bne.w	8011796 <_vfiprintf_r+0x852>
 8011542:	2300      	movs	r3, #0
 8011544:	4645      	mov	r5, r8
 8011546:	ae11      	add	r6, sp, #68	@ 0x44
 8011548:	930f      	str	r3, [sp, #60]	@ 0x3c
 801154a:	e55c      	b.n	8011006 <_vfiprintf_r+0xc2>
 801154c:	4648      	mov	r0, r9
 801154e:	f7ee fe9d 	bl	800028c <strlen>
 8011552:	9001      	str	r0, [sp, #4]
 8011554:	e734      	b.n	80113c0 <_vfiprintf_r+0x47c>
 8011556:	f04a 0a10 	orr.w	sl, sl, #16
 801155a:	f01a 0320 	ands.w	r3, sl, #32
 801155e:	d008      	beq.n	8011572 <_vfiprintf_r+0x62e>
 8011560:	3507      	adds	r5, #7
 8011562:	f025 0507 	bic.w	r5, r5, #7
 8011566:	46a8      	mov	r8, r5
 8011568:	686d      	ldr	r5, [r5, #4]
 801156a:	f858 4b08 	ldr.w	r4, [r8], #8
 801156e:	2301      	movs	r3, #1
 8011570:	e6d9      	b.n	8011326 <_vfiprintf_r+0x3e2>
 8011572:	46a8      	mov	r8, r5
 8011574:	f01a 0510 	ands.w	r5, sl, #16
 8011578:	f858 4b04 	ldr.w	r4, [r8], #4
 801157c:	d001      	beq.n	8011582 <_vfiprintf_r+0x63e>
 801157e:	461d      	mov	r5, r3
 8011580:	e7f5      	b.n	801156e <_vfiprintf_r+0x62a>
 8011582:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8011586:	d001      	beq.n	801158c <_vfiprintf_r+0x648>
 8011588:	b2a4      	uxth	r4, r4
 801158a:	e7f0      	b.n	801156e <_vfiprintf_r+0x62a>
 801158c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8011590:	d0ed      	beq.n	801156e <_vfiprintf_r+0x62a>
 8011592:	b2e4      	uxtb	r4, r4
 8011594:	e7f3      	b.n	801157e <_vfiprintf_r+0x63a>
 8011596:	4a44      	ldr	r2, [pc, #272]	@ (80116a8 <_vfiprintf_r+0x764>)
 8011598:	e5ca      	b.n	8011130 <_vfiprintf_r+0x1ec>
 801159a:	46a8      	mov	r8, r5
 801159c:	f01a 0510 	ands.w	r5, sl, #16
 80115a0:	f858 4b04 	ldr.w	r4, [r8], #4
 80115a4:	d001      	beq.n	80115aa <_vfiprintf_r+0x666>
 80115a6:	4615      	mov	r5, r2
 80115a8:	e5ce      	b.n	8011148 <_vfiprintf_r+0x204>
 80115aa:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 80115ae:	d001      	beq.n	80115b4 <_vfiprintf_r+0x670>
 80115b0:	b2a4      	uxth	r4, r4
 80115b2:	e5c9      	b.n	8011148 <_vfiprintf_r+0x204>
 80115b4:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80115b8:	f43f adc6 	beq.w	8011148 <_vfiprintf_r+0x204>
 80115bc:	b2e4      	uxtb	r4, r4
 80115be:	e7f2      	b.n	80115a6 <_vfiprintf_r+0x662>
 80115c0:	2c0a      	cmp	r4, #10
 80115c2:	f175 0300 	sbcs.w	r3, r5, #0
 80115c6:	d206      	bcs.n	80115d6 <_vfiprintf_r+0x692>
 80115c8:	3430      	adds	r4, #48	@ 0x30
 80115ca:	b2e4      	uxtb	r4, r4
 80115cc:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 80115d0:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 80115d4:	e132      	b.n	801183c <_vfiprintf_r+0x8f8>
 80115d6:	ab3a      	add	r3, sp, #232	@ 0xe8
 80115d8:	f04f 0a00 	mov.w	sl, #0
 80115dc:	9308      	str	r3, [sp, #32]
 80115de:	9b04      	ldr	r3, [sp, #16]
 80115e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80115e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80115e6:	220a      	movs	r2, #10
 80115e8:	2300      	movs	r3, #0
 80115ea:	4620      	mov	r0, r4
 80115ec:	4629      	mov	r1, r5
 80115ee:	f7ef fae9 	bl	8000bc4 <__aeabi_uldivmod>
 80115f2:	3230      	adds	r2, #48	@ 0x30
 80115f4:	460b      	mov	r3, r1
 80115f6:	9908      	ldr	r1, [sp, #32]
 80115f8:	f10a 0a01 	add.w	sl, sl, #1
 80115fc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80115fe:	f801 2c01 	strb.w	r2, [r1, #-1]
 8011602:	f101 39ff 	add.w	r9, r1, #4294967295
 8011606:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011608:	b1e2      	cbz	r2, 8011644 <_vfiprintf_r+0x700>
 801160a:	9a06      	ldr	r2, [sp, #24]
 801160c:	7812      	ldrb	r2, [r2, #0]
 801160e:	4552      	cmp	r2, sl
 8011610:	d118      	bne.n	8011644 <_vfiprintf_r+0x700>
 8011612:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8011616:	d015      	beq.n	8011644 <_vfiprintf_r+0x700>
 8011618:	2c0a      	cmp	r4, #10
 801161a:	f175 0200 	sbcs.w	r2, r5, #0
 801161e:	d311      	bcc.n	8011644 <_vfiprintf_r+0x700>
 8011620:	9308      	str	r3, [sp, #32]
 8011622:	9b07      	ldr	r3, [sp, #28]
 8011624:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011626:	eba9 0903 	sub.w	r9, r9, r3
 801162a:	461a      	mov	r2, r3
 801162c:	4648      	mov	r0, r9
 801162e:	f000 fc61 	bl	8011ef4 <strncpy>
 8011632:	9b06      	ldr	r3, [sp, #24]
 8011634:	785a      	ldrb	r2, [r3, #1]
 8011636:	9b08      	ldr	r3, [sp, #32]
 8011638:	b172      	cbz	r2, 8011658 <_vfiprintf_r+0x714>
 801163a:	9a06      	ldr	r2, [sp, #24]
 801163c:	f04f 0a00 	mov.w	sl, #0
 8011640:	3201      	adds	r2, #1
 8011642:	9206      	str	r2, [sp, #24]
 8011644:	2c0a      	cmp	r4, #10
 8011646:	f175 0500 	sbcs.w	r5, r5, #0
 801164a:	f0c0 80f7 	bcc.w	801183c <_vfiprintf_r+0x8f8>
 801164e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8011650:	461d      	mov	r5, r3
 8011652:	f8cd 9020 	str.w	r9, [sp, #32]
 8011656:	e7c6      	b.n	80115e6 <_vfiprintf_r+0x6a2>
 8011658:	4692      	mov	sl, r2
 801165a:	e7f3      	b.n	8011644 <_vfiprintf_r+0x700>
 801165c:	f004 030f 	and.w	r3, r4, #15
 8011660:	9a05      	ldr	r2, [sp, #20]
 8011662:	0924      	lsrs	r4, r4, #4
 8011664:	5cd3      	ldrb	r3, [r2, r3]
 8011666:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 801166a:	092d      	lsrs	r5, r5, #4
 801166c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8011670:	ea54 0305 	orrs.w	r3, r4, r5
 8011674:	d1f2      	bne.n	801165c <_vfiprintf_r+0x718>
 8011676:	e0e1      	b.n	801183c <_vfiprintf_r+0x8f8>
 8011678:	b923      	cbnz	r3, 8011684 <_vfiprintf_r+0x740>
 801167a:	f01a 0f01 	tst.w	sl, #1
 801167e:	d001      	beq.n	8011684 <_vfiprintf_r+0x740>
 8011680:	2430      	movs	r4, #48	@ 0x30
 8011682:	e7a3      	b.n	80115cc <_vfiprintf_r+0x688>
 8011684:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8011688:	e0d8      	b.n	801183c <_vfiprintf_r+0x8f8>
 801168a:	2b00      	cmp	r3, #0
 801168c:	f000 80a4 	beq.w	80117d8 <_vfiprintf_r+0x894>
 8011690:	2400      	movs	r4, #0
 8011692:	46a8      	mov	r8, r5
 8011694:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8011698:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 801169c:	e5e1      	b.n	8011262 <_vfiprintf_r+0x31e>
 801169e:	bf00      	nop
 80116a0:	080149bd 	.word	0x080149bd
 80116a4:	080149ad 	.word	0x080149ad
 80116a8:	0801495a 	.word	0x0801495a
 80116ac:	2110      	movs	r1, #16
 80116ae:	2a07      	cmp	r2, #7
 80116b0:	6071      	str	r1, [r6, #4]
 80116b2:	4461      	add	r1, ip
 80116b4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80116b8:	dd08      	ble.n	80116cc <_vfiprintf_r+0x788>
 80116ba:	aa0e      	add	r2, sp, #56	@ 0x38
 80116bc:	4639      	mov	r1, r7
 80116be:	9800      	ldr	r0, [sp, #0]
 80116c0:	f7ff fc0e 	bl	8010ee0 <__sprint_r>
 80116c4:	2800      	cmp	r0, #0
 80116c6:	d166      	bne.n	8011796 <_vfiprintf_r+0x852>
 80116c8:	a811      	add	r0, sp, #68	@ 0x44
 80116ca:	4b60      	ldr	r3, [pc, #384]	@ (801184c <_vfiprintf_r+0x908>)
 80116cc:	3d10      	subs	r5, #16
 80116ce:	4606      	mov	r6, r0
 80116d0:	e693      	b.n	80113fa <_vfiprintf_r+0x4b6>
 80116d2:	4606      	mov	r6, r0
 80116d4:	e6ab      	b.n	801142e <_vfiprintf_r+0x4ea>
 80116d6:	aa0e      	add	r2, sp, #56	@ 0x38
 80116d8:	4639      	mov	r1, r7
 80116da:	9800      	ldr	r0, [sp, #0]
 80116dc:	f7ff fc00 	bl	8010ee0 <__sprint_r>
 80116e0:	2800      	cmp	r0, #0
 80116e2:	d158      	bne.n	8011796 <_vfiprintf_r+0x852>
 80116e4:	ae11      	add	r6, sp, #68	@ 0x44
 80116e6:	e6b4      	b.n	8011452 <_vfiprintf_r+0x50e>
 80116e8:	aa0e      	add	r2, sp, #56	@ 0x38
 80116ea:	4639      	mov	r1, r7
 80116ec:	9800      	ldr	r0, [sp, #0]
 80116ee:	f7ff fbf7 	bl	8010ee0 <__sprint_r>
 80116f2:	2800      	cmp	r0, #0
 80116f4:	d14f      	bne.n	8011796 <_vfiprintf_r+0x852>
 80116f6:	ae11      	add	r6, sp, #68	@ 0x44
 80116f8:	e6bb      	b.n	8011472 <_vfiprintf_r+0x52e>
 80116fa:	2110      	movs	r1, #16
 80116fc:	2a07      	cmp	r2, #7
 80116fe:	6071      	str	r1, [r6, #4]
 8011700:	4461      	add	r1, ip
 8011702:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8011706:	dd08      	ble.n	801171a <_vfiprintf_r+0x7d6>
 8011708:	aa0e      	add	r2, sp, #56	@ 0x38
 801170a:	4639      	mov	r1, r7
 801170c:	9800      	ldr	r0, [sp, #0]
 801170e:	f7ff fbe7 	bl	8010ee0 <__sprint_r>
 8011712:	2800      	cmp	r0, #0
 8011714:	d13f      	bne.n	8011796 <_vfiprintf_r+0x852>
 8011716:	a811      	add	r0, sp, #68	@ 0x44
 8011718:	4b4d      	ldr	r3, [pc, #308]	@ (8011850 <_vfiprintf_r+0x90c>)
 801171a:	3d10      	subs	r5, #16
 801171c:	4606      	mov	r6, r0
 801171e:	e6b1      	b.n	8011484 <_vfiprintf_r+0x540>
 8011720:	4606      	mov	r6, r0
 8011722:	e6c9      	b.n	80114b8 <_vfiprintf_r+0x574>
 8011724:	2010      	movs	r0, #16
 8011726:	2b07      	cmp	r3, #7
 8011728:	4402      	add	r2, r0
 801172a:	6070      	str	r0, [r6, #4]
 801172c:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8011730:	dd06      	ble.n	8011740 <_vfiprintf_r+0x7fc>
 8011732:	aa0e      	add	r2, sp, #56	@ 0x38
 8011734:	4639      	mov	r1, r7
 8011736:	9800      	ldr	r0, [sp, #0]
 8011738:	f7ff fbd2 	bl	8010ee0 <__sprint_r>
 801173c:	bb58      	cbnz	r0, 8011796 <_vfiprintf_r+0x852>
 801173e:	a911      	add	r1, sp, #68	@ 0x44
 8011740:	3c10      	subs	r4, #16
 8011742:	460e      	mov	r6, r1
 8011744:	e6bc      	b.n	80114c0 <_vfiprintf_r+0x57c>
 8011746:	460e      	mov	r6, r1
 8011748:	e6d5      	b.n	80114f6 <_vfiprintf_r+0x5b2>
 801174a:	aa0e      	add	r2, sp, #56	@ 0x38
 801174c:	4639      	mov	r1, r7
 801174e:	9800      	ldr	r0, [sp, #0]
 8011750:	f7ff fbc6 	bl	8010ee0 <__sprint_r>
 8011754:	b9f8      	cbnz	r0, 8011796 <_vfiprintf_r+0x852>
 8011756:	ab11      	add	r3, sp, #68	@ 0x44
 8011758:	e6dd      	b.n	8011516 <_vfiprintf_r+0x5d2>
 801175a:	9a02      	ldr	r2, [sp, #8]
 801175c:	9904      	ldr	r1, [sp, #16]
 801175e:	1a54      	subs	r4, r2, r1
 8011760:	2c00      	cmp	r4, #0
 8011762:	f77f aedc 	ble.w	801151e <_vfiprintf_r+0x5da>
 8011766:	4d39      	ldr	r5, [pc, #228]	@ (801184c <_vfiprintf_r+0x908>)
 8011768:	2610      	movs	r6, #16
 801176a:	2c10      	cmp	r4, #16
 801176c:	601d      	str	r5, [r3, #0]
 801176e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8011772:	f102 0201 	add.w	r2, r2, #1
 8011776:	dc1d      	bgt.n	80117b4 <_vfiprintf_r+0x870>
 8011778:	605c      	str	r4, [r3, #4]
 801177a:	2a07      	cmp	r2, #7
 801177c:	440c      	add	r4, r1
 801177e:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8011782:	f77f aecc 	ble.w	801151e <_vfiprintf_r+0x5da>
 8011786:	aa0e      	add	r2, sp, #56	@ 0x38
 8011788:	4639      	mov	r1, r7
 801178a:	9800      	ldr	r0, [sp, #0]
 801178c:	f7ff fba8 	bl	8010ee0 <__sprint_r>
 8011790:	2800      	cmp	r0, #0
 8011792:	f43f aec4 	beq.w	801151e <_vfiprintf_r+0x5da>
 8011796:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011798:	07d9      	lsls	r1, r3, #31
 801179a:	d405      	bmi.n	80117a8 <_vfiprintf_r+0x864>
 801179c:	89bb      	ldrh	r3, [r7, #12]
 801179e:	059a      	lsls	r2, r3, #22
 80117a0:	d402      	bmi.n	80117a8 <_vfiprintf_r+0x864>
 80117a2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80117a4:	f7fc fe1b 	bl	800e3de <__retarget_lock_release_recursive>
 80117a8:	89bb      	ldrh	r3, [r7, #12]
 80117aa:	065b      	lsls	r3, r3, #25
 80117ac:	f57f abfb 	bpl.w	8010fa6 <_vfiprintf_r+0x62>
 80117b0:	f7ff bbf6 	b.w	8010fa0 <_vfiprintf_r+0x5c>
 80117b4:	3110      	adds	r1, #16
 80117b6:	2a07      	cmp	r2, #7
 80117b8:	605e      	str	r6, [r3, #4]
 80117ba:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80117be:	dc02      	bgt.n	80117c6 <_vfiprintf_r+0x882>
 80117c0:	3308      	adds	r3, #8
 80117c2:	3c10      	subs	r4, #16
 80117c4:	e7d1      	b.n	801176a <_vfiprintf_r+0x826>
 80117c6:	aa0e      	add	r2, sp, #56	@ 0x38
 80117c8:	4639      	mov	r1, r7
 80117ca:	9800      	ldr	r0, [sp, #0]
 80117cc:	f7ff fb88 	bl	8010ee0 <__sprint_r>
 80117d0:	2800      	cmp	r0, #0
 80117d2:	d1e0      	bne.n	8011796 <_vfiprintf_r+0x852>
 80117d4:	ab11      	add	r3, sp, #68	@ 0x44
 80117d6:	e7f4      	b.n	80117c2 <_vfiprintf_r+0x87e>
 80117d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80117da:	b913      	cbnz	r3, 80117e2 <_vfiprintf_r+0x89e>
 80117dc:	2300      	movs	r3, #0
 80117de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80117e0:	e7d9      	b.n	8011796 <_vfiprintf_r+0x852>
 80117e2:	aa0e      	add	r2, sp, #56	@ 0x38
 80117e4:	4639      	mov	r1, r7
 80117e6:	9800      	ldr	r0, [sp, #0]
 80117e8:	f7ff fb7a 	bl	8010ee0 <__sprint_r>
 80117ec:	2800      	cmp	r0, #0
 80117ee:	d0f5      	beq.n	80117dc <_vfiprintf_r+0x898>
 80117f0:	e7d1      	b.n	8011796 <_vfiprintf_r+0x852>
 80117f2:	ea54 0205 	orrs.w	r2, r4, r5
 80117f6:	f8cd a010 	str.w	sl, [sp, #16]
 80117fa:	f43f ada6 	beq.w	801134a <_vfiprintf_r+0x406>
 80117fe:	2b01      	cmp	r3, #1
 8011800:	f43f aede 	beq.w	80115c0 <_vfiprintf_r+0x67c>
 8011804:	2b02      	cmp	r3, #2
 8011806:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 801180a:	f43f af27 	beq.w	801165c <_vfiprintf_r+0x718>
 801180e:	f004 0307 	and.w	r3, r4, #7
 8011812:	08e4      	lsrs	r4, r4, #3
 8011814:	464a      	mov	r2, r9
 8011816:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 801181a:	3330      	adds	r3, #48	@ 0x30
 801181c:	08ed      	lsrs	r5, r5, #3
 801181e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8011822:	ea54 0105 	orrs.w	r1, r4, r5
 8011826:	d1f2      	bne.n	801180e <_vfiprintf_r+0x8ca>
 8011828:	9904      	ldr	r1, [sp, #16]
 801182a:	07c8      	lsls	r0, r1, #31
 801182c:	d506      	bpl.n	801183c <_vfiprintf_r+0x8f8>
 801182e:	2b30      	cmp	r3, #48	@ 0x30
 8011830:	d004      	beq.n	801183c <_vfiprintf_r+0x8f8>
 8011832:	2330      	movs	r3, #48	@ 0x30
 8011834:	f809 3c01 	strb.w	r3, [r9, #-1]
 8011838:	f1a2 0902 	sub.w	r9, r2, #2
 801183c:	ab3a      	add	r3, sp, #232	@ 0xe8
 801183e:	9c01      	ldr	r4, [sp, #4]
 8011840:	f8dd a010 	ldr.w	sl, [sp, #16]
 8011844:	eba3 0309 	sub.w	r3, r3, r9
 8011848:	9301      	str	r3, [sp, #4]
 801184a:	e5ba      	b.n	80113c2 <_vfiprintf_r+0x47e>
 801184c:	080149bd 	.word	0x080149bd
 8011850:	080149ad 	.word	0x080149ad

08011854 <__sbprintf>:
 8011854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011856:	461f      	mov	r7, r3
 8011858:	898b      	ldrh	r3, [r1, #12]
 801185a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 801185e:	4615      	mov	r5, r2
 8011860:	f023 0302 	bic.w	r3, r3, #2
 8011864:	4606      	mov	r6, r0
 8011866:	a816      	add	r0, sp, #88	@ 0x58
 8011868:	460c      	mov	r4, r1
 801186a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801186e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8011870:	9319      	str	r3, [sp, #100]	@ 0x64
 8011872:	89cb      	ldrh	r3, [r1, #14]
 8011874:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011878:	69cb      	ldr	r3, [r1, #28]
 801187a:	9307      	str	r3, [sp, #28]
 801187c:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 801187e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011880:	ab1a      	add	r3, sp, #104	@ 0x68
 8011882:	9300      	str	r3, [sp, #0]
 8011884:	9304      	str	r3, [sp, #16]
 8011886:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801188a:	9302      	str	r3, [sp, #8]
 801188c:	9305      	str	r3, [sp, #20]
 801188e:	2300      	movs	r3, #0
 8011890:	9306      	str	r3, [sp, #24]
 8011892:	f7fc fda1 	bl	800e3d8 <__retarget_lock_init_recursive>
 8011896:	462a      	mov	r2, r5
 8011898:	463b      	mov	r3, r7
 801189a:	4669      	mov	r1, sp
 801189c:	4630      	mov	r0, r6
 801189e:	f7ff fb51 	bl	8010f44 <_vfiprintf_r>
 80118a2:	1e05      	subs	r5, r0, #0
 80118a4:	db07      	blt.n	80118b6 <__sbprintf+0x62>
 80118a6:	4669      	mov	r1, sp
 80118a8:	4630      	mov	r0, r6
 80118aa:	f000 f8f1 	bl	8011a90 <_fflush_r>
 80118ae:	2800      	cmp	r0, #0
 80118b0:	bf18      	it	ne
 80118b2:	f04f 35ff 	movne.w	r5, #4294967295
 80118b6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80118ba:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80118bc:	065b      	lsls	r3, r3, #25
 80118be:	bf42      	ittt	mi
 80118c0:	89a3      	ldrhmi	r3, [r4, #12]
 80118c2:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 80118c6:	81a3      	strhmi	r3, [r4, #12]
 80118c8:	f7fc fd87 	bl	800e3da <__retarget_lock_close_recursive>
 80118cc:	4628      	mov	r0, r5
 80118ce:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 80118d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080118d4 <_fclose_r>:
 80118d4:	b570      	push	{r4, r5, r6, lr}
 80118d6:	4605      	mov	r5, r0
 80118d8:	460c      	mov	r4, r1
 80118da:	b1b1      	cbz	r1, 801190a <_fclose_r+0x36>
 80118dc:	b118      	cbz	r0, 80118e6 <_fclose_r+0x12>
 80118de:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80118e0:	b90b      	cbnz	r3, 80118e6 <_fclose_r+0x12>
 80118e2:	f7fc fb4d 	bl	800df80 <__sinit>
 80118e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80118e8:	07de      	lsls	r6, r3, #31
 80118ea:	d405      	bmi.n	80118f8 <_fclose_r+0x24>
 80118ec:	89a3      	ldrh	r3, [r4, #12]
 80118ee:	0598      	lsls	r0, r3, #22
 80118f0:	d402      	bmi.n	80118f8 <_fclose_r+0x24>
 80118f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118f4:	f7fc fd72 	bl	800e3dc <__retarget_lock_acquire_recursive>
 80118f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118fc:	b943      	cbnz	r3, 8011910 <_fclose_r+0x3c>
 80118fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011900:	07d9      	lsls	r1, r3, #31
 8011902:	d402      	bmi.n	801190a <_fclose_r+0x36>
 8011904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011906:	f7fc fd6a 	bl	800e3de <__retarget_lock_release_recursive>
 801190a:	2600      	movs	r6, #0
 801190c:	4630      	mov	r0, r6
 801190e:	bd70      	pop	{r4, r5, r6, pc}
 8011910:	4621      	mov	r1, r4
 8011912:	4628      	mov	r0, r5
 8011914:	f000 f834 	bl	8011980 <__sflush_r>
 8011918:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801191a:	4606      	mov	r6, r0
 801191c:	b133      	cbz	r3, 801192c <_fclose_r+0x58>
 801191e:	69e1      	ldr	r1, [r4, #28]
 8011920:	4628      	mov	r0, r5
 8011922:	4798      	blx	r3
 8011924:	2800      	cmp	r0, #0
 8011926:	bfb8      	it	lt
 8011928:	f04f 36ff 	movlt.w	r6, #4294967295
 801192c:	89a3      	ldrh	r3, [r4, #12]
 801192e:	061a      	lsls	r2, r3, #24
 8011930:	d503      	bpl.n	801193a <_fclose_r+0x66>
 8011932:	6921      	ldr	r1, [r4, #16]
 8011934:	4628      	mov	r0, r5
 8011936:	f7fc fdd3 	bl	800e4e0 <_free_r>
 801193a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801193c:	b141      	cbz	r1, 8011950 <_fclose_r+0x7c>
 801193e:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8011942:	4299      	cmp	r1, r3
 8011944:	d002      	beq.n	801194c <_fclose_r+0x78>
 8011946:	4628      	mov	r0, r5
 8011948:	f7fc fdca 	bl	800e4e0 <_free_r>
 801194c:	2300      	movs	r3, #0
 801194e:	6323      	str	r3, [r4, #48]	@ 0x30
 8011950:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011952:	b121      	cbz	r1, 801195e <_fclose_r+0x8a>
 8011954:	4628      	mov	r0, r5
 8011956:	f7fc fdc3 	bl	800e4e0 <_free_r>
 801195a:	2300      	movs	r3, #0
 801195c:	6463      	str	r3, [r4, #68]	@ 0x44
 801195e:	f7fc fb03 	bl	800df68 <__sfp_lock_acquire>
 8011962:	2300      	movs	r3, #0
 8011964:	81a3      	strh	r3, [r4, #12]
 8011966:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011968:	07db      	lsls	r3, r3, #31
 801196a:	d402      	bmi.n	8011972 <_fclose_r+0x9e>
 801196c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801196e:	f7fc fd36 	bl	800e3de <__retarget_lock_release_recursive>
 8011972:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011974:	f7fc fd31 	bl	800e3da <__retarget_lock_close_recursive>
 8011978:	f7fc fafc 	bl	800df74 <__sfp_lock_release>
 801197c:	e7c6      	b.n	801190c <_fclose_r+0x38>
	...

08011980 <__sflush_r>:
 8011980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011984:	4605      	mov	r5, r0
 8011986:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 801198a:	460c      	mov	r4, r1
 801198c:	0706      	lsls	r6, r0, #28
 801198e:	d458      	bmi.n	8011a42 <__sflush_r+0xc2>
 8011990:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 8011994:	818b      	strh	r3, [r1, #12]
 8011996:	684b      	ldr	r3, [r1, #4]
 8011998:	2b00      	cmp	r3, #0
 801199a:	dc02      	bgt.n	80119a2 <__sflush_r+0x22>
 801199c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801199e:	2b00      	cmp	r3, #0
 80119a0:	dd4d      	ble.n	8011a3e <__sflush_r+0xbe>
 80119a2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80119a4:	2e00      	cmp	r6, #0
 80119a6:	d04a      	beq.n	8011a3e <__sflush_r+0xbe>
 80119a8:	2300      	movs	r3, #0
 80119aa:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 80119ae:	682f      	ldr	r7, [r5, #0]
 80119b0:	69e1      	ldr	r1, [r4, #28]
 80119b2:	602b      	str	r3, [r5, #0]
 80119b4:	d035      	beq.n	8011a22 <__sflush_r+0xa2>
 80119b6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80119b8:	89a3      	ldrh	r3, [r4, #12]
 80119ba:	0759      	lsls	r1, r3, #29
 80119bc:	d505      	bpl.n	80119ca <__sflush_r+0x4a>
 80119be:	6863      	ldr	r3, [r4, #4]
 80119c0:	1ad2      	subs	r2, r2, r3
 80119c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80119c4:	b10b      	cbz	r3, 80119ca <__sflush_r+0x4a>
 80119c6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80119c8:	1ad2      	subs	r2, r2, r3
 80119ca:	2300      	movs	r3, #0
 80119cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80119ce:	69e1      	ldr	r1, [r4, #28]
 80119d0:	4628      	mov	r0, r5
 80119d2:	47b0      	blx	r6
 80119d4:	1c43      	adds	r3, r0, #1
 80119d6:	d106      	bne.n	80119e6 <__sflush_r+0x66>
 80119d8:	682a      	ldr	r2, [r5, #0]
 80119da:	2a1d      	cmp	r2, #29
 80119dc:	d848      	bhi.n	8011a70 <__sflush_r+0xf0>
 80119de:	4b2b      	ldr	r3, [pc, #172]	@ (8011a8c <__sflush_r+0x10c>)
 80119e0:	4113      	asrs	r3, r2
 80119e2:	07de      	lsls	r6, r3, #31
 80119e4:	d444      	bmi.n	8011a70 <__sflush_r+0xf0>
 80119e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119ea:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80119ee:	04d9      	lsls	r1, r3, #19
 80119f0:	81a2      	strh	r2, [r4, #12]
 80119f2:	f04f 0200 	mov.w	r2, #0
 80119f6:	6062      	str	r2, [r4, #4]
 80119f8:	6922      	ldr	r2, [r4, #16]
 80119fa:	6022      	str	r2, [r4, #0]
 80119fc:	d504      	bpl.n	8011a08 <__sflush_r+0x88>
 80119fe:	1c42      	adds	r2, r0, #1
 8011a00:	d101      	bne.n	8011a06 <__sflush_r+0x86>
 8011a02:	682b      	ldr	r3, [r5, #0]
 8011a04:	b903      	cbnz	r3, 8011a08 <__sflush_r+0x88>
 8011a06:	6520      	str	r0, [r4, #80]	@ 0x50
 8011a08:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011a0a:	602f      	str	r7, [r5, #0]
 8011a0c:	b1b9      	cbz	r1, 8011a3e <__sflush_r+0xbe>
 8011a0e:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8011a12:	4299      	cmp	r1, r3
 8011a14:	d002      	beq.n	8011a1c <__sflush_r+0x9c>
 8011a16:	4628      	mov	r0, r5
 8011a18:	f7fc fd62 	bl	800e4e0 <_free_r>
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	6323      	str	r3, [r4, #48]	@ 0x30
 8011a20:	e00d      	b.n	8011a3e <__sflush_r+0xbe>
 8011a22:	2301      	movs	r3, #1
 8011a24:	4628      	mov	r0, r5
 8011a26:	47b0      	blx	r6
 8011a28:	4602      	mov	r2, r0
 8011a2a:	1c50      	adds	r0, r2, #1
 8011a2c:	d1c4      	bne.n	80119b8 <__sflush_r+0x38>
 8011a2e:	682b      	ldr	r3, [r5, #0]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d0c1      	beq.n	80119b8 <__sflush_r+0x38>
 8011a34:	2b1d      	cmp	r3, #29
 8011a36:	d001      	beq.n	8011a3c <__sflush_r+0xbc>
 8011a38:	2b16      	cmp	r3, #22
 8011a3a:	d119      	bne.n	8011a70 <__sflush_r+0xf0>
 8011a3c:	602f      	str	r7, [r5, #0]
 8011a3e:	2000      	movs	r0, #0
 8011a40:	e01d      	b.n	8011a7e <__sflush_r+0xfe>
 8011a42:	690f      	ldr	r7, [r1, #16]
 8011a44:	2f00      	cmp	r7, #0
 8011a46:	d0fa      	beq.n	8011a3e <__sflush_r+0xbe>
 8011a48:	0783      	lsls	r3, r0, #30
 8011a4a:	680e      	ldr	r6, [r1, #0]
 8011a4c:	600f      	str	r7, [r1, #0]
 8011a4e:	bf0c      	ite	eq
 8011a50:	694b      	ldreq	r3, [r1, #20]
 8011a52:	2300      	movne	r3, #0
 8011a54:	eba6 0807 	sub.w	r8, r6, r7
 8011a58:	608b      	str	r3, [r1, #8]
 8011a5a:	f1b8 0f00 	cmp.w	r8, #0
 8011a5e:	ddee      	ble.n	8011a3e <__sflush_r+0xbe>
 8011a60:	4643      	mov	r3, r8
 8011a62:	463a      	mov	r2, r7
 8011a64:	69e1      	ldr	r1, [r4, #28]
 8011a66:	4628      	mov	r0, r5
 8011a68:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8011a6a:	47b0      	blx	r6
 8011a6c:	2800      	cmp	r0, #0
 8011a6e:	dc08      	bgt.n	8011a82 <__sflush_r+0x102>
 8011a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a74:	f04f 30ff 	mov.w	r0, #4294967295
 8011a78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a7c:	81a3      	strh	r3, [r4, #12]
 8011a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a82:	4407      	add	r7, r0
 8011a84:	eba8 0800 	sub.w	r8, r8, r0
 8011a88:	e7e7      	b.n	8011a5a <__sflush_r+0xda>
 8011a8a:	bf00      	nop
 8011a8c:	dfbffffe 	.word	0xdfbffffe

08011a90 <_fflush_r>:
 8011a90:	b538      	push	{r3, r4, r5, lr}
 8011a92:	460c      	mov	r4, r1
 8011a94:	4605      	mov	r5, r0
 8011a96:	b118      	cbz	r0, 8011aa0 <_fflush_r+0x10>
 8011a98:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011a9a:	b90b      	cbnz	r3, 8011aa0 <_fflush_r+0x10>
 8011a9c:	f7fc fa70 	bl	800df80 <__sinit>
 8011aa0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8011aa4:	b1b8      	cbz	r0, 8011ad6 <_fflush_r+0x46>
 8011aa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011aa8:	07db      	lsls	r3, r3, #31
 8011aaa:	d404      	bmi.n	8011ab6 <_fflush_r+0x26>
 8011aac:	0581      	lsls	r1, r0, #22
 8011aae:	d402      	bmi.n	8011ab6 <_fflush_r+0x26>
 8011ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ab2:	f7fc fc93 	bl	800e3dc <__retarget_lock_acquire_recursive>
 8011ab6:	4628      	mov	r0, r5
 8011ab8:	4621      	mov	r1, r4
 8011aba:	f7ff ff61 	bl	8011980 <__sflush_r>
 8011abe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ac0:	4605      	mov	r5, r0
 8011ac2:	07da      	lsls	r2, r3, #31
 8011ac4:	d405      	bmi.n	8011ad2 <_fflush_r+0x42>
 8011ac6:	89a3      	ldrh	r3, [r4, #12]
 8011ac8:	059b      	lsls	r3, r3, #22
 8011aca:	d402      	bmi.n	8011ad2 <_fflush_r+0x42>
 8011acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ace:	f7fc fc86 	bl	800e3de <__retarget_lock_release_recursive>
 8011ad2:	4628      	mov	r0, r5
 8011ad4:	bd38      	pop	{r3, r4, r5, pc}
 8011ad6:	4605      	mov	r5, r0
 8011ad8:	e7fb      	b.n	8011ad2 <_fflush_r+0x42>
	...

08011adc <__sfvwrite_r>:
 8011adc:	6893      	ldr	r3, [r2, #8]
 8011ade:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ae2:	4606      	mov	r6, r0
 8011ae4:	460c      	mov	r4, r1
 8011ae6:	4691      	mov	r9, r2
 8011ae8:	b91b      	cbnz	r3, 8011af2 <__sfvwrite_r+0x16>
 8011aea:	2000      	movs	r0, #0
 8011aec:	b003      	add	sp, #12
 8011aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011af2:	898b      	ldrh	r3, [r1, #12]
 8011af4:	0718      	lsls	r0, r3, #28
 8011af6:	d550      	bpl.n	8011b9a <__sfvwrite_r+0xbe>
 8011af8:	690b      	ldr	r3, [r1, #16]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d04d      	beq.n	8011b9a <__sfvwrite_r+0xbe>
 8011afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b02:	f8d9 8000 	ldr.w	r8, [r9]
 8011b06:	f013 0702 	ands.w	r7, r3, #2
 8011b0a:	d16b      	bne.n	8011be4 <__sfvwrite_r+0x108>
 8011b0c:	f013 0301 	ands.w	r3, r3, #1
 8011b10:	f000 809c 	beq.w	8011c4c <__sfvwrite_r+0x170>
 8011b14:	4638      	mov	r0, r7
 8011b16:	46ba      	mov	sl, r7
 8011b18:	46bb      	mov	fp, r7
 8011b1a:	f1bb 0f00 	cmp.w	fp, #0
 8011b1e:	f000 8103 	beq.w	8011d28 <__sfvwrite_r+0x24c>
 8011b22:	b950      	cbnz	r0, 8011b3a <__sfvwrite_r+0x5e>
 8011b24:	465a      	mov	r2, fp
 8011b26:	210a      	movs	r1, #10
 8011b28:	4650      	mov	r0, sl
 8011b2a:	f000 fa15 	bl	8011f58 <memchr>
 8011b2e:	2800      	cmp	r0, #0
 8011b30:	f000 8100 	beq.w	8011d34 <__sfvwrite_r+0x258>
 8011b34:	3001      	adds	r0, #1
 8011b36:	eba0 070a 	sub.w	r7, r0, sl
 8011b3a:	455f      	cmp	r7, fp
 8011b3c:	6820      	ldr	r0, [r4, #0]
 8011b3e:	6921      	ldr	r1, [r4, #16]
 8011b40:	463a      	mov	r2, r7
 8011b42:	bf28      	it	cs
 8011b44:	465a      	movcs	r2, fp
 8011b46:	68a5      	ldr	r5, [r4, #8]
 8011b48:	4288      	cmp	r0, r1
 8011b4a:	6963      	ldr	r3, [r4, #20]
 8011b4c:	f240 80f5 	bls.w	8011d3a <__sfvwrite_r+0x25e>
 8011b50:	441d      	add	r5, r3
 8011b52:	42aa      	cmp	r2, r5
 8011b54:	f340 80f1 	ble.w	8011d3a <__sfvwrite_r+0x25e>
 8011b58:	4651      	mov	r1, sl
 8011b5a:	462a      	mov	r2, r5
 8011b5c:	f7fc fb76 	bl	800e24c <memmove>
 8011b60:	6823      	ldr	r3, [r4, #0]
 8011b62:	4621      	mov	r1, r4
 8011b64:	4630      	mov	r0, r6
 8011b66:	442b      	add	r3, r5
 8011b68:	6023      	str	r3, [r4, #0]
 8011b6a:	f7ff ff91 	bl	8011a90 <_fflush_r>
 8011b6e:	2800      	cmp	r0, #0
 8011b70:	d167      	bne.n	8011c42 <__sfvwrite_r+0x166>
 8011b72:	1b7f      	subs	r7, r7, r5
 8011b74:	f040 80f9 	bne.w	8011d6a <__sfvwrite_r+0x28e>
 8011b78:	4621      	mov	r1, r4
 8011b7a:	4630      	mov	r0, r6
 8011b7c:	f7ff ff88 	bl	8011a90 <_fflush_r>
 8011b80:	2800      	cmp	r0, #0
 8011b82:	d15e      	bne.n	8011c42 <__sfvwrite_r+0x166>
 8011b84:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011b88:	44aa      	add	sl, r5
 8011b8a:	ebab 0b05 	sub.w	fp, fp, r5
 8011b8e:	1b5b      	subs	r3, r3, r5
 8011b90:	f8c9 3008 	str.w	r3, [r9, #8]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d1c0      	bne.n	8011b1a <__sfvwrite_r+0x3e>
 8011b98:	e7a7      	b.n	8011aea <__sfvwrite_r+0xe>
 8011b9a:	4621      	mov	r1, r4
 8011b9c:	4630      	mov	r0, r6
 8011b9e:	f000 f8e9 	bl	8011d74 <__swsetup_r>
 8011ba2:	2800      	cmp	r0, #0
 8011ba4:	d0ab      	beq.n	8011afe <__sfvwrite_r+0x22>
 8011ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8011baa:	e79f      	b.n	8011aec <__sfvwrite_r+0x10>
 8011bac:	e9d8 a500 	ldrd	sl, r5, [r8]
 8011bb0:	f108 0808 	add.w	r8, r8, #8
 8011bb4:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8011bb8:	69e1      	ldr	r1, [r4, #28]
 8011bba:	2d00      	cmp	r5, #0
 8011bbc:	d0f6      	beq.n	8011bac <__sfvwrite_r+0xd0>
 8011bbe:	42bd      	cmp	r5, r7
 8011bc0:	462b      	mov	r3, r5
 8011bc2:	4652      	mov	r2, sl
 8011bc4:	4630      	mov	r0, r6
 8011bc6:	bf28      	it	cs
 8011bc8:	463b      	movcs	r3, r7
 8011bca:	47d8      	blx	fp
 8011bcc:	2800      	cmp	r0, #0
 8011bce:	dd38      	ble.n	8011c42 <__sfvwrite_r+0x166>
 8011bd0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011bd4:	4482      	add	sl, r0
 8011bd6:	1a2d      	subs	r5, r5, r0
 8011bd8:	1a1b      	subs	r3, r3, r0
 8011bda:	f8c9 3008 	str.w	r3, [r9, #8]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d1e8      	bne.n	8011bb4 <__sfvwrite_r+0xd8>
 8011be2:	e782      	b.n	8011aea <__sfvwrite_r+0xe>
 8011be4:	f04f 0a00 	mov.w	sl, #0
 8011be8:	4f61      	ldr	r7, [pc, #388]	@ (8011d70 <__sfvwrite_r+0x294>)
 8011bea:	4655      	mov	r5, sl
 8011bec:	e7e2      	b.n	8011bb4 <__sfvwrite_r+0xd8>
 8011bee:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8011bf2:	f108 0808 	add.w	r8, r8, #8
 8011bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bfa:	6820      	ldr	r0, [r4, #0]
 8011bfc:	68a2      	ldr	r2, [r4, #8]
 8011bfe:	f1ba 0f00 	cmp.w	sl, #0
 8011c02:	d0f4      	beq.n	8011bee <__sfvwrite_r+0x112>
 8011c04:	0599      	lsls	r1, r3, #22
 8011c06:	d563      	bpl.n	8011cd0 <__sfvwrite_r+0x1f4>
 8011c08:	4552      	cmp	r2, sl
 8011c0a:	d836      	bhi.n	8011c7a <__sfvwrite_r+0x19e>
 8011c0c:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 8011c10:	d033      	beq.n	8011c7a <__sfvwrite_r+0x19e>
 8011c12:	6921      	ldr	r1, [r4, #16]
 8011c14:	6965      	ldr	r5, [r4, #20]
 8011c16:	eba0 0b01 	sub.w	fp, r0, r1
 8011c1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011c1e:	f10b 0201 	add.w	r2, fp, #1
 8011c22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011c26:	4452      	add	r2, sl
 8011c28:	106d      	asrs	r5, r5, #1
 8011c2a:	4295      	cmp	r5, r2
 8011c2c:	bf38      	it	cc
 8011c2e:	4615      	movcc	r5, r2
 8011c30:	055b      	lsls	r3, r3, #21
 8011c32:	d53d      	bpl.n	8011cb0 <__sfvwrite_r+0x1d4>
 8011c34:	4629      	mov	r1, r5
 8011c36:	4630      	mov	r0, r6
 8011c38:	f7fb fe4c 	bl	800d8d4 <_malloc_r>
 8011c3c:	b948      	cbnz	r0, 8011c52 <__sfvwrite_r+0x176>
 8011c3e:	230c      	movs	r3, #12
 8011c40:	6033      	str	r3, [r6, #0]
 8011c42:	89a3      	ldrh	r3, [r4, #12]
 8011c44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c48:	81a3      	strh	r3, [r4, #12]
 8011c4a:	e7ac      	b.n	8011ba6 <__sfvwrite_r+0xca>
 8011c4c:	461f      	mov	r7, r3
 8011c4e:	469a      	mov	sl, r3
 8011c50:	e7d1      	b.n	8011bf6 <__sfvwrite_r+0x11a>
 8011c52:	465a      	mov	r2, fp
 8011c54:	6921      	ldr	r1, [r4, #16]
 8011c56:	9001      	str	r0, [sp, #4]
 8011c58:	f7fc fbce 	bl	800e3f8 <memcpy>
 8011c5c:	89a2      	ldrh	r2, [r4, #12]
 8011c5e:	9b01      	ldr	r3, [sp, #4]
 8011c60:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8011c64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8011c68:	81a2      	strh	r2, [r4, #12]
 8011c6a:	6123      	str	r3, [r4, #16]
 8011c6c:	4652      	mov	r2, sl
 8011c6e:	445b      	add	r3, fp
 8011c70:	6165      	str	r5, [r4, #20]
 8011c72:	eba5 050b 	sub.w	r5, r5, fp
 8011c76:	6023      	str	r3, [r4, #0]
 8011c78:	60a5      	str	r5, [r4, #8]
 8011c7a:	4552      	cmp	r2, sl
 8011c7c:	4639      	mov	r1, r7
 8011c7e:	6820      	ldr	r0, [r4, #0]
 8011c80:	4655      	mov	r5, sl
 8011c82:	bf28      	it	cs
 8011c84:	4652      	movcs	r2, sl
 8011c86:	9201      	str	r2, [sp, #4]
 8011c88:	f7fc fae0 	bl	800e24c <memmove>
 8011c8c:	68a3      	ldr	r3, [r4, #8]
 8011c8e:	9a01      	ldr	r2, [sp, #4]
 8011c90:	1a9b      	subs	r3, r3, r2
 8011c92:	60a3      	str	r3, [r4, #8]
 8011c94:	6823      	ldr	r3, [r4, #0]
 8011c96:	4413      	add	r3, r2
 8011c98:	6023      	str	r3, [r4, #0]
 8011c9a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011c9e:	442f      	add	r7, r5
 8011ca0:	ebaa 0a05 	sub.w	sl, sl, r5
 8011ca4:	1b5b      	subs	r3, r3, r5
 8011ca6:	f8c9 3008 	str.w	r3, [r9, #8]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d1a3      	bne.n	8011bf6 <__sfvwrite_r+0x11a>
 8011cae:	e71c      	b.n	8011aea <__sfvwrite_r+0xe>
 8011cb0:	462a      	mov	r2, r5
 8011cb2:	4630      	mov	r0, r6
 8011cb4:	f001 fb5a 	bl	801336c <_realloc_r>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	2800      	cmp	r0, #0
 8011cbc:	d1d5      	bne.n	8011c6a <__sfvwrite_r+0x18e>
 8011cbe:	6921      	ldr	r1, [r4, #16]
 8011cc0:	4630      	mov	r0, r6
 8011cc2:	f7fc fc0d 	bl	800e4e0 <_free_r>
 8011cc6:	89a3      	ldrh	r3, [r4, #12]
 8011cc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011ccc:	81a3      	strh	r3, [r4, #12]
 8011cce:	e7b6      	b.n	8011c3e <__sfvwrite_r+0x162>
 8011cd0:	6923      	ldr	r3, [r4, #16]
 8011cd2:	4283      	cmp	r3, r0
 8011cd4:	d302      	bcc.n	8011cdc <__sfvwrite_r+0x200>
 8011cd6:	6961      	ldr	r1, [r4, #20]
 8011cd8:	4551      	cmp	r1, sl
 8011cda:	d915      	bls.n	8011d08 <__sfvwrite_r+0x22c>
 8011cdc:	4552      	cmp	r2, sl
 8011cde:	4639      	mov	r1, r7
 8011ce0:	bf28      	it	cs
 8011ce2:	4652      	movcs	r2, sl
 8011ce4:	4615      	mov	r5, r2
 8011ce6:	f7fc fab1 	bl	800e24c <memmove>
 8011cea:	68a3      	ldr	r3, [r4, #8]
 8011cec:	6822      	ldr	r2, [r4, #0]
 8011cee:	1b5b      	subs	r3, r3, r5
 8011cf0:	442a      	add	r2, r5
 8011cf2:	60a3      	str	r3, [r4, #8]
 8011cf4:	6022      	str	r2, [r4, #0]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d1cf      	bne.n	8011c9a <__sfvwrite_r+0x1be>
 8011cfa:	4621      	mov	r1, r4
 8011cfc:	4630      	mov	r0, r6
 8011cfe:	f7ff fec7 	bl	8011a90 <_fflush_r>
 8011d02:	2800      	cmp	r0, #0
 8011d04:	d0c9      	beq.n	8011c9a <__sfvwrite_r+0x1be>
 8011d06:	e79c      	b.n	8011c42 <__sfvwrite_r+0x166>
 8011d08:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011d0c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8011d0e:	463a      	mov	r2, r7
 8011d10:	4630      	mov	r0, r6
 8011d12:	4553      	cmp	r3, sl
 8011d14:	bf28      	it	cs
 8011d16:	4653      	movcs	r3, sl
 8011d18:	fb93 f3f1 	sdiv	r3, r3, r1
 8011d1c:	434b      	muls	r3, r1
 8011d1e:	69e1      	ldr	r1, [r4, #28]
 8011d20:	47a8      	blx	r5
 8011d22:	1e05      	subs	r5, r0, #0
 8011d24:	dcb9      	bgt.n	8011c9a <__sfvwrite_r+0x1be>
 8011d26:	e78c      	b.n	8011c42 <__sfvwrite_r+0x166>
 8011d28:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8011d2c:	2000      	movs	r0, #0
 8011d2e:	f108 0808 	add.w	r8, r8, #8
 8011d32:	e6f2      	b.n	8011b1a <__sfvwrite_r+0x3e>
 8011d34:	f10b 0701 	add.w	r7, fp, #1
 8011d38:	e6ff      	b.n	8011b3a <__sfvwrite_r+0x5e>
 8011d3a:	4293      	cmp	r3, r2
 8011d3c:	dc08      	bgt.n	8011d50 <__sfvwrite_r+0x274>
 8011d3e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8011d40:	4652      	mov	r2, sl
 8011d42:	69e1      	ldr	r1, [r4, #28]
 8011d44:	4630      	mov	r0, r6
 8011d46:	47a8      	blx	r5
 8011d48:	1e05      	subs	r5, r0, #0
 8011d4a:	f73f af12 	bgt.w	8011b72 <__sfvwrite_r+0x96>
 8011d4e:	e778      	b.n	8011c42 <__sfvwrite_r+0x166>
 8011d50:	4651      	mov	r1, sl
 8011d52:	9201      	str	r2, [sp, #4]
 8011d54:	f7fc fa7a 	bl	800e24c <memmove>
 8011d58:	9a01      	ldr	r2, [sp, #4]
 8011d5a:	68a3      	ldr	r3, [r4, #8]
 8011d5c:	4615      	mov	r5, r2
 8011d5e:	1a9b      	subs	r3, r3, r2
 8011d60:	60a3      	str	r3, [r4, #8]
 8011d62:	6823      	ldr	r3, [r4, #0]
 8011d64:	4413      	add	r3, r2
 8011d66:	6023      	str	r3, [r4, #0]
 8011d68:	e703      	b.n	8011b72 <__sfvwrite_r+0x96>
 8011d6a:	2001      	movs	r0, #1
 8011d6c:	e70a      	b.n	8011b84 <__sfvwrite_r+0xa8>
 8011d6e:	bf00      	nop
 8011d70:	7ffffc00 	.word	0x7ffffc00

08011d74 <__swsetup_r>:
 8011d74:	b538      	push	{r3, r4, r5, lr}
 8011d76:	4b29      	ldr	r3, [pc, #164]	@ (8011e1c <__swsetup_r+0xa8>)
 8011d78:	4605      	mov	r5, r0
 8011d7a:	460c      	mov	r4, r1
 8011d7c:	6818      	ldr	r0, [r3, #0]
 8011d7e:	b118      	cbz	r0, 8011d88 <__swsetup_r+0x14>
 8011d80:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011d82:	b90b      	cbnz	r3, 8011d88 <__swsetup_r+0x14>
 8011d84:	f7fc f8fc 	bl	800df80 <__sinit>
 8011d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d8c:	0719      	lsls	r1, r3, #28
 8011d8e:	d422      	bmi.n	8011dd6 <__swsetup_r+0x62>
 8011d90:	06da      	lsls	r2, r3, #27
 8011d92:	d407      	bmi.n	8011da4 <__swsetup_r+0x30>
 8011d94:	2209      	movs	r2, #9
 8011d96:	602a      	str	r2, [r5, #0]
 8011d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8011da0:	81a3      	strh	r3, [r4, #12]
 8011da2:	e033      	b.n	8011e0c <__swsetup_r+0x98>
 8011da4:	0758      	lsls	r0, r3, #29
 8011da6:	d512      	bpl.n	8011dce <__swsetup_r+0x5a>
 8011da8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011daa:	b141      	cbz	r1, 8011dbe <__swsetup_r+0x4a>
 8011dac:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8011db0:	4299      	cmp	r1, r3
 8011db2:	d002      	beq.n	8011dba <__swsetup_r+0x46>
 8011db4:	4628      	mov	r0, r5
 8011db6:	f7fc fb93 	bl	800e4e0 <_free_r>
 8011dba:	2300      	movs	r3, #0
 8011dbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8011dbe:	89a3      	ldrh	r3, [r4, #12]
 8011dc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011dc4:	81a3      	strh	r3, [r4, #12]
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	6063      	str	r3, [r4, #4]
 8011dca:	6923      	ldr	r3, [r4, #16]
 8011dcc:	6023      	str	r3, [r4, #0]
 8011dce:	89a3      	ldrh	r3, [r4, #12]
 8011dd0:	f043 0308 	orr.w	r3, r3, #8
 8011dd4:	81a3      	strh	r3, [r4, #12]
 8011dd6:	6923      	ldr	r3, [r4, #16]
 8011dd8:	b94b      	cbnz	r3, 8011dee <__swsetup_r+0x7a>
 8011dda:	89a3      	ldrh	r3, [r4, #12]
 8011ddc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011de4:	d003      	beq.n	8011dee <__swsetup_r+0x7a>
 8011de6:	4621      	mov	r1, r4
 8011de8:	4628      	mov	r0, r5
 8011dea:	f001 fd3a 	bl	8013862 <__smakebuf_r>
 8011dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011df2:	f013 0201 	ands.w	r2, r3, #1
 8011df6:	d00a      	beq.n	8011e0e <__swsetup_r+0x9a>
 8011df8:	2200      	movs	r2, #0
 8011dfa:	60a2      	str	r2, [r4, #8]
 8011dfc:	6962      	ldr	r2, [r4, #20]
 8011dfe:	4252      	negs	r2, r2
 8011e00:	61a2      	str	r2, [r4, #24]
 8011e02:	6922      	ldr	r2, [r4, #16]
 8011e04:	b942      	cbnz	r2, 8011e18 <__swsetup_r+0xa4>
 8011e06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011e0a:	d1c5      	bne.n	8011d98 <__swsetup_r+0x24>
 8011e0c:	bd38      	pop	{r3, r4, r5, pc}
 8011e0e:	0799      	lsls	r1, r3, #30
 8011e10:	bf58      	it	pl
 8011e12:	6962      	ldrpl	r2, [r4, #20]
 8011e14:	60a2      	str	r2, [r4, #8]
 8011e16:	e7f4      	b.n	8011e02 <__swsetup_r+0x8e>
 8011e18:	2000      	movs	r0, #0
 8011e1a:	e7f7      	b.n	8011e0c <__swsetup_r+0x98>
 8011e1c:	2000046c 	.word	0x2000046c

08011e20 <__fputwc>:
 8011e20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011e24:	4680      	mov	r8, r0
 8011e26:	460f      	mov	r7, r1
 8011e28:	4614      	mov	r4, r2
 8011e2a:	f000 f877 	bl	8011f1c <__locale_mb_cur_max>
 8011e2e:	2801      	cmp	r0, #1
 8011e30:	4605      	mov	r5, r0
 8011e32:	d11b      	bne.n	8011e6c <__fputwc+0x4c>
 8011e34:	1e7b      	subs	r3, r7, #1
 8011e36:	2bfe      	cmp	r3, #254	@ 0xfe
 8011e38:	d818      	bhi.n	8011e6c <__fputwc+0x4c>
 8011e3a:	f88d 7004 	strb.w	r7, [sp, #4]
 8011e3e:	2600      	movs	r6, #0
 8011e40:	f10d 0904 	add.w	r9, sp, #4
 8011e44:	42ae      	cmp	r6, r5
 8011e46:	d021      	beq.n	8011e8c <__fputwc+0x6c>
 8011e48:	68a3      	ldr	r3, [r4, #8]
 8011e4a:	f816 1009 	ldrb.w	r1, [r6, r9]
 8011e4e:	3b01      	subs	r3, #1
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	60a3      	str	r3, [r4, #8]
 8011e54:	da04      	bge.n	8011e60 <__fputwc+0x40>
 8011e56:	69a2      	ldr	r2, [r4, #24]
 8011e58:	4293      	cmp	r3, r2
 8011e5a:	db1b      	blt.n	8011e94 <__fputwc+0x74>
 8011e5c:	290a      	cmp	r1, #10
 8011e5e:	d019      	beq.n	8011e94 <__fputwc+0x74>
 8011e60:	6823      	ldr	r3, [r4, #0]
 8011e62:	1c5a      	adds	r2, r3, #1
 8011e64:	6022      	str	r2, [r4, #0]
 8011e66:	7019      	strb	r1, [r3, #0]
 8011e68:	3601      	adds	r6, #1
 8011e6a:	e7eb      	b.n	8011e44 <__fputwc+0x24>
 8011e6c:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8011e70:	463a      	mov	r2, r7
 8011e72:	a901      	add	r1, sp, #4
 8011e74:	4640      	mov	r0, r8
 8011e76:	f001 fc39 	bl	80136ec <_wcrtomb_r>
 8011e7a:	1c43      	adds	r3, r0, #1
 8011e7c:	4605      	mov	r5, r0
 8011e7e:	d1de      	bne.n	8011e3e <__fputwc+0x1e>
 8011e80:	89a3      	ldrh	r3, [r4, #12]
 8011e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e86:	81a3      	strh	r3, [r4, #12]
 8011e88:	f04f 37ff 	mov.w	r7, #4294967295
 8011e8c:	4638      	mov	r0, r7
 8011e8e:	b003      	add	sp, #12
 8011e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e94:	4622      	mov	r2, r4
 8011e96:	4640      	mov	r0, r8
 8011e98:	f001 fd1f 	bl	80138da <__swbuf_r>
 8011e9c:	3001      	adds	r0, #1
 8011e9e:	d1e3      	bne.n	8011e68 <__fputwc+0x48>
 8011ea0:	e7f2      	b.n	8011e88 <__fputwc+0x68>

08011ea2 <_fputwc_r>:
 8011ea2:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8011ea4:	07db      	lsls	r3, r3, #31
 8011ea6:	b570      	push	{r4, r5, r6, lr}
 8011ea8:	4605      	mov	r5, r0
 8011eaa:	460e      	mov	r6, r1
 8011eac:	4614      	mov	r4, r2
 8011eae:	d405      	bmi.n	8011ebc <_fputwc_r+0x1a>
 8011eb0:	8993      	ldrh	r3, [r2, #12]
 8011eb2:	0598      	lsls	r0, r3, #22
 8011eb4:	d402      	bmi.n	8011ebc <_fputwc_r+0x1a>
 8011eb6:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8011eb8:	f7fc fa90 	bl	800e3dc <__retarget_lock_acquire_recursive>
 8011ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ec0:	0499      	lsls	r1, r3, #18
 8011ec2:	d406      	bmi.n	8011ed2 <_fputwc_r+0x30>
 8011ec4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8011ec8:	81a3      	strh	r3, [r4, #12]
 8011eca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ecc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8011ed0:	6663      	str	r3, [r4, #100]	@ 0x64
 8011ed2:	4622      	mov	r2, r4
 8011ed4:	4628      	mov	r0, r5
 8011ed6:	4631      	mov	r1, r6
 8011ed8:	f7ff ffa2 	bl	8011e20 <__fputwc>
 8011edc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ede:	4605      	mov	r5, r0
 8011ee0:	07da      	lsls	r2, r3, #31
 8011ee2:	d405      	bmi.n	8011ef0 <_fputwc_r+0x4e>
 8011ee4:	89a3      	ldrh	r3, [r4, #12]
 8011ee6:	059b      	lsls	r3, r3, #22
 8011ee8:	d402      	bmi.n	8011ef0 <_fputwc_r+0x4e>
 8011eea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011eec:	f7fc fa77 	bl	800e3de <__retarget_lock_release_recursive>
 8011ef0:	4628      	mov	r0, r5
 8011ef2:	bd70      	pop	{r4, r5, r6, pc}

08011ef4 <strncpy>:
 8011ef4:	3901      	subs	r1, #1
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	b510      	push	{r4, lr}
 8011efa:	b132      	cbz	r2, 8011f0a <strncpy+0x16>
 8011efc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011f00:	3a01      	subs	r2, #1
 8011f02:	f803 4b01 	strb.w	r4, [r3], #1
 8011f06:	2c00      	cmp	r4, #0
 8011f08:	d1f7      	bne.n	8011efa <strncpy+0x6>
 8011f0a:	441a      	add	r2, r3
 8011f0c:	2100      	movs	r1, #0
 8011f0e:	4293      	cmp	r3, r2
 8011f10:	d100      	bne.n	8011f14 <strncpy+0x20>
 8011f12:	bd10      	pop	{r4, pc}
 8011f14:	f803 1b01 	strb.w	r1, [r3], #1
 8011f18:	e7f9      	b.n	8011f0e <strncpy+0x1a>
	...

08011f1c <__locale_mb_cur_max>:
 8011f1c:	4b01      	ldr	r3, [pc, #4]	@ (8011f24 <__locale_mb_cur_max+0x8>)
 8011f1e:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 8011f22:	4770      	bx	lr
 8011f24:	20000594 	.word	0x20000594

08011f28 <_localeconv_r>:
 8011f28:	4800      	ldr	r0, [pc, #0]	@ (8011f2c <_localeconv_r+0x4>)
 8011f2a:	4770      	bx	lr
 8011f2c:	20000684 	.word	0x20000684

08011f30 <__libc_fini_array>:
 8011f30:	b538      	push	{r3, r4, r5, lr}
 8011f32:	4d07      	ldr	r5, [pc, #28]	@ (8011f50 <__libc_fini_array+0x20>)
 8011f34:	4c07      	ldr	r4, [pc, #28]	@ (8011f54 <__libc_fini_array+0x24>)
 8011f36:	1b64      	subs	r4, r4, r5
 8011f38:	10a4      	asrs	r4, r4, #2
 8011f3a:	b91c      	cbnz	r4, 8011f44 <__libc_fini_array+0x14>
 8011f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f40:	f001 bdee 	b.w	8013b20 <_fini>
 8011f44:	3c01      	subs	r4, #1
 8011f46:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8011f4a:	4798      	blx	r3
 8011f4c:	e7f5      	b.n	8011f3a <__libc_fini_array+0xa>
 8011f4e:	bf00      	nop
 8011f50:	08014bf4 	.word	0x08014bf4
 8011f54:	08014bf8 	.word	0x08014bf8

08011f58 <memchr>:
 8011f58:	b2c9      	uxtb	r1, r1
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	4402      	add	r2, r0
 8011f5e:	b510      	push	{r4, lr}
 8011f60:	4293      	cmp	r3, r2
 8011f62:	4618      	mov	r0, r3
 8011f64:	d101      	bne.n	8011f6a <memchr+0x12>
 8011f66:	2000      	movs	r0, #0
 8011f68:	e003      	b.n	8011f72 <memchr+0x1a>
 8011f6a:	7804      	ldrb	r4, [r0, #0]
 8011f6c:	3301      	adds	r3, #1
 8011f6e:	428c      	cmp	r4, r1
 8011f70:	d1f6      	bne.n	8011f60 <memchr+0x8>
 8011f72:	bd10      	pop	{r4, pc}

08011f74 <frexp>:
 8011f74:	2100      	movs	r1, #0
 8011f76:	b570      	push	{r4, r5, r6, lr}
 8011f78:	ec55 4b10 	vmov	r4, r5, d0
 8011f7c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8011f80:	6001      	str	r1, [r0, #0]
 8011f82:	4914      	ldr	r1, [pc, #80]	@ (8011fd4 <frexp+0x60>)
 8011f84:	4606      	mov	r6, r0
 8011f86:	462b      	mov	r3, r5
 8011f88:	428a      	cmp	r2, r1
 8011f8a:	d820      	bhi.n	8011fce <frexp+0x5a>
 8011f8c:	4621      	mov	r1, r4
 8011f8e:	4311      	orrs	r1, r2
 8011f90:	d01d      	beq.n	8011fce <frexp+0x5a>
 8011f92:	4911      	ldr	r1, [pc, #68]	@ (8011fd8 <frexp+0x64>)
 8011f94:	4029      	ands	r1, r5
 8011f96:	b961      	cbnz	r1, 8011fb2 <frexp+0x3e>
 8011f98:	2200      	movs	r2, #0
 8011f9a:	4b10      	ldr	r3, [pc, #64]	@ (8011fdc <frexp+0x68>)
 8011f9c:	4620      	mov	r0, r4
 8011f9e:	4629      	mov	r1, r5
 8011fa0:	f7ee fb38 	bl	8000614 <__aeabi_dmul>
 8011fa4:	460b      	mov	r3, r1
 8011fa6:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8011faa:	4604      	mov	r4, r0
 8011fac:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8011fb0:	6031      	str	r1, [r6, #0]
 8011fb2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011fb6:	1512      	asrs	r2, r2, #20
 8011fb8:	6831      	ldr	r1, [r6, #0]
 8011fba:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011fbe:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 8011fc2:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8011fc6:	4411      	add	r1, r2
 8011fc8:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 8011fcc:	6031      	str	r1, [r6, #0]
 8011fce:	ec45 4b10 	vmov	d0, r4, r5
 8011fd2:	bd70      	pop	{r4, r5, r6, pc}
 8011fd4:	7fefffff 	.word	0x7fefffff
 8011fd8:	7ff00000 	.word	0x7ff00000
 8011fdc:	43500000 	.word	0x43500000

08011fe0 <__register_exitproc>:
 8011fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fe4:	f8df a078 	ldr.w	sl, [pc, #120]	@ 8012060 <__register_exitproc+0x80>
 8011fe8:	4606      	mov	r6, r0
 8011fea:	4698      	mov	r8, r3
 8011fec:	460f      	mov	r7, r1
 8011fee:	f8da 0000 	ldr.w	r0, [sl]
 8011ff2:	4691      	mov	r9, r2
 8011ff4:	f7fc f9f2 	bl	800e3dc <__retarget_lock_acquire_recursive>
 8011ff8:	4b17      	ldr	r3, [pc, #92]	@ (8012058 <__register_exitproc+0x78>)
 8011ffa:	681c      	ldr	r4, [r3, #0]
 8011ffc:	b90c      	cbnz	r4, 8012002 <__register_exitproc+0x22>
 8011ffe:	4c17      	ldr	r4, [pc, #92]	@ (801205c <__register_exitproc+0x7c>)
 8012000:	601c      	str	r4, [r3, #0]
 8012002:	6865      	ldr	r5, [r4, #4]
 8012004:	f8da 0000 	ldr.w	r0, [sl]
 8012008:	2d1f      	cmp	r5, #31
 801200a:	dd05      	ble.n	8012018 <__register_exitproc+0x38>
 801200c:	f7fc f9e7 	bl	800e3de <__retarget_lock_release_recursive>
 8012010:	f04f 30ff 	mov.w	r0, #4294967295
 8012014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012018:	b1ae      	cbz	r6, 8012046 <__register_exitproc+0x66>
 801201a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801201e:	2201      	movs	r2, #1
 8012020:	2e02      	cmp	r6, #2
 8012022:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8012026:	fa02 f205 	lsl.w	r2, r2, r5
 801202a:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 801202e:	ea43 0302 	orr.w	r3, r3, r2
 8012032:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8012036:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 801203a:	bf02      	ittt	eq
 801203c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8012040:	4313      	orreq	r3, r2
 8012042:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8012046:	1c6b      	adds	r3, r5, #1
 8012048:	3502      	adds	r5, #2
 801204a:	6063      	str	r3, [r4, #4]
 801204c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8012050:	f7fc f9c5 	bl	800e3de <__retarget_lock_release_recursive>
 8012054:	2000      	movs	r0, #0
 8012056:	e7dd      	b.n	8012014 <__register_exitproc+0x34>
 8012058:	20001c1c 	.word	0x20001c1c
 801205c:	20001c20 	.word	0x20001c20
 8012060:	20000590 	.word	0x20000590

08012064 <quorem>:
 8012064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012068:	6903      	ldr	r3, [r0, #16]
 801206a:	4607      	mov	r7, r0
 801206c:	690c      	ldr	r4, [r1, #16]
 801206e:	42a3      	cmp	r3, r4
 8012070:	f2c0 8083 	blt.w	801217a <quorem+0x116>
 8012074:	3c01      	subs	r4, #1
 8012076:	f100 0514 	add.w	r5, r0, #20
 801207a:	f101 0814 	add.w	r8, r1, #20
 801207e:	00a3      	lsls	r3, r4, #2
 8012080:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012084:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012088:	9300      	str	r3, [sp, #0]
 801208a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801208e:	9301      	str	r3, [sp, #4]
 8012090:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012094:	3301      	adds	r3, #1
 8012096:	429a      	cmp	r2, r3
 8012098:	fbb2 f6f3 	udiv	r6, r2, r3
 801209c:	d331      	bcc.n	8012102 <quorem+0x9e>
 801209e:	f04f 0a00 	mov.w	sl, #0
 80120a2:	46c4      	mov	ip, r8
 80120a4:	46ae      	mov	lr, r5
 80120a6:	46d3      	mov	fp, sl
 80120a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80120ac:	b298      	uxth	r0, r3
 80120ae:	45e1      	cmp	r9, ip
 80120b0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80120b4:	fb06 a000 	mla	r0, r6, r0, sl
 80120b8:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80120bc:	b280      	uxth	r0, r0
 80120be:	fb06 2303 	mla	r3, r6, r3, r2
 80120c2:	f8de 2000 	ldr.w	r2, [lr]
 80120c6:	b292      	uxth	r2, r2
 80120c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80120cc:	eba2 0200 	sub.w	r2, r2, r0
 80120d0:	b29b      	uxth	r3, r3
 80120d2:	f8de 0000 	ldr.w	r0, [lr]
 80120d6:	445a      	add	r2, fp
 80120d8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80120dc:	b292      	uxth	r2, r2
 80120de:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80120e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80120e6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80120ea:	f84e 2b04 	str.w	r2, [lr], #4
 80120ee:	d2db      	bcs.n	80120a8 <quorem+0x44>
 80120f0:	9b00      	ldr	r3, [sp, #0]
 80120f2:	58eb      	ldr	r3, [r5, r3]
 80120f4:	b92b      	cbnz	r3, 8012102 <quorem+0x9e>
 80120f6:	9b01      	ldr	r3, [sp, #4]
 80120f8:	3b04      	subs	r3, #4
 80120fa:	429d      	cmp	r5, r3
 80120fc:	461a      	mov	r2, r3
 80120fe:	d330      	bcc.n	8012162 <quorem+0xfe>
 8012100:	613c      	str	r4, [r7, #16]
 8012102:	4638      	mov	r0, r7
 8012104:	f001 f826 	bl	8013154 <__mcmp>
 8012108:	2800      	cmp	r0, #0
 801210a:	db26      	blt.n	801215a <quorem+0xf6>
 801210c:	4629      	mov	r1, r5
 801210e:	2000      	movs	r0, #0
 8012110:	f858 2b04 	ldr.w	r2, [r8], #4
 8012114:	f8d1 c000 	ldr.w	ip, [r1]
 8012118:	fa1f fe82 	uxth.w	lr, r2
 801211c:	45c1      	cmp	r9, r8
 801211e:	fa1f f38c 	uxth.w	r3, ip
 8012122:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8012126:	eba3 030e 	sub.w	r3, r3, lr
 801212a:	4403      	add	r3, r0
 801212c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012130:	b29b      	uxth	r3, r3
 8012132:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012136:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801213a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801213e:	f841 3b04 	str.w	r3, [r1], #4
 8012142:	d2e5      	bcs.n	8012110 <quorem+0xac>
 8012144:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012148:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801214c:	b922      	cbnz	r2, 8012158 <quorem+0xf4>
 801214e:	3b04      	subs	r3, #4
 8012150:	429d      	cmp	r5, r3
 8012152:	461a      	mov	r2, r3
 8012154:	d30b      	bcc.n	801216e <quorem+0x10a>
 8012156:	613c      	str	r4, [r7, #16]
 8012158:	3601      	adds	r6, #1
 801215a:	4630      	mov	r0, r6
 801215c:	b003      	add	sp, #12
 801215e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012162:	6812      	ldr	r2, [r2, #0]
 8012164:	3b04      	subs	r3, #4
 8012166:	2a00      	cmp	r2, #0
 8012168:	d1ca      	bne.n	8012100 <quorem+0x9c>
 801216a:	3c01      	subs	r4, #1
 801216c:	e7c5      	b.n	80120fa <quorem+0x96>
 801216e:	6812      	ldr	r2, [r2, #0]
 8012170:	3b04      	subs	r3, #4
 8012172:	2a00      	cmp	r2, #0
 8012174:	d1ef      	bne.n	8012156 <quorem+0xf2>
 8012176:	3c01      	subs	r4, #1
 8012178:	e7ea      	b.n	8012150 <quorem+0xec>
 801217a:	2000      	movs	r0, #0
 801217c:	e7ee      	b.n	801215c <quorem+0xf8>
	...

08012180 <_dtoa_r>:
 8012180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012184:	b099      	sub	sp, #100	@ 0x64
 8012186:	4683      	mov	fp, r0
 8012188:	9109      	str	r1, [sp, #36]	@ 0x24
 801218a:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 801218c:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801218e:	920e      	str	r2, [sp, #56]	@ 0x38
 8012190:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012192:	ec55 4b10 	vmov	r4, r5, d0
 8012196:	ed8d 0b02 	vstr	d0, [sp, #8]
 801219a:	b149      	cbz	r1, 80121b0 <_dtoa_r+0x30>
 801219c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801219e:	2301      	movs	r3, #1
 80121a0:	4093      	lsls	r3, r2
 80121a2:	604a      	str	r2, [r1, #4]
 80121a4:	608b      	str	r3, [r1, #8]
 80121a6:	f000 fdcc 	bl	8012d42 <_Bfree>
 80121aa:	2300      	movs	r3, #0
 80121ac:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 80121b0:	1e2b      	subs	r3, r5, #0
 80121b2:	bfb7      	itett	lt
 80121b4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80121b8:	2300      	movge	r3, #0
 80121ba:	2201      	movlt	r2, #1
 80121bc:	9303      	strlt	r3, [sp, #12]
 80121be:	bfa8      	it	ge
 80121c0:	6033      	strge	r3, [r6, #0]
 80121c2:	9f03      	ldr	r7, [sp, #12]
 80121c4:	4bac      	ldr	r3, [pc, #688]	@ (8012478 <_dtoa_r+0x2f8>)
 80121c6:	bfb8      	it	lt
 80121c8:	6032      	strlt	r2, [r6, #0]
 80121ca:	43bb      	bics	r3, r7
 80121cc:	d114      	bne.n	80121f8 <_dtoa_r+0x78>
 80121ce:	f242 730f 	movw	r3, #9999	@ 0x270f
 80121d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80121d4:	6013      	str	r3, [r2, #0]
 80121d6:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80121da:	4323      	orrs	r3, r4
 80121dc:	f000 8549 	beq.w	8012c72 <_dtoa_r+0xaf2>
 80121e0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80121e2:	f8df a2b0 	ldr.w	sl, [pc, #688]	@ 8012494 <_dtoa_r+0x314>
 80121e6:	b11b      	cbz	r3, 80121f0 <_dtoa_r+0x70>
 80121e8:	f10a 0303 	add.w	r3, sl, #3
 80121ec:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80121ee:	6013      	str	r3, [r2, #0]
 80121f0:	4650      	mov	r0, sl
 80121f2:	b019      	add	sp, #100	@ 0x64
 80121f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80121fc:	2200      	movs	r2, #0
 80121fe:	2300      	movs	r3, #0
 8012200:	ec51 0b17 	vmov	r0, r1, d7
 8012204:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012208:	f7ee fc6c 	bl	8000ae4 <__aeabi_dcmpeq>
 801220c:	4680      	mov	r8, r0
 801220e:	b150      	cbz	r0, 8012226 <_dtoa_r+0xa6>
 8012210:	2301      	movs	r3, #1
 8012212:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012214:	6013      	str	r3, [r2, #0]
 8012216:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012218:	b113      	cbz	r3, 8012220 <_dtoa_r+0xa0>
 801221a:	4b98      	ldr	r3, [pc, #608]	@ (801247c <_dtoa_r+0x2fc>)
 801221c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801221e:	6013      	str	r3, [r2, #0]
 8012220:	f8df a274 	ldr.w	sl, [pc, #628]	@ 8012498 <_dtoa_r+0x318>
 8012224:	e7e4      	b.n	80121f0 <_dtoa_r+0x70>
 8012226:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801222a:	aa16      	add	r2, sp, #88	@ 0x58
 801222c:	a917      	add	r1, sp, #92	@ 0x5c
 801222e:	4658      	mov	r0, fp
 8012230:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012234:	f001 f842 	bl	80132bc <__d2b>
 8012238:	4681      	mov	r9, r0
 801223a:	2e00      	cmp	r6, #0
 801223c:	d075      	beq.n	801232a <_dtoa_r+0x1aa>
 801223e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012240:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012244:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801224c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012254:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012258:	4619      	mov	r1, r3
 801225a:	2200      	movs	r2, #0
 801225c:	4b88      	ldr	r3, [pc, #544]	@ (8012480 <_dtoa_r+0x300>)
 801225e:	f7ee f821 	bl	80002a4 <__aeabi_dsub>
 8012262:	a37f      	add	r3, pc, #508	@ (adr r3, 8012460 <_dtoa_r+0x2e0>)
 8012264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012268:	f7ee f9d4 	bl	8000614 <__aeabi_dmul>
 801226c:	a37e      	add	r3, pc, #504	@ (adr r3, 8012468 <_dtoa_r+0x2e8>)
 801226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012272:	f7ee f819 	bl	80002a8 <__adddf3>
 8012276:	4604      	mov	r4, r0
 8012278:	460d      	mov	r5, r1
 801227a:	4630      	mov	r0, r6
 801227c:	f7ee f960 	bl	8000540 <__aeabi_i2d>
 8012280:	a37b      	add	r3, pc, #492	@ (adr r3, 8012470 <_dtoa_r+0x2f0>)
 8012282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012286:	f7ee f9c5 	bl	8000614 <__aeabi_dmul>
 801228a:	4602      	mov	r2, r0
 801228c:	460b      	mov	r3, r1
 801228e:	4620      	mov	r0, r4
 8012290:	4629      	mov	r1, r5
 8012292:	f7ee f809 	bl	80002a8 <__adddf3>
 8012296:	4604      	mov	r4, r0
 8012298:	460d      	mov	r5, r1
 801229a:	f7ee fc6b 	bl	8000b74 <__aeabi_d2iz>
 801229e:	2200      	movs	r2, #0
 80122a0:	4607      	mov	r7, r0
 80122a2:	2300      	movs	r3, #0
 80122a4:	4620      	mov	r0, r4
 80122a6:	4629      	mov	r1, r5
 80122a8:	f7ee fc26 	bl	8000af8 <__aeabi_dcmplt>
 80122ac:	b140      	cbz	r0, 80122c0 <_dtoa_r+0x140>
 80122ae:	4638      	mov	r0, r7
 80122b0:	f7ee f946 	bl	8000540 <__aeabi_i2d>
 80122b4:	4622      	mov	r2, r4
 80122b6:	462b      	mov	r3, r5
 80122b8:	f7ee fc14 	bl	8000ae4 <__aeabi_dcmpeq>
 80122bc:	b900      	cbnz	r0, 80122c0 <_dtoa_r+0x140>
 80122be:	3f01      	subs	r7, #1
 80122c0:	2f16      	cmp	r7, #22
 80122c2:	d851      	bhi.n	8012368 <_dtoa_r+0x1e8>
 80122c4:	4b6f      	ldr	r3, [pc, #444]	@ (8012484 <_dtoa_r+0x304>)
 80122c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80122ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80122ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d2:	f7ee fc11 	bl	8000af8 <__aeabi_dcmplt>
 80122d6:	2800      	cmp	r0, #0
 80122d8:	d048      	beq.n	801236c <_dtoa_r+0x1ec>
 80122da:	3f01      	subs	r7, #1
 80122dc:	2300      	movs	r3, #0
 80122de:	9312      	str	r3, [sp, #72]	@ 0x48
 80122e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80122e2:	1b9b      	subs	r3, r3, r6
 80122e4:	1e5a      	subs	r2, r3, #1
 80122e6:	bf46      	itte	mi
 80122e8:	f1c3 0801 	rsbmi	r8, r3, #1
 80122ec:	2300      	movmi	r3, #0
 80122ee:	f04f 0800 	movpl.w	r8, #0
 80122f2:	9208      	str	r2, [sp, #32]
 80122f4:	bf48      	it	mi
 80122f6:	9308      	strmi	r3, [sp, #32]
 80122f8:	2f00      	cmp	r7, #0
 80122fa:	db39      	blt.n	8012370 <_dtoa_r+0x1f0>
 80122fc:	9b08      	ldr	r3, [sp, #32]
 80122fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012300:	443b      	add	r3, r7
 8012302:	9308      	str	r3, [sp, #32]
 8012304:	2300      	movs	r3, #0
 8012306:	930a      	str	r3, [sp, #40]	@ 0x28
 8012308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801230a:	2b09      	cmp	r3, #9
 801230c:	d864      	bhi.n	80123d8 <_dtoa_r+0x258>
 801230e:	2b05      	cmp	r3, #5
 8012310:	bfc5      	ittet	gt
 8012312:	3b04      	subgt	r3, #4
 8012314:	2400      	movgt	r4, #0
 8012316:	2401      	movle	r4, #1
 8012318:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801231a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801231c:	3b02      	subs	r3, #2
 801231e:	2b03      	cmp	r3, #3
 8012320:	d865      	bhi.n	80123ee <_dtoa_r+0x26e>
 8012322:	e8df f003 	tbb	[pc, r3]
 8012326:	392c      	.short	0x392c
 8012328:	5737      	.short	0x5737
 801232a:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801232e:	441e      	add	r6, r3
 8012330:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012334:	2b20      	cmp	r3, #32
 8012336:	bfc9      	itett	gt
 8012338:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801233c:	f1c3 0320 	rsble	r3, r3, #32
 8012340:	409f      	lslgt	r7, r3
 8012342:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012346:	bfd8      	it	le
 8012348:	fa04 f003 	lslle.w	r0, r4, r3
 801234c:	f106 36ff 	add.w	r6, r6, #4294967295
 8012350:	bfc4      	itt	gt
 8012352:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012356:	ea47 0003 	orrgt.w	r0, r7, r3
 801235a:	f7ee f8e1 	bl	8000520 <__aeabi_ui2d>
 801235e:	2201      	movs	r2, #1
 8012360:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012364:	9214      	str	r2, [sp, #80]	@ 0x50
 8012366:	e777      	b.n	8012258 <_dtoa_r+0xd8>
 8012368:	2301      	movs	r3, #1
 801236a:	e7b8      	b.n	80122de <_dtoa_r+0x15e>
 801236c:	9012      	str	r0, [sp, #72]	@ 0x48
 801236e:	e7b7      	b.n	80122e0 <_dtoa_r+0x160>
 8012370:	427b      	negs	r3, r7
 8012372:	eba8 0807 	sub.w	r8, r8, r7
 8012376:	930a      	str	r3, [sp, #40]	@ 0x28
 8012378:	2300      	movs	r3, #0
 801237a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801237c:	e7c4      	b.n	8012308 <_dtoa_r+0x188>
 801237e:	2300      	movs	r3, #0
 8012380:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012384:	2b00      	cmp	r3, #0
 8012386:	dc35      	bgt.n	80123f4 <_dtoa_r+0x274>
 8012388:	2301      	movs	r3, #1
 801238a:	461a      	mov	r2, r3
 801238c:	9300      	str	r3, [sp, #0]
 801238e:	9307      	str	r3, [sp, #28]
 8012390:	920e      	str	r2, [sp, #56]	@ 0x38
 8012392:	e00b      	b.n	80123ac <_dtoa_r+0x22c>
 8012394:	2301      	movs	r3, #1
 8012396:	e7f3      	b.n	8012380 <_dtoa_r+0x200>
 8012398:	2300      	movs	r3, #0
 801239a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801239c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801239e:	18fb      	adds	r3, r7, r3
 80123a0:	9300      	str	r3, [sp, #0]
 80123a2:	3301      	adds	r3, #1
 80123a4:	2b01      	cmp	r3, #1
 80123a6:	9307      	str	r3, [sp, #28]
 80123a8:	bfb8      	it	lt
 80123aa:	2301      	movlt	r3, #1
 80123ac:	2100      	movs	r1, #0
 80123ae:	2204      	movs	r2, #4
 80123b0:	f102 0014 	add.w	r0, r2, #20
 80123b4:	4298      	cmp	r0, r3
 80123b6:	d921      	bls.n	80123fc <_dtoa_r+0x27c>
 80123b8:	4658      	mov	r0, fp
 80123ba:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 80123be:	f000 fc9b 	bl	8012cf8 <_Balloc>
 80123c2:	4682      	mov	sl, r0
 80123c4:	b9e8      	cbnz	r0, 8012402 <_dtoa_r+0x282>
 80123c6:	4b30      	ldr	r3, [pc, #192]	@ (8012488 <_dtoa_r+0x308>)
 80123c8:	4602      	mov	r2, r0
 80123ca:	f240 11af 	movw	r1, #431	@ 0x1af
 80123ce:	482f      	ldr	r0, [pc, #188]	@ (801248c <_dtoa_r+0x30c>)
 80123d0:	f001 faee 	bl	80139b0 <__assert_func>
 80123d4:	2301      	movs	r3, #1
 80123d6:	e7e0      	b.n	801239a <_dtoa_r+0x21a>
 80123d8:	2401      	movs	r4, #1
 80123da:	2300      	movs	r3, #0
 80123dc:	940b      	str	r4, [sp, #44]	@ 0x2c
 80123de:	9309      	str	r3, [sp, #36]	@ 0x24
 80123e0:	f04f 33ff 	mov.w	r3, #4294967295
 80123e4:	2200      	movs	r2, #0
 80123e6:	9300      	str	r3, [sp, #0]
 80123e8:	9307      	str	r3, [sp, #28]
 80123ea:	2312      	movs	r3, #18
 80123ec:	e7d0      	b.n	8012390 <_dtoa_r+0x210>
 80123ee:	2301      	movs	r3, #1
 80123f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80123f2:	e7f5      	b.n	80123e0 <_dtoa_r+0x260>
 80123f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123f6:	9300      	str	r3, [sp, #0]
 80123f8:	9307      	str	r3, [sp, #28]
 80123fa:	e7d7      	b.n	80123ac <_dtoa_r+0x22c>
 80123fc:	3101      	adds	r1, #1
 80123fe:	0052      	lsls	r2, r2, #1
 8012400:	e7d6      	b.n	80123b0 <_dtoa_r+0x230>
 8012402:	9b07      	ldr	r3, [sp, #28]
 8012404:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 8012408:	2b0e      	cmp	r3, #14
 801240a:	f200 80c2 	bhi.w	8012592 <_dtoa_r+0x412>
 801240e:	2c00      	cmp	r4, #0
 8012410:	f000 80bf 	beq.w	8012592 <_dtoa_r+0x412>
 8012414:	2f00      	cmp	r7, #0
 8012416:	dd51      	ble.n	80124bc <_dtoa_r+0x33c>
 8012418:	f007 020f 	and.w	r2, r7, #15
 801241c:	4b19      	ldr	r3, [pc, #100]	@ (8012484 <_dtoa_r+0x304>)
 801241e:	05f8      	lsls	r0, r7, #23
 8012420:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012424:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012428:	ed93 7b00 	vldr	d7, [r3]
 801242c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012430:	d534      	bpl.n	801249c <_dtoa_r+0x31c>
 8012432:	4b17      	ldr	r3, [pc, #92]	@ (8012490 <_dtoa_r+0x310>)
 8012434:	f004 040f 	and.w	r4, r4, #15
 8012438:	2603      	movs	r6, #3
 801243a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801243e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012442:	f7ee fa11 	bl	8000868 <__aeabi_ddiv>
 8012446:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801244a:	4d11      	ldr	r5, [pc, #68]	@ (8012490 <_dtoa_r+0x310>)
 801244c:	bb44      	cbnz	r4, 80124a0 <_dtoa_r+0x320>
 801244e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012456:	f7ee fa07 	bl	8000868 <__aeabi_ddiv>
 801245a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801245e:	e046      	b.n	80124ee <_dtoa_r+0x36e>
 8012460:	636f4361 	.word	0x636f4361
 8012464:	3fd287a7 	.word	0x3fd287a7
 8012468:	8b60c8b3 	.word	0x8b60c8b3
 801246c:	3fc68a28 	.word	0x3fc68a28
 8012470:	509f79fb 	.word	0x509f79fb
 8012474:	3fd34413 	.word	0x3fd34413
 8012478:	7ff00000 	.word	0x7ff00000
 801247c:	0801496c 	.word	0x0801496c
 8012480:	3ff80000 	.word	0x3ff80000
 8012484:	08014ae0 	.word	0x08014ae0
 8012488:	080149e4 	.word	0x080149e4
 801248c:	080149f5 	.word	0x080149f5
 8012490:	08014ab8 	.word	0x08014ab8
 8012494:	080149e0 	.word	0x080149e0
 8012498:	0801496b 	.word	0x0801496b
 801249c:	2602      	movs	r6, #2
 801249e:	e7d4      	b.n	801244a <_dtoa_r+0x2ca>
 80124a0:	07e1      	lsls	r1, r4, #31
 80124a2:	d508      	bpl.n	80124b6 <_dtoa_r+0x336>
 80124a4:	3601      	adds	r6, #1
 80124a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80124aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80124ae:	f7ee f8b1 	bl	8000614 <__aeabi_dmul>
 80124b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80124b6:	1064      	asrs	r4, r4, #1
 80124b8:	3508      	adds	r5, #8
 80124ba:	e7c7      	b.n	801244c <_dtoa_r+0x2cc>
 80124bc:	f000 80d2 	beq.w	8012664 <_dtoa_r+0x4e4>
 80124c0:	427c      	negs	r4, r7
 80124c2:	4b92      	ldr	r3, [pc, #584]	@ (801270c <_dtoa_r+0x58c>)
 80124c4:	4d92      	ldr	r5, [pc, #584]	@ (8012710 <_dtoa_r+0x590>)
 80124c6:	2602      	movs	r6, #2
 80124c8:	f004 020f 	and.w	r2, r4, #15
 80124cc:	1124      	asrs	r4, r4, #4
 80124ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80124d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80124d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124da:	f7ee f89b 	bl	8000614 <__aeabi_dmul>
 80124de:	2300      	movs	r3, #0
 80124e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124e4:	2c00      	cmp	r4, #0
 80124e6:	f040 80b2 	bne.w	801264e <_dtoa_r+0x4ce>
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d1b5      	bne.n	801245a <_dtoa_r+0x2da>
 80124ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80124f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	f000 80b7 	beq.w	8012668 <_dtoa_r+0x4e8>
 80124fa:	2200      	movs	r2, #0
 80124fc:	4b85      	ldr	r3, [pc, #532]	@ (8012714 <_dtoa_r+0x594>)
 80124fe:	4620      	mov	r0, r4
 8012500:	4629      	mov	r1, r5
 8012502:	f7ee faf9 	bl	8000af8 <__aeabi_dcmplt>
 8012506:	2800      	cmp	r0, #0
 8012508:	f000 80ae 	beq.w	8012668 <_dtoa_r+0x4e8>
 801250c:	9b07      	ldr	r3, [sp, #28]
 801250e:	2b00      	cmp	r3, #0
 8012510:	f000 80aa 	beq.w	8012668 <_dtoa_r+0x4e8>
 8012514:	9b00      	ldr	r3, [sp, #0]
 8012516:	2b00      	cmp	r3, #0
 8012518:	dd37      	ble.n	801258a <_dtoa_r+0x40a>
 801251a:	1e7b      	subs	r3, r7, #1
 801251c:	4620      	mov	r0, r4
 801251e:	2200      	movs	r2, #0
 8012520:	4629      	mov	r1, r5
 8012522:	9304      	str	r3, [sp, #16]
 8012524:	3601      	adds	r6, #1
 8012526:	4b7c      	ldr	r3, [pc, #496]	@ (8012718 <_dtoa_r+0x598>)
 8012528:	f7ee f874 	bl	8000614 <__aeabi_dmul>
 801252c:	9c00      	ldr	r4, [sp, #0]
 801252e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012532:	4630      	mov	r0, r6
 8012534:	f7ee f804 	bl	8000540 <__aeabi_i2d>
 8012538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801253c:	f7ee f86a 	bl	8000614 <__aeabi_dmul>
 8012540:	2200      	movs	r2, #0
 8012542:	4b76      	ldr	r3, [pc, #472]	@ (801271c <_dtoa_r+0x59c>)
 8012544:	f7ed feb0 	bl	80002a8 <__adddf3>
 8012548:	4605      	mov	r5, r0
 801254a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801254e:	2c00      	cmp	r4, #0
 8012550:	f040 808d 	bne.w	801266e <_dtoa_r+0x4ee>
 8012554:	2200      	movs	r2, #0
 8012556:	4b72      	ldr	r3, [pc, #456]	@ (8012720 <_dtoa_r+0x5a0>)
 8012558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801255c:	f7ed fea2 	bl	80002a4 <__aeabi_dsub>
 8012560:	4602      	mov	r2, r0
 8012562:	460b      	mov	r3, r1
 8012564:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012568:	462a      	mov	r2, r5
 801256a:	4633      	mov	r3, r6
 801256c:	f7ee fae2 	bl	8000b34 <__aeabi_dcmpgt>
 8012570:	2800      	cmp	r0, #0
 8012572:	f040 828b 	bne.w	8012a8c <_dtoa_r+0x90c>
 8012576:	462a      	mov	r2, r5
 8012578:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801257c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012580:	f7ee faba 	bl	8000af8 <__aeabi_dcmplt>
 8012584:	2800      	cmp	r0, #0
 8012586:	f040 8128 	bne.w	80127da <_dtoa_r+0x65a>
 801258a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801258e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012592:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012594:	2b00      	cmp	r3, #0
 8012596:	f2c0 815a 	blt.w	801284e <_dtoa_r+0x6ce>
 801259a:	2f0e      	cmp	r7, #14
 801259c:	f300 8157 	bgt.w	801284e <_dtoa_r+0x6ce>
 80125a0:	4b5a      	ldr	r3, [pc, #360]	@ (801270c <_dtoa_r+0x58c>)
 80125a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80125a6:	ed93 7b00 	vldr	d7, [r3]
 80125aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	ed8d 7b00 	vstr	d7, [sp]
 80125b2:	da03      	bge.n	80125bc <_dtoa_r+0x43c>
 80125b4:	9b07      	ldr	r3, [sp, #28]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	f340 8101 	ble.w	80127be <_dtoa_r+0x63e>
 80125bc:	4656      	mov	r6, sl
 80125be:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80125c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125c6:	4620      	mov	r0, r4
 80125c8:	4629      	mov	r1, r5
 80125ca:	f7ee f94d 	bl	8000868 <__aeabi_ddiv>
 80125ce:	f7ee fad1 	bl	8000b74 <__aeabi_d2iz>
 80125d2:	4680      	mov	r8, r0
 80125d4:	f7ed ffb4 	bl	8000540 <__aeabi_i2d>
 80125d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125dc:	f7ee f81a 	bl	8000614 <__aeabi_dmul>
 80125e0:	4602      	mov	r2, r0
 80125e2:	4620      	mov	r0, r4
 80125e4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80125e8:	460b      	mov	r3, r1
 80125ea:	4629      	mov	r1, r5
 80125ec:	f7ed fe5a 	bl	80002a4 <__aeabi_dsub>
 80125f0:	9d07      	ldr	r5, [sp, #28]
 80125f2:	f806 4b01 	strb.w	r4, [r6], #1
 80125f6:	eba6 040a 	sub.w	r4, r6, sl
 80125fa:	4602      	mov	r2, r0
 80125fc:	460b      	mov	r3, r1
 80125fe:	42a5      	cmp	r5, r4
 8012600:	f040 8117 	bne.w	8012832 <_dtoa_r+0x6b2>
 8012604:	f7ed fe50 	bl	80002a8 <__adddf3>
 8012608:	4604      	mov	r4, r0
 801260a:	460d      	mov	r5, r1
 801260c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012610:	f7ee fa90 	bl	8000b34 <__aeabi_dcmpgt>
 8012614:	2800      	cmp	r0, #0
 8012616:	f040 80f9 	bne.w	801280c <_dtoa_r+0x68c>
 801261a:	4620      	mov	r0, r4
 801261c:	4629      	mov	r1, r5
 801261e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012622:	f7ee fa5f 	bl	8000ae4 <__aeabi_dcmpeq>
 8012626:	b118      	cbz	r0, 8012630 <_dtoa_r+0x4b0>
 8012628:	f018 0f01 	tst.w	r8, #1
 801262c:	f040 80ee 	bne.w	801280c <_dtoa_r+0x68c>
 8012630:	4649      	mov	r1, r9
 8012632:	4658      	mov	r0, fp
 8012634:	f000 fb85 	bl	8012d42 <_Bfree>
 8012638:	2300      	movs	r3, #0
 801263a:	3701      	adds	r7, #1
 801263c:	7033      	strb	r3, [r6, #0]
 801263e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012640:	601f      	str	r7, [r3, #0]
 8012642:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012644:	2b00      	cmp	r3, #0
 8012646:	f43f add3 	beq.w	80121f0 <_dtoa_r+0x70>
 801264a:	601e      	str	r6, [r3, #0]
 801264c:	e5d0      	b.n	80121f0 <_dtoa_r+0x70>
 801264e:	07e2      	lsls	r2, r4, #31
 8012650:	d505      	bpl.n	801265e <_dtoa_r+0x4de>
 8012652:	3601      	adds	r6, #1
 8012654:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012658:	f7ed ffdc 	bl	8000614 <__aeabi_dmul>
 801265c:	2301      	movs	r3, #1
 801265e:	1064      	asrs	r4, r4, #1
 8012660:	3508      	adds	r5, #8
 8012662:	e73f      	b.n	80124e4 <_dtoa_r+0x364>
 8012664:	2602      	movs	r6, #2
 8012666:	e742      	b.n	80124ee <_dtoa_r+0x36e>
 8012668:	9c07      	ldr	r4, [sp, #28]
 801266a:	9704      	str	r7, [sp, #16]
 801266c:	e761      	b.n	8012532 <_dtoa_r+0x3b2>
 801266e:	4b27      	ldr	r3, [pc, #156]	@ (801270c <_dtoa_r+0x58c>)
 8012670:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012672:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012676:	4454      	add	r4, sl
 8012678:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801267c:	2900      	cmp	r1, #0
 801267e:	d053      	beq.n	8012728 <_dtoa_r+0x5a8>
 8012680:	2000      	movs	r0, #0
 8012682:	4928      	ldr	r1, [pc, #160]	@ (8012724 <_dtoa_r+0x5a4>)
 8012684:	f7ee f8f0 	bl	8000868 <__aeabi_ddiv>
 8012688:	4633      	mov	r3, r6
 801268a:	4656      	mov	r6, sl
 801268c:	462a      	mov	r2, r5
 801268e:	f7ed fe09 	bl	80002a4 <__aeabi_dsub>
 8012692:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801269a:	f7ee fa6b 	bl	8000b74 <__aeabi_d2iz>
 801269e:	4605      	mov	r5, r0
 80126a0:	f7ed ff4e 	bl	8000540 <__aeabi_i2d>
 80126a4:	4602      	mov	r2, r0
 80126a6:	460b      	mov	r3, r1
 80126a8:	3530      	adds	r5, #48	@ 0x30
 80126aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126ae:	f7ed fdf9 	bl	80002a4 <__aeabi_dsub>
 80126b2:	4602      	mov	r2, r0
 80126b4:	460b      	mov	r3, r1
 80126b6:	f806 5b01 	strb.w	r5, [r6], #1
 80126ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80126be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80126c2:	f7ee fa19 	bl	8000af8 <__aeabi_dcmplt>
 80126c6:	2800      	cmp	r0, #0
 80126c8:	d171      	bne.n	80127ae <_dtoa_r+0x62e>
 80126ca:	2000      	movs	r0, #0
 80126cc:	4911      	ldr	r1, [pc, #68]	@ (8012714 <_dtoa_r+0x594>)
 80126ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80126d2:	f7ed fde7 	bl	80002a4 <__aeabi_dsub>
 80126d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80126da:	f7ee fa0d 	bl	8000af8 <__aeabi_dcmplt>
 80126de:	2800      	cmp	r0, #0
 80126e0:	f040 8095 	bne.w	801280e <_dtoa_r+0x68e>
 80126e4:	42a6      	cmp	r6, r4
 80126e6:	f43f af50 	beq.w	801258a <_dtoa_r+0x40a>
 80126ea:	2200      	movs	r2, #0
 80126ec:	4b0a      	ldr	r3, [pc, #40]	@ (8012718 <_dtoa_r+0x598>)
 80126ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80126f2:	f7ed ff8f 	bl	8000614 <__aeabi_dmul>
 80126f6:	2200      	movs	r2, #0
 80126f8:	4b07      	ldr	r3, [pc, #28]	@ (8012718 <_dtoa_r+0x598>)
 80126fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80126fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012702:	f7ed ff87 	bl	8000614 <__aeabi_dmul>
 8012706:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801270a:	e7c4      	b.n	8012696 <_dtoa_r+0x516>
 801270c:	08014ae0 	.word	0x08014ae0
 8012710:	08014ab8 	.word	0x08014ab8
 8012714:	3ff00000 	.word	0x3ff00000
 8012718:	40240000 	.word	0x40240000
 801271c:	401c0000 	.word	0x401c0000
 8012720:	40140000 	.word	0x40140000
 8012724:	3fe00000 	.word	0x3fe00000
 8012728:	4631      	mov	r1, r6
 801272a:	4656      	mov	r6, sl
 801272c:	4628      	mov	r0, r5
 801272e:	f7ed ff71 	bl	8000614 <__aeabi_dmul>
 8012732:	9415      	str	r4, [sp, #84]	@ 0x54
 8012734:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801273c:	f7ee fa1a 	bl	8000b74 <__aeabi_d2iz>
 8012740:	4605      	mov	r5, r0
 8012742:	f7ed fefd 	bl	8000540 <__aeabi_i2d>
 8012746:	4602      	mov	r2, r0
 8012748:	3530      	adds	r5, #48	@ 0x30
 801274a:	460b      	mov	r3, r1
 801274c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012750:	f7ed fda8 	bl	80002a4 <__aeabi_dsub>
 8012754:	f806 5b01 	strb.w	r5, [r6], #1
 8012758:	4602      	mov	r2, r0
 801275a:	460b      	mov	r3, r1
 801275c:	42a6      	cmp	r6, r4
 801275e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012762:	f04f 0200 	mov.w	r2, #0
 8012766:	d124      	bne.n	80127b2 <_dtoa_r+0x632>
 8012768:	4bac      	ldr	r3, [pc, #688]	@ (8012a1c <_dtoa_r+0x89c>)
 801276a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801276e:	f7ed fd9b 	bl	80002a8 <__adddf3>
 8012772:	4602      	mov	r2, r0
 8012774:	460b      	mov	r3, r1
 8012776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801277a:	f7ee f9db 	bl	8000b34 <__aeabi_dcmpgt>
 801277e:	2800      	cmp	r0, #0
 8012780:	d145      	bne.n	801280e <_dtoa_r+0x68e>
 8012782:	2000      	movs	r0, #0
 8012784:	49a5      	ldr	r1, [pc, #660]	@ (8012a1c <_dtoa_r+0x89c>)
 8012786:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801278a:	f7ed fd8b 	bl	80002a4 <__aeabi_dsub>
 801278e:	4602      	mov	r2, r0
 8012790:	460b      	mov	r3, r1
 8012792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012796:	f7ee f9af 	bl	8000af8 <__aeabi_dcmplt>
 801279a:	2800      	cmp	r0, #0
 801279c:	f43f aef5 	beq.w	801258a <_dtoa_r+0x40a>
 80127a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80127a2:	1e73      	subs	r3, r6, #1
 80127a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80127a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80127aa:	2b30      	cmp	r3, #48	@ 0x30
 80127ac:	d0f8      	beq.n	80127a0 <_dtoa_r+0x620>
 80127ae:	9f04      	ldr	r7, [sp, #16]
 80127b0:	e73e      	b.n	8012630 <_dtoa_r+0x4b0>
 80127b2:	4b9b      	ldr	r3, [pc, #620]	@ (8012a20 <_dtoa_r+0x8a0>)
 80127b4:	f7ed ff2e 	bl	8000614 <__aeabi_dmul>
 80127b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80127bc:	e7bc      	b.n	8012738 <_dtoa_r+0x5b8>
 80127be:	d10c      	bne.n	80127da <_dtoa_r+0x65a>
 80127c0:	2200      	movs	r2, #0
 80127c2:	4b98      	ldr	r3, [pc, #608]	@ (8012a24 <_dtoa_r+0x8a4>)
 80127c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80127c8:	f7ed ff24 	bl	8000614 <__aeabi_dmul>
 80127cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80127d0:	f7ee f9a6 	bl	8000b20 <__aeabi_dcmpge>
 80127d4:	2800      	cmp	r0, #0
 80127d6:	f000 8157 	beq.w	8012a88 <_dtoa_r+0x908>
 80127da:	2400      	movs	r4, #0
 80127dc:	4625      	mov	r5, r4
 80127de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80127e0:	4656      	mov	r6, sl
 80127e2:	43db      	mvns	r3, r3
 80127e4:	9304      	str	r3, [sp, #16]
 80127e6:	2700      	movs	r7, #0
 80127e8:	4621      	mov	r1, r4
 80127ea:	4658      	mov	r0, fp
 80127ec:	f000 faa9 	bl	8012d42 <_Bfree>
 80127f0:	2d00      	cmp	r5, #0
 80127f2:	d0dc      	beq.n	80127ae <_dtoa_r+0x62e>
 80127f4:	b12f      	cbz	r7, 8012802 <_dtoa_r+0x682>
 80127f6:	42af      	cmp	r7, r5
 80127f8:	d003      	beq.n	8012802 <_dtoa_r+0x682>
 80127fa:	4639      	mov	r1, r7
 80127fc:	4658      	mov	r0, fp
 80127fe:	f000 faa0 	bl	8012d42 <_Bfree>
 8012802:	4629      	mov	r1, r5
 8012804:	4658      	mov	r0, fp
 8012806:	f000 fa9c 	bl	8012d42 <_Bfree>
 801280a:	e7d0      	b.n	80127ae <_dtoa_r+0x62e>
 801280c:	9704      	str	r7, [sp, #16]
 801280e:	4633      	mov	r3, r6
 8012810:	461e      	mov	r6, r3
 8012812:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012816:	2a39      	cmp	r2, #57	@ 0x39
 8012818:	d107      	bne.n	801282a <_dtoa_r+0x6aa>
 801281a:	459a      	cmp	sl, r3
 801281c:	d1f8      	bne.n	8012810 <_dtoa_r+0x690>
 801281e:	9a04      	ldr	r2, [sp, #16]
 8012820:	3201      	adds	r2, #1
 8012822:	9204      	str	r2, [sp, #16]
 8012824:	2230      	movs	r2, #48	@ 0x30
 8012826:	f88a 2000 	strb.w	r2, [sl]
 801282a:	781a      	ldrb	r2, [r3, #0]
 801282c:	3201      	adds	r2, #1
 801282e:	701a      	strb	r2, [r3, #0]
 8012830:	e7bd      	b.n	80127ae <_dtoa_r+0x62e>
 8012832:	2200      	movs	r2, #0
 8012834:	4b7a      	ldr	r3, [pc, #488]	@ (8012a20 <_dtoa_r+0x8a0>)
 8012836:	f7ed feed 	bl	8000614 <__aeabi_dmul>
 801283a:	2200      	movs	r2, #0
 801283c:	2300      	movs	r3, #0
 801283e:	4604      	mov	r4, r0
 8012840:	460d      	mov	r5, r1
 8012842:	f7ee f94f 	bl	8000ae4 <__aeabi_dcmpeq>
 8012846:	2800      	cmp	r0, #0
 8012848:	f43f aebb 	beq.w	80125c2 <_dtoa_r+0x442>
 801284c:	e6f0      	b.n	8012630 <_dtoa_r+0x4b0>
 801284e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012850:	2a00      	cmp	r2, #0
 8012852:	f000 80db 	beq.w	8012a0c <_dtoa_r+0x88c>
 8012856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012858:	2a01      	cmp	r2, #1
 801285a:	f300 80bf 	bgt.w	80129dc <_dtoa_r+0x85c>
 801285e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012860:	2a00      	cmp	r2, #0
 8012862:	f000 80b7 	beq.w	80129d4 <_dtoa_r+0x854>
 8012866:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801286a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801286c:	4646      	mov	r6, r8
 801286e:	9a08      	ldr	r2, [sp, #32]
 8012870:	2101      	movs	r1, #1
 8012872:	4658      	mov	r0, fp
 8012874:	4498      	add	r8, r3
 8012876:	441a      	add	r2, r3
 8012878:	9208      	str	r2, [sp, #32]
 801287a:	f000 faff 	bl	8012e7c <__i2b>
 801287e:	4605      	mov	r5, r0
 8012880:	b15e      	cbz	r6, 801289a <_dtoa_r+0x71a>
 8012882:	9b08      	ldr	r3, [sp, #32]
 8012884:	2b00      	cmp	r3, #0
 8012886:	dd08      	ble.n	801289a <_dtoa_r+0x71a>
 8012888:	42b3      	cmp	r3, r6
 801288a:	9a08      	ldr	r2, [sp, #32]
 801288c:	bfa8      	it	ge
 801288e:	4633      	movge	r3, r6
 8012890:	eba8 0803 	sub.w	r8, r8, r3
 8012894:	1af6      	subs	r6, r6, r3
 8012896:	1ad3      	subs	r3, r2, r3
 8012898:	9308      	str	r3, [sp, #32]
 801289a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801289c:	b1f3      	cbz	r3, 80128dc <_dtoa_r+0x75c>
 801289e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	f000 80b7 	beq.w	8012a14 <_dtoa_r+0x894>
 80128a6:	b18c      	cbz	r4, 80128cc <_dtoa_r+0x74c>
 80128a8:	4629      	mov	r1, r5
 80128aa:	4622      	mov	r2, r4
 80128ac:	4658      	mov	r0, fp
 80128ae:	f000 fba5 	bl	8012ffc <__pow5mult>
 80128b2:	464a      	mov	r2, r9
 80128b4:	4601      	mov	r1, r0
 80128b6:	4605      	mov	r5, r0
 80128b8:	4658      	mov	r0, fp
 80128ba:	f000 faf5 	bl	8012ea8 <__multiply>
 80128be:	4649      	mov	r1, r9
 80128c0:	9004      	str	r0, [sp, #16]
 80128c2:	4658      	mov	r0, fp
 80128c4:	f000 fa3d 	bl	8012d42 <_Bfree>
 80128c8:	9b04      	ldr	r3, [sp, #16]
 80128ca:	4699      	mov	r9, r3
 80128cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128ce:	1b1a      	subs	r2, r3, r4
 80128d0:	d004      	beq.n	80128dc <_dtoa_r+0x75c>
 80128d2:	4649      	mov	r1, r9
 80128d4:	4658      	mov	r0, fp
 80128d6:	f000 fb91 	bl	8012ffc <__pow5mult>
 80128da:	4681      	mov	r9, r0
 80128dc:	2101      	movs	r1, #1
 80128de:	4658      	mov	r0, fp
 80128e0:	f000 facc 	bl	8012e7c <__i2b>
 80128e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128e6:	4604      	mov	r4, r0
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	f000 81cc 	beq.w	8012c86 <_dtoa_r+0xb06>
 80128ee:	461a      	mov	r2, r3
 80128f0:	4601      	mov	r1, r0
 80128f2:	4658      	mov	r0, fp
 80128f4:	f000 fb82 	bl	8012ffc <__pow5mult>
 80128f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128fa:	4604      	mov	r4, r0
 80128fc:	2b01      	cmp	r3, #1
 80128fe:	f300 8095 	bgt.w	8012a2c <_dtoa_r+0x8ac>
 8012902:	9b02      	ldr	r3, [sp, #8]
 8012904:	2b00      	cmp	r3, #0
 8012906:	f040 8087 	bne.w	8012a18 <_dtoa_r+0x898>
 801290a:	9b03      	ldr	r3, [sp, #12]
 801290c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012910:	2b00      	cmp	r3, #0
 8012912:	f040 8089 	bne.w	8012a28 <_dtoa_r+0x8a8>
 8012916:	9b03      	ldr	r3, [sp, #12]
 8012918:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801291c:	0d1b      	lsrs	r3, r3, #20
 801291e:	051b      	lsls	r3, r3, #20
 8012920:	b12b      	cbz	r3, 801292e <_dtoa_r+0x7ae>
 8012922:	9b08      	ldr	r3, [sp, #32]
 8012924:	f108 0801 	add.w	r8, r8, #1
 8012928:	3301      	adds	r3, #1
 801292a:	9308      	str	r3, [sp, #32]
 801292c:	2301      	movs	r3, #1
 801292e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012932:	2b00      	cmp	r3, #0
 8012934:	f000 81ad 	beq.w	8012c92 <_dtoa_r+0xb12>
 8012938:	6923      	ldr	r3, [r4, #16]
 801293a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801293e:	6918      	ldr	r0, [r3, #16]
 8012940:	f000 fa50 	bl	8012de4 <__hi0bits>
 8012944:	f1c0 0020 	rsb	r0, r0, #32
 8012948:	9b08      	ldr	r3, [sp, #32]
 801294a:	4418      	add	r0, r3
 801294c:	f010 001f 	ands.w	r0, r0, #31
 8012950:	d077      	beq.n	8012a42 <_dtoa_r+0x8c2>
 8012952:	f1c0 0320 	rsb	r3, r0, #32
 8012956:	2b04      	cmp	r3, #4
 8012958:	dd6b      	ble.n	8012a32 <_dtoa_r+0x8b2>
 801295a:	f1c0 001c 	rsb	r0, r0, #28
 801295e:	9b08      	ldr	r3, [sp, #32]
 8012960:	4480      	add	r8, r0
 8012962:	4403      	add	r3, r0
 8012964:	4406      	add	r6, r0
 8012966:	9308      	str	r3, [sp, #32]
 8012968:	f1b8 0f00 	cmp.w	r8, #0
 801296c:	dd05      	ble.n	801297a <_dtoa_r+0x7fa>
 801296e:	4649      	mov	r1, r9
 8012970:	4642      	mov	r2, r8
 8012972:	4658      	mov	r0, fp
 8012974:	f000 fb82 	bl	801307c <__lshift>
 8012978:	4681      	mov	r9, r0
 801297a:	9b08      	ldr	r3, [sp, #32]
 801297c:	2b00      	cmp	r3, #0
 801297e:	dd05      	ble.n	801298c <_dtoa_r+0x80c>
 8012980:	4621      	mov	r1, r4
 8012982:	461a      	mov	r2, r3
 8012984:	4658      	mov	r0, fp
 8012986:	f000 fb79 	bl	801307c <__lshift>
 801298a:	4604      	mov	r4, r0
 801298c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801298e:	2b00      	cmp	r3, #0
 8012990:	d059      	beq.n	8012a46 <_dtoa_r+0x8c6>
 8012992:	4621      	mov	r1, r4
 8012994:	4648      	mov	r0, r9
 8012996:	f000 fbdd 	bl	8013154 <__mcmp>
 801299a:	2800      	cmp	r0, #0
 801299c:	da53      	bge.n	8012a46 <_dtoa_r+0x8c6>
 801299e:	1e7b      	subs	r3, r7, #1
 80129a0:	4649      	mov	r1, r9
 80129a2:	220a      	movs	r2, #10
 80129a4:	4658      	mov	r0, fp
 80129a6:	9304      	str	r3, [sp, #16]
 80129a8:	2300      	movs	r3, #0
 80129aa:	f000 f9d3 	bl	8012d54 <__multadd>
 80129ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80129b0:	4681      	mov	r9, r0
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	f000 816f 	beq.w	8012c96 <_dtoa_r+0xb16>
 80129b8:	2300      	movs	r3, #0
 80129ba:	4629      	mov	r1, r5
 80129bc:	220a      	movs	r2, #10
 80129be:	4658      	mov	r0, fp
 80129c0:	f000 f9c8 	bl	8012d54 <__multadd>
 80129c4:	9b00      	ldr	r3, [sp, #0]
 80129c6:	4605      	mov	r5, r0
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	dc67      	bgt.n	8012a9c <_dtoa_r+0x91c>
 80129cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129ce:	2b02      	cmp	r3, #2
 80129d0:	dc41      	bgt.n	8012a56 <_dtoa_r+0x8d6>
 80129d2:	e063      	b.n	8012a9c <_dtoa_r+0x91c>
 80129d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80129d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80129da:	e746      	b.n	801286a <_dtoa_r+0x6ea>
 80129dc:	9b07      	ldr	r3, [sp, #28]
 80129de:	1e5c      	subs	r4, r3, #1
 80129e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80129e2:	42a3      	cmp	r3, r4
 80129e4:	bfb7      	itett	lt
 80129e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80129e8:	1b1c      	subge	r4, r3, r4
 80129ea:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80129ec:	1ae3      	sublt	r3, r4, r3
 80129ee:	bfbe      	ittt	lt
 80129f0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80129f2:	2400      	movlt	r4, #0
 80129f4:	18d2      	addlt	r2, r2, r3
 80129f6:	9b07      	ldr	r3, [sp, #28]
 80129f8:	bfb8      	it	lt
 80129fa:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	bfb5      	itete	lt
 8012a00:	eba8 0603 	sublt.w	r6, r8, r3
 8012a04:	4646      	movge	r6, r8
 8012a06:	2300      	movlt	r3, #0
 8012a08:	9b07      	ldrge	r3, [sp, #28]
 8012a0a:	e730      	b.n	801286e <_dtoa_r+0x6ee>
 8012a0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012a0e:	4646      	mov	r6, r8
 8012a10:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012a12:	e735      	b.n	8012880 <_dtoa_r+0x700>
 8012a14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012a16:	e75c      	b.n	80128d2 <_dtoa_r+0x752>
 8012a18:	2300      	movs	r3, #0
 8012a1a:	e788      	b.n	801292e <_dtoa_r+0x7ae>
 8012a1c:	3fe00000 	.word	0x3fe00000
 8012a20:	40240000 	.word	0x40240000
 8012a24:	40140000 	.word	0x40140000
 8012a28:	9b02      	ldr	r3, [sp, #8]
 8012a2a:	e780      	b.n	801292e <_dtoa_r+0x7ae>
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a30:	e782      	b.n	8012938 <_dtoa_r+0x7b8>
 8012a32:	d099      	beq.n	8012968 <_dtoa_r+0x7e8>
 8012a34:	331c      	adds	r3, #28
 8012a36:	9a08      	ldr	r2, [sp, #32]
 8012a38:	441a      	add	r2, r3
 8012a3a:	4498      	add	r8, r3
 8012a3c:	441e      	add	r6, r3
 8012a3e:	9208      	str	r2, [sp, #32]
 8012a40:	e792      	b.n	8012968 <_dtoa_r+0x7e8>
 8012a42:	4603      	mov	r3, r0
 8012a44:	e7f6      	b.n	8012a34 <_dtoa_r+0x8b4>
 8012a46:	9b07      	ldr	r3, [sp, #28]
 8012a48:	9704      	str	r7, [sp, #16]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	dc20      	bgt.n	8012a90 <_dtoa_r+0x910>
 8012a4e:	9300      	str	r3, [sp, #0]
 8012a50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a52:	2b02      	cmp	r3, #2
 8012a54:	dd1e      	ble.n	8012a94 <_dtoa_r+0x914>
 8012a56:	9b00      	ldr	r3, [sp, #0]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	f47f aec0 	bne.w	80127de <_dtoa_r+0x65e>
 8012a5e:	4621      	mov	r1, r4
 8012a60:	2205      	movs	r2, #5
 8012a62:	4658      	mov	r0, fp
 8012a64:	f000 f976 	bl	8012d54 <__multadd>
 8012a68:	4601      	mov	r1, r0
 8012a6a:	4604      	mov	r4, r0
 8012a6c:	4648      	mov	r0, r9
 8012a6e:	f000 fb71 	bl	8013154 <__mcmp>
 8012a72:	2800      	cmp	r0, #0
 8012a74:	f77f aeb3 	ble.w	80127de <_dtoa_r+0x65e>
 8012a78:	2331      	movs	r3, #49	@ 0x31
 8012a7a:	4656      	mov	r6, sl
 8012a7c:	f806 3b01 	strb.w	r3, [r6], #1
 8012a80:	9b04      	ldr	r3, [sp, #16]
 8012a82:	3301      	adds	r3, #1
 8012a84:	9304      	str	r3, [sp, #16]
 8012a86:	e6ae      	b.n	80127e6 <_dtoa_r+0x666>
 8012a88:	9c07      	ldr	r4, [sp, #28]
 8012a8a:	9704      	str	r7, [sp, #16]
 8012a8c:	4625      	mov	r5, r4
 8012a8e:	e7f3      	b.n	8012a78 <_dtoa_r+0x8f8>
 8012a90:	9b07      	ldr	r3, [sp, #28]
 8012a92:	9300      	str	r3, [sp, #0]
 8012a94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	f000 8101 	beq.w	8012c9e <_dtoa_r+0xb1e>
 8012a9c:	2e00      	cmp	r6, #0
 8012a9e:	dd05      	ble.n	8012aac <_dtoa_r+0x92c>
 8012aa0:	4629      	mov	r1, r5
 8012aa2:	4632      	mov	r2, r6
 8012aa4:	4658      	mov	r0, fp
 8012aa6:	f000 fae9 	bl	801307c <__lshift>
 8012aaa:	4605      	mov	r5, r0
 8012aac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d059      	beq.n	8012b66 <_dtoa_r+0x9e6>
 8012ab2:	6869      	ldr	r1, [r5, #4]
 8012ab4:	4658      	mov	r0, fp
 8012ab6:	f000 f91f 	bl	8012cf8 <_Balloc>
 8012aba:	4606      	mov	r6, r0
 8012abc:	b920      	cbnz	r0, 8012ac8 <_dtoa_r+0x948>
 8012abe:	4b83      	ldr	r3, [pc, #524]	@ (8012ccc <_dtoa_r+0xb4c>)
 8012ac0:	4602      	mov	r2, r0
 8012ac2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012ac6:	e482      	b.n	80123ce <_dtoa_r+0x24e>
 8012ac8:	692a      	ldr	r2, [r5, #16]
 8012aca:	f105 010c 	add.w	r1, r5, #12
 8012ace:	300c      	adds	r0, #12
 8012ad0:	3202      	adds	r2, #2
 8012ad2:	0092      	lsls	r2, r2, #2
 8012ad4:	f7fb fc90 	bl	800e3f8 <memcpy>
 8012ad8:	2201      	movs	r2, #1
 8012ada:	4631      	mov	r1, r6
 8012adc:	4658      	mov	r0, fp
 8012ade:	f000 facd 	bl	801307c <__lshift>
 8012ae2:	f10a 0301 	add.w	r3, sl, #1
 8012ae6:	462f      	mov	r7, r5
 8012ae8:	4605      	mov	r5, r0
 8012aea:	9307      	str	r3, [sp, #28]
 8012aec:	9b00      	ldr	r3, [sp, #0]
 8012aee:	4453      	add	r3, sl
 8012af0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012af2:	9b02      	ldr	r3, [sp, #8]
 8012af4:	f003 0301 	and.w	r3, r3, #1
 8012af8:	930a      	str	r3, [sp, #40]	@ 0x28
 8012afa:	9b07      	ldr	r3, [sp, #28]
 8012afc:	4621      	mov	r1, r4
 8012afe:	4648      	mov	r0, r9
 8012b00:	3b01      	subs	r3, #1
 8012b02:	9300      	str	r3, [sp, #0]
 8012b04:	f7ff faae 	bl	8012064 <quorem>
 8012b08:	4639      	mov	r1, r7
 8012b0a:	9002      	str	r0, [sp, #8]
 8012b0c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012b10:	4648      	mov	r0, r9
 8012b12:	f000 fb1f 	bl	8013154 <__mcmp>
 8012b16:	462a      	mov	r2, r5
 8012b18:	9008      	str	r0, [sp, #32]
 8012b1a:	4621      	mov	r1, r4
 8012b1c:	4658      	mov	r0, fp
 8012b1e:	f000 fb35 	bl	801318c <__mdiff>
 8012b22:	68c2      	ldr	r2, [r0, #12]
 8012b24:	4606      	mov	r6, r0
 8012b26:	bb02      	cbnz	r2, 8012b6a <_dtoa_r+0x9ea>
 8012b28:	4601      	mov	r1, r0
 8012b2a:	4648      	mov	r0, r9
 8012b2c:	f000 fb12 	bl	8013154 <__mcmp>
 8012b30:	4602      	mov	r2, r0
 8012b32:	4631      	mov	r1, r6
 8012b34:	4658      	mov	r0, fp
 8012b36:	920e      	str	r2, [sp, #56]	@ 0x38
 8012b38:	f000 f903 	bl	8012d42 <_Bfree>
 8012b3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012b40:	9e07      	ldr	r6, [sp, #28]
 8012b42:	ea43 0102 	orr.w	r1, r3, r2
 8012b46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b48:	4319      	orrs	r1, r3
 8012b4a:	d110      	bne.n	8012b6e <_dtoa_r+0x9ee>
 8012b4c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012b50:	d029      	beq.n	8012ba6 <_dtoa_r+0xa26>
 8012b52:	9b08      	ldr	r3, [sp, #32]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	dd02      	ble.n	8012b5e <_dtoa_r+0x9de>
 8012b58:	9b02      	ldr	r3, [sp, #8]
 8012b5a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012b5e:	9b00      	ldr	r3, [sp, #0]
 8012b60:	f883 8000 	strb.w	r8, [r3]
 8012b64:	e640      	b.n	80127e8 <_dtoa_r+0x668>
 8012b66:	4628      	mov	r0, r5
 8012b68:	e7bb      	b.n	8012ae2 <_dtoa_r+0x962>
 8012b6a:	2201      	movs	r2, #1
 8012b6c:	e7e1      	b.n	8012b32 <_dtoa_r+0x9b2>
 8012b6e:	9b08      	ldr	r3, [sp, #32]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	db04      	blt.n	8012b7e <_dtoa_r+0x9fe>
 8012b74:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012b76:	430b      	orrs	r3, r1
 8012b78:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012b7a:	430b      	orrs	r3, r1
 8012b7c:	d120      	bne.n	8012bc0 <_dtoa_r+0xa40>
 8012b7e:	2a00      	cmp	r2, #0
 8012b80:	dded      	ble.n	8012b5e <_dtoa_r+0x9de>
 8012b82:	4649      	mov	r1, r9
 8012b84:	2201      	movs	r2, #1
 8012b86:	4658      	mov	r0, fp
 8012b88:	f000 fa78 	bl	801307c <__lshift>
 8012b8c:	4621      	mov	r1, r4
 8012b8e:	4681      	mov	r9, r0
 8012b90:	f000 fae0 	bl	8013154 <__mcmp>
 8012b94:	2800      	cmp	r0, #0
 8012b96:	dc03      	bgt.n	8012ba0 <_dtoa_r+0xa20>
 8012b98:	d1e1      	bne.n	8012b5e <_dtoa_r+0x9de>
 8012b9a:	f018 0f01 	tst.w	r8, #1
 8012b9e:	d0de      	beq.n	8012b5e <_dtoa_r+0x9de>
 8012ba0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012ba4:	d1d8      	bne.n	8012b58 <_dtoa_r+0x9d8>
 8012ba6:	2339      	movs	r3, #57	@ 0x39
 8012ba8:	9a00      	ldr	r2, [sp, #0]
 8012baa:	7013      	strb	r3, [r2, #0]
 8012bac:	4633      	mov	r3, r6
 8012bae:	461e      	mov	r6, r3
 8012bb0:	3b01      	subs	r3, #1
 8012bb2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012bb6:	2a39      	cmp	r2, #57	@ 0x39
 8012bb8:	d052      	beq.n	8012c60 <_dtoa_r+0xae0>
 8012bba:	3201      	adds	r2, #1
 8012bbc:	701a      	strb	r2, [r3, #0]
 8012bbe:	e613      	b.n	80127e8 <_dtoa_r+0x668>
 8012bc0:	2a00      	cmp	r2, #0
 8012bc2:	dd07      	ble.n	8012bd4 <_dtoa_r+0xa54>
 8012bc4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012bc8:	d0ed      	beq.n	8012ba6 <_dtoa_r+0xa26>
 8012bca:	f108 0301 	add.w	r3, r8, #1
 8012bce:	9a00      	ldr	r2, [sp, #0]
 8012bd0:	7013      	strb	r3, [r2, #0]
 8012bd2:	e609      	b.n	80127e8 <_dtoa_r+0x668>
 8012bd4:	9b07      	ldr	r3, [sp, #28]
 8012bd6:	9a07      	ldr	r2, [sp, #28]
 8012bd8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012bdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012bde:	4293      	cmp	r3, r2
 8012be0:	d028      	beq.n	8012c34 <_dtoa_r+0xab4>
 8012be2:	4649      	mov	r1, r9
 8012be4:	2300      	movs	r3, #0
 8012be6:	220a      	movs	r2, #10
 8012be8:	4658      	mov	r0, fp
 8012bea:	f000 f8b3 	bl	8012d54 <__multadd>
 8012bee:	42af      	cmp	r7, r5
 8012bf0:	4681      	mov	r9, r0
 8012bf2:	f04f 0300 	mov.w	r3, #0
 8012bf6:	f04f 020a 	mov.w	r2, #10
 8012bfa:	4639      	mov	r1, r7
 8012bfc:	4658      	mov	r0, fp
 8012bfe:	d107      	bne.n	8012c10 <_dtoa_r+0xa90>
 8012c00:	f000 f8a8 	bl	8012d54 <__multadd>
 8012c04:	4607      	mov	r7, r0
 8012c06:	4605      	mov	r5, r0
 8012c08:	9b07      	ldr	r3, [sp, #28]
 8012c0a:	3301      	adds	r3, #1
 8012c0c:	9307      	str	r3, [sp, #28]
 8012c0e:	e774      	b.n	8012afa <_dtoa_r+0x97a>
 8012c10:	f000 f8a0 	bl	8012d54 <__multadd>
 8012c14:	4629      	mov	r1, r5
 8012c16:	4607      	mov	r7, r0
 8012c18:	2300      	movs	r3, #0
 8012c1a:	220a      	movs	r2, #10
 8012c1c:	4658      	mov	r0, fp
 8012c1e:	f000 f899 	bl	8012d54 <__multadd>
 8012c22:	4605      	mov	r5, r0
 8012c24:	e7f0      	b.n	8012c08 <_dtoa_r+0xa88>
 8012c26:	9b00      	ldr	r3, [sp, #0]
 8012c28:	2700      	movs	r7, #0
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	bfcc      	ite	gt
 8012c2e:	461e      	movgt	r6, r3
 8012c30:	2601      	movle	r6, #1
 8012c32:	4456      	add	r6, sl
 8012c34:	4649      	mov	r1, r9
 8012c36:	2201      	movs	r2, #1
 8012c38:	4658      	mov	r0, fp
 8012c3a:	f000 fa1f 	bl	801307c <__lshift>
 8012c3e:	4621      	mov	r1, r4
 8012c40:	4681      	mov	r9, r0
 8012c42:	f000 fa87 	bl	8013154 <__mcmp>
 8012c46:	2800      	cmp	r0, #0
 8012c48:	dcb0      	bgt.n	8012bac <_dtoa_r+0xa2c>
 8012c4a:	d102      	bne.n	8012c52 <_dtoa_r+0xad2>
 8012c4c:	f018 0f01 	tst.w	r8, #1
 8012c50:	d1ac      	bne.n	8012bac <_dtoa_r+0xa2c>
 8012c52:	4633      	mov	r3, r6
 8012c54:	461e      	mov	r6, r3
 8012c56:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012c5a:	2a30      	cmp	r2, #48	@ 0x30
 8012c5c:	d0fa      	beq.n	8012c54 <_dtoa_r+0xad4>
 8012c5e:	e5c3      	b.n	80127e8 <_dtoa_r+0x668>
 8012c60:	459a      	cmp	sl, r3
 8012c62:	d1a4      	bne.n	8012bae <_dtoa_r+0xa2e>
 8012c64:	9b04      	ldr	r3, [sp, #16]
 8012c66:	3301      	adds	r3, #1
 8012c68:	9304      	str	r3, [sp, #16]
 8012c6a:	2331      	movs	r3, #49	@ 0x31
 8012c6c:	f88a 3000 	strb.w	r3, [sl]
 8012c70:	e5ba      	b.n	80127e8 <_dtoa_r+0x668>
 8012c72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012c74:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8012cd0 <_dtoa_r+0xb50>
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	f43f aab9 	beq.w	80121f0 <_dtoa_r+0x70>
 8012c7e:	f10a 0308 	add.w	r3, sl, #8
 8012c82:	f7ff bab3 	b.w	80121ec <_dtoa_r+0x6c>
 8012c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c88:	2b01      	cmp	r3, #1
 8012c8a:	f77f ae3a 	ble.w	8012902 <_dtoa_r+0x782>
 8012c8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c90:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c92:	2001      	movs	r0, #1
 8012c94:	e658      	b.n	8012948 <_dtoa_r+0x7c8>
 8012c96:	9b00      	ldr	r3, [sp, #0]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	f77f aed9 	ble.w	8012a50 <_dtoa_r+0x8d0>
 8012c9e:	4656      	mov	r6, sl
 8012ca0:	4621      	mov	r1, r4
 8012ca2:	4648      	mov	r0, r9
 8012ca4:	f7ff f9de 	bl	8012064 <quorem>
 8012ca8:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012cac:	9b00      	ldr	r3, [sp, #0]
 8012cae:	f806 8b01 	strb.w	r8, [r6], #1
 8012cb2:	eba6 020a 	sub.w	r2, r6, sl
 8012cb6:	4293      	cmp	r3, r2
 8012cb8:	ddb5      	ble.n	8012c26 <_dtoa_r+0xaa6>
 8012cba:	4649      	mov	r1, r9
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	220a      	movs	r2, #10
 8012cc0:	4658      	mov	r0, fp
 8012cc2:	f000 f847 	bl	8012d54 <__multadd>
 8012cc6:	4681      	mov	r9, r0
 8012cc8:	e7ea      	b.n	8012ca0 <_dtoa_r+0xb20>
 8012cca:	bf00      	nop
 8012ccc:	080149e4 	.word	0x080149e4
 8012cd0:	080149d7 	.word	0x080149d7

08012cd4 <__ascii_mbtowc>:
 8012cd4:	b082      	sub	sp, #8
 8012cd6:	b901      	cbnz	r1, 8012cda <__ascii_mbtowc+0x6>
 8012cd8:	a901      	add	r1, sp, #4
 8012cda:	b142      	cbz	r2, 8012cee <__ascii_mbtowc+0x1a>
 8012cdc:	b14b      	cbz	r3, 8012cf2 <__ascii_mbtowc+0x1e>
 8012cde:	7813      	ldrb	r3, [r2, #0]
 8012ce0:	600b      	str	r3, [r1, #0]
 8012ce2:	7812      	ldrb	r2, [r2, #0]
 8012ce4:	1e10      	subs	r0, r2, #0
 8012ce6:	bf18      	it	ne
 8012ce8:	2001      	movne	r0, #1
 8012cea:	b002      	add	sp, #8
 8012cec:	4770      	bx	lr
 8012cee:	4610      	mov	r0, r2
 8012cf0:	e7fb      	b.n	8012cea <__ascii_mbtowc+0x16>
 8012cf2:	f06f 0001 	mvn.w	r0, #1
 8012cf6:	e7f8      	b.n	8012cea <__ascii_mbtowc+0x16>

08012cf8 <_Balloc>:
 8012cf8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8012cfa:	b570      	push	{r4, r5, r6, lr}
 8012cfc:	4605      	mov	r5, r0
 8012cfe:	460c      	mov	r4, r1
 8012d00:	b17b      	cbz	r3, 8012d22 <_Balloc+0x2a>
 8012d02:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8012d04:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012d08:	b9a0      	cbnz	r0, 8012d34 <_Balloc+0x3c>
 8012d0a:	2101      	movs	r1, #1
 8012d0c:	4628      	mov	r0, r5
 8012d0e:	fa01 f604 	lsl.w	r6, r1, r4
 8012d12:	1d72      	adds	r2, r6, #5
 8012d14:	0092      	lsls	r2, r2, #2
 8012d16:	f000 fe69 	bl	80139ec <_calloc_r>
 8012d1a:	b148      	cbz	r0, 8012d30 <_Balloc+0x38>
 8012d1c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8012d20:	e00b      	b.n	8012d3a <_Balloc+0x42>
 8012d22:	2221      	movs	r2, #33	@ 0x21
 8012d24:	2104      	movs	r1, #4
 8012d26:	f000 fe61 	bl	80139ec <_calloc_r>
 8012d2a:	6468      	str	r0, [r5, #68]	@ 0x44
 8012d2c:	2800      	cmp	r0, #0
 8012d2e:	d1e8      	bne.n	8012d02 <_Balloc+0xa>
 8012d30:	2000      	movs	r0, #0
 8012d32:	bd70      	pop	{r4, r5, r6, pc}
 8012d34:	6802      	ldr	r2, [r0, #0]
 8012d36:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012d40:	e7f7      	b.n	8012d32 <_Balloc+0x3a>

08012d42 <_Bfree>:
 8012d42:	b131      	cbz	r1, 8012d52 <_Bfree+0x10>
 8012d44:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8012d46:	684a      	ldr	r2, [r1, #4]
 8012d48:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012d4c:	6008      	str	r0, [r1, #0]
 8012d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8012d52:	4770      	bx	lr

08012d54 <__multadd>:
 8012d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d58:	f101 0c14 	add.w	ip, r1, #20
 8012d5c:	4607      	mov	r7, r0
 8012d5e:	460c      	mov	r4, r1
 8012d60:	461e      	mov	r6, r3
 8012d62:	690d      	ldr	r5, [r1, #16]
 8012d64:	2000      	movs	r0, #0
 8012d66:	f8dc 3000 	ldr.w	r3, [ip]
 8012d6a:	3001      	adds	r0, #1
 8012d6c:	b299      	uxth	r1, r3
 8012d6e:	4285      	cmp	r5, r0
 8012d70:	fb02 6101 	mla	r1, r2, r1, r6
 8012d74:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012d78:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8012d7c:	b289      	uxth	r1, r1
 8012d7e:	fb02 3306 	mla	r3, r2, r6, r3
 8012d82:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012d86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012d8a:	f84c 1b04 	str.w	r1, [ip], #4
 8012d8e:	dcea      	bgt.n	8012d66 <__multadd+0x12>
 8012d90:	b30e      	cbz	r6, 8012dd6 <__multadd+0x82>
 8012d92:	68a3      	ldr	r3, [r4, #8]
 8012d94:	42ab      	cmp	r3, r5
 8012d96:	dc19      	bgt.n	8012dcc <__multadd+0x78>
 8012d98:	6861      	ldr	r1, [r4, #4]
 8012d9a:	4638      	mov	r0, r7
 8012d9c:	3101      	adds	r1, #1
 8012d9e:	f7ff ffab 	bl	8012cf8 <_Balloc>
 8012da2:	4680      	mov	r8, r0
 8012da4:	b928      	cbnz	r0, 8012db2 <__multadd+0x5e>
 8012da6:	4602      	mov	r2, r0
 8012da8:	4b0c      	ldr	r3, [pc, #48]	@ (8012ddc <__multadd+0x88>)
 8012daa:	21ba      	movs	r1, #186	@ 0xba
 8012dac:	480c      	ldr	r0, [pc, #48]	@ (8012de0 <__multadd+0x8c>)
 8012dae:	f000 fdff 	bl	80139b0 <__assert_func>
 8012db2:	6922      	ldr	r2, [r4, #16]
 8012db4:	f104 010c 	add.w	r1, r4, #12
 8012db8:	300c      	adds	r0, #12
 8012dba:	3202      	adds	r2, #2
 8012dbc:	0092      	lsls	r2, r2, #2
 8012dbe:	f7fb fb1b 	bl	800e3f8 <memcpy>
 8012dc2:	4621      	mov	r1, r4
 8012dc4:	4644      	mov	r4, r8
 8012dc6:	4638      	mov	r0, r7
 8012dc8:	f7ff ffbb 	bl	8012d42 <_Bfree>
 8012dcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012dd0:	3501      	adds	r5, #1
 8012dd2:	615e      	str	r6, [r3, #20]
 8012dd4:	6125      	str	r5, [r4, #16]
 8012dd6:	4620      	mov	r0, r4
 8012dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ddc:	080149e4 	.word	0x080149e4
 8012de0:	08014a4d 	.word	0x08014a4d

08012de4 <__hi0bits>:
 8012de4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012de8:	4603      	mov	r3, r0
 8012dea:	bf36      	itet	cc
 8012dec:	0403      	lslcc	r3, r0, #16
 8012dee:	2000      	movcs	r0, #0
 8012df0:	2010      	movcc	r0, #16
 8012df2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012df6:	bf3c      	itt	cc
 8012df8:	021b      	lslcc	r3, r3, #8
 8012dfa:	3008      	addcc	r0, #8
 8012dfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012e00:	bf3c      	itt	cc
 8012e02:	011b      	lslcc	r3, r3, #4
 8012e04:	3004      	addcc	r0, #4
 8012e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012e0a:	bf3c      	itt	cc
 8012e0c:	009b      	lslcc	r3, r3, #2
 8012e0e:	3002      	addcc	r0, #2
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	db05      	blt.n	8012e20 <__hi0bits+0x3c>
 8012e14:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012e18:	f100 0001 	add.w	r0, r0, #1
 8012e1c:	bf08      	it	eq
 8012e1e:	2020      	moveq	r0, #32
 8012e20:	4770      	bx	lr

08012e22 <__lo0bits>:
 8012e22:	6803      	ldr	r3, [r0, #0]
 8012e24:	4602      	mov	r2, r0
 8012e26:	f013 0007 	ands.w	r0, r3, #7
 8012e2a:	d00b      	beq.n	8012e44 <__lo0bits+0x22>
 8012e2c:	07d9      	lsls	r1, r3, #31
 8012e2e:	d421      	bmi.n	8012e74 <__lo0bits+0x52>
 8012e30:	0798      	lsls	r0, r3, #30
 8012e32:	bf47      	ittee	mi
 8012e34:	085b      	lsrmi	r3, r3, #1
 8012e36:	2001      	movmi	r0, #1
 8012e38:	089b      	lsrpl	r3, r3, #2
 8012e3a:	2002      	movpl	r0, #2
 8012e3c:	bf4c      	ite	mi
 8012e3e:	6013      	strmi	r3, [r2, #0]
 8012e40:	6013      	strpl	r3, [r2, #0]
 8012e42:	4770      	bx	lr
 8012e44:	b299      	uxth	r1, r3
 8012e46:	b909      	cbnz	r1, 8012e4c <__lo0bits+0x2a>
 8012e48:	0c1b      	lsrs	r3, r3, #16
 8012e4a:	2010      	movs	r0, #16
 8012e4c:	b2d9      	uxtb	r1, r3
 8012e4e:	b909      	cbnz	r1, 8012e54 <__lo0bits+0x32>
 8012e50:	3008      	adds	r0, #8
 8012e52:	0a1b      	lsrs	r3, r3, #8
 8012e54:	0719      	lsls	r1, r3, #28
 8012e56:	bf04      	itt	eq
 8012e58:	091b      	lsreq	r3, r3, #4
 8012e5a:	3004      	addeq	r0, #4
 8012e5c:	0799      	lsls	r1, r3, #30
 8012e5e:	bf04      	itt	eq
 8012e60:	089b      	lsreq	r3, r3, #2
 8012e62:	3002      	addeq	r0, #2
 8012e64:	07d9      	lsls	r1, r3, #31
 8012e66:	d403      	bmi.n	8012e70 <__lo0bits+0x4e>
 8012e68:	085b      	lsrs	r3, r3, #1
 8012e6a:	f100 0001 	add.w	r0, r0, #1
 8012e6e:	d003      	beq.n	8012e78 <__lo0bits+0x56>
 8012e70:	6013      	str	r3, [r2, #0]
 8012e72:	4770      	bx	lr
 8012e74:	2000      	movs	r0, #0
 8012e76:	4770      	bx	lr
 8012e78:	2020      	movs	r0, #32
 8012e7a:	4770      	bx	lr

08012e7c <__i2b>:
 8012e7c:	b510      	push	{r4, lr}
 8012e7e:	460c      	mov	r4, r1
 8012e80:	2101      	movs	r1, #1
 8012e82:	f7ff ff39 	bl	8012cf8 <_Balloc>
 8012e86:	4602      	mov	r2, r0
 8012e88:	b928      	cbnz	r0, 8012e96 <__i2b+0x1a>
 8012e8a:	4b05      	ldr	r3, [pc, #20]	@ (8012ea0 <__i2b+0x24>)
 8012e8c:	f240 1145 	movw	r1, #325	@ 0x145
 8012e90:	4804      	ldr	r0, [pc, #16]	@ (8012ea4 <__i2b+0x28>)
 8012e92:	f000 fd8d 	bl	80139b0 <__assert_func>
 8012e96:	2301      	movs	r3, #1
 8012e98:	6144      	str	r4, [r0, #20]
 8012e9a:	6103      	str	r3, [r0, #16]
 8012e9c:	bd10      	pop	{r4, pc}
 8012e9e:	bf00      	nop
 8012ea0:	080149e4 	.word	0x080149e4
 8012ea4:	08014a4d 	.word	0x08014a4d

08012ea8 <__multiply>:
 8012ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eac:	4614      	mov	r4, r2
 8012eae:	690a      	ldr	r2, [r1, #16]
 8012eb0:	460f      	mov	r7, r1
 8012eb2:	b085      	sub	sp, #20
 8012eb4:	6923      	ldr	r3, [r4, #16]
 8012eb6:	429a      	cmp	r2, r3
 8012eb8:	bfa2      	ittt	ge
 8012eba:	4623      	movge	r3, r4
 8012ebc:	460c      	movge	r4, r1
 8012ebe:	461f      	movge	r7, r3
 8012ec0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012ec4:	68a3      	ldr	r3, [r4, #8]
 8012ec6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012eca:	6861      	ldr	r1, [r4, #4]
 8012ecc:	eb0a 0609 	add.w	r6, sl, r9
 8012ed0:	42b3      	cmp	r3, r6
 8012ed2:	bfb8      	it	lt
 8012ed4:	3101      	addlt	r1, #1
 8012ed6:	f7ff ff0f 	bl	8012cf8 <_Balloc>
 8012eda:	b930      	cbnz	r0, 8012eea <__multiply+0x42>
 8012edc:	4602      	mov	r2, r0
 8012ede:	4b45      	ldr	r3, [pc, #276]	@ (8012ff4 <__multiply+0x14c>)
 8012ee0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012ee4:	4844      	ldr	r0, [pc, #272]	@ (8012ff8 <__multiply+0x150>)
 8012ee6:	f000 fd63 	bl	80139b0 <__assert_func>
 8012eea:	f100 0514 	add.w	r5, r0, #20
 8012eee:	2200      	movs	r2, #0
 8012ef0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012ef4:	462b      	mov	r3, r5
 8012ef6:	4543      	cmp	r3, r8
 8012ef8:	d321      	bcc.n	8012f3e <__multiply+0x96>
 8012efa:	f107 0114 	add.w	r1, r7, #20
 8012efe:	f104 0214 	add.w	r2, r4, #20
 8012f02:	f104 0715 	add.w	r7, r4, #21
 8012f06:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012f0a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012f0e:	9302      	str	r3, [sp, #8]
 8012f10:	1b13      	subs	r3, r2, r4
 8012f12:	3b15      	subs	r3, #21
 8012f14:	f023 0303 	bic.w	r3, r3, #3
 8012f18:	3304      	adds	r3, #4
 8012f1a:	42ba      	cmp	r2, r7
 8012f1c:	bf38      	it	cc
 8012f1e:	2304      	movcc	r3, #4
 8012f20:	9301      	str	r3, [sp, #4]
 8012f22:	9b02      	ldr	r3, [sp, #8]
 8012f24:	9103      	str	r1, [sp, #12]
 8012f26:	428b      	cmp	r3, r1
 8012f28:	d80c      	bhi.n	8012f44 <__multiply+0x9c>
 8012f2a:	2e00      	cmp	r6, #0
 8012f2c:	dd03      	ble.n	8012f36 <__multiply+0x8e>
 8012f2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d05b      	beq.n	8012fee <__multiply+0x146>
 8012f36:	6106      	str	r6, [r0, #16]
 8012f38:	b005      	add	sp, #20
 8012f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f3e:	f843 2b04 	str.w	r2, [r3], #4
 8012f42:	e7d8      	b.n	8012ef6 <__multiply+0x4e>
 8012f44:	f8b1 a000 	ldrh.w	sl, [r1]
 8012f48:	f1ba 0f00 	cmp.w	sl, #0
 8012f4c:	d024      	beq.n	8012f98 <__multiply+0xf0>
 8012f4e:	f104 0e14 	add.w	lr, r4, #20
 8012f52:	46a9      	mov	r9, r5
 8012f54:	f04f 0c00 	mov.w	ip, #0
 8012f58:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012f5c:	f8d9 3000 	ldr.w	r3, [r9]
 8012f60:	fa1f fb87 	uxth.w	fp, r7
 8012f64:	4572      	cmp	r2, lr
 8012f66:	b29b      	uxth	r3, r3
 8012f68:	fb0a 330b 	mla	r3, sl, fp, r3
 8012f6c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012f70:	f8d9 7000 	ldr.w	r7, [r9]
 8012f74:	4463      	add	r3, ip
 8012f76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012f7a:	fb0a c70b 	mla	r7, sl, fp, ip
 8012f7e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012f82:	b29b      	uxth	r3, r3
 8012f84:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012f88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012f8c:	f849 3b04 	str.w	r3, [r9], #4
 8012f90:	d8e2      	bhi.n	8012f58 <__multiply+0xb0>
 8012f92:	9b01      	ldr	r3, [sp, #4]
 8012f94:	f845 c003 	str.w	ip, [r5, r3]
 8012f98:	9b03      	ldr	r3, [sp, #12]
 8012f9a:	3104      	adds	r1, #4
 8012f9c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012fa0:	f1b9 0f00 	cmp.w	r9, #0
 8012fa4:	d021      	beq.n	8012fea <__multiply+0x142>
 8012fa6:	682b      	ldr	r3, [r5, #0]
 8012fa8:	f104 0c14 	add.w	ip, r4, #20
 8012fac:	46ae      	mov	lr, r5
 8012fae:	f04f 0a00 	mov.w	sl, #0
 8012fb2:	f8bc b000 	ldrh.w	fp, [ip]
 8012fb6:	b29b      	uxth	r3, r3
 8012fb8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012fbc:	fb09 770b 	mla	r7, r9, fp, r7
 8012fc0:	4457      	add	r7, sl
 8012fc2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012fc6:	f84e 3b04 	str.w	r3, [lr], #4
 8012fca:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012fce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012fd2:	f8be 3000 	ldrh.w	r3, [lr]
 8012fd6:	4562      	cmp	r2, ip
 8012fd8:	fb09 330a 	mla	r3, r9, sl, r3
 8012fdc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012fe0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012fe4:	d8e5      	bhi.n	8012fb2 <__multiply+0x10a>
 8012fe6:	9f01      	ldr	r7, [sp, #4]
 8012fe8:	51eb      	str	r3, [r5, r7]
 8012fea:	3504      	adds	r5, #4
 8012fec:	e799      	b.n	8012f22 <__multiply+0x7a>
 8012fee:	3e01      	subs	r6, #1
 8012ff0:	e79b      	b.n	8012f2a <__multiply+0x82>
 8012ff2:	bf00      	nop
 8012ff4:	080149e4 	.word	0x080149e4
 8012ff8:	08014a4d 	.word	0x08014a4d

08012ffc <__pow5mult>:
 8012ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013000:	4615      	mov	r5, r2
 8013002:	f012 0203 	ands.w	r2, r2, #3
 8013006:	4607      	mov	r7, r0
 8013008:	460e      	mov	r6, r1
 801300a:	d007      	beq.n	801301c <__pow5mult+0x20>
 801300c:	3a01      	subs	r2, #1
 801300e:	4c1a      	ldr	r4, [pc, #104]	@ (8013078 <__pow5mult+0x7c>)
 8013010:	2300      	movs	r3, #0
 8013012:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013016:	f7ff fe9d 	bl	8012d54 <__multadd>
 801301a:	4606      	mov	r6, r0
 801301c:	10ad      	asrs	r5, r5, #2
 801301e:	d027      	beq.n	8013070 <__pow5mult+0x74>
 8013020:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8013022:	b944      	cbnz	r4, 8013036 <__pow5mult+0x3a>
 8013024:	f240 2171 	movw	r1, #625	@ 0x271
 8013028:	4638      	mov	r0, r7
 801302a:	f7ff ff27 	bl	8012e7c <__i2b>
 801302e:	2300      	movs	r3, #0
 8013030:	4604      	mov	r4, r0
 8013032:	6438      	str	r0, [r7, #64]	@ 0x40
 8013034:	6003      	str	r3, [r0, #0]
 8013036:	f04f 0900 	mov.w	r9, #0
 801303a:	07eb      	lsls	r3, r5, #31
 801303c:	d50a      	bpl.n	8013054 <__pow5mult+0x58>
 801303e:	4631      	mov	r1, r6
 8013040:	4622      	mov	r2, r4
 8013042:	4638      	mov	r0, r7
 8013044:	f7ff ff30 	bl	8012ea8 <__multiply>
 8013048:	4680      	mov	r8, r0
 801304a:	4631      	mov	r1, r6
 801304c:	4638      	mov	r0, r7
 801304e:	4646      	mov	r6, r8
 8013050:	f7ff fe77 	bl	8012d42 <_Bfree>
 8013054:	106d      	asrs	r5, r5, #1
 8013056:	d00b      	beq.n	8013070 <__pow5mult+0x74>
 8013058:	6820      	ldr	r0, [r4, #0]
 801305a:	b938      	cbnz	r0, 801306c <__pow5mult+0x70>
 801305c:	4622      	mov	r2, r4
 801305e:	4621      	mov	r1, r4
 8013060:	4638      	mov	r0, r7
 8013062:	f7ff ff21 	bl	8012ea8 <__multiply>
 8013066:	6020      	str	r0, [r4, #0]
 8013068:	f8c0 9000 	str.w	r9, [r0]
 801306c:	4604      	mov	r4, r0
 801306e:	e7e4      	b.n	801303a <__pow5mult+0x3e>
 8013070:	4630      	mov	r0, r6
 8013072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013076:	bf00      	nop
 8013078:	08014aa8 	.word	0x08014aa8

0801307c <__lshift>:
 801307c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013080:	460c      	mov	r4, r1
 8013082:	4607      	mov	r7, r0
 8013084:	4691      	mov	r9, r2
 8013086:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801308a:	6923      	ldr	r3, [r4, #16]
 801308c:	6849      	ldr	r1, [r1, #4]
 801308e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013092:	68a3      	ldr	r3, [r4, #8]
 8013094:	f108 0601 	add.w	r6, r8, #1
 8013098:	42b3      	cmp	r3, r6
 801309a:	db0b      	blt.n	80130b4 <__lshift+0x38>
 801309c:	4638      	mov	r0, r7
 801309e:	f7ff fe2b 	bl	8012cf8 <_Balloc>
 80130a2:	4605      	mov	r5, r0
 80130a4:	b948      	cbnz	r0, 80130ba <__lshift+0x3e>
 80130a6:	4602      	mov	r2, r0
 80130a8:	4b28      	ldr	r3, [pc, #160]	@ (801314c <__lshift+0xd0>)
 80130aa:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80130ae:	4828      	ldr	r0, [pc, #160]	@ (8013150 <__lshift+0xd4>)
 80130b0:	f000 fc7e 	bl	80139b0 <__assert_func>
 80130b4:	3101      	adds	r1, #1
 80130b6:	005b      	lsls	r3, r3, #1
 80130b8:	e7ee      	b.n	8013098 <__lshift+0x1c>
 80130ba:	2300      	movs	r3, #0
 80130bc:	f100 0114 	add.w	r1, r0, #20
 80130c0:	f100 0210 	add.w	r2, r0, #16
 80130c4:	4618      	mov	r0, r3
 80130c6:	4553      	cmp	r3, sl
 80130c8:	db33      	blt.n	8013132 <__lshift+0xb6>
 80130ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80130ce:	f104 0314 	add.w	r3, r4, #20
 80130d2:	6920      	ldr	r0, [r4, #16]
 80130d4:	f019 091f 	ands.w	r9, r9, #31
 80130d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80130dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80130e0:	d02b      	beq.n	801313a <__lshift+0xbe>
 80130e2:	f1c9 0e20 	rsb	lr, r9, #32
 80130e6:	468a      	mov	sl, r1
 80130e8:	2200      	movs	r2, #0
 80130ea:	6818      	ldr	r0, [r3, #0]
 80130ec:	fa00 f009 	lsl.w	r0, r0, r9
 80130f0:	4310      	orrs	r0, r2
 80130f2:	f84a 0b04 	str.w	r0, [sl], #4
 80130f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80130fa:	459c      	cmp	ip, r3
 80130fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8013100:	d8f3      	bhi.n	80130ea <__lshift+0x6e>
 8013102:	ebac 0304 	sub.w	r3, ip, r4
 8013106:	f104 0015 	add.w	r0, r4, #21
 801310a:	3b15      	subs	r3, #21
 801310c:	f023 0303 	bic.w	r3, r3, #3
 8013110:	3304      	adds	r3, #4
 8013112:	4584      	cmp	ip, r0
 8013114:	bf38      	it	cc
 8013116:	2304      	movcc	r3, #4
 8013118:	50ca      	str	r2, [r1, r3]
 801311a:	b10a      	cbz	r2, 8013120 <__lshift+0xa4>
 801311c:	f108 0602 	add.w	r6, r8, #2
 8013120:	3e01      	subs	r6, #1
 8013122:	4638      	mov	r0, r7
 8013124:	4621      	mov	r1, r4
 8013126:	612e      	str	r6, [r5, #16]
 8013128:	f7ff fe0b 	bl	8012d42 <_Bfree>
 801312c:	4628      	mov	r0, r5
 801312e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013132:	3301      	adds	r3, #1
 8013134:	f842 0f04 	str.w	r0, [r2, #4]!
 8013138:	e7c5      	b.n	80130c6 <__lshift+0x4a>
 801313a:	3904      	subs	r1, #4
 801313c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013140:	459c      	cmp	ip, r3
 8013142:	f841 2f04 	str.w	r2, [r1, #4]!
 8013146:	d8f9      	bhi.n	801313c <__lshift+0xc0>
 8013148:	e7ea      	b.n	8013120 <__lshift+0xa4>
 801314a:	bf00      	nop
 801314c:	080149e4 	.word	0x080149e4
 8013150:	08014a4d 	.word	0x08014a4d

08013154 <__mcmp>:
 8013154:	4603      	mov	r3, r0
 8013156:	690a      	ldr	r2, [r1, #16]
 8013158:	6900      	ldr	r0, [r0, #16]
 801315a:	1a80      	subs	r0, r0, r2
 801315c:	b530      	push	{r4, r5, lr}
 801315e:	d10e      	bne.n	801317e <__mcmp+0x2a>
 8013160:	3314      	adds	r3, #20
 8013162:	3114      	adds	r1, #20
 8013164:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013168:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801316c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013170:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013174:	4295      	cmp	r5, r2
 8013176:	d003      	beq.n	8013180 <__mcmp+0x2c>
 8013178:	d205      	bcs.n	8013186 <__mcmp+0x32>
 801317a:	f04f 30ff 	mov.w	r0, #4294967295
 801317e:	bd30      	pop	{r4, r5, pc}
 8013180:	42a3      	cmp	r3, r4
 8013182:	d3f3      	bcc.n	801316c <__mcmp+0x18>
 8013184:	e7fb      	b.n	801317e <__mcmp+0x2a>
 8013186:	2001      	movs	r0, #1
 8013188:	e7f9      	b.n	801317e <__mcmp+0x2a>
	...

0801318c <__mdiff>:
 801318c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013190:	4689      	mov	r9, r1
 8013192:	4606      	mov	r6, r0
 8013194:	4611      	mov	r1, r2
 8013196:	4614      	mov	r4, r2
 8013198:	4648      	mov	r0, r9
 801319a:	f7ff ffdb 	bl	8013154 <__mcmp>
 801319e:	1e05      	subs	r5, r0, #0
 80131a0:	d112      	bne.n	80131c8 <__mdiff+0x3c>
 80131a2:	4629      	mov	r1, r5
 80131a4:	4630      	mov	r0, r6
 80131a6:	f7ff fda7 	bl	8012cf8 <_Balloc>
 80131aa:	4602      	mov	r2, r0
 80131ac:	b928      	cbnz	r0, 80131ba <__mdiff+0x2e>
 80131ae:	4b41      	ldr	r3, [pc, #260]	@ (80132b4 <__mdiff+0x128>)
 80131b0:	f240 2137 	movw	r1, #567	@ 0x237
 80131b4:	4840      	ldr	r0, [pc, #256]	@ (80132b8 <__mdiff+0x12c>)
 80131b6:	f000 fbfb 	bl	80139b0 <__assert_func>
 80131ba:	2301      	movs	r3, #1
 80131bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80131c0:	4610      	mov	r0, r2
 80131c2:	b003      	add	sp, #12
 80131c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131c8:	bfbc      	itt	lt
 80131ca:	464b      	movlt	r3, r9
 80131cc:	46a1      	movlt	r9, r4
 80131ce:	4630      	mov	r0, r6
 80131d0:	bfb8      	it	lt
 80131d2:	2501      	movlt	r5, #1
 80131d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80131d8:	bfb4      	ite	lt
 80131da:	461c      	movlt	r4, r3
 80131dc:	2500      	movge	r5, #0
 80131de:	f7ff fd8b 	bl	8012cf8 <_Balloc>
 80131e2:	4602      	mov	r2, r0
 80131e4:	b918      	cbnz	r0, 80131ee <__mdiff+0x62>
 80131e6:	4b33      	ldr	r3, [pc, #204]	@ (80132b4 <__mdiff+0x128>)
 80131e8:	f240 2145 	movw	r1, #581	@ 0x245
 80131ec:	e7e2      	b.n	80131b4 <__mdiff+0x28>
 80131ee:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80131f2:	f104 0e14 	add.w	lr, r4, #20
 80131f6:	6926      	ldr	r6, [r4, #16]
 80131f8:	f100 0b14 	add.w	fp, r0, #20
 80131fc:	60c5      	str	r5, [r0, #12]
 80131fe:	f109 0514 	add.w	r5, r9, #20
 8013202:	f109 0310 	add.w	r3, r9, #16
 8013206:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801320a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801320e:	46d9      	mov	r9, fp
 8013210:	f04f 0c00 	mov.w	ip, #0
 8013214:	9301      	str	r3, [sp, #4]
 8013216:	9b01      	ldr	r3, [sp, #4]
 8013218:	f85e 0b04 	ldr.w	r0, [lr], #4
 801321c:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013220:	4576      	cmp	r6, lr
 8013222:	9301      	str	r3, [sp, #4]
 8013224:	fa1f f38a 	uxth.w	r3, sl
 8013228:	4619      	mov	r1, r3
 801322a:	b283      	uxth	r3, r0
 801322c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8013230:	eba1 0303 	sub.w	r3, r1, r3
 8013234:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013238:	4463      	add	r3, ip
 801323a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801323e:	b29b      	uxth	r3, r3
 8013240:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013244:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013248:	f849 3b04 	str.w	r3, [r9], #4
 801324c:	d8e3      	bhi.n	8013216 <__mdiff+0x8a>
 801324e:	1b33      	subs	r3, r6, r4
 8013250:	3415      	adds	r4, #21
 8013252:	3b15      	subs	r3, #21
 8013254:	f023 0303 	bic.w	r3, r3, #3
 8013258:	3304      	adds	r3, #4
 801325a:	42a6      	cmp	r6, r4
 801325c:	bf38      	it	cc
 801325e:	2304      	movcc	r3, #4
 8013260:	441d      	add	r5, r3
 8013262:	445b      	add	r3, fp
 8013264:	462c      	mov	r4, r5
 8013266:	461e      	mov	r6, r3
 8013268:	4544      	cmp	r4, r8
 801326a:	d30e      	bcc.n	801328a <__mdiff+0xfe>
 801326c:	f108 0103 	add.w	r1, r8, #3
 8013270:	1b49      	subs	r1, r1, r5
 8013272:	3d03      	subs	r5, #3
 8013274:	f021 0103 	bic.w	r1, r1, #3
 8013278:	45a8      	cmp	r8, r5
 801327a:	bf38      	it	cc
 801327c:	2100      	movcc	r1, #0
 801327e:	440b      	add	r3, r1
 8013280:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013284:	b199      	cbz	r1, 80132ae <__mdiff+0x122>
 8013286:	6117      	str	r7, [r2, #16]
 8013288:	e79a      	b.n	80131c0 <__mdiff+0x34>
 801328a:	f854 1b04 	ldr.w	r1, [r4], #4
 801328e:	46e6      	mov	lr, ip
 8013290:	fa1f fc81 	uxth.w	ip, r1
 8013294:	0c08      	lsrs	r0, r1, #16
 8013296:	4471      	add	r1, lr
 8013298:	44f4      	add	ip, lr
 801329a:	b289      	uxth	r1, r1
 801329c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80132a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80132a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80132a8:	f846 1b04 	str.w	r1, [r6], #4
 80132ac:	e7dc      	b.n	8013268 <__mdiff+0xdc>
 80132ae:	3f01      	subs	r7, #1
 80132b0:	e7e6      	b.n	8013280 <__mdiff+0xf4>
 80132b2:	bf00      	nop
 80132b4:	080149e4 	.word	0x080149e4
 80132b8:	08014a4d 	.word	0x08014a4d

080132bc <__d2b>:
 80132bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80132c0:	460f      	mov	r7, r1
 80132c2:	2101      	movs	r1, #1
 80132c4:	4616      	mov	r6, r2
 80132c6:	ec59 8b10 	vmov	r8, r9, d0
 80132ca:	f7ff fd15 	bl	8012cf8 <_Balloc>
 80132ce:	4604      	mov	r4, r0
 80132d0:	b930      	cbnz	r0, 80132e0 <__d2b+0x24>
 80132d2:	4602      	mov	r2, r0
 80132d4:	4b23      	ldr	r3, [pc, #140]	@ (8013364 <__d2b+0xa8>)
 80132d6:	f240 310f 	movw	r1, #783	@ 0x30f
 80132da:	4823      	ldr	r0, [pc, #140]	@ (8013368 <__d2b+0xac>)
 80132dc:	f000 fb68 	bl	80139b0 <__assert_func>
 80132e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80132e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80132e8:	b10d      	cbz	r5, 80132ee <__d2b+0x32>
 80132ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80132ee:	9301      	str	r3, [sp, #4]
 80132f0:	f1b8 0300 	subs.w	r3, r8, #0
 80132f4:	d023      	beq.n	801333e <__d2b+0x82>
 80132f6:	4668      	mov	r0, sp
 80132f8:	9300      	str	r3, [sp, #0]
 80132fa:	f7ff fd92 	bl	8012e22 <__lo0bits>
 80132fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013302:	b1d0      	cbz	r0, 801333a <__d2b+0x7e>
 8013304:	f1c0 0320 	rsb	r3, r0, #32
 8013308:	fa02 f303 	lsl.w	r3, r2, r3
 801330c:	40c2      	lsrs	r2, r0
 801330e:	430b      	orrs	r3, r1
 8013310:	9201      	str	r2, [sp, #4]
 8013312:	6163      	str	r3, [r4, #20]
 8013314:	9b01      	ldr	r3, [sp, #4]
 8013316:	2b00      	cmp	r3, #0
 8013318:	61a3      	str	r3, [r4, #24]
 801331a:	bf0c      	ite	eq
 801331c:	2201      	moveq	r2, #1
 801331e:	2202      	movne	r2, #2
 8013320:	6122      	str	r2, [r4, #16]
 8013322:	b1a5      	cbz	r5, 801334e <__d2b+0x92>
 8013324:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013328:	4405      	add	r5, r0
 801332a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801332e:	603d      	str	r5, [r7, #0]
 8013330:	6030      	str	r0, [r6, #0]
 8013332:	4620      	mov	r0, r4
 8013334:	b003      	add	sp, #12
 8013336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801333a:	6161      	str	r1, [r4, #20]
 801333c:	e7ea      	b.n	8013314 <__d2b+0x58>
 801333e:	a801      	add	r0, sp, #4
 8013340:	f7ff fd6f 	bl	8012e22 <__lo0bits>
 8013344:	9b01      	ldr	r3, [sp, #4]
 8013346:	3020      	adds	r0, #32
 8013348:	2201      	movs	r2, #1
 801334a:	6163      	str	r3, [r4, #20]
 801334c:	e7e8      	b.n	8013320 <__d2b+0x64>
 801334e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013352:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013356:	6038      	str	r0, [r7, #0]
 8013358:	6918      	ldr	r0, [r3, #16]
 801335a:	f7ff fd43 	bl	8012de4 <__hi0bits>
 801335e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013362:	e7e5      	b.n	8013330 <__d2b+0x74>
 8013364:	080149e4 	.word	0x080149e4
 8013368:	08014a4d 	.word	0x08014a4d

0801336c <_realloc_r>:
 801336c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013370:	4682      	mov	sl, r0
 8013372:	4693      	mov	fp, r2
 8013374:	460c      	mov	r4, r1
 8013376:	b929      	cbnz	r1, 8013384 <_realloc_r+0x18>
 8013378:	4611      	mov	r1, r2
 801337a:	b003      	add	sp, #12
 801337c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013380:	f7fa baa8 	b.w	800d8d4 <_malloc_r>
 8013384:	f10b 080b 	add.w	r8, fp, #11
 8013388:	f7fa fcde 	bl	800dd48 <__malloc_lock>
 801338c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8013390:	f1a4 0908 	sub.w	r9, r4, #8
 8013394:	f1b8 0f16 	cmp.w	r8, #22
 8013398:	f025 0603 	bic.w	r6, r5, #3
 801339c:	d908      	bls.n	80133b0 <_realloc_r+0x44>
 801339e:	f038 0807 	bics.w	r8, r8, #7
 80133a2:	d507      	bpl.n	80133b4 <_realloc_r+0x48>
 80133a4:	230c      	movs	r3, #12
 80133a6:	f8ca 3000 	str.w	r3, [sl]
 80133aa:	f04f 0b00 	mov.w	fp, #0
 80133ae:	e032      	b.n	8013416 <_realloc_r+0xaa>
 80133b0:	f04f 0810 	mov.w	r8, #16
 80133b4:	45c3      	cmp	fp, r8
 80133b6:	d8f5      	bhi.n	80133a4 <_realloc_r+0x38>
 80133b8:	4546      	cmp	r6, r8
 80133ba:	f280 817e 	bge.w	80136ba <_realloc_r+0x34e>
 80133be:	4ba2      	ldr	r3, [pc, #648]	@ (8013648 <_realloc_r+0x2dc>)
 80133c0:	eb09 0106 	add.w	r1, r9, r6
 80133c4:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80133c8:	6848      	ldr	r0, [r1, #4]
 80133ca:	458c      	cmp	ip, r1
 80133cc:	d005      	beq.n	80133da <_realloc_r+0x6e>
 80133ce:	f020 0201 	bic.w	r2, r0, #1
 80133d2:	440a      	add	r2, r1
 80133d4:	6852      	ldr	r2, [r2, #4]
 80133d6:	07d7      	lsls	r7, r2, #31
 80133d8:	d44a      	bmi.n	8013470 <_realloc_r+0x104>
 80133da:	f020 0003 	bic.w	r0, r0, #3
 80133de:	458c      	cmp	ip, r1
 80133e0:	eb06 0700 	add.w	r7, r6, r0
 80133e4:	d11b      	bne.n	801341e <_realloc_r+0xb2>
 80133e6:	f108 0210 	add.w	r2, r8, #16
 80133ea:	42ba      	cmp	r2, r7
 80133ec:	dc42      	bgt.n	8013474 <_realloc_r+0x108>
 80133ee:	eba7 0708 	sub.w	r7, r7, r8
 80133f2:	eb09 0208 	add.w	r2, r9, r8
 80133f6:	46a3      	mov	fp, r4
 80133f8:	4650      	mov	r0, sl
 80133fa:	f047 0701 	orr.w	r7, r7, #1
 80133fe:	609a      	str	r2, [r3, #8]
 8013400:	6057      	str	r7, [r2, #4]
 8013402:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013406:	f003 0301 	and.w	r3, r3, #1
 801340a:	ea43 0308 	orr.w	r3, r3, r8
 801340e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013412:	f7fa fc9f 	bl	800dd54 <__malloc_unlock>
 8013416:	4658      	mov	r0, fp
 8013418:	b003      	add	sp, #12
 801341a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801341e:	45b8      	cmp	r8, r7
 8013420:	dc28      	bgt.n	8013474 <_realloc_r+0x108>
 8013422:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8013426:	60d3      	str	r3, [r2, #12]
 8013428:	609a      	str	r2, [r3, #8]
 801342a:	eba7 0008 	sub.w	r0, r7, r8
 801342e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013432:	eb09 0207 	add.w	r2, r9, r7
 8013436:	280f      	cmp	r0, #15
 8013438:	f003 0301 	and.w	r3, r3, #1
 801343c:	f240 813f 	bls.w	80136be <_realloc_r+0x352>
 8013440:	eb09 0108 	add.w	r1, r9, r8
 8013444:	ea48 0303 	orr.w	r3, r8, r3
 8013448:	f040 0001 	orr.w	r0, r0, #1
 801344c:	f8c9 3004 	str.w	r3, [r9, #4]
 8013450:	3108      	adds	r1, #8
 8013452:	f841 0c04 	str.w	r0, [r1, #-4]
 8013456:	4650      	mov	r0, sl
 8013458:	6853      	ldr	r3, [r2, #4]
 801345a:	f043 0301 	orr.w	r3, r3, #1
 801345e:	6053      	str	r3, [r2, #4]
 8013460:	f7fb f83e 	bl	800e4e0 <_free_r>
 8013464:	4650      	mov	r0, sl
 8013466:	f109 0b08 	add.w	fp, r9, #8
 801346a:	f7fa fc73 	bl	800dd54 <__malloc_unlock>
 801346e:	e7d2      	b.n	8013416 <_realloc_r+0xaa>
 8013470:	2000      	movs	r0, #0
 8013472:	4601      	mov	r1, r0
 8013474:	07ea      	lsls	r2, r5, #31
 8013476:	f100 80ce 	bmi.w	8013616 <_realloc_r+0x2aa>
 801347a:	f854 5c08 	ldr.w	r5, [r4, #-8]
 801347e:	eba9 0505 	sub.w	r5, r9, r5
 8013482:	686a      	ldr	r2, [r5, #4]
 8013484:	f022 0203 	bic.w	r2, r2, #3
 8013488:	4432      	add	r2, r6
 801348a:	9201      	str	r2, [sp, #4]
 801348c:	2900      	cmp	r1, #0
 801348e:	f000 808b 	beq.w	80135a8 <_realloc_r+0x23c>
 8013492:	458c      	cmp	ip, r1
 8013494:	eb00 0702 	add.w	r7, r0, r2
 8013498:	d14c      	bne.n	8013534 <_realloc_r+0x1c8>
 801349a:	f108 0210 	add.w	r2, r8, #16
 801349e:	42ba      	cmp	r2, r7
 80134a0:	f300 8082 	bgt.w	80135a8 <_realloc_r+0x23c>
 80134a4:	46ab      	mov	fp, r5
 80134a6:	68ea      	ldr	r2, [r5, #12]
 80134a8:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 80134ac:	60ca      	str	r2, [r1, #12]
 80134ae:	6091      	str	r1, [r2, #8]
 80134b0:	1f32      	subs	r2, r6, #4
 80134b2:	2a24      	cmp	r2, #36	@ 0x24
 80134b4:	d838      	bhi.n	8013528 <_realloc_r+0x1bc>
 80134b6:	2a13      	cmp	r2, #19
 80134b8:	d934      	bls.n	8013524 <_realloc_r+0x1b8>
 80134ba:	6821      	ldr	r1, [r4, #0]
 80134bc:	2a1b      	cmp	r2, #27
 80134be:	60a9      	str	r1, [r5, #8]
 80134c0:	6861      	ldr	r1, [r4, #4]
 80134c2:	60e9      	str	r1, [r5, #12]
 80134c4:	d81a      	bhi.n	80134fc <_realloc_r+0x190>
 80134c6:	3408      	adds	r4, #8
 80134c8:	f105 0210 	add.w	r2, r5, #16
 80134cc:	6821      	ldr	r1, [r4, #0]
 80134ce:	6011      	str	r1, [r2, #0]
 80134d0:	6861      	ldr	r1, [r4, #4]
 80134d2:	6051      	str	r1, [r2, #4]
 80134d4:	68a1      	ldr	r1, [r4, #8]
 80134d6:	6091      	str	r1, [r2, #8]
 80134d8:	eba7 0708 	sub.w	r7, r7, r8
 80134dc:	eb05 0208 	add.w	r2, r5, r8
 80134e0:	f047 0701 	orr.w	r7, r7, #1
 80134e4:	609a      	str	r2, [r3, #8]
 80134e6:	6057      	str	r7, [r2, #4]
 80134e8:	686b      	ldr	r3, [r5, #4]
 80134ea:	f003 0301 	and.w	r3, r3, #1
 80134ee:	ea43 0308 	orr.w	r3, r3, r8
 80134f2:	606b      	str	r3, [r5, #4]
 80134f4:	4650      	mov	r0, sl
 80134f6:	f7fa fc2d 	bl	800dd54 <__malloc_unlock>
 80134fa:	e78c      	b.n	8013416 <_realloc_r+0xaa>
 80134fc:	68a1      	ldr	r1, [r4, #8]
 80134fe:	2a24      	cmp	r2, #36	@ 0x24
 8013500:	6129      	str	r1, [r5, #16]
 8013502:	bf18      	it	ne
 8013504:	f105 0218 	addne.w	r2, r5, #24
 8013508:	68e1      	ldr	r1, [r4, #12]
 801350a:	bf18      	it	ne
 801350c:	3410      	addne	r4, #16
 801350e:	6169      	str	r1, [r5, #20]
 8013510:	bf01      	itttt	eq
 8013512:	6922      	ldreq	r2, [r4, #16]
 8013514:	61aa      	streq	r2, [r5, #24]
 8013516:	f105 0220 	addeq.w	r2, r5, #32
 801351a:	6961      	ldreq	r1, [r4, #20]
 801351c:	bf04      	itt	eq
 801351e:	3418      	addeq	r4, #24
 8013520:	61e9      	streq	r1, [r5, #28]
 8013522:	e7d3      	b.n	80134cc <_realloc_r+0x160>
 8013524:	465a      	mov	r2, fp
 8013526:	e7d1      	b.n	80134cc <_realloc_r+0x160>
 8013528:	4621      	mov	r1, r4
 801352a:	4658      	mov	r0, fp
 801352c:	f7fa fe8e 	bl	800e24c <memmove>
 8013530:	4b45      	ldr	r3, [pc, #276]	@ (8013648 <_realloc_r+0x2dc>)
 8013532:	e7d1      	b.n	80134d8 <_realloc_r+0x16c>
 8013534:	45b8      	cmp	r8, r7
 8013536:	dc37      	bgt.n	80135a8 <_realloc_r+0x23c>
 8013538:	4628      	mov	r0, r5
 801353a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801353e:	60d3      	str	r3, [r2, #12]
 8013540:	609a      	str	r2, [r3, #8]
 8013542:	68eb      	ldr	r3, [r5, #12]
 8013544:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8013548:	60d3      	str	r3, [r2, #12]
 801354a:	609a      	str	r2, [r3, #8]
 801354c:	1f32      	subs	r2, r6, #4
 801354e:	2a24      	cmp	r2, #36	@ 0x24
 8013550:	d826      	bhi.n	80135a0 <_realloc_r+0x234>
 8013552:	2a13      	cmp	r2, #19
 8013554:	d908      	bls.n	8013568 <_realloc_r+0x1fc>
 8013556:	6823      	ldr	r3, [r4, #0]
 8013558:	2a1b      	cmp	r2, #27
 801355a:	60ab      	str	r3, [r5, #8]
 801355c:	6863      	ldr	r3, [r4, #4]
 801355e:	60eb      	str	r3, [r5, #12]
 8013560:	d80a      	bhi.n	8013578 <_realloc_r+0x20c>
 8013562:	3408      	adds	r4, #8
 8013564:	f105 0010 	add.w	r0, r5, #16
 8013568:	6823      	ldr	r3, [r4, #0]
 801356a:	6003      	str	r3, [r0, #0]
 801356c:	6863      	ldr	r3, [r4, #4]
 801356e:	6043      	str	r3, [r0, #4]
 8013570:	68a3      	ldr	r3, [r4, #8]
 8013572:	6083      	str	r3, [r0, #8]
 8013574:	46a9      	mov	r9, r5
 8013576:	e758      	b.n	801342a <_realloc_r+0xbe>
 8013578:	68a3      	ldr	r3, [r4, #8]
 801357a:	2a24      	cmp	r2, #36	@ 0x24
 801357c:	612b      	str	r3, [r5, #16]
 801357e:	bf18      	it	ne
 8013580:	f105 0018 	addne.w	r0, r5, #24
 8013584:	68e3      	ldr	r3, [r4, #12]
 8013586:	bf0c      	ite	eq
 8013588:	f105 0020 	addeq.w	r0, r5, #32
 801358c:	3410      	addne	r4, #16
 801358e:	616b      	str	r3, [r5, #20]
 8013590:	bf01      	itttt	eq
 8013592:	6923      	ldreq	r3, [r4, #16]
 8013594:	61ab      	streq	r3, [r5, #24]
 8013596:	6963      	ldreq	r3, [r4, #20]
 8013598:	3418      	addeq	r4, #24
 801359a:	bf08      	it	eq
 801359c:	61eb      	streq	r3, [r5, #28]
 801359e:	e7e3      	b.n	8013568 <_realloc_r+0x1fc>
 80135a0:	4621      	mov	r1, r4
 80135a2:	f7fa fe53 	bl	800e24c <memmove>
 80135a6:	e7e5      	b.n	8013574 <_realloc_r+0x208>
 80135a8:	9b01      	ldr	r3, [sp, #4]
 80135aa:	4598      	cmp	r8, r3
 80135ac:	dc33      	bgt.n	8013616 <_realloc_r+0x2aa>
 80135ae:	4628      	mov	r0, r5
 80135b0:	68eb      	ldr	r3, [r5, #12]
 80135b2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80135b6:	60d3      	str	r3, [r2, #12]
 80135b8:	609a      	str	r2, [r3, #8]
 80135ba:	1f32      	subs	r2, r6, #4
 80135bc:	2a24      	cmp	r2, #36	@ 0x24
 80135be:	d826      	bhi.n	801360e <_realloc_r+0x2a2>
 80135c0:	2a13      	cmp	r2, #19
 80135c2:	d908      	bls.n	80135d6 <_realloc_r+0x26a>
 80135c4:	6823      	ldr	r3, [r4, #0]
 80135c6:	2a1b      	cmp	r2, #27
 80135c8:	60ab      	str	r3, [r5, #8]
 80135ca:	6863      	ldr	r3, [r4, #4]
 80135cc:	60eb      	str	r3, [r5, #12]
 80135ce:	d80a      	bhi.n	80135e6 <_realloc_r+0x27a>
 80135d0:	3408      	adds	r4, #8
 80135d2:	f105 0010 	add.w	r0, r5, #16
 80135d6:	6823      	ldr	r3, [r4, #0]
 80135d8:	6003      	str	r3, [r0, #0]
 80135da:	6863      	ldr	r3, [r4, #4]
 80135dc:	6043      	str	r3, [r0, #4]
 80135de:	68a3      	ldr	r3, [r4, #8]
 80135e0:	6083      	str	r3, [r0, #8]
 80135e2:	9f01      	ldr	r7, [sp, #4]
 80135e4:	e7c6      	b.n	8013574 <_realloc_r+0x208>
 80135e6:	68a3      	ldr	r3, [r4, #8]
 80135e8:	2a24      	cmp	r2, #36	@ 0x24
 80135ea:	612b      	str	r3, [r5, #16]
 80135ec:	bf18      	it	ne
 80135ee:	f105 0018 	addne.w	r0, r5, #24
 80135f2:	68e3      	ldr	r3, [r4, #12]
 80135f4:	bf0c      	ite	eq
 80135f6:	f105 0020 	addeq.w	r0, r5, #32
 80135fa:	3410      	addne	r4, #16
 80135fc:	616b      	str	r3, [r5, #20]
 80135fe:	bf01      	itttt	eq
 8013600:	6923      	ldreq	r3, [r4, #16]
 8013602:	61ab      	streq	r3, [r5, #24]
 8013604:	6963      	ldreq	r3, [r4, #20]
 8013606:	3418      	addeq	r4, #24
 8013608:	bf08      	it	eq
 801360a:	61eb      	streq	r3, [r5, #28]
 801360c:	e7e3      	b.n	80135d6 <_realloc_r+0x26a>
 801360e:	4621      	mov	r1, r4
 8013610:	f7fa fe1c 	bl	800e24c <memmove>
 8013614:	e7e5      	b.n	80135e2 <_realloc_r+0x276>
 8013616:	4659      	mov	r1, fp
 8013618:	4650      	mov	r0, sl
 801361a:	f7fa f95b 	bl	800d8d4 <_malloc_r>
 801361e:	4683      	mov	fp, r0
 8013620:	b918      	cbnz	r0, 801362a <_realloc_r+0x2be>
 8013622:	4650      	mov	r0, sl
 8013624:	f7fa fb96 	bl	800dd54 <__malloc_unlock>
 8013628:	e6bf      	b.n	80133aa <_realloc_r+0x3e>
 801362a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801362e:	f1a0 0208 	sub.w	r2, r0, #8
 8013632:	f023 0301 	bic.w	r3, r3, #1
 8013636:	444b      	add	r3, r9
 8013638:	4293      	cmp	r3, r2
 801363a:	d107      	bne.n	801364c <_realloc_r+0x2e0>
 801363c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8013640:	f027 0703 	bic.w	r7, r7, #3
 8013644:	4437      	add	r7, r6
 8013646:	e6f0      	b.n	801342a <_realloc_r+0xbe>
 8013648:	20000058 	.word	0x20000058
 801364c:	1f32      	subs	r2, r6, #4
 801364e:	2a24      	cmp	r2, #36	@ 0x24
 8013650:	d82f      	bhi.n	80136b2 <_realloc_r+0x346>
 8013652:	2a13      	cmp	r2, #19
 8013654:	d92a      	bls.n	80136ac <_realloc_r+0x340>
 8013656:	6823      	ldr	r3, [r4, #0]
 8013658:	2a1b      	cmp	r2, #27
 801365a:	6003      	str	r3, [r0, #0]
 801365c:	6863      	ldr	r3, [r4, #4]
 801365e:	6043      	str	r3, [r0, #4]
 8013660:	d80e      	bhi.n	8013680 <_realloc_r+0x314>
 8013662:	f104 0208 	add.w	r2, r4, #8
 8013666:	f100 0308 	add.w	r3, r0, #8
 801366a:	6811      	ldr	r1, [r2, #0]
 801366c:	6019      	str	r1, [r3, #0]
 801366e:	6851      	ldr	r1, [r2, #4]
 8013670:	6059      	str	r1, [r3, #4]
 8013672:	6892      	ldr	r2, [r2, #8]
 8013674:	609a      	str	r2, [r3, #8]
 8013676:	4621      	mov	r1, r4
 8013678:	4650      	mov	r0, sl
 801367a:	f7fa ff31 	bl	800e4e0 <_free_r>
 801367e:	e739      	b.n	80134f4 <_realloc_r+0x188>
 8013680:	68a3      	ldr	r3, [r4, #8]
 8013682:	2a24      	cmp	r2, #36	@ 0x24
 8013684:	6083      	str	r3, [r0, #8]
 8013686:	bf18      	it	ne
 8013688:	f104 0210 	addne.w	r2, r4, #16
 801368c:	68e3      	ldr	r3, [r4, #12]
 801368e:	bf08      	it	eq
 8013690:	f104 0218 	addeq.w	r2, r4, #24
 8013694:	60c3      	str	r3, [r0, #12]
 8013696:	bf11      	iteee	ne
 8013698:	f100 0310 	addne.w	r3, r0, #16
 801369c:	6923      	ldreq	r3, [r4, #16]
 801369e:	6103      	streq	r3, [r0, #16]
 80136a0:	f100 0318 	addeq.w	r3, r0, #24
 80136a4:	bf04      	itt	eq
 80136a6:	6961      	ldreq	r1, [r4, #20]
 80136a8:	6141      	streq	r1, [r0, #20]
 80136aa:	e7de      	b.n	801366a <_realloc_r+0x2fe>
 80136ac:	4603      	mov	r3, r0
 80136ae:	4622      	mov	r2, r4
 80136b0:	e7db      	b.n	801366a <_realloc_r+0x2fe>
 80136b2:	4621      	mov	r1, r4
 80136b4:	f7fa fdca 	bl	800e24c <memmove>
 80136b8:	e7dd      	b.n	8013676 <_realloc_r+0x30a>
 80136ba:	4637      	mov	r7, r6
 80136bc:	e6b5      	b.n	801342a <_realloc_r+0xbe>
 80136be:	431f      	orrs	r7, r3
 80136c0:	f8c9 7004 	str.w	r7, [r9, #4]
 80136c4:	6853      	ldr	r3, [r2, #4]
 80136c6:	f043 0301 	orr.w	r3, r3, #1
 80136ca:	6053      	str	r3, [r2, #4]
 80136cc:	e6ca      	b.n	8013464 <_realloc_r+0xf8>
 80136ce:	bf00      	nop

080136d0 <__ascii_wctomb>:
 80136d0:	4603      	mov	r3, r0
 80136d2:	4608      	mov	r0, r1
 80136d4:	b141      	cbz	r1, 80136e8 <__ascii_wctomb+0x18>
 80136d6:	2aff      	cmp	r2, #255	@ 0xff
 80136d8:	d904      	bls.n	80136e4 <__ascii_wctomb+0x14>
 80136da:	228a      	movs	r2, #138	@ 0x8a
 80136dc:	f04f 30ff 	mov.w	r0, #4294967295
 80136e0:	601a      	str	r2, [r3, #0]
 80136e2:	4770      	bx	lr
 80136e4:	2001      	movs	r0, #1
 80136e6:	700a      	strb	r2, [r1, #0]
 80136e8:	4770      	bx	lr
	...

080136ec <_wcrtomb_r>:
 80136ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136ee:	4c09      	ldr	r4, [pc, #36]	@ (8013714 <_wcrtomb_r+0x28>)
 80136f0:	b085      	sub	sp, #20
 80136f2:	4605      	mov	r5, r0
 80136f4:	461e      	mov	r6, r3
 80136f6:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 80136fa:	b909      	cbnz	r1, 8013700 <_wcrtomb_r+0x14>
 80136fc:	460a      	mov	r2, r1
 80136fe:	a901      	add	r1, sp, #4
 8013700:	47b8      	blx	r7
 8013702:	1c43      	adds	r3, r0, #1
 8013704:	bf01      	itttt	eq
 8013706:	2300      	moveq	r3, #0
 8013708:	6033      	streq	r3, [r6, #0]
 801370a:	238a      	moveq	r3, #138	@ 0x8a
 801370c:	602b      	streq	r3, [r5, #0]
 801370e:	b005      	add	sp, #20
 8013710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013712:	bf00      	nop
 8013714:	20000594 	.word	0x20000594

08013718 <__ssprint_r>:
 8013718:	6893      	ldr	r3, [r2, #8]
 801371a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801371e:	460c      	mov	r4, r1
 8013720:	4617      	mov	r7, r2
 8013722:	f8d2 b000 	ldr.w	fp, [r2]
 8013726:	9001      	str	r0, [sp, #4]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d157      	bne.n	80137dc <__ssprint_r+0xc4>
 801372c:	2000      	movs	r0, #0
 801372e:	2300      	movs	r3, #0
 8013730:	607b      	str	r3, [r7, #4]
 8013732:	b003      	add	sp, #12
 8013734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013738:	e9db a800 	ldrd	sl, r8, [fp]
 801373c:	f10b 0b08 	add.w	fp, fp, #8
 8013740:	68a6      	ldr	r6, [r4, #8]
 8013742:	6820      	ldr	r0, [r4, #0]
 8013744:	f1b8 0f00 	cmp.w	r8, #0
 8013748:	d0f6      	beq.n	8013738 <__ssprint_r+0x20>
 801374a:	45b0      	cmp	r8, r6
 801374c:	d32e      	bcc.n	80137ac <__ssprint_r+0x94>
 801374e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013752:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013756:	d029      	beq.n	80137ac <__ssprint_r+0x94>
 8013758:	6921      	ldr	r1, [r4, #16]
 801375a:	6965      	ldr	r5, [r4, #20]
 801375c:	eba0 0901 	sub.w	r9, r0, r1
 8013760:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013764:	f109 0001 	add.w	r0, r9, #1
 8013768:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801376c:	4440      	add	r0, r8
 801376e:	106d      	asrs	r5, r5, #1
 8013770:	4285      	cmp	r5, r0
 8013772:	bf38      	it	cc
 8013774:	4605      	movcc	r5, r0
 8013776:	0553      	lsls	r3, r2, #21
 8013778:	d534      	bpl.n	80137e4 <__ssprint_r+0xcc>
 801377a:	4629      	mov	r1, r5
 801377c:	9801      	ldr	r0, [sp, #4]
 801377e:	f7fa f8a9 	bl	800d8d4 <_malloc_r>
 8013782:	4606      	mov	r6, r0
 8013784:	2800      	cmp	r0, #0
 8013786:	d038      	beq.n	80137fa <__ssprint_r+0xe2>
 8013788:	464a      	mov	r2, r9
 801378a:	6921      	ldr	r1, [r4, #16]
 801378c:	f7fa fe34 	bl	800e3f8 <memcpy>
 8013790:	89a2      	ldrh	r2, [r4, #12]
 8013792:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8013796:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801379a:	81a2      	strh	r2, [r4, #12]
 801379c:	6126      	str	r6, [r4, #16]
 801379e:	444e      	add	r6, r9
 80137a0:	6165      	str	r5, [r4, #20]
 80137a2:	eba5 0509 	sub.w	r5, r5, r9
 80137a6:	6026      	str	r6, [r4, #0]
 80137a8:	4646      	mov	r6, r8
 80137aa:	60a5      	str	r5, [r4, #8]
 80137ac:	4546      	cmp	r6, r8
 80137ae:	4651      	mov	r1, sl
 80137b0:	6820      	ldr	r0, [r4, #0]
 80137b2:	44c2      	add	sl, r8
 80137b4:	bf28      	it	cs
 80137b6:	4646      	movcs	r6, r8
 80137b8:	4632      	mov	r2, r6
 80137ba:	f7fa fd47 	bl	800e24c <memmove>
 80137be:	68a2      	ldr	r2, [r4, #8]
 80137c0:	1b92      	subs	r2, r2, r6
 80137c2:	60a2      	str	r2, [r4, #8]
 80137c4:	6822      	ldr	r2, [r4, #0]
 80137c6:	4432      	add	r2, r6
 80137c8:	6022      	str	r2, [r4, #0]
 80137ca:	68ba      	ldr	r2, [r7, #8]
 80137cc:	eba2 0308 	sub.w	r3, r2, r8
 80137d0:	60bb      	str	r3, [r7, #8]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d0aa      	beq.n	801372c <__ssprint_r+0x14>
 80137d6:	f04f 0800 	mov.w	r8, #0
 80137da:	e7b1      	b.n	8013740 <__ssprint_r+0x28>
 80137dc:	f04f 0a00 	mov.w	sl, #0
 80137e0:	46d0      	mov	r8, sl
 80137e2:	e7ad      	b.n	8013740 <__ssprint_r+0x28>
 80137e4:	462a      	mov	r2, r5
 80137e6:	9801      	ldr	r0, [sp, #4]
 80137e8:	f7ff fdc0 	bl	801336c <_realloc_r>
 80137ec:	4606      	mov	r6, r0
 80137ee:	2800      	cmp	r0, #0
 80137f0:	d1d4      	bne.n	801379c <__ssprint_r+0x84>
 80137f2:	6921      	ldr	r1, [r4, #16]
 80137f4:	9801      	ldr	r0, [sp, #4]
 80137f6:	f7fa fe73 	bl	800e4e0 <_free_r>
 80137fa:	230c      	movs	r3, #12
 80137fc:	9a01      	ldr	r2, [sp, #4]
 80137fe:	f04f 30ff 	mov.w	r0, #4294967295
 8013802:	6013      	str	r3, [r2, #0]
 8013804:	89a3      	ldrh	r3, [r4, #12]
 8013806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801380a:	81a3      	strh	r3, [r4, #12]
 801380c:	2300      	movs	r3, #0
 801380e:	60bb      	str	r3, [r7, #8]
 8013810:	e78d      	b.n	801372e <__ssprint_r+0x16>

08013812 <__swhatbuf_r>:
 8013812:	b570      	push	{r4, r5, r6, lr}
 8013814:	460c      	mov	r4, r1
 8013816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801381a:	b096      	sub	sp, #88	@ 0x58
 801381c:	4615      	mov	r5, r2
 801381e:	2900      	cmp	r1, #0
 8013820:	461e      	mov	r6, r3
 8013822:	da07      	bge.n	8013834 <__swhatbuf_r+0x22>
 8013824:	89a1      	ldrh	r1, [r4, #12]
 8013826:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 801382a:	d117      	bne.n	801385c <__swhatbuf_r+0x4a>
 801382c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013830:	4608      	mov	r0, r1
 8013832:	e00f      	b.n	8013854 <__swhatbuf_r+0x42>
 8013834:	466a      	mov	r2, sp
 8013836:	f000 f899 	bl	801396c <_fstat_r>
 801383a:	2800      	cmp	r0, #0
 801383c:	dbf2      	blt.n	8013824 <__swhatbuf_r+0x12>
 801383e:	9901      	ldr	r1, [sp, #4]
 8013840:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8013844:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013848:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801384c:	4259      	negs	r1, r3
 801384e:	4159      	adcs	r1, r3
 8013850:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013854:	6031      	str	r1, [r6, #0]
 8013856:	602b      	str	r3, [r5, #0]
 8013858:	b016      	add	sp, #88	@ 0x58
 801385a:	bd70      	pop	{r4, r5, r6, pc}
 801385c:	2100      	movs	r1, #0
 801385e:	2340      	movs	r3, #64	@ 0x40
 8013860:	e7e6      	b.n	8013830 <__swhatbuf_r+0x1e>

08013862 <__smakebuf_r>:
 8013862:	898b      	ldrh	r3, [r1, #12]
 8013864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013866:	079d      	lsls	r5, r3, #30
 8013868:	4606      	mov	r6, r0
 801386a:	460c      	mov	r4, r1
 801386c:	d507      	bpl.n	801387e <__smakebuf_r+0x1c>
 801386e:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 8013872:	6023      	str	r3, [r4, #0]
 8013874:	6123      	str	r3, [r4, #16]
 8013876:	2301      	movs	r3, #1
 8013878:	6163      	str	r3, [r4, #20]
 801387a:	b003      	add	sp, #12
 801387c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801387e:	ab01      	add	r3, sp, #4
 8013880:	466a      	mov	r2, sp
 8013882:	f7ff ffc6 	bl	8013812 <__swhatbuf_r>
 8013886:	9f00      	ldr	r7, [sp, #0]
 8013888:	4605      	mov	r5, r0
 801388a:	4630      	mov	r0, r6
 801388c:	4639      	mov	r1, r7
 801388e:	f7fa f821 	bl	800d8d4 <_malloc_r>
 8013892:	b948      	cbnz	r0, 80138a8 <__smakebuf_r+0x46>
 8013894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013898:	059a      	lsls	r2, r3, #22
 801389a:	d4ee      	bmi.n	801387a <__smakebuf_r+0x18>
 801389c:	f023 0303 	bic.w	r3, r3, #3
 80138a0:	f043 0302 	orr.w	r3, r3, #2
 80138a4:	81a3      	strh	r3, [r4, #12]
 80138a6:	e7e2      	b.n	801386e <__smakebuf_r+0xc>
 80138a8:	89a3      	ldrh	r3, [r4, #12]
 80138aa:	6020      	str	r0, [r4, #0]
 80138ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80138b0:	81a3      	strh	r3, [r4, #12]
 80138b2:	9b01      	ldr	r3, [sp, #4]
 80138b4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80138b8:	b15b      	cbz	r3, 80138d2 <__smakebuf_r+0x70>
 80138ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80138be:	4630      	mov	r0, r6
 80138c0:	f000 f866 	bl	8013990 <_isatty_r>
 80138c4:	b128      	cbz	r0, 80138d2 <__smakebuf_r+0x70>
 80138c6:	89a3      	ldrh	r3, [r4, #12]
 80138c8:	f023 0303 	bic.w	r3, r3, #3
 80138cc:	f043 0301 	orr.w	r3, r3, #1
 80138d0:	81a3      	strh	r3, [r4, #12]
 80138d2:	89a3      	ldrh	r3, [r4, #12]
 80138d4:	431d      	orrs	r5, r3
 80138d6:	81a5      	strh	r5, [r4, #12]
 80138d8:	e7cf      	b.n	801387a <__smakebuf_r+0x18>

080138da <__swbuf_r>:
 80138da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138dc:	460e      	mov	r6, r1
 80138de:	4614      	mov	r4, r2
 80138e0:	4605      	mov	r5, r0
 80138e2:	b118      	cbz	r0, 80138ec <__swbuf_r+0x12>
 80138e4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80138e6:	b90b      	cbnz	r3, 80138ec <__swbuf_r+0x12>
 80138e8:	f7fa fb4a 	bl	800df80 <__sinit>
 80138ec:	69a3      	ldr	r3, [r4, #24]
 80138ee:	60a3      	str	r3, [r4, #8]
 80138f0:	89a3      	ldrh	r3, [r4, #12]
 80138f2:	0719      	lsls	r1, r3, #28
 80138f4:	d501      	bpl.n	80138fa <__swbuf_r+0x20>
 80138f6:	6923      	ldr	r3, [r4, #16]
 80138f8:	b943      	cbnz	r3, 801390c <__swbuf_r+0x32>
 80138fa:	4621      	mov	r1, r4
 80138fc:	4628      	mov	r0, r5
 80138fe:	f7fe fa39 	bl	8011d74 <__swsetup_r>
 8013902:	b118      	cbz	r0, 801390c <__swbuf_r+0x32>
 8013904:	f04f 37ff 	mov.w	r7, #4294967295
 8013908:	4638      	mov	r0, r7
 801390a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801390c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013910:	b2f6      	uxtb	r6, r6
 8013912:	049a      	lsls	r2, r3, #18
 8013914:	4637      	mov	r7, r6
 8013916:	d406      	bmi.n	8013926 <__swbuf_r+0x4c>
 8013918:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801391c:	81a3      	strh	r3, [r4, #12]
 801391e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013920:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013924:	6663      	str	r3, [r4, #100]	@ 0x64
 8013926:	6823      	ldr	r3, [r4, #0]
 8013928:	6922      	ldr	r2, [r4, #16]
 801392a:	1a98      	subs	r0, r3, r2
 801392c:	6963      	ldr	r3, [r4, #20]
 801392e:	4283      	cmp	r3, r0
 8013930:	dc05      	bgt.n	801393e <__swbuf_r+0x64>
 8013932:	4621      	mov	r1, r4
 8013934:	4628      	mov	r0, r5
 8013936:	f7fe f8ab 	bl	8011a90 <_fflush_r>
 801393a:	2800      	cmp	r0, #0
 801393c:	d1e2      	bne.n	8013904 <__swbuf_r+0x2a>
 801393e:	68a3      	ldr	r3, [r4, #8]
 8013940:	3b01      	subs	r3, #1
 8013942:	60a3      	str	r3, [r4, #8]
 8013944:	6823      	ldr	r3, [r4, #0]
 8013946:	1c5a      	adds	r2, r3, #1
 8013948:	6022      	str	r2, [r4, #0]
 801394a:	701e      	strb	r6, [r3, #0]
 801394c:	1c43      	adds	r3, r0, #1
 801394e:	6962      	ldr	r2, [r4, #20]
 8013950:	429a      	cmp	r2, r3
 8013952:	d004      	beq.n	801395e <__swbuf_r+0x84>
 8013954:	89a3      	ldrh	r3, [r4, #12]
 8013956:	07db      	lsls	r3, r3, #31
 8013958:	d5d6      	bpl.n	8013908 <__swbuf_r+0x2e>
 801395a:	2e0a      	cmp	r6, #10
 801395c:	d1d4      	bne.n	8013908 <__swbuf_r+0x2e>
 801395e:	4621      	mov	r1, r4
 8013960:	4628      	mov	r0, r5
 8013962:	f7fe f895 	bl	8011a90 <_fflush_r>
 8013966:	2800      	cmp	r0, #0
 8013968:	d0ce      	beq.n	8013908 <__swbuf_r+0x2e>
 801396a:	e7cb      	b.n	8013904 <__swbuf_r+0x2a>

0801396c <_fstat_r>:
 801396c:	b538      	push	{r3, r4, r5, lr}
 801396e:	2300      	movs	r3, #0
 8013970:	4d06      	ldr	r5, [pc, #24]	@ (801398c <_fstat_r+0x20>)
 8013972:	4604      	mov	r4, r0
 8013974:	4608      	mov	r0, r1
 8013976:	4611      	mov	r1, r2
 8013978:	602b      	str	r3, [r5, #0]
 801397a:	f7ef f86b 	bl	8002a54 <_fstat>
 801397e:	1c43      	adds	r3, r0, #1
 8013980:	d102      	bne.n	8013988 <_fstat_r+0x1c>
 8013982:	682b      	ldr	r3, [r5, #0]
 8013984:	b103      	cbz	r3, 8013988 <_fstat_r+0x1c>
 8013986:	6023      	str	r3, [r4, #0]
 8013988:	bd38      	pop	{r3, r4, r5, pc}
 801398a:	bf00      	nop
 801398c:	20001c14 	.word	0x20001c14

08013990 <_isatty_r>:
 8013990:	b538      	push	{r3, r4, r5, lr}
 8013992:	2300      	movs	r3, #0
 8013994:	4d05      	ldr	r5, [pc, #20]	@ (80139ac <_isatty_r+0x1c>)
 8013996:	4604      	mov	r4, r0
 8013998:	4608      	mov	r0, r1
 801399a:	602b      	str	r3, [r5, #0]
 801399c:	f7ef f86a 	bl	8002a74 <_isatty>
 80139a0:	1c43      	adds	r3, r0, #1
 80139a2:	d102      	bne.n	80139aa <_isatty_r+0x1a>
 80139a4:	682b      	ldr	r3, [r5, #0]
 80139a6:	b103      	cbz	r3, 80139aa <_isatty_r+0x1a>
 80139a8:	6023      	str	r3, [r4, #0]
 80139aa:	bd38      	pop	{r3, r4, r5, pc}
 80139ac:	20001c14 	.word	0x20001c14

080139b0 <__assert_func>:
 80139b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80139b2:	4614      	mov	r4, r2
 80139b4:	461a      	mov	r2, r3
 80139b6:	4b09      	ldr	r3, [pc, #36]	@ (80139dc <__assert_func+0x2c>)
 80139b8:	4605      	mov	r5, r0
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	68d8      	ldr	r0, [r3, #12]
 80139be:	b954      	cbnz	r4, 80139d6 <__assert_func+0x26>
 80139c0:	4b07      	ldr	r3, [pc, #28]	@ (80139e0 <__assert_func+0x30>)
 80139c2:	461c      	mov	r4, r3
 80139c4:	9100      	str	r1, [sp, #0]
 80139c6:	4907      	ldr	r1, [pc, #28]	@ (80139e4 <__assert_func+0x34>)
 80139c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80139cc:	462b      	mov	r3, r5
 80139ce:	f000 f843 	bl	8013a58 <fiprintf>
 80139d2:	f000 f853 	bl	8013a7c <abort>
 80139d6:	4b04      	ldr	r3, [pc, #16]	@ (80139e8 <__assert_func+0x38>)
 80139d8:	e7f4      	b.n	80139c4 <__assert_func+0x14>
 80139da:	bf00      	nop
 80139dc:	2000046c 	.word	0x2000046c
 80139e0:	08014be3 	.word	0x08014be3
 80139e4:	08014bb5 	.word	0x08014bb5
 80139e8:	08014ba8 	.word	0x08014ba8

080139ec <_calloc_r>:
 80139ec:	b538      	push	{r3, r4, r5, lr}
 80139ee:	fba1 1502 	umull	r1, r5, r1, r2
 80139f2:	b935      	cbnz	r5, 8013a02 <_calloc_r+0x16>
 80139f4:	f7f9 ff6e 	bl	800d8d4 <_malloc_r>
 80139f8:	4604      	mov	r4, r0
 80139fa:	b938      	cbnz	r0, 8013a0c <_calloc_r+0x20>
 80139fc:	2400      	movs	r4, #0
 80139fe:	4620      	mov	r0, r4
 8013a00:	bd38      	pop	{r3, r4, r5, pc}
 8013a02:	f7fa fcbf 	bl	800e384 <__errno>
 8013a06:	230c      	movs	r3, #12
 8013a08:	6003      	str	r3, [r0, #0]
 8013a0a:	e7f7      	b.n	80139fc <_calloc_r+0x10>
 8013a0c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013a10:	f022 0203 	bic.w	r2, r2, #3
 8013a14:	3a04      	subs	r2, #4
 8013a16:	2a24      	cmp	r2, #36	@ 0x24
 8013a18:	d819      	bhi.n	8013a4e <_calloc_r+0x62>
 8013a1a:	2a13      	cmp	r2, #19
 8013a1c:	d915      	bls.n	8013a4a <_calloc_r+0x5e>
 8013a1e:	2a1b      	cmp	r2, #27
 8013a20:	e9c0 5500 	strd	r5, r5, [r0]
 8013a24:	d806      	bhi.n	8013a34 <_calloc_r+0x48>
 8013a26:	f100 0308 	add.w	r3, r0, #8
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	e9c3 2200 	strd	r2, r2, [r3]
 8013a30:	609a      	str	r2, [r3, #8]
 8013a32:	e7e4      	b.n	80139fe <_calloc_r+0x12>
 8013a34:	2a24      	cmp	r2, #36	@ 0x24
 8013a36:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8013a3a:	bf11      	iteee	ne
 8013a3c:	f100 0310 	addne.w	r3, r0, #16
 8013a40:	f100 0318 	addeq.w	r3, r0, #24
 8013a44:	6105      	streq	r5, [r0, #16]
 8013a46:	6145      	streq	r5, [r0, #20]
 8013a48:	e7ef      	b.n	8013a2a <_calloc_r+0x3e>
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	e7ed      	b.n	8013a2a <_calloc_r+0x3e>
 8013a4e:	4629      	mov	r1, r5
 8013a50:	f7fa fc16 	bl	800e280 <memset>
 8013a54:	e7d3      	b.n	80139fe <_calloc_r+0x12>
	...

08013a58 <fiprintf>:
 8013a58:	b40e      	push	{r1, r2, r3}
 8013a5a:	b503      	push	{r0, r1, lr}
 8013a5c:	ab03      	add	r3, sp, #12
 8013a5e:	4601      	mov	r1, r0
 8013a60:	4805      	ldr	r0, [pc, #20]	@ (8013a78 <fiprintf+0x20>)
 8013a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a66:	6800      	ldr	r0, [r0, #0]
 8013a68:	9301      	str	r3, [sp, #4]
 8013a6a:	f7fd fa6b 	bl	8010f44 <_vfiprintf_r>
 8013a6e:	b002      	add	sp, #8
 8013a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a74:	b003      	add	sp, #12
 8013a76:	4770      	bx	lr
 8013a78:	2000046c 	.word	0x2000046c

08013a7c <abort>:
 8013a7c:	2006      	movs	r0, #6
 8013a7e:	b508      	push	{r3, lr}
 8013a80:	f000 f82c 	bl	8013adc <raise>
 8013a84:	2001      	movs	r0, #1
 8013a86:	f7ee ff95 	bl	80029b4 <_exit>

08013a8a <_raise_r>:
 8013a8a:	291f      	cmp	r1, #31
 8013a8c:	b538      	push	{r3, r4, r5, lr}
 8013a8e:	4605      	mov	r5, r0
 8013a90:	460c      	mov	r4, r1
 8013a92:	d904      	bls.n	8013a9e <_raise_r+0x14>
 8013a94:	2316      	movs	r3, #22
 8013a96:	6003      	str	r3, [r0, #0]
 8013a98:	f04f 30ff 	mov.w	r0, #4294967295
 8013a9c:	bd38      	pop	{r3, r4, r5, pc}
 8013a9e:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8013aa2:	b112      	cbz	r2, 8013aaa <_raise_r+0x20>
 8013aa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013aa8:	b94b      	cbnz	r3, 8013abe <_raise_r+0x34>
 8013aaa:	4628      	mov	r0, r5
 8013aac:	f000 f830 	bl	8013b10 <_getpid_r>
 8013ab0:	4622      	mov	r2, r4
 8013ab2:	4601      	mov	r1, r0
 8013ab4:	4628      	mov	r0, r5
 8013ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013aba:	f000 b817 	b.w	8013aec <_kill_r>
 8013abe:	2b01      	cmp	r3, #1
 8013ac0:	d00a      	beq.n	8013ad8 <_raise_r+0x4e>
 8013ac2:	1c59      	adds	r1, r3, #1
 8013ac4:	d103      	bne.n	8013ace <_raise_r+0x44>
 8013ac6:	2316      	movs	r3, #22
 8013ac8:	6003      	str	r3, [r0, #0]
 8013aca:	2001      	movs	r0, #1
 8013acc:	e7e6      	b.n	8013a9c <_raise_r+0x12>
 8013ace:	2100      	movs	r1, #0
 8013ad0:	4620      	mov	r0, r4
 8013ad2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013ad6:	4798      	blx	r3
 8013ad8:	2000      	movs	r0, #0
 8013ada:	e7df      	b.n	8013a9c <_raise_r+0x12>

08013adc <raise>:
 8013adc:	4b02      	ldr	r3, [pc, #8]	@ (8013ae8 <raise+0xc>)
 8013ade:	4601      	mov	r1, r0
 8013ae0:	6818      	ldr	r0, [r3, #0]
 8013ae2:	f7ff bfd2 	b.w	8013a8a <_raise_r>
 8013ae6:	bf00      	nop
 8013ae8:	2000046c 	.word	0x2000046c

08013aec <_kill_r>:
 8013aec:	b538      	push	{r3, r4, r5, lr}
 8013aee:	2300      	movs	r3, #0
 8013af0:	4d06      	ldr	r5, [pc, #24]	@ (8013b0c <_kill_r+0x20>)
 8013af2:	4604      	mov	r4, r0
 8013af4:	4608      	mov	r0, r1
 8013af6:	4611      	mov	r1, r2
 8013af8:	602b      	str	r3, [r5, #0]
 8013afa:	f7ee ff4b 	bl	8002994 <_kill>
 8013afe:	1c43      	adds	r3, r0, #1
 8013b00:	d102      	bne.n	8013b08 <_kill_r+0x1c>
 8013b02:	682b      	ldr	r3, [r5, #0]
 8013b04:	b103      	cbz	r3, 8013b08 <_kill_r+0x1c>
 8013b06:	6023      	str	r3, [r4, #0]
 8013b08:	bd38      	pop	{r3, r4, r5, pc}
 8013b0a:	bf00      	nop
 8013b0c:	20001c14 	.word	0x20001c14

08013b10 <_getpid_r>:
 8013b10:	f7ee bf38 	b.w	8002984 <_getpid>

08013b14 <_init>:
 8013b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b16:	bf00      	nop
 8013b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b1a:	bc08      	pop	{r3}
 8013b1c:	469e      	mov	lr, r3
 8013b1e:	4770      	bx	lr

08013b20 <_fini>:
 8013b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b22:	bf00      	nop
 8013b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b26:	bc08      	pop	{r3}
 8013b28:	469e      	mov	lr, r3
 8013b2a:	4770      	bx	lr
