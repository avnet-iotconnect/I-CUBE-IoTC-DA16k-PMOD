
DA16k-PMOD-demo-n32l43.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c508  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fe4  0800c698  0800c698  0000d698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d67c  0800d67c  0000f700  2**0
                  CONTENTS
  4 .ARM          00000008  0800d67c  0800d67c  0000e67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d684  0800d684  0000f700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d684  0800d684  0000e684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d68c  0800d68c  0000e68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000700  20000000  0800d690  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e0c  20000700  0800dd90  0000f700  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000150c  0800dd90  0001050c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f700  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116bc  00000000  00000000  0000f730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003121  00000000  00000000  00020dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00023f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a81  00000000  00000000  00024d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022431  00000000  00000000  00025781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011475  00000000  00000000  00047bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3975  00000000  00000000  00059027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c99c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c80  00000000  00000000  0011c9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00121660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000700 	.word	0x20000700
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c680 	.word	0x0800c680

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000704 	.word	0x20000704
 80001cc:	0800c680 	.word	0x0800c680

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <head_to_tail_buf_write>:
	int head, tail;
}headToTailBuf_t;

static struct HEAD_TO_TAIL_BUF rx_buf = {{0},0,0};

int head_to_tail_buf_write (struct HEAD_TO_TAIL_BUF * b, char data) {
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	70fb      	strb	r3, [r7, #3]
	b->buf[b->head] = data;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	78f9      	ldrb	r1, [r7, #3]
 8000ece:	54d1      	strb	r1, [r2, r3]
		if(++b->head >= DEBUG_LINE_SIZE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000ed6:	1c5a      	adds	r2, r3, #1
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000ee4:	2bff      	cmp	r3, #255	@ 0xff
 8000ee6:	dd03      	ble.n	8000ef0 <head_to_tail_buf_write+0x38>
			b->head = 0;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	return 0;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <head_to_tail_buf_read>:

int head_to_tail_buf_read (struct HEAD_TO_TAIL_BUF * b, char * data) {
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	6039      	str	r1, [r7, #0]

	if(b->tail != b->head) {
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d019      	beq.n	8000f4c <head_to_tail_buf_read+0x4e>
		*data = (int)b->buf[b->tail];
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	5cd3      	ldrb	r3, [r2, r3]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	701a      	strb	r2, [r3, #0]
		if(++b->tail >= DEBUG_LINE_SIZE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8000f3c:	2bff      	cmp	r3, #255	@ 0xff
 8000f3e:	dd03      	ble.n	8000f48 <head_to_tail_buf_read+0x4a>
			b->tail = 0;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
		return 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	e001      	b.n	8000f50 <head_to_tail_buf_read+0x52>
	}
	else {
		return -1;
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <HAL_DEBUG_UART_TxCpltCallback>:
static char rx_byte;

/*
 * Callback that occurs at the end of a transmission. Clears the txDmaInUse flag to allow subsequent transmissions.
 */
void HAL_DEBUG_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	;
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <HAL_DEBUG_UART_RxCpltCallback>:

/*
 * Callback that happens when characters are received via interrupt one at a time. The function places each byte in a
 * buffer to be processed when the system can.
 */
void HAL_DEBUG_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	if(huart == DEBUG_UART_P) {
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a09      	ldr	r2, [pc, #36]	@ (8000fa0 <HAL_DEBUG_UART_RxCpltCallback+0x30>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d10a      	bne.n	8000f96 <HAL_DEBUG_UART_RxCpltCallback+0x26>
		HAL_UART_Receive_IT(DEBUG_UART_P, (uint8_t *) &rx_byte, 1);
 8000f80:	2201      	movs	r2, #1
 8000f82:	4908      	ldr	r1, [pc, #32]	@ (8000fa4 <HAL_DEBUG_UART_RxCpltCallback+0x34>)
 8000f84:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <HAL_DEBUG_UART_RxCpltCallback+0x30>)
 8000f86:	f003 fd2f 	bl	80049e8 <HAL_UART_Receive_IT>
		head_to_tail_buf_write(&rx_buf, rx_byte);
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_DEBUG_UART_RxCpltCallback+0x34>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <HAL_DEBUG_UART_RxCpltCallback+0x38>)
 8000f92:	f7ff ff91 	bl	8000eb8 <head_to_tail_buf_write>
	}
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000828 	.word	0x20000828
 8000fa4:	20000824 	.word	0x20000824
 8000fa8:	2000071c 	.word	0x2000071c

08000fac <__io_putchar>:

int __io_putchar(int ch) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	int err=0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef s;
	do
		s = HAL_UART_Transmit_IT(DEBUG_UART_P, (uint8_t *)&ch, 1);
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	@ (8000fd8 <__io_putchar+0x2c>)
 8000fc0:	f003 fcb4 	bl	800492c <HAL_UART_Transmit_IT>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	72fb      	strb	r3, [r7, #11]
	while(s != HAL_OK);
 8000fc8:	7afb      	ldrb	r3, [r7, #11]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f4      	bne.n	8000fb8 <__io_putchar+0xc>

	return err;
 8000fce:	68fb      	ldr	r3, [r7, #12]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000828 	.word	0x20000828

08000fdc <__io_getchar>:

int __io_getchar(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
	char c;

	while(0 != head_to_tail_buf_read(&rx_buf, &c));
 8000fe2:	bf00      	nop
 8000fe4:	1dfb      	adds	r3, r7, #7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	@ (8001000 <__io_getchar+0x24>)
 8000fea:	f7ff ff88 	bl	8000efe <head_to_tail_buf_read>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f7      	bne.n	8000fe4 <__io_getchar+0x8>

	return (int)c;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000071c 	.word	0x2000071c

08001004 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int d3_pressed = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d103      	bne.n	800101c <HAL_GPIO_EXTI_Callback+0x18>
	case D3_Pin:
		d3_pressed = 1;
 8001014:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <HAL_GPIO_EXTI_Callback+0x24>)
 8001016:	2201      	movs	r2, #1
 8001018:	601a      	str	r2, [r3, #0]
		break;
 800101a:	bf00      	nop
	default:
	}
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	200008e0 	.word	0x200008e0

0800102c <da16k_cmd_handler>:

void da16k_cmd_handler(da16k_cmd_t * cmd) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
    printf("Command received: %s, parameters: %s\r\n",
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6819      	ldr	r1, [r3, #0]
        cmd->command, cmd->parameters ? cmd->parameters : "<none>" );
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
    printf("Command received: %s, parameters: %s\r\n",
 800103c:	2b00      	cmp	r3, #0
 800103e:	d002      	beq.n	8001046 <da16k_cmd_handler+0x1a>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	e000      	b.n	8001048 <da16k_cmd_handler+0x1c>
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <da16k_cmd_handler+0x4c>)
 8001048:	461a      	mov	r2, r3
 800104a:	480c      	ldr	r0, [pc, #48]	@ (800107c <da16k_cmd_handler+0x50>)
 800104c:	f005 fd9a 	bl	8006b84 <printf>

    if(strcmp(cmd->command, "test")==0) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	490a      	ldr	r1, [pc, #40]	@ (8001080 <da16k_cmd_handler+0x54>)
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff f8ba 	bl	80001d0 <strcmp>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d106      	bne.n	8001070 <da16k_cmd_handler+0x44>
    	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001062:	2108      	movs	r1, #8
 8001064:	4807      	ldr	r0, [pc, #28]	@ (8001084 <da16k_cmd_handler+0x58>)
 8001066:	f002 f8f7 	bl	8003258 <HAL_GPIO_TogglePin>
    	  printf("Toggling LD3\r\n");
 800106a:	4807      	ldr	r0, [pc, #28]	@ (8001088 <da16k_cmd_handler+0x5c>)
 800106c:	f005 fde2 	bl	8006c34 <puts>
    }
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	0800c698 	.word	0x0800c698
 800107c:	0800c6a0 	.word	0x0800c6a0
 8001080:	0800c6c8 	.word	0x0800c6c8
 8001084:	48000400 	.word	0x48000400
 8001088:	0800c6d0 	.word	0x0800c6d0

0800108c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800108c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001090:	b092      	sub	sp, #72	@ 0x48
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int64_t box_x=0,
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
			box_y=0,
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	f04f 0300 	mov.w	r3, #0
 80010a8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			box_w=0,
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
			box_h=0,
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	f04f 0300 	mov.w	r3, #0
 80010c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			infer_t=0,
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
			nb_detect=0;
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010dc:	f001 fc39 	bl	8002952 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e0:	f000 f876 	bl	80011d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e4:	f000 f922 	bl	800132c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010e8:	f000 f8d4 	bl	8001294 <MX_USART2_UART_Init>
  MX_iotc_da16k_pmod_Init();
 80010ec:	f005 f878 	bl	80061e0 <MX_iotc_da16k_pmod_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_iotc_da16k_pmod_Process();
 80010f0:	f005 f892 	bl	8006218 <MX_iotc_da16k_pmod_Process>
    /* USER CODE BEGIN 3 */
    if(d3_pressed) {
 80010f4:	4b2c      	ldr	r3, [pc, #176]	@ (80011a8 <main+0x11c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f9      	beq.n	80010f0 <main+0x64>
	  printf("\n\rD3 pressed\n\r");
 80010fc:	482b      	ldr	r0, [pc, #172]	@ (80011ac <main+0x120>)
 80010fe:	f005 fd41 	bl	8006b84 <printf>
      da16k_send_msg_direct_int("box_x",box_x++);
 8001102:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001106:	1c54      	adds	r4, r2, #1
 8001108:	f143 0500 	adc.w	r5, r3, #0
 800110c:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 8001110:	4827      	ldr	r0, [pc, #156]	@ (80011b0 <main+0x124>)
 8001112:	f001 f96b 	bl	80023ec <da16k_send_msg_direct_int>
      da16k_send_msg_direct_int("box_y",box_y++);
 8001116:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800111a:	f112 0801 	adds.w	r8, r2, #1
 800111e:	f143 0900 	adc.w	r9, r3, #0
 8001122:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
 8001126:	4823      	ldr	r0, [pc, #140]	@ (80011b4 <main+0x128>)
 8001128:	f001 f960 	bl	80023ec <da16k_send_msg_direct_int>
      da16k_send_msg_direct_int("box_w",box_w++);
 800112c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001130:	f112 0a01 	adds.w	sl, r2, #1
 8001134:	f143 0b00 	adc.w	fp, r3, #0
 8001138:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
 800113c:	481e      	ldr	r0, [pc, #120]	@ (80011b8 <main+0x12c>)
 800113e:	f001 f955 	bl	80023ec <da16k_send_msg_direct_int>
      da16k_send_msg_direct_int("box_h",box_h++);
 8001142:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001146:	1c51      	adds	r1, r2, #1
 8001148:	6139      	str	r1, [r7, #16]
 800114a:	f143 0100 	adc.w	r1, r3, #0
 800114e:	6179      	str	r1, [r7, #20]
 8001150:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001154:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8001158:	4818      	ldr	r0, [pc, #96]	@ (80011bc <main+0x130>)
 800115a:	f001 f947 	bl	80023ec <da16k_send_msg_direct_int>
      da16k_send_msg_direct_int("infer_t",infer_t++);
 800115e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001162:	1c51      	adds	r1, r2, #1
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	f143 0100 	adc.w	r1, r3, #0
 800116a:	60f9      	str	r1, [r7, #12]
 800116c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001170:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001174:	4812      	ldr	r0, [pc, #72]	@ (80011c0 <main+0x134>)
 8001176:	f001 f939 	bl	80023ec <da16k_send_msg_direct_int>
      da16k_send_msg_direct_int("nb_detect",nb_detect++);
 800117a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800117e:	1c51      	adds	r1, r2, #1
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	f143 0100 	adc.w	r1, r3, #0
 8001186:	6079      	str	r1, [r7, #4]
 8001188:	e9d7 0100 	ldrd	r0, r1, [r7]
 800118c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001190:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <main+0x138>)
 8001192:	f001 f92b 	bl	80023ec <da16k_send_msg_direct_int>
      da16k_send_msg_direct_str("version", "str2");
 8001196:	490c      	ldr	r1, [pc, #48]	@ (80011c8 <main+0x13c>)
 8001198:	480c      	ldr	r0, [pc, #48]	@ (80011cc <main+0x140>)
 800119a:	f001 f8fb 	bl	8002394 <da16k_send_msg_direct_str>
	  d3_pressed = 0;
 800119e:	4b02      	ldr	r3, [pc, #8]	@ (80011a8 <main+0x11c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
  MX_iotc_da16k_pmod_Process();
 80011a4:	e7a4      	b.n	80010f0 <main+0x64>
 80011a6:	bf00      	nop
 80011a8:	200008e0 	.word	0x200008e0
 80011ac:	0800c6e0 	.word	0x0800c6e0
 80011b0:	0800c6f0 	.word	0x0800c6f0
 80011b4:	0800c6f8 	.word	0x0800c6f8
 80011b8:	0800c700 	.word	0x0800c700
 80011bc:	0800c708 	.word	0x0800c708
 80011c0:	0800c710 	.word	0x0800c710
 80011c4:	0800c718 	.word	0x0800c718
 80011c8:	0800c724 	.word	0x0800c724
 80011cc:	0800c72c 	.word	0x0800c72c

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b096      	sub	sp, #88	@ 0x58
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	2244      	movs	r2, #68	@ 0x44
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f005 fe1a 	bl	8006e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	463b      	mov	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011f6:	f002 f87f 	bl	80032f8 <HAL_PWREx_ControlVoltageScaling>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001200:	f000 f8f4 	bl	80013ec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001204:	f002 f85a 	bl	80032bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001208:	4b21      	ldr	r3, [pc, #132]	@ (8001290 <SystemClock_Config+0xc0>)
 800120a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800120e:	4a20      	ldr	r2, [pc, #128]	@ (8001290 <SystemClock_Config+0xc0>)
 8001210:	f023 0318 	bic.w	r3, r3, #24
 8001214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001218:	2314      	movs	r3, #20
 800121a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800121c:	2301      	movs	r3, #1
 800121e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001220:	2301      	movs	r3, #1
 8001222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001228:	2360      	movs	r3, #96	@ 0x60
 800122a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122c:	2302      	movs	r3, #2
 800122e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001230:	2301      	movs	r3, #1
 8001232:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001234:	2301      	movs	r3, #1
 8001236:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001238:	2310      	movs	r3, #16
 800123a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800123c:	2307      	movs	r3, #7
 800123e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001240:	2302      	movs	r3, #2
 8001242:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001244:	2302      	movs	r3, #2
 8001246:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4618      	mov	r0, r3
 800124e:	f002 f8a9 	bl	80033a4 <HAL_RCC_OscConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001258:	f000 f8c8 	bl	80013ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125c:	230f      	movs	r3, #15
 800125e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001260:	2303      	movs	r3, #3
 8001262:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	2101      	movs	r1, #1
 8001274:	4618      	mov	r0, r3
 8001276:	f002 fca9 	bl	8003bcc <HAL_RCC_ClockConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001280:	f000 f8b4 	bl	80013ec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001284:	f003 f8bc 	bl	8004400 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001288:	bf00      	nop
 800128a:	3758      	adds	r7, #88	@ 0x58
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021000 	.word	0x40021000

08001294 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001298:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <MX_USART2_UART_Init+0x84>)
 800129a:	4a20      	ldr	r2, [pc, #128]	@ (800131c <MX_USART2_UART_Init+0x88>)
 800129c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800129e:	4b1e      	ldr	r3, [pc, #120]	@ (8001318 <MX_USART2_UART_Init+0x84>)
 80012a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <MX_USART2_UART_Init+0x84>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001318 <MX_USART2_UART_Init+0x84>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012b2:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <MX_USART2_UART_Init+0x84>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012b8:	4b17      	ldr	r3, [pc, #92]	@ (8001318 <MX_USART2_UART_Init+0x84>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012be:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <MX_USART2_UART_Init+0x84>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <MX_USART2_UART_Init+0x84>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ca:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <MX_USART2_UART_Init+0x84>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d0:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <MX_USART2_UART_Init+0x84>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012d6:	4810      	ldr	r0, [pc, #64]	@ (8001318 <MX_USART2_UART_Init+0x84>)
 80012d8:	f003 f994 	bl	8004604 <HAL_UART_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012e2:	f000 f883 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if(HAL_OK != HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID,
 80012e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001320 <MX_USART2_UART_Init+0x8c>)
 80012e8:	2101      	movs	r1, #1
 80012ea:	480b      	ldr	r0, [pc, #44]	@ (8001318 <MX_USART2_UART_Init+0x84>)
 80012ec:	f003 f9e8 	bl	80046c0 <HAL_UART_RegisterCallback>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10b      	bne.n	800130e <MX_USART2_UART_Init+0x7a>
        &HAL_DEBUG_UART_TxCpltCallback) ) {
        return false;
    }

    if(HAL_OK != HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID,
 80012f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001324 <MX_USART2_UART_Init+0x90>)
 80012f8:	2103      	movs	r1, #3
 80012fa:	4807      	ldr	r0, [pc, #28]	@ (8001318 <MX_USART2_UART_Init+0x84>)
 80012fc:	f003 f9e0 	bl	80046c0 <HAL_UART_RegisterCallback>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d105      	bne.n	8001312 <MX_USART2_UART_Init+0x7e>
        &HAL_DEBUG_UART_RxCpltCallback) ) {
        return false;
    }
#endif
    printf("\f\n\rDA16k-PMOD-Demo-N32L43 Start...\n\r");
 8001306:	4808      	ldr	r0, [pc, #32]	@ (8001328 <MX_USART2_UART_Init+0x94>)
 8001308:	f005 fc3c 	bl	8006b84 <printf>
 800130c:	e002      	b.n	8001314 <MX_USART2_UART_Init+0x80>
        return false;
 800130e:	bf00      	nop
 8001310:	e000      	b.n	8001314 <MX_USART2_UART_Init+0x80>
        return false;
 8001312:	bf00      	nop
  /* USER CODE END USART2_Init 2 */

}
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000828 	.word	0x20000828
 800131c:	40004400 	.word	0x40004400
 8001320:	08000f5d 	.word	0x08000f5d
 8001324:	08000f71 	.word	0x08000f71
 8001328:	0800c734 	.word	0x0800c734

0800132c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	4b28      	ldr	r3, [pc, #160]	@ (80013e4 <MX_GPIO_Init+0xb8>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	4a27      	ldr	r2, [pc, #156]	@ (80013e4 <MX_GPIO_Init+0xb8>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134e:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <MX_GPIO_Init+0xb8>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	4b22      	ldr	r3, [pc, #136]	@ (80013e4 <MX_GPIO_Init+0xb8>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	4a21      	ldr	r2, [pc, #132]	@ (80013e4 <MX_GPIO_Init+0xb8>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001366:	4b1f      	ldr	r3, [pc, #124]	@ (80013e4 <MX_GPIO_Init+0xb8>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <MX_GPIO_Init+0xb8>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	4a1b      	ldr	r2, [pc, #108]	@ (80013e4 <MX_GPIO_Init+0xb8>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137e:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <MX_GPIO_Init+0xb8>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2108      	movs	r1, #8
 800138e:	4816      	ldr	r0, [pc, #88]	@ (80013e8 <MX_GPIO_Init+0xbc>)
 8001390:	f001 ff4a 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : D3_Pin */
  GPIO_InitStruct.Pin = D3_Pin;
 8001394:	2301      	movs	r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001398:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800139c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800139e:	2301      	movs	r3, #1
 80013a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D3_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	4619      	mov	r1, r3
 80013a8:	480f      	ldr	r0, [pc, #60]	@ (80013e8 <MX_GPIO_Init+0xbc>)
 80013aa:	f001 fd09 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80013ae:	2308      	movs	r3, #8
 80013b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	4619      	mov	r1, r3
 80013c4:	4808      	ldr	r0, [pc, #32]	@ (80013e8 <MX_GPIO_Init+0xbc>)
 80013c6:	f001 fcfb 	bl	8002dc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	2006      	movs	r0, #6
 80013d0:	f001 fc33 	bl	8002c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013d4:	2006      	movs	r0, #6
 80013d6:	f001 fc4c 	bl	8002c72 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013da:	bf00      	nop
 80013dc:	3720      	adds	r7, #32
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	48000400 	.word	0x48000400

080013ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f0:	b672      	cpsid	i
}
 80013f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <Error_Handler+0x8>

080013f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fe:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <HAL_MspInit+0x44>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001402:	4a0e      	ldr	r2, [pc, #56]	@ (800143c <HAL_MspInit+0x44>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6613      	str	r3, [r2, #96]	@ 0x60
 800140a:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <HAL_MspInit+0x44>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <HAL_MspInit+0x44>)
 8001418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141a:	4a08      	ldr	r2, [pc, #32]	@ (800143c <HAL_MspInit+0x44>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001420:	6593      	str	r3, [r2, #88]	@ 0x58
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <HAL_MspInit+0x44>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000

08001440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b09e      	sub	sp, #120	@ 0x78
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	2254      	movs	r2, #84	@ 0x54
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f005 fcd9 	bl	8006e18 <memset>
  if(huart->Instance==USART2)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a2c      	ldr	r2, [pc, #176]	@ (800151c <HAL_UART_MspInit+0xdc>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d150      	bne.n	8001512 <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001470:	2302      	movs	r3, #2
 8001472:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001474:	2300      	movs	r3, #0
 8001476:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4618      	mov	r0, r3
 800147e:	f002 fdc9 	bl	8004014 <HAL_RCCEx_PeriphCLKConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001488:	f7ff ffb0 	bl	80013ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800148c:	4b24      	ldr	r3, [pc, #144]	@ (8001520 <HAL_UART_MspInit+0xe0>)
 800148e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001490:	4a23      	ldr	r2, [pc, #140]	@ (8001520 <HAL_UART_MspInit+0xe0>)
 8001492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001496:	6593      	str	r3, [r2, #88]	@ 0x58
 8001498:	4b21      	ldr	r3, [pc, #132]	@ (8001520 <HAL_UART_MspInit+0xe0>)
 800149a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001520 <HAL_UART_MspInit+0xe0>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001520 <HAL_UART_MspInit+0xe0>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <HAL_UART_MspInit+0xe0>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80014bc:	2304      	movs	r3, #4
 80014be:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014cc:	2307      	movs	r3, #7
 80014ce:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014d4:	4619      	mov	r1, r3
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014da:	f001 fc71 	bl	8002dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80014de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014e2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80014f0:	2303      	movs	r3, #3
 80014f2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014f8:	4619      	mov	r1, r3
 80014fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014fe:	f001 fc5f 	bl	8002dc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	2026      	movs	r0, #38	@ 0x26
 8001508:	f001 fb97 	bl	8002c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800150c:	2026      	movs	r0, #38	@ 0x26
 800150e:	f001 fbb0 	bl	8002c72 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001512:	bf00      	nop
 8001514:	3778      	adds	r7, #120	@ 0x78
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40004400 	.word	0x40004400
 8001520:	40021000 	.word	0x40021000

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <NMI_Handler+0x4>

0800152c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <MemManage_Handler+0x4>

0800153c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <UsageFault_Handler+0x4>

0800154c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157a:	f001 fa3f 	bl	80029fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}

08001582 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(D3_Pin);
 8001586:	2001      	movs	r0, #1
 8001588:	f001 fe80 	bl	800328c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001594:	4802      	ldr	r0, [pc, #8]	@ (80015a0 <USART1_IRQHandler+0x10>)
 8001596:	f003 fa73 	bl	8004a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200008e4 	.word	0x200008e4

080015a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015a8:	4802      	ldr	r0, [pc, #8]	@ (80015b4 <USART2_IRQHandler+0x10>)
 80015aa:	f003 fa69 	bl	8004a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000828 	.word	0x20000828

080015b8 <BSP_USART1_Init>:
  * @brief  Initializes USART HAL.
  * @param  Init : UART initialization parameters
  * @retval BSP status
  */
int32_t BSP_USART1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]

  huart1.Instance  = USART1;
 80015c2:	4b16      	ldr	r3, [pc, #88]	@ (800161c <BSP_USART1_Init+0x64>)
 80015c4:	4a16      	ldr	r2, [pc, #88]	@ (8001620 <BSP_USART1_Init+0x68>)
 80015c6:	601a      	str	r2, [r3, #0]

  if(USART1InitCounter++ == 0)
 80015c8:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <BSP_USART1_Init+0x6c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	4915      	ldr	r1, [pc, #84]	@ (8001624 <BSP_USART1_Init+0x6c>)
 80015d0:	600a      	str	r2, [r1, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d11d      	bne.n	8001612 <BSP_USART1_Init+0x5a>
  {
    if (HAL_UART_GetState(&huart1) == HAL_UART_STATE_RESET)
 80015d6:	4811      	ldr	r0, [pc, #68]	@ (800161c <BSP_USART1_Init+0x64>)
 80015d8:	f003 fdc2 	bl	8005160 <HAL_UART_GetState>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d117      	bne.n	8001612 <BSP_USART1_Init+0x5a>
    {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
      /* Init the UART Msp */
      USART1_MspInit(&huart1);
#else
      if(IsUSART1MspCbValid == 0U)
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <BSP_USART1_Init+0x70>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d107      	bne.n	80015fa <BSP_USART1_Init+0x42>
      {
        if(BSP_USART1_RegisterDefaultMspCallbacks() != BSP_ERROR_NONE)
 80015ea:	f000 f81f 	bl	800162c <BSP_USART1_RegisterDefaultMspCallbacks>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d002      	beq.n	80015fa <BSP_USART1_Init+0x42>
        {
          return BSP_ERROR_MSP_FAILURE;
 80015f4:	f06f 0309 	mvn.w	r3, #9
 80015f8:	e00c      	b.n	8001614 <BSP_USART1_Init+0x5c>
        }
      }
#endif
      if(ret == BSP_ERROR_NONE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d108      	bne.n	8001612 <BSP_USART1_Init+0x5a>
      {
        /* Init the UART */
        if (MX_USART1_UART_Init(&huart1) != HAL_OK)
 8001600:	4806      	ldr	r0, [pc, #24]	@ (800161c <BSP_USART1_Init+0x64>)
 8001602:	f000 f849 	bl	8001698 <MX_USART1_UART_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <BSP_USART1_Init+0x5a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800160c:	f06f 0307 	mvn.w	r3, #7
 8001610:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001612:	687b      	ldr	r3, [r7, #4]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200008e4 	.word	0x200008e4
 8001620:	40013800 	.word	0x40013800
 8001624:	200009a0 	.word	0x200009a0
 8001628:	2000099c 	.word	0x2000099c

0800162c <BSP_USART1_RegisterDefaultMspCallbacks>:
/**
  * @brief Register Default BSP USART1 Bus Msp Callbacks
  * @retval BSP status
  */
int32_t BSP_USART1_RegisterDefaultMspCallbacks (void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0

  __HAL_UART_RESET_HANDLE_STATE(&huart1);
 8001630:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <BSP_USART1_RegisterDefaultMspCallbacks+0x5c>)
 8001632:	2200      	movs	r2, #0
 8001634:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001636:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <BSP_USART1_RegisterDefaultMspCallbacks+0x5c>)
 8001638:	2200      	movs	r2, #0
 800163a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800163e:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <BSP_USART1_RegisterDefaultMspCallbacks+0x5c>)
 8001640:	2200      	movs	r2, #0
 8001642:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <BSP_USART1_RegisterDefaultMspCallbacks+0x5c>)
 8001648:	2200      	movs	r2, #0
 800164a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* Register MspInit Callback */
  if (HAL_UART_RegisterCallback(&huart1, HAL_UART_MSPINIT_CB_ID, USART1_MspInit)  != HAL_OK)
 800164e:	4a0f      	ldr	r2, [pc, #60]	@ (800168c <BSP_USART1_RegisterDefaultMspCallbacks+0x60>)
 8001650:	210b      	movs	r1, #11
 8001652:	480d      	ldr	r0, [pc, #52]	@ (8001688 <BSP_USART1_RegisterDefaultMspCallbacks+0x5c>)
 8001654:	f003 f834 	bl	80046c0 <HAL_UART_RegisterCallback>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d002      	beq.n	8001664 <BSP_USART1_RegisterDefaultMspCallbacks+0x38>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 800165e:	f06f 0303 	mvn.w	r3, #3
 8001662:	e00e      	b.n	8001682 <BSP_USART1_RegisterDefaultMspCallbacks+0x56>
  }

  /* Register MspDeInit Callback */
  if (HAL_UART_RegisterCallback(&huart1, HAL_UART_MSPDEINIT_CB_ID, USART1_MspDeInit) != HAL_OK)
 8001664:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <BSP_USART1_RegisterDefaultMspCallbacks+0x64>)
 8001666:	210c      	movs	r1, #12
 8001668:	4807      	ldr	r0, [pc, #28]	@ (8001688 <BSP_USART1_RegisterDefaultMspCallbacks+0x5c>)
 800166a:	f003 f829 	bl	80046c0 <HAL_UART_RegisterCallback>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <BSP_USART1_RegisterDefaultMspCallbacks+0x4e>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8001674:	f06f 0303 	mvn.w	r3, #3
 8001678:	e003      	b.n	8001682 <BSP_USART1_RegisterDefaultMspCallbacks+0x56>
  }
  IsUSART1MspCbValid = 1;
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <BSP_USART1_RegisterDefaultMspCallbacks+0x68>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200008e4 	.word	0x200008e4
 800168c:	08001701 	.word	0x08001701
 8001690:	080017bd 	.word	0x080017bd
 8001694:	2000099c 	.word	0x2000099c

08001698 <MX_USART1_UART_Init>:
}

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a15      	ldr	r2, [pc, #84]	@ (80016fc <MX_USART1_UART_Init+0x64>)
 80016a8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016b0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	220c      	movs	r2, #12
 80016c8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f002 ff8e 	bl	8004604 <HAL_UART_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_USART1_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40013800 	.word	0x40013800

08001700 <USART1_MspInit>:

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b09e      	sub	sp, #120	@ 0x78
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	2254      	movs	r2, #84	@ 0x54
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f005 fb81 	bl	8006e18 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001716:	2301      	movs	r3, #1
 8001718:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800171a:	2300      	movs	r3, #0
 800171c:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800171e:	f107 0310 	add.w	r3, r7, #16
 8001722:	4618      	mov	r0, r3
 8001724:	f002 fc76 	bl	8004014 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001728:	4b23      	ldr	r3, [pc, #140]	@ (80017b8 <USART1_MspInit+0xb8>)
 800172a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172c:	4a22      	ldr	r2, [pc, #136]	@ (80017b8 <USART1_MspInit+0xb8>)
 800172e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001732:	6613      	str	r3, [r2, #96]	@ 0x60
 8001734:	4b20      	ldr	r3, [pc, #128]	@ (80017b8 <USART1_MspInit+0xb8>)
 8001736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001738:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001740:	4b1d      	ldr	r3, [pc, #116]	@ (80017b8 <USART1_MspInit+0xb8>)
 8001742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001744:	4a1c      	ldr	r2, [pc, #112]	@ (80017b8 <USART1_MspInit+0xb8>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174c:	4b1a      	ldr	r3, [pc, #104]	@ (80017b8 <USART1_MspInit+0xb8>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8001758:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800175c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 800176a:	2307      	movs	r3, #7
 800176c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 800176e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001772:	4619      	mov	r1, r3
 8001774:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001778:	f001 fb22 	bl	8002dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 800177c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001780:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 800178e:	2307      	movs	r3, #7
 8001790:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8001792:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001796:	4619      	mov	r1, r3
 8001798:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800179c:	f001 fb10 	bl	8002dc0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	2025      	movs	r0, #37	@ 0x25
 80017a6:	f001 fa48 	bl	8002c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017aa:	2025      	movs	r0, #37	@ 0x25
 80017ac:	f001 fa61 	bl	8002c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 80017b0:	bf00      	nop
 80017b2:	3778      	adds	r7, #120	@ 0x78
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021000 	.word	0x40021000

080017bc <USART1_MspDeInit>:

static void USART1_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80017c4:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <USART1_MspDeInit+0x3c>)
 80017c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c8:	4a0b      	ldr	r2, [pc, #44]	@ (80017f8 <USART1_MspDeInit+0x3c>)
 80017ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80017ce:	6613      	str	r3, [r2, #96]	@ 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(BUS_USART1_TX_GPIO_PORT, BUS_USART1_TX_GPIO_PIN);
 80017d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d8:	f001 fc5c 	bl	8003094 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_USART1_RX_GPIO_PORT, BUS_USART1_RX_GPIO_PIN);
 80017dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017e4:	f001 fc56 	bl	8003094 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80017e8:	2025      	movs	r0, #37	@ 0x25
 80017ea:	f001 fa50 	bl	8002c8e <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000

080017fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return 1;
 8001800:	2301      	movs	r3, #1
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_kill>:

int _kill(int pid, int sig)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001816:	f005 fb81 	bl	8006f1c <__errno>
 800181a:	4603      	mov	r3, r0
 800181c:	2216      	movs	r2, #22
 800181e:	601a      	str	r2, [r3, #0]
  return -1;
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <_exit>:

void _exit (int status)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001834:	f04f 31ff 	mov.w	r1, #4294967295
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ffe7 	bl	800180c <_kill>
  while (1) {}    /* Make sure we hang here */
 800183e:	bf00      	nop
 8001840:	e7fd      	b.n	800183e <_exit+0x12>

08001842 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e00a      	b.n	800186a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001854:	f7ff fbc2 	bl	8000fdc <__io_getchar>
 8001858:	4601      	mov	r1, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	60ba      	str	r2, [r7, #8]
 8001860:	b2ca      	uxtb	r2, r1
 8001862:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	429a      	cmp	r2, r3
 8001870:	dbf0      	blt.n	8001854 <_read+0x12>
  }

  return len;
 8001872:	687b      	ldr	r3, [r7, #4]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	e009      	b.n	80018a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	60ba      	str	r2, [r7, #8]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fb88 	bl	8000fac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3301      	adds	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	dbf1      	blt.n	800188e <_write+0x12>
  }
  return len;
 80018aa:	687b      	ldr	r3, [r7, #4]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_close>:

int _close(int file)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018dc:	605a      	str	r2, [r3, #4]
  return 0;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_isatty>:

int _isatty(int file)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018f4:	2301      	movs	r3, #1
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001902:	b480      	push	{r7}
 8001904:	b085      	sub	sp, #20
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001924:	4a14      	ldr	r2, [pc, #80]	@ (8001978 <_sbrk+0x5c>)
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <_sbrk+0x60>)
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001930:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001938:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <_sbrk+0x64>)
 800193a:	4a12      	ldr	r2, [pc, #72]	@ (8001984 <_sbrk+0x68>)
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193e:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	429a      	cmp	r2, r3
 800194a:	d207      	bcs.n	800195c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800194c:	f005 fae6 	bl	8006f1c <__errno>
 8001950:	4603      	mov	r3, r0
 8001952:	220c      	movs	r2, #12
 8001954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	e009      	b.n	8001970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800195c:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001962:	4b07      	ldr	r3, [pc, #28]	@ (8001980 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	4a05      	ldr	r2, [pc, #20]	@ (8001980 <_sbrk+0x64>)
 800196c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20010000 	.word	0x20010000
 800197c:	00000400 	.word	0x00000400
 8001980:	200009a4 	.word	0x200009a4
 8001984:	20001510 	.word	0x20001510

08001988 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <SystemInit+0x20>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001992:	4a05      	ldr	r2, [pc, #20]	@ (80019a8 <SystemInit+0x20>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b0:	f7ff ffea 	bl	8001988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b4:	480c      	ldr	r0, [pc, #48]	@ (80019e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80019b6:	490d      	ldr	r1, [pc, #52]	@ (80019ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b8:	4a0d      	ldr	r2, [pc, #52]	@ (80019f0 <LoopForever+0xe>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019cc:	4c0a      	ldr	r4, [pc, #40]	@ (80019f8 <LoopForever+0x16>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019da:	f005 faa5 	bl	8006f28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019de:	f7ff fb55 	bl	800108c <main>

080019e2 <LoopForever>:

LoopForever:
    b LoopForever
 80019e2:	e7fe      	b.n	80019e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ec:	20000700 	.word	0x20000700
  ldr r2, =_sidata
 80019f0:	0800d690 	.word	0x0800d690
  ldr r2, =_sbss
 80019f4:	20000700 	.word	0x20000700
  ldr r4, =_ebss
 80019f8:	2000150c 	.word	0x2000150c

080019fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <ADC1_IRQHandler>
	...

08001a00 <da16k_at_get_response_line>:
   DA16K_TIMEOUT - The specified timeout was reached before another character could be fetched. There may be response data in the buffer.

   The function will fetch at most buf_size - 1 characters and the retreived data is guaranteed to be null-terminated, even in case of errors.

   Other errors should not occur in normal operation. */
static da16k_err_t da16k_at_get_response_line(char *buf, size_t buf_size, uint32_t timeout_ms) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
    char       *write_ptr   = buf;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	61fb      	str	r3, [r7, #28]
    char       *upper_bound = buf + buf_size - 1;
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	4413      	add	r3, r2
 8001a18:	617b      	str	r3, [r7, #20]
    char        last_char   = 0x00;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	76fb      	strb	r3, [r7, #27]
    da16k_err_t ret         = DA16K_SUCCESS;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	74fb      	strb	r3, [r7, #19]

    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, buf);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d106      	bne.n	8001a36 <da16k_at_get_response_line+0x36>
 8001a28:	2220      	movs	r2, #32
 8001a2a:	491f      	ldr	r1, [pc, #124]	@ (8001aa8 <da16k_at_get_response_line+0xa8>)
 8001a2c:	481f      	ldr	r0, [pc, #124]	@ (8001aac <da16k_at_get_response_line+0xac>)
 8001a2e:	f005 f8a9 	bl	8006b84 <printf>
 8001a32:	230b      	movs	r3, #11
 8001a34:	e034      	b.n	8001aa0 <da16k_at_get_response_line+0xa0>

    if (buf_size == 0) {
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <da16k_at_get_response_line+0x40>
        return DA16K_INVALID_PARAMETER;
 8001a3c:	230b      	movs	r3, #11
 8001a3e:	e02f      	b.n	8001aa0 <da16k_at_get_response_line+0xa0>
    }

    memset(buf, 0, buf_size);
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	2100      	movs	r1, #0
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f005 f9e7 	bl	8006e18 <memset>

    while (true) {
        /* Buffer is full, return & inform */

        if (write_ptr >= upper_bound) {
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d301      	bcc.n	8001a56 <da16k_at_get_response_line+0x56>
            return DA16K_AT_RESPONSE_TOO_LONG;
 8001a52:	2307      	movs	r3, #7
 8001a54:	e024      	b.n	8001aa0 <da16k_at_get_response_line+0xa0>
        }

        /* Get next uart char */
        ret = da16k_uart_get_char(write_ptr, timeout_ms);
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	69f8      	ldr	r0, [r7, #28]
 8001a5a:	f004 fcb7 	bl	80063cc <da16k_uart_get_char>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	74fb      	strb	r3, [r7, #19]

        if ((last_char == '\r') && (*write_ptr == '\n')) {
 8001a62:	7efb      	ldrb	r3, [r7, #27]
 8001a64:	2b0d      	cmp	r3, #13
 8001a66:	d10f      	bne.n	8001a88 <da16k_at_get_response_line+0x88>
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b0a      	cmp	r3, #10
 8001a6e:	d10b      	bne.n	8001a88 <da16k_at_get_response_line+0x88>
            /* We received a full line ended by \r\n */
            write_ptr--;
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	61fb      	str	r3, [r7, #28]
            write_ptr[0] = 0x00;    /* Replace \r */
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
            write_ptr[1] = 0x00;    /* Replace \n */
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
            return DA16K_SUCCESS;
 8001a84:	2300      	movs	r3, #0
 8001a86:	e00b      	b.n	8001aa0 <da16k_at_get_response_line+0xa0>
        }

        /* Error */

        if (ret != DA16K_SUCCESS) {
 8001a88:	7cfb      	ldrb	r3, [r7, #19]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <da16k_at_get_response_line+0x92>
            return ret;
 8001a8e:	7cfb      	ldrb	r3, [r7, #19]
 8001a90:	e006      	b.n	8001aa0 <da16k_at_get_response_line+0xa0>
        }

        last_char = *write_ptr;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	76fb      	strb	r3, [r7, #27]
        write_ptr++;
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	61fb      	str	r3, [r7, #28]
        if (write_ptr >= upper_bound) {
 8001a9e:	e7d4      	b.n	8001a4a <da16k_at_get_response_line+0x4a>
    }

    return ret;
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3720      	adds	r7, #32
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	0800d098 	.word	0x0800d098
 8001aac:	0800c75c 	.word	0x0800c75c

08001ab0 <da16k_at_get_start_of_response_data>:

/*  Gets a pointer to the start of AT response data following the colon character. 
    E.g. for ERROR:<x> or +SOMECOMMAND:<x>) it would return a pointer to <x> given the appropriate start_of_response character, if ERROR or +SOMECOMMAND are given in start_of_response.
    Returns NULL if not found or out of bounds.
*/
static char *da16k_at_get_start_of_response_data(char *buf, size_t buf_size, const char *start_of_response) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
    char *ret           = NULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
    char *upper_bound   = buf + buf_size;
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]

    DA16K_RETURN_ON_NULL(NULL, buf);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d106      	bne.n	8001adc <da16k_at_get_start_of_response_data+0x2c>
 8001ace:	224f      	movs	r2, #79	@ 0x4f
 8001ad0:	4918      	ldr	r1, [pc, #96]	@ (8001b34 <da16k_at_get_start_of_response_data+0x84>)
 8001ad2:	4819      	ldr	r0, [pc, #100]	@ (8001b38 <da16k_at_get_start_of_response_data+0x88>)
 8001ad4:	f005 f856 	bl	8006b84 <printf>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e027      	b.n	8001b2c <da16k_at_get_start_of_response_data+0x7c>
    DA16K_RETURN_ON_NULL(NULL, start_of_response);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d106      	bne.n	8001af0 <da16k_at_get_start_of_response_data+0x40>
 8001ae2:	2250      	movs	r2, #80	@ 0x50
 8001ae4:	4913      	ldr	r1, [pc, #76]	@ (8001b34 <da16k_at_get_start_of_response_data+0x84>)
 8001ae6:	4815      	ldr	r0, [pc, #84]	@ (8001b3c <da16k_at_get_start_of_response_data+0x8c>)
 8001ae8:	f005 f84c 	bl	8006b84 <printf>
 8001aec:	2300      	movs	r3, #0
 8001aee:	e01d      	b.n	8001b2c <da16k_at_get_start_of_response_data+0x7c>

    ret = strstr(buf, start_of_response);
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f005 f9a5 	bl	8006e42 <strstr>
 8001af8:	6178      	str	r0, [r7, #20]

    if (ret == NULL) {
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <da16k_at_get_start_of_response_data+0x54>
        return NULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	e013      	b.n	8001b2c <da16k_at_get_start_of_response_data+0x7c>
    }

    ret += strlen(start_of_response);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7fe fb6d 	bl	80001e4 <strlen>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	4413      	add	r3, r2
 8001b10:	617b      	str	r3, [r7, #20]
    
    /* Final check: colon character & bounds check */
    if (((ret + 1) >= upper_bound) || (*ret != ':')) {
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3301      	adds	r3, #1
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d903      	bls.n	8001b24 <da16k_at_get_start_of_response_data+0x74>
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b3a      	cmp	r3, #58	@ 0x3a
 8001b22:	d001      	beq.n	8001b28 <da16k_at_get_start_of_response_data+0x78>
        return NULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	e001      	b.n	8001b2c <da16k_at_get_start_of_response_data+0x7c>
    }

    return ret + 1;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3301      	adds	r3, #1
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	0800d0b4 	.word	0x0800d0b4
 8001b38:	0800c75c 	.word	0x0800c75c
 8001b3c:	0800c788 	.word	0x0800c788

08001b40 <da16k_at_send_formatted_valist>:

/*  analogous to vprintf, this is like da16k_at_send_formatted_msg but takes va_list as parameter to reduce
    code duplication for other funcs that allow formatted messages to be sent */
static da16k_err_t da16k_at_send_formatted_valist(const char *format, va_list args) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
    int at_msg_length;
    
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, format);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d106      	bne.n	8001b5e <da16k_at_send_formatted_valist+0x1e>
 8001b50:	2267      	movs	r2, #103	@ 0x67
 8001b52:	491c      	ldr	r1, [pc, #112]	@ (8001bc4 <da16k_at_send_formatted_valist+0x84>)
 8001b54:	481c      	ldr	r0, [pc, #112]	@ (8001bc8 <da16k_at_send_formatted_valist+0x88>)
 8001b56:	f005 f815 	bl	8006b84 <printf>
 8001b5a:	230b      	movs	r3, #11
 8001b5c:	e02e      	b.n	8001bbc <da16k_at_send_formatted_valist+0x7c>

    at_msg_length = vsnprintf(da16k_at_send_buffer, sizeof(da16k_at_send_buffer), format, args);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b66:	4819      	ldr	r0, [pc, #100]	@ (8001bcc <da16k_at_send_formatted_valist+0x8c>)
 8001b68:	f005 f92e 	bl	8006dc8 <vsnprintf>
 8001b6c:	60f8      	str	r0, [r7, #12]

    if (at_msg_length < 0) {
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	da01      	bge.n	8001b78 <da16k_at_send_formatted_valist+0x38>
        return DA16K_AT_INVALID_MSG;
 8001b74:	2305      	movs	r3, #5
 8001b76:	e021      	b.n	8001bbc <da16k_at_send_formatted_valist+0x7c>
    }

    /* + 2 for \r\n terminator*/
    if ((size_t) (at_msg_length + 2) >= sizeof(da16k_at_send_buffer)) { 
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	2bff      	cmp	r3, #255	@ 0xff
 8001b7e:	d901      	bls.n	8001b84 <da16k_at_send_formatted_valist+0x44>
        return DA16K_AT_MESSAGE_TOO_LONG;
 8001b80:	2306      	movs	r3, #6
 8001b82:	e01b      	b.n	8001bbc <da16k_at_send_formatted_valist+0x7c>
    }

    /* Add \r\n to terminate the message */
    at_msg_length += sprintf(&da16k_at_send_buffer[at_msg_length], "\r\n");
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4a11      	ldr	r2, [pc, #68]	@ (8001bcc <da16k_at_send_formatted_valist+0x8c>)
 8001b88:	4413      	add	r3, r2
 8001b8a:	4911      	ldr	r1, [pc, #68]	@ (8001bd0 <da16k_at_send_formatted_valist+0x90>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f005 f88d 	bl	8006cac <sprintf>
 8001b92:	4602      	mov	r2, r0
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4413      	add	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]

    DA16K_DEBUG("TX buffer: '%s'", da16k_at_send_buffer);
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bcc <da16k_at_send_formatted_valist+0x8c>)
 8001b9c:	2277      	movs	r2, #119	@ 0x77
 8001b9e:	4909      	ldr	r1, [pc, #36]	@ (8001bc4 <da16k_at_send_formatted_valist+0x84>)
 8001ba0:	480c      	ldr	r0, [pc, #48]	@ (8001bd4 <da16k_at_send_formatted_valist+0x94>)
 8001ba2:	f004 ffef 	bl	8006b84 <printf>

    return da16k_uart_send(da16k_at_send_buffer, (size_t) at_msg_length) ? DA16K_SUCCESS : DA16K_UART_ERROR;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4808      	ldr	r0, [pc, #32]	@ (8001bcc <da16k_at_send_formatted_valist+0x8c>)
 8001bac:	f004 fbd0 	bl	8006350 <da16k_uart_send>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <da16k_at_send_formatted_valist+0x7a>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e000      	b.n	8001bbc <da16k_at_send_formatted_valist+0x7c>
 8001bba:	2302      	movs	r3, #2
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	0800d0d8 	.word	0x0800d0d8
 8001bc8:	0800c7c0 	.word	0x0800c7c0
 8001bcc:	200009a8 	.word	0x200009a8
 8001bd0:	0800c7f0 	.word	0x0800c7f0
 8001bd4:	0800c7f4 	.word	0x0800c7f4

08001bd8 <da16k_at_is_line_only_whitespace>:

/* checks if any non-space or valid ascii characters are in a response string */
static bool da16k_at_is_line_only_whitespace(const char *str) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
    DA16K_RETURN_ON_NULL(true, str);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <da16k_at_is_line_only_whitespace+0x1c>
 8001be6:	227e      	movs	r2, #126	@ 0x7e
 8001be8:	490d      	ldr	r1, [pc, #52]	@ (8001c20 <da16k_at_is_line_only_whitespace+0x48>)
 8001bea:	480e      	ldr	r0, [pc, #56]	@ (8001c24 <da16k_at_is_line_only_whitespace+0x4c>)
 8001bec:	f004 ffca 	bl	8006b84 <printf>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e010      	b.n	8001c16 <da16k_at_is_line_only_whitespace+0x3e>

    if (strlen(str) == 0) {
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d107      	bne.n	8001c0c <da16k_at_is_line_only_whitespace+0x34>
        return true;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e00a      	b.n	8001c16 <da16k_at_is_line_only_whitespace+0x3e>
    }

    while (*str != 0x00) {
        if (*str > ' ') { /* everything above the space character makes the string valid. */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	d901      	bls.n	8001c0c <da16k_at_is_line_only_whitespace+0x34>
            return false;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e004      	b.n	8001c16 <da16k_at_is_line_only_whitespace+0x3e>
    while (*str != 0x00) {
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f5      	bne.n	8001c00 <da16k_at_is_line_only_whitespace+0x28>
        }
    }

    return true;
 8001c14:	2301      	movs	r3, #1
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	0800d0f8 	.word	0x0800d0f8
 8001c24:	0800c818 	.word	0x0800c818

08001c28 <da16k_at_receive_and_validate_response>:

da16k_err_t da16k_at_receive_and_validate_response(bool error_possible, const char *expected_response, uint32_t timeout_ms) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	73fb      	strb	r3, [r7, #15]
    bool error_received             = false;
 8001c36:	2300      	movs	r3, #0
 8001c38:	77fb      	strb	r3, [r7, #31]
    bool ok_received                = false;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	77bb      	strb	r3, [r7, #30]
    bool response_received          = false;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	777b      	strb	r3, [r7, #29]

    static const size_t buf_size    = sizeof(da16k_at_receive_buffer);

    char *upper_bound               = da16k_at_receive_buffer + buf_size;
 8001c42:	4b52      	ldr	r3, [pc, #328]	@ (8001d8c <da16k_at_receive_and_validate_response+0x164>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a52      	ldr	r2, [pc, #328]	@ (8001d90 <da16k_at_receive_and_validate_response+0x168>)
 8001c48:	4413      	add	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
    char *response_data_start       = NULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61bb      	str	r3, [r7, #24]

    da16k_err_t ret                 = DA16K_SUCCESS;
 8001c50:	2300      	movs	r3, #0
 8001c52:	75fb      	strb	r3, [r7, #23]
    
    memset(da16k_at_saved_response, 0, buf_size);
 8001c54:	4b4d      	ldr	r3, [pc, #308]	@ (8001d8c <da16k_at_receive_and_validate_response+0x164>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	484d      	ldr	r0, [pc, #308]	@ (8001d94 <da16k_at_receive_and_validate_response+0x16c>)
 8001c5e:	f005 f8db 	bl	8006e18 <memset>

    while (ret == DA16K_SUCCESS) {
 8001c62:	e076      	b.n	8001d52 <da16k_at_receive_and_validate_response+0x12a>
        ret = da16k_at_get_response_line(da16k_at_receive_buffer, buf_size, timeout_ms);
 8001c64:	4b49      	ldr	r3, [pc, #292]	@ (8001d8c <da16k_at_receive_and_validate_response+0x164>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4848      	ldr	r0, [pc, #288]	@ (8001d90 <da16k_at_receive_and_validate_response+0x168>)
 8001c6e:	f7ff fec7 	bl	8001a00 <da16k_at_get_response_line>
 8001c72:	4603      	mov	r3, r0
 8001c74:	75fb      	strb	r3, [r7, #23]

        if (ret == DA16K_AT_RESPONSE_TOO_LONG) {
 8001c76:	7dfb      	ldrb	r3, [r7, #23]
 8001c78:	2b07      	cmp	r3, #7
 8001c7a:	d105      	bne.n	8001c88 <da16k_at_receive_and_validate_response+0x60>
            DA16K_WARN("WARNING! RX buffer overflow!\r\nRX Buffer contents:\r\n%s\r\n", da16k_at_receive_buffer);
 8001c7c:	4b44      	ldr	r3, [pc, #272]	@ (8001d90 <da16k_at_receive_and_validate_response+0x168>)
 8001c7e:	229f      	movs	r2, #159	@ 0x9f
 8001c80:	4945      	ldr	r1, [pc, #276]	@ (8001d98 <da16k_at_receive_and_validate_response+0x170>)
 8001c82:	4846      	ldr	r0, [pc, #280]	@ (8001d9c <da16k_at_receive_and_validate_response+0x174>)
 8001c84:	f004 ff7e 	bl	8006b84 <printf>
        }

        /* Ignore lines that don't have anything parseable (just to clean up the output a little) */
        if (da16k_at_is_line_only_whitespace(da16k_at_receive_buffer)) {
 8001c88:	4841      	ldr	r0, [pc, #260]	@ (8001d90 <da16k_at_receive_and_validate_response+0x168>)
 8001c8a:	f7ff ffa5 	bl	8001bd8 <da16k_at_is_line_only_whitespace>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d15d      	bne.n	8001d50 <da16k_at_receive_and_validate_response+0x128>
            continue;
        }

        DA16K_DEBUG("Respone line received: %s\r\n", da16k_at_receive_buffer);
 8001c94:	4b3e      	ldr	r3, [pc, #248]	@ (8001d90 <da16k_at_receive_and_validate_response+0x168>)
 8001c96:	22a7      	movs	r2, #167	@ 0xa7
 8001c98:	493f      	ldr	r1, [pc, #252]	@ (8001d98 <da16k_at_receive_and_validate_response+0x170>)
 8001c9a:	4841      	ldr	r0, [pc, #260]	@ (8001da0 <da16k_at_receive_and_validate_response+0x178>)
 8001c9c:	f004 ff72 	bl	8006b84 <printf>

        /* Look for proper response, if one is expected */
        if (!response_received && expected_response != NULL) {
 8001ca0:	7f7b      	ldrb	r3, [r7, #29]
 8001ca2:	f083 0301 	eor.w	r3, r3, #1
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00a      	beq.n	8001cc2 <da16k_at_receive_and_validate_response+0x9a>
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d007      	beq.n	8001cc2 <da16k_at_receive_and_validate_response+0x9a>
            response_data_start = da16k_at_get_start_of_response_data(da16k_at_receive_buffer, buf_size, expected_response);
 8001cb2:	4b36      	ldr	r3, [pc, #216]	@ (8001d8c <da16k_at_receive_and_validate_response+0x164>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4835      	ldr	r0, [pc, #212]	@ (8001d90 <da16k_at_receive_and_validate_response+0x168>)
 8001cbc:	f7ff fef8 	bl	8001ab0 <da16k_at_get_start_of_response_data>
 8001cc0:	61b8      	str	r0, [r7, #24]
        }

        /* If we can't find the expected response, but an ERROR:<x> is possible and we haven't rcv'd one yet, flag and look for the error response */
        if (error_possible && !error_received && response_data_start == NULL) {
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d015      	beq.n	8001cf4 <da16k_at_receive_and_validate_response+0xcc>
 8001cc8:	7ffb      	ldrb	r3, [r7, #31]
 8001cca:	f083 0301 	eor.w	r3, r3, #1
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00f      	beq.n	8001cf4 <da16k_at_receive_and_validate_response+0xcc>
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10c      	bne.n	8001cf4 <da16k_at_receive_and_validate_response+0xcc>
            response_data_start = da16k_at_get_start_of_response_data(da16k_at_receive_buffer, buf_size, "ERROR");
 8001cda:	4b2c      	ldr	r3, [pc, #176]	@ (8001d8c <da16k_at_receive_and_validate_response+0x164>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a31      	ldr	r2, [pc, #196]	@ (8001da4 <da16k_at_receive_and_validate_response+0x17c>)
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	482b      	ldr	r0, [pc, #172]	@ (8001d90 <da16k_at_receive_and_validate_response+0x168>)
 8001ce4:	f7ff fee4 	bl	8001ab0 <da16k_at_get_start_of_response_data>
 8001ce8:	61b8      	str	r0, [r7, #24]
            if (response_data_start != NULL) {
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <da16k_at_receive_and_validate_response+0xcc>
                error_received = true;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	77fb      	strb	r3, [r7, #31]
            }
        }

        /* Mark whether the OK\r\n part of the response was received. */
        if (strstr(da16k_at_receive_buffer, "OK") != NULL) {
 8001cf4:	492c      	ldr	r1, [pc, #176]	@ (8001da8 <da16k_at_receive_and_validate_response+0x180>)
 8001cf6:	4826      	ldr	r0, [pc, #152]	@ (8001d90 <da16k_at_receive_and_validate_response+0x168>)
 8001cf8:	f005 f8a3 	bl	8006e42 <strstr>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <da16k_at_receive_and_validate_response+0xde>
            ok_received = true;
 8001d02:	2301      	movs	r3, #1
 8001d04:	77bb      	strb	r3, [r7, #30]
        }

        /* We received a valid response / error response relevant to us */
        if (!response_received && response_data_start != NULL) {
 8001d06:	7f7b      	ldrb	r3, [r7, #29]
 8001d08:	f083 0301 	eor.w	r3, r3, #1
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00c      	beq.n	8001d2c <da16k_at_receive_and_validate_response+0x104>
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d009      	beq.n	8001d2c <da16k_at_receive_and_validate_response+0x104>
            /* Move all response data to the final response output buffer */
            memmove(da16k_at_saved_response, response_data_start, (size_t) (upper_bound - response_data_start));
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	69b9      	ldr	r1, [r7, #24]
 8001d22:	481c      	ldr	r0, [pc, #112]	@ (8001d94 <da16k_at_receive_and_validate_response+0x16c>)
 8001d24:	f005 f85e 	bl	8006de4 <memmove>
            response_received = true;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	777b      	strb	r3, [r7, #29]
        }

        /* If we have no expected response, an OK is enough, so we pretend a response was received. */
        if (ok_received && expected_response == NULL) {
 8001d2c:	7fbb      	ldrb	r3, [r7, #30]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d004      	beq.n	8001d3c <da16k_at_receive_and_validate_response+0x114>
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <da16k_at_receive_and_validate_response+0x114>
            response_received = true;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	777b      	strb	r3, [r7, #29]
        }

        /* If OK *or* ERROR and the response data (if any) is received, we break. */
        if (response_received && (error_received || ok_received)) {
 8001d3c:	7f7b      	ldrb	r3, [r7, #29]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <da16k_at_receive_and_validate_response+0x12a>
 8001d42:	7ffb      	ldrb	r3, [r7, #31]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d107      	bne.n	8001d58 <da16k_at_receive_and_validate_response+0x130>
 8001d48:	7fbb      	ldrb	r3, [r7, #30]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d104      	bne.n	8001d58 <da16k_at_receive_and_validate_response+0x130>
 8001d4e:	e000      	b.n	8001d52 <da16k_at_receive_and_validate_response+0x12a>
            continue;
 8001d50:	bf00      	nop
    while (ret == DA16K_SUCCESS) {
 8001d52:	7dfb      	ldrb	r3, [r7, #23]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d085      	beq.n	8001c64 <da16k_at_receive_and_validate_response+0x3c>
            break;
        }
    }

    if (response_received) {
 8001d58:	7f7b      	ldrb	r3, [r7, #29]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d011      	beq.n	8001d82 <da16k_at_receive_and_validate_response+0x15a>
        DA16K_PRINT("da16k_at_saved_response %s\r\n", da16k_at_saved_response);
 8001d5e:	490d      	ldr	r1, [pc, #52]	@ (8001d94 <da16k_at_receive_and_validate_response+0x16c>)
 8001d60:	4812      	ldr	r0, [pc, #72]	@ (8001dac <da16k_at_receive_and_validate_response+0x184>)
 8001d62:	f004 ff0f 	bl	8006b84 <printf>
        if (error_received) {
 8001d66:	7ffb      	ldrb	r3, [r7, #31]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <da16k_at_receive_and_validate_response+0x14a>
            ret = DA16K_AT_ERROR_CODE;  /* So caller can handle this case properly */
 8001d6c:	2308      	movs	r3, #8
 8001d6e:	75fb      	strb	r3, [r7, #23]
 8001d70:	e007      	b.n	8001d82 <da16k_at_receive_and_validate_response+0x15a>
        } else if (ok_received) {
 8001d72:	7fbb      	ldrb	r3, [r7, #30]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <da16k_at_receive_and_validate_response+0x156>
            ret = DA16K_SUCCESS;        /* Everything is OK */
 8001d78:	2300      	movs	r3, #0
 8001d7a:	75fb      	strb	r3, [r7, #23]
 8001d7c:	e001      	b.n	8001d82 <da16k_at_receive_and_validate_response+0x15a>
        } else {
            ret = DA16K_AT_NO_OK;       /* "OK\r\n" was missing */
 8001d7e:	2309      	movs	r3, #9
 8001d80:	75fb      	strb	r3, [r7, #23]
        }
    }
    
    /* In case of no response when expected, return last error code */
    return ret;
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3720      	adds	r7, #32
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	0800d11c 	.word	0x0800d11c
 8001d90:	20000aa8 	.word	0x20000aa8
 8001d94:	20000ca8 	.word	0x20000ca8
 8001d98:	0800d120 	.word	0x0800d120
 8001d9c:	0800c844 	.word	0x0800c844
 8001da0:	0800c890 	.word	0x0800c890
 8001da4:	0800c8c0 	.word	0x0800c8c0
 8001da8:	0800c8c8 	.word	0x0800c8c8
 8001dac:	0800c8cc 	.word	0x0800c8cc

08001db0 <da16k_at_send_formatted_msg>:


da16k_err_t da16k_at_send_formatted_msg(const char *format, ...) {
 8001db0:	b40f      	push	{r0, r1, r2, r3}
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
    va_list args;
    da16k_err_t ret;

    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, format);
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <da16k_at_send_formatted_msg+0x1c>
 8001dbe:	22e1      	movs	r2, #225	@ 0xe1
 8001dc0:	490b      	ldr	r1, [pc, #44]	@ (8001df0 <da16k_at_send_formatted_msg+0x40>)
 8001dc2:	480c      	ldr	r0, [pc, #48]	@ (8001df4 <da16k_at_send_formatted_msg+0x44>)
 8001dc4:	f004 fede 	bl	8006b84 <printf>
 8001dc8:	230b      	movs	r3, #11
 8001dca:	e009      	b.n	8001de0 <da16k_at_send_formatted_msg+0x30>

    va_start(args, format);
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	603b      	str	r3, [r7, #0]
    ret = da16k_at_send_formatted_valist(format, args);
 8001dd2:	6839      	ldr	r1, [r7, #0]
 8001dd4:	6938      	ldr	r0, [r7, #16]
 8001dd6:	f7ff feb3 	bl	8001b40 <da16k_at_send_formatted_valist>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
    va_end(args);

    return ret;
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 }
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001dea:	b004      	add	sp, #16
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	0800d148 	.word	0x0800d148
 8001df4:	0800c7c0 	.word	0x0800c7c0

08001df8 <da16k_at_send_formatted_and_check_success>:

da16k_err_t da16k_at_send_formatted_and_check_success(uint32_t timeout_ms, const char *expected_response, const char *format, ...) {
 8001df8:	b40c      	push	{r2, r3}
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b084      	sub	sp, #16
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]
    da16k_err_t ret = DA16K_SUCCESS;
 8001e04:	2300      	movs	r3, #0
 8001e06:	73fb      	strb	r3, [r7, #15]
    va_list fmt_args;

    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, format);
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d106      	bne.n	8001e1c <da16k_at_send_formatted_and_check_success+0x24>
 8001e0e:	22ee      	movs	r2, #238	@ 0xee
 8001e10:	491e      	ldr	r1, [pc, #120]	@ (8001e8c <da16k_at_send_formatted_and_check_success+0x94>)
 8001e12:	481f      	ldr	r0, [pc, #124]	@ (8001e90 <da16k_at_send_formatted_and_check_success+0x98>)
 8001e14:	f004 feb6 	bl	8006b84 <printf>
 8001e18:	230b      	movs	r3, #11
 8001e1a:	e030      	b.n	8001e7e <da16k_at_send_formatted_and_check_success+0x86>

    va_start(fmt_args, format);
 8001e1c:	f107 031c 	add.w	r3, r7, #28
 8001e20:	60bb      	str	r3, [r7, #8]
    ret = da16k_at_send_formatted_valist(format, fmt_args);
 8001e22:	68b9      	ldr	r1, [r7, #8]
 8001e24:	69b8      	ldr	r0, [r7, #24]
 8001e26:	f7ff fe8b 	bl	8001b40 <da16k_at_send_formatted_valist>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	73fb      	strb	r3, [r7, #15]
    va_end(fmt_args);

    if (ret != DA16K_SUCCESS) {
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <da16k_at_send_formatted_and_check_success+0x4c>
        DA16K_ERROR("Error sending message: %d\r\n", (int) ret);
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	22f5      	movs	r2, #245	@ 0xf5
 8001e38:	4914      	ldr	r1, [pc, #80]	@ (8001e8c <da16k_at_send_formatted_and_check_success+0x94>)
 8001e3a:	4816      	ldr	r0, [pc, #88]	@ (8001e94 <da16k_at_send_formatted_and_check_success+0x9c>)
 8001e3c:	f004 fea2 	bl	8006b84 <printf>
        return ret;
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	e01c      	b.n	8001e7e <da16k_at_send_formatted_and_check_success+0x86>
    }

    ret = da16k_at_receive_and_validate_response(false, expected_response, timeout_ms);
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6839      	ldr	r1, [r7, #0]
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f7ff feed 	bl	8001c28 <da16k_at_receive_and_validate_response>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	73fb      	strb	r3, [r7, #15]

    /* Only check the return code if we have an expected response. */

    if (expected_response) {
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d011      	beq.n	8001e7c <da16k_at_send_formatted_and_check_success+0x84>
        if (ret == DA16K_SUCCESS && da16k_at_get_response_code() != 1) {
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10e      	bne.n	8001e7c <da16k_at_send_formatted_and_check_success+0x84>
 8001e5e:	f000 f895 	bl	8001f8c <da16k_at_get_response_code>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d009      	beq.n	8001e7c <da16k_at_send_formatted_and_check_success+0x84>
            DA16K_ERROR("AT command not successful. Return code: %d\r\n", da16k_at_get_response_code());
 8001e68:	f000 f890 	bl	8001f8c <da16k_at_get_response_code>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	22ff      	movs	r2, #255	@ 0xff
 8001e70:	4906      	ldr	r1, [pc, #24]	@ (8001e8c <da16k_at_send_formatted_and_check_success+0x94>)
 8001e72:	4809      	ldr	r0, [pc, #36]	@ (8001e98 <da16k_at_send_formatted_and_check_success+0xa0>)
 8001e74:	f004 fe86 	bl	8006b84 <printf>
            ret = DA16K_AT_FAIL;
 8001e78:	2304      	movs	r3, #4
 8001e7a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return ret;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e88:	b002      	add	sp, #8
 8001e8a:	4770      	bx	lr
 8001e8c:	0800d164 	.word	0x0800d164
 8001e90:	0800c7c0 	.word	0x0800c7c0
 8001e94:	0800c8ec 	.word	0x0800c8ec
 8001e98:	0800c91c 	.word	0x0800c91c

08001e9c <da16k_at_send_certificate>:

da16k_err_t da16k_at_send_certificate(da16k_cert_type_t type, const char *cert) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	6039      	str	r1, [r7, #0]
 8001ea6:	71fb      	strb	r3, [r7, #7]
    char        command_sequence[]  = AT_ESC "C0,";
 8001ea8:	4a2f      	ldr	r2, [pc, #188]	@ (8001f68 <da16k_at_send_certificate+0xcc>)
 8001eaa:	f107 0308 	add.w	r3, r7, #8
 8001eae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001eb2:	6018      	str	r0, [r3, #0]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	7019      	strb	r1, [r3, #0]
    bool        tx_success          = true;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	73fb      	strb	r3, [r7, #15]

    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cert);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d107      	bne.n	8001ed2 <da16k_at_send_certificate+0x36>
 8001ec2:	f240 120b 	movw	r2, #267	@ 0x10b
 8001ec6:	4929      	ldr	r1, [pc, #164]	@ (8001f6c <da16k_at_send_certificate+0xd0>)
 8001ec8:	4829      	ldr	r0, [pc, #164]	@ (8001f70 <da16k_at_send_certificate+0xd4>)
 8001eca:	f004 fe5b 	bl	8006b84 <printf>
 8001ece:	230b      	movs	r3, #11
 8001ed0:	e046      	b.n	8001f60 <da16k_at_send_certificate+0xc4>

    /* A bit hackish, but the number after the 'C' denotes the certificate type, so we adjust it. */
    command_sequence[2] += (char) type;
 8001ed2:	7aba      	ldrb	r2, [r7, #10]
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	72bb      	strb	r3, [r7, #10]

    tx_success &= da16k_uart_send(command_sequence, strlen(command_sequence));  /* Enter Certificate Command Mode */
 8001edc:	f107 0308 	add.w	r3, r7, #8
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe f97f 	bl	80001e4 <strlen>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	f107 0308 	add.w	r3, r7, #8
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f004 fa2e 	bl	8006350 <da16k_uart_send>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	bf14      	ite	ne
 8001f00:	2301      	movne	r3, #1
 8001f02:	2300      	moveq	r3, #0
 8001f04:	73fb      	strb	r3, [r7, #15]
    tx_success &= da16k_uart_send(cert,             strlen(cert));              /* Actual certificate */
 8001f06:	6838      	ldr	r0, [r7, #0]
 8001f08:	f7fe f96c 	bl	80001e4 <strlen>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4619      	mov	r1, r3
 8001f10:	6838      	ldr	r0, [r7, #0]
 8001f12:	f004 fa1d 	bl	8006350 <da16k_uart_send>
 8001f16:	4603      	mov	r3, r0
 8001f18:	461a      	mov	r2, r3
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	bf14      	ite	ne
 8001f22:	2301      	movne	r3, #1
 8001f24:	2300      	moveq	r3, #0
 8001f26:	73fb      	strb	r3, [r7, #15]
    tx_success &= da16k_uart_send(AT_ETX,           1);                         /* End of text marker */
 8001f28:	2101      	movs	r1, #1
 8001f2a:	4812      	ldr	r0, [pc, #72]	@ (8001f74 <da16k_at_send_certificate+0xd8>)
 8001f2c:	f004 fa10 	bl	8006350 <da16k_uart_send>
 8001f30:	4603      	mov	r3, r0
 8001f32:	461a      	mov	r2, r3
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf14      	ite	ne
 8001f3c:	2301      	movne	r3, #1
 8001f3e:	2300      	moveq	r3, #0
 8001f40:	73fb      	strb	r3, [r7, #15]

    if (!tx_success) {
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	f083 0301 	eor.w	r3, r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <da16k_at_send_certificate+0xb6>
        return DA16K_UART_ERROR;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e006      	b.n	8001f60 <da16k_at_send_certificate+0xc4>
    }

    return da16k_at_receive_and_validate_response(false, NULL, DA16K_UART_TIMEOUT_MS);
 8001f52:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001f56:	2100      	movs	r1, #0
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f7ff fe65 	bl	8001c28 <da16k_at_receive_and_validate_response>
 8001f5e:	4603      	mov	r3, r0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	0800c98c 	.word	0x0800c98c
 8001f6c:	0800d190 	.word	0x0800d190
 8001f70:	0800c95c 	.word	0x0800c95c
 8001f74:	0800c988 	.word	0x0800c988

08001f78 <da16k_at_get_response_str>:

char *da16k_at_get_response_str(void) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
    return da16k_strdup(da16k_at_saved_response);
 8001f7c:	4802      	ldr	r0, [pc, #8]	@ (8001f88 <da16k_at_get_response_str+0x10>)
 8001f7e:	f000 fccd 	bl	800291c <da16k_strdup>
 8001f82:	4603      	mov	r3, r0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000ca8 	.word	0x20000ca8

08001f8c <da16k_at_get_response_code>:

int da16k_at_get_response_code(void) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
    /* TODO: Make this less error-prone */
    return atoi(da16k_at_saved_response);
 8001f90:	4802      	ldr	r0, [pc, #8]	@ (8001f9c <da16k_at_get_response_code+0x10>)
 8001f92:	f004 fa57 	bl	8006444 <atoi>
 8001f96:	4603      	mov	r3, r0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000ca8 	.word	0x20000ca8

08001fa0 <da16k_get_cmd>:
static char da16k_value_buffer[64] = {0};

static uint32_t s_network_timeout_ms        = DA16K_DEFAULT_IOTC_TIMEOUT_MS;
static uint32_t s_iotc_connect_timeout_ms   = DA16K_DEFAULT_IOTC_CONNECT_TIMEOUT_MS;

da16k_err_t da16k_get_cmd(da16k_cmd_t *cmd) {
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b08d      	sub	sp, #52	@ 0x34
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
    const char  expected_response[] = "+NWICGETCMD";
 8001fa8:	4a50      	ldr	r2, [pc, #320]	@ (80020ec <da16k_get_cmd+0x14c>)
 8001faa:	f107 031c 	add.w	r3, r7, #28
 8001fae:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    const char  at_message[]        = "AT+NWICGETCMD";
 8001fb4:	4b4e      	ldr	r3, [pc, #312]	@ (80020f0 <da16k_get_cmd+0x150>)
 8001fb6:	f107 040c 	add.w	r4, r7, #12
 8001fba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fbc:	c407      	stmia	r4!, {r0, r1, r2}
 8001fbe:	8023      	strh	r3, [r4, #0]
    char       *param_ptr           = NULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    da16k_err_t ret                 = DA16K_SUCCESS;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cmd);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d106      	bne.n	8001fde <da16k_get_cmd+0x3e>
 8001fd0:	2229      	movs	r2, #41	@ 0x29
 8001fd2:	4948      	ldr	r1, [pc, #288]	@ (80020f4 <da16k_get_cmd+0x154>)
 8001fd4:	4848      	ldr	r0, [pc, #288]	@ (80020f8 <da16k_get_cmd+0x158>)
 8001fd6:	f004 fdd5 	bl	8006b84 <printf>
 8001fda:	230b      	movs	r3, #11
 8001fdc:	e081      	b.n	80020e2 <da16k_get_cmd+0x142>

    ret = da16k_at_send_formatted_msg(at_message);
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fee4 	bl	8001db0 <da16k_at_send_formatted_msg>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (ret != DA16K_SUCCESS) {
 8001fee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <da16k_get_cmd+0x6a>
        DA16K_ERROR("Error sending message: %d\r\n", (int) ret);
 8001ff6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ffa:	222e      	movs	r2, #46	@ 0x2e
 8001ffc:	493d      	ldr	r1, [pc, #244]	@ (80020f4 <da16k_get_cmd+0x154>)
 8001ffe:	483f      	ldr	r0, [pc, #252]	@ (80020fc <da16k_get_cmd+0x15c>)
 8002000:	f004 fdc0 	bl	8006b84 <printf>
        return ret;
 8002004:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002008:	e06b      	b.n	80020e2 <da16k_get_cmd+0x142>
    }
    
    ret = da16k_at_receive_and_validate_response(true, expected_response, DA16K_UART_TIMEOUT_MS);
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002012:	4619      	mov	r1, r3
 8002014:	2001      	movs	r0, #1
 8002016:	f7ff fe07 	bl	8001c28 <da16k_at_receive_and_validate_response>
 800201a:	4603      	mov	r3, r0
 800201c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (ret != DA16K_SUCCESS && ret != DA16K_AT_ERROR_CODE) {
 8002020:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <da16k_get_cmd+0x96>
 8002028:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800202c:	2b08      	cmp	r3, #8
 800202e:	d002      	beq.n	8002036 <da16k_get_cmd+0x96>
        return ret;
 8002030:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002034:	e055      	b.n	80020e2 <da16k_get_cmd+0x142>
    }

    if (ret == DA16K_AT_ERROR_CODE) {
 8002036:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800203a:	2b08      	cmp	r3, #8
 800203c:	d116      	bne.n	800206c <da16k_get_cmd+0xcc>
        /* We have received an error response, which usually means there are no commands ("ERROR:7"). */

        if (da16k_at_get_response_code() == -7) {
 800203e:	f7ff ffa5 	bl	8001f8c <da16k_at_get_response_code>
 8002042:	4603      	mov	r3, r0
 8002044:	f113 0f07 	cmn.w	r3, #7
 8002048:	d106      	bne.n	8002058 <da16k_get_cmd+0xb8>
            DA16K_DEBUG("No commands available.\r\n");
 800204a:	223c      	movs	r2, #60	@ 0x3c
 800204c:	4929      	ldr	r1, [pc, #164]	@ (80020f4 <da16k_get_cmd+0x154>)
 800204e:	482c      	ldr	r0, [pc, #176]	@ (8002100 <da16k_get_cmd+0x160>)
 8002050:	f004 fd98 	bl	8006b84 <printf>
            return DA16K_NO_CMDS;
 8002054:	230a      	movs	r3, #10
 8002056:	e044      	b.n	80020e2 <da16k_get_cmd+0x142>
        } else {
            DA16K_ERROR("Bad response, error code %d\r\n", da16k_at_get_response_code());
 8002058:	f7ff ff98 	bl	8001f8c <da16k_at_get_response_code>
 800205c:	4603      	mov	r3, r0
 800205e:	223f      	movs	r2, #63	@ 0x3f
 8002060:	4924      	ldr	r1, [pc, #144]	@ (80020f4 <da16k_get_cmd+0x154>)
 8002062:	4828      	ldr	r0, [pc, #160]	@ (8002104 <da16k_get_cmd+0x164>)
 8002064:	f004 fd8e 	bl	8006b84 <printf>
            return DA16K_AT_FAIL;
 8002068:	2304      	movs	r3, #4
 800206a:	e03a      	b.n	80020e2 <da16k_get_cmd+0x142>
        }
    }

    /* Now we need to extract the command and parameter (if applicable) */
    cmd->command = da16k_at_get_response_str();
 800206c:	f7ff ff84 	bl	8001f78 <da16k_at_get_response_str>
 8002070:	4602      	mov	r2, r0
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	601a      	str	r2, [r3, #0]
    DA16K_RETURN_ON_NULL(DA16K_OUT_OF_MEMORY, cmd->command);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d106      	bne.n	800208c <da16k_get_cmd+0xec>
 800207e:	2246      	movs	r2, #70	@ 0x46
 8002080:	491c      	ldr	r1, [pc, #112]	@ (80020f4 <da16k_get_cmd+0x154>)
 8002082:	4821      	ldr	r0, [pc, #132]	@ (8002108 <da16k_get_cmd+0x168>)
 8002084:	f004 fd7e 	bl	8006b84 <printf>
 8002088:	2301      	movs	r3, #1
 800208a:	e02a      	b.n	80020e2 <da16k_get_cmd+0x142>

    ret = DA16K_SUCCESS;
 800208c:	2300      	movs	r3, #0
 800208e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Find space to determine whether we have params or not. We can use strchr here as we're guaranteed a null terminator within the buffer */
    param_ptr = strchr(cmd->command, ' ');
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2120      	movs	r1, #32
 8002098:	4618      	mov	r0, r3
 800209a:	f004 fec5 	bl	8006e28 <strchr>
 800209e:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (param_ptr != NULL) {
 80020a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d018      	beq.n	80020d8 <da16k_get_cmd+0x138>
        /* We have params, split the strings */
        *param_ptr = 0x00; /* Null terminate via the space so we can simply use strdup */
 80020a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
        param_ptr++; /* Skip space/null */
 80020ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ae:	3301      	adds	r3, #1
 80020b0:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* cmd->command stays as-is and now termintes after the command itself. We *do* waste a few bytes of memory */
        cmd->parameters = da16k_strdup(param_ptr);
 80020b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80020b4:	f000 fc32 	bl	800291c <da16k_strdup>
 80020b8:	4602      	mov	r2, r0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	605a      	str	r2, [r3, #4]

        if (cmd->parameters == NULL) {
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10b      	bne.n	80020de <da16k_get_cmd+0x13e>
            da16k_destroy_cmd(*cmd);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020cc:	f000 f81e 	bl	800210c <da16k_destroy_cmd>
            ret = DA16K_OUT_OF_MEMORY;
 80020d0:	2301      	movs	r3, #1
 80020d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80020d6:	e002      	b.n	80020de <da16k_get_cmd+0x13e>
        }
    } else {
        /* No parameter, just command */
        cmd->parameters = NULL;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	605a      	str	r2, [r3, #4]
    }

    return ret;
 80020de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3734      	adds	r7, #52	@ 0x34
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd90      	pop	{r4, r7, pc}
 80020ea:	bf00      	nop
 80020ec:	0800ca84 	.word	0x0800ca84
 80020f0:	0800ca90 	.word	0x0800ca90
 80020f4:	0800d1ac 	.word	0x0800d1ac
 80020f8:	0800c994 	.word	0x0800c994
 80020fc:	0800c9c0 	.word	0x0800c9c0
 8002100:	0800c9f0 	.word	0x0800c9f0
 8002104:	0800ca1c 	.word	0x0800ca1c
 8002108:	0800ca50 	.word	0x0800ca50

0800210c <da16k_destroy_cmd>:

void da16k_destroy_cmd(da16k_cmd_t cmd) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	463b      	mov	r3, r7
 8002114:	e883 0003 	stmia.w	r3, {r0, r1}
    if (cmd.command)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <da16k_destroy_cmd+0x1a>
        da16k_free(cmd.command);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f000 fbed 	bl	8002900 <da16k_free>
    if (cmd.parameters)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <da16k_destroy_cmd+0x28>
        da16k_free(cmd.parameters);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fbe6 	bl	8002900 <da16k_free>
}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <da16k_init>:

da16k_err_t da16k_init(const da16k_cfg_t *cfg) {
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
    da16k_err_t ret = DA16K_SUCCESS;
 8002144:	2300      	movs	r3, #0
 8002146:	73fb      	strb	r3, [r7, #15]

    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cfg);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d106      	bne.n	800215c <da16k_init+0x20>
 800214e:	226b      	movs	r2, #107	@ 0x6b
 8002150:	4929      	ldr	r1, [pc, #164]	@ (80021f8 <da16k_init+0xbc>)
 8002152:	482a      	ldr	r0, [pc, #168]	@ (80021fc <da16k_init+0xc0>)
 8002154:	f004 fd16 	bl	8006b84 <printf>
 8002158:	230b      	movs	r3, #11
 800215a:	e048      	b.n	80021ee <da16k_init+0xb2>

    /* UART Init */
    if (!da16k_uart_init()) {
 800215c:	f004 f8c4 	bl	80062e8 <da16k_uart_init>
 8002160:	4603      	mov	r3, r0
 8002162:	f083 0301 	eor.w	r3, r3, #1
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <da16k_init+0x34>
        return DA16K_UART_ERROR;
 800216c:	2302      	movs	r3, #2
 800216e:	e03e      	b.n	80021ee <da16k_init+0xb2>
    }

    /* WiFi init (if requested) */
    if (cfg->wifi_config) {
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d011      	beq.n	800219c <da16k_init+0x60>
        if (DA16K_SUCCESS != (ret = da16k_set_wifi_config(cfg->wifi_config))) {
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4618      	mov	r0, r3
 800217e:	f000 fa77 	bl	8002670 <da16k_set_wifi_config>
 8002182:	4603      	mov	r3, r0
 8002184:	73fb      	strb	r3, [r7, #15]
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <da16k_init+0x60>
            DA16K_ERROR("WiFi connection failed (%d)\r\n", (int) ret);
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	2275      	movs	r2, #117	@ 0x75
 8002190:	4919      	ldr	r1, [pc, #100]	@ (80021f8 <da16k_init+0xbc>)
 8002192:	481b      	ldr	r0, [pc, #108]	@ (8002200 <da16k_init+0xc4>)
 8002194:	f004 fcf6 	bl	8006b84 <printf>
            return ret;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	e028      	b.n	80021ee <da16k_init+0xb2>
        }
    }

    /* IoTC init (if requested) */
    if (cfg->iotc_config) {
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d01b      	beq.n	80021dc <da16k_init+0xa0>
        if (DA16K_SUCCESS != (ret = da16k_setup_iotc_and_connect(cfg->iotc_config))) {
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 faf1 	bl	8002790 <da16k_setup_iotc_and_connect>
 80021ae:	4603      	mov	r3, r0
 80021b0:	73fb      	strb	r3, [r7, #15]
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d007      	beq.n	80021c8 <da16k_init+0x8c>
            DA16K_ERROR("IoTC connection failed (%d)\r\n", (int) ret);
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	227d      	movs	r2, #125	@ 0x7d
 80021bc:	490e      	ldr	r1, [pc, #56]	@ (80021f8 <da16k_init+0xbc>)
 80021be:	4811      	ldr	r0, [pc, #68]	@ (8002204 <da16k_init+0xc8>)
 80021c0:	f004 fce0 	bl	8006b84 <printf>
            return ret;
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	e012      	b.n	80021ee <da16k_init+0xb2>
        }
        if (cfg->iotc_config->iotc_connect_timeout_ms) {
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d004      	beq.n	80021dc <da16k_init+0xa0>
            s_iotc_connect_timeout_ms = cfg->iotc_config->iotc_connect_timeout_ms;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002208 <da16k_init+0xcc>)
 80021da:	6013      	str	r3, [r2, #0]
        }
    }

    /* External network timeout override */
    if (cfg->network_timeout_ms) {
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <da16k_init+0xb0>
        s_network_timeout_ms = cfg->network_timeout_ms;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4a08      	ldr	r2, [pc, #32]	@ (800220c <da16k_init+0xd0>)
 80021ea:	6013      	str	r3, [r2, #0]
    }

    return ret; /* TODO: Check if IoTC is actually connected. */
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	0800d1bc 	.word	0x0800d1bc
 80021fc:	0800caa0 	.word	0x0800caa0
 8002200:	0800cacc 	.word	0x0800cacc
 8002204:	0800cb00 	.word	0x0800cb00
 8002208:	20000008 	.word	0x20000008
 800220c:	20000004 	.word	0x20000004

08002210 <da16k_create_msg_str>:

void da16k_deinit() {
    da16k_uart_close();
}

da16k_msg_t *da16k_create_msg_str(const char *key, const char *value) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
    da16k_msg_t *msg = da16k_malloc(sizeof(da16k_msg_t));
 800221a:	2008      	movs	r0, #8
 800221c:	f000 fb64 	bl	80028e8 <da16k_malloc>
 8002220:	60f8      	str	r0, [r7, #12]

    DA16K_RETURN_ON_NULL(NULL, msg);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d106      	bne.n	8002236 <da16k_create_msg_str+0x26>
 8002228:	2294      	movs	r2, #148	@ 0x94
 800222a:	491e      	ldr	r1, [pc, #120]	@ (80022a4 <da16k_create_msg_str+0x94>)
 800222c:	481e      	ldr	r0, [pc, #120]	@ (80022a8 <da16k_create_msg_str+0x98>)
 800222e:	f004 fca9 	bl	8006b84 <printf>
 8002232:	2300      	movs	r3, #0
 8002234:	e032      	b.n	800229c <da16k_create_msg_str+0x8c>
    DA16K_RETURN_ON_NULL(NULL, key);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d106      	bne.n	800224a <da16k_create_msg_str+0x3a>
 800223c:	2295      	movs	r2, #149	@ 0x95
 800223e:	4919      	ldr	r1, [pc, #100]	@ (80022a4 <da16k_create_msg_str+0x94>)
 8002240:	481a      	ldr	r0, [pc, #104]	@ (80022ac <da16k_create_msg_str+0x9c>)
 8002242:	f004 fc9f 	bl	8006b84 <printf>
 8002246:	2300      	movs	r3, #0
 8002248:	e028      	b.n	800229c <da16k_create_msg_str+0x8c>
    DA16K_RETURN_ON_NULL(NULL, value);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d106      	bne.n	800225e <da16k_create_msg_str+0x4e>
 8002250:	2296      	movs	r2, #150	@ 0x96
 8002252:	4914      	ldr	r1, [pc, #80]	@ (80022a4 <da16k_create_msg_str+0x94>)
 8002254:	4816      	ldr	r0, [pc, #88]	@ (80022b0 <da16k_create_msg_str+0xa0>)
 8002256:	f004 fc95 	bl	8006b84 <printf>
 800225a:	2300      	movs	r3, #0
 800225c:	e01e      	b.n	800229c <da16k_create_msg_str+0x8c>

    msg->key     = da16k_strdup(key);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 fb5c 	bl	800291c <da16k_strdup>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	601a      	str	r2, [r3, #0]
    msg->value   = da16k_strdup(value);
 800226a:	6838      	ldr	r0, [r7, #0]
 800226c:	f000 fb56 	bl	800291c <da16k_strdup>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	605a      	str	r2, [r3, #4]

    if (!msg->key || !msg->value) {
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <da16k_create_msg_str+0x76>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d109      	bne.n	800229a <da16k_create_msg_str+0x8a>
        DA16K_ERROR("DA16K: Memory allocation for key/value failed!");
 8002286:	229c      	movs	r2, #156	@ 0x9c
 8002288:	4906      	ldr	r1, [pc, #24]	@ (80022a4 <da16k_create_msg_str+0x94>)
 800228a:	480a      	ldr	r0, [pc, #40]	@ (80022b4 <da16k_create_msg_str+0xa4>)
 800228c:	f004 fc7a 	bl	8006b84 <printf>
        da16k_destroy_msg(msg);
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 f82d 	bl	80022f0 <da16k_destroy_msg>
        return NULL;
 8002296:	2300      	movs	r3, #0
 8002298:	e000      	b.n	800229c <da16k_create_msg_str+0x8c>
    }

    return msg;
 800229a:	68fb      	ldr	r3, [r7, #12]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	0800d1c8 	.word	0x0800d1c8
 80022a8:	0800cb34 	.word	0x0800cb34
 80022ac:	0800cb60 	.word	0x0800cb60
 80022b0:	0800cb8c 	.word	0x0800cb8c
 80022b4:	0800cbb8 	.word	0x0800cbb8

080022b8 <da16k_create_msg_int>:
da16k_msg_t *da16k_create_msg_uint(const char *key, uint64_t value) {
    snprintf(da16k_value_buffer, sizeof(da16k_value_buffer), "%" PRIu64, value);
    return da16k_create_msg_str(key, da16k_value_buffer);
}

da16k_msg_t *da16k_create_msg_int(const char *key, int64_t value) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	e9c7 2300 	strd	r2, r3, [r7]
    snprintf(da16k_value_buffer, sizeof(da16k_value_buffer), "%" PRIi64, value);
 80022c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022c8:	e9cd 2300 	strd	r2, r3, [sp]
 80022cc:	4a06      	ldr	r2, [pc, #24]	@ (80022e8 <da16k_create_msg_int+0x30>)
 80022ce:	2140      	movs	r1, #64	@ 0x40
 80022d0:	4806      	ldr	r0, [pc, #24]	@ (80022ec <da16k_create_msg_int+0x34>)
 80022d2:	f004 fcb7 	bl	8006c44 <snprintf>
    return da16k_create_msg_str(key, da16k_value_buffer);
 80022d6:	4905      	ldr	r1, [pc, #20]	@ (80022ec <da16k_create_msg_int+0x34>)
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f7ff ff99 	bl	8002210 <da16k_create_msg_str>
 80022de:	4603      	mov	r3, r0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	0800cc44 	.word	0x0800cc44
 80022ec:	20000ea8 	.word	0x20000ea8

080022f0 <da16k_destroy_msg>:
da16k_msg_t *da16k_create_msg_bool(const char *key, bool value) {
    snprintf(da16k_value_buffer, sizeof(da16k_value_buffer), value ? "true" : "false");
    return da16k_create_msg_str(key, da16k_value_buffer);
}

void da16k_destroy_msg(da16k_msg_t *msg) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
    if (msg) {
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00c      	beq.n	8002318 <da16k_destroy_msg+0x28>
        da16k_free(msg->key);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fafc 	bl	8002900 <da16k_free>
        da16k_free(msg->value);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4618      	mov	r0, r3
 800230e:	f000 faf7 	bl	8002900 <da16k_free>
        da16k_free(msg);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 faf4 	bl	8002900 <da16k_free>
    }
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <da16k_check_send_and_destroy_msg>:
/* Helper functions for direct sending and destroying (for basic, non-threaded applications) */

/*  Sends a message directly and destroys it immediately after.
    Since it is used from within these wrappers after creation of msg, 
    it returns DA16K_OUT_OF_MEMORY on NULL pointers instead of DA16K_INVALID_PARAMETER as other functions. */
static da16k_err_t da16k_check_send_and_destroy_msg(da16k_msg_t *msg) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
    da16k_err_t ret;

    DA16K_RETURN_ON_NULL(DA16K_OUT_OF_MEMORY, msg);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d106      	bne.n	800233c <da16k_check_send_and_destroy_msg+0x1c>
 800232e:	22cd      	movs	r2, #205	@ 0xcd
 8002330:	4914      	ldr	r1, [pc, #80]	@ (8002384 <da16k_check_send_and_destroy_msg+0x64>)
 8002332:	4815      	ldr	r0, [pc, #84]	@ (8002388 <da16k_check_send_and_destroy_msg+0x68>)
 8002334:	f004 fc26 	bl	8006b84 <printf>
 8002338:	2301      	movs	r3, #1
 800233a:	e01e      	b.n	800237a <da16k_check_send_and_destroy_msg+0x5a>
    DA16K_RETURN_ON_NULL(DA16K_OUT_OF_MEMORY, msg->key);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d106      	bne.n	8002352 <da16k_check_send_and_destroy_msg+0x32>
 8002344:	22ce      	movs	r2, #206	@ 0xce
 8002346:	490f      	ldr	r1, [pc, #60]	@ (8002384 <da16k_check_send_and_destroy_msg+0x64>)
 8002348:	4810      	ldr	r0, [pc, #64]	@ (800238c <da16k_check_send_and_destroy_msg+0x6c>)
 800234a:	f004 fc1b 	bl	8006b84 <printf>
 800234e:	2301      	movs	r3, #1
 8002350:	e013      	b.n	800237a <da16k_check_send_and_destroy_msg+0x5a>
    DA16K_RETURN_ON_NULL(DA16K_OUT_OF_MEMORY, msg->value);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <da16k_check_send_and_destroy_msg+0x48>
 800235a:	22cf      	movs	r2, #207	@ 0xcf
 800235c:	4909      	ldr	r1, [pc, #36]	@ (8002384 <da16k_check_send_and_destroy_msg+0x64>)
 800235e:	480c      	ldr	r0, [pc, #48]	@ (8002390 <da16k_check_send_and_destroy_msg+0x70>)
 8002360:	f004 fc10 	bl	8006b84 <printf>
 8002364:	2301      	movs	r3, #1
 8002366:	e008      	b.n	800237a <da16k_check_send_and_destroy_msg+0x5a>

    ret = da16k_send_msg(msg);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f861 	bl	8002430 <da16k_send_msg>
 800236e:	4603      	mov	r3, r0
 8002370:	73fb      	strb	r3, [r7, #15]
    da16k_destroy_msg(msg);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ffbc 	bl	80022f0 <da16k_destroy_msg>
    return ret;
 8002378:	7bfb      	ldrb	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	0800d1e0 	.word	0x0800d1e0
 8002388:	0800cb34 	.word	0x0800cb34
 800238c:	0800cc5c 	.word	0x0800cc5c
 8002390:	0800cc8c 	.word	0x0800cc8c

08002394 <da16k_send_msg_direct_str>:

da16k_err_t da16k_send_msg_direct_str(const char *key, const char *value) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, key);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d106      	bne.n	80023b2 <da16k_send_msg_direct_str+0x1e>
 80023a4:	22d7      	movs	r2, #215	@ 0xd7
 80023a6:	490e      	ldr	r1, [pc, #56]	@ (80023e0 <da16k_send_msg_direct_str+0x4c>)
 80023a8:	480e      	ldr	r0, [pc, #56]	@ (80023e4 <da16k_send_msg_direct_str+0x50>)
 80023aa:	f004 fbeb 	bl	8006b84 <printf>
 80023ae:	230b      	movs	r3, #11
 80023b0:	e012      	b.n	80023d8 <da16k_send_msg_direct_str+0x44>
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, value);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d106      	bne.n	80023c6 <da16k_send_msg_direct_str+0x32>
 80023b8:	22d8      	movs	r2, #216	@ 0xd8
 80023ba:	4909      	ldr	r1, [pc, #36]	@ (80023e0 <da16k_send_msg_direct_str+0x4c>)
 80023bc:	480a      	ldr	r0, [pc, #40]	@ (80023e8 <da16k_send_msg_direct_str+0x54>)
 80023be:	f004 fbe1 	bl	8006b84 <printf>
 80023c2:	230b      	movs	r3, #11
 80023c4:	e008      	b.n	80023d8 <da16k_send_msg_direct_str+0x44>
    return da16k_check_send_and_destroy_msg(da16k_create_msg_str(key, value));
 80023c6:	6839      	ldr	r1, [r7, #0]
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ff21 	bl	8002210 <da16k_create_msg_str>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ffa5 	bl	8002320 <da16k_check_send_and_destroy_msg>
 80023d6:	4603      	mov	r3, r0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	0800d204 	.word	0x0800d204
 80023e4:	0800cb60 	.word	0x0800cb60
 80023e8:	0800cb8c 	.word	0x0800cb8c

080023ec <da16k_send_msg_direct_int>:
da16k_err_t da16k_send_msg_direct_uint(const char *key, uint64_t value) {
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, key);
    return da16k_check_send_and_destroy_msg(da16k_create_msg_uint(key, value));
}

da16k_err_t da16k_send_msg_direct_int(const char *key, int64_t value) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	e9c7 2300 	strd	r2, r3, [r7]
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, key);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <da16k_send_msg_direct_int+0x20>
 80023fe:	22e7      	movs	r2, #231	@ 0xe7
 8002400:	4909      	ldr	r1, [pc, #36]	@ (8002428 <da16k_send_msg_direct_int+0x3c>)
 8002402:	480a      	ldr	r0, [pc, #40]	@ (800242c <da16k_send_msg_direct_int+0x40>)
 8002404:	f004 fbbe 	bl	8006b84 <printf>
 8002408:	230b      	movs	r3, #11
 800240a:	e009      	b.n	8002420 <da16k_send_msg_direct_int+0x34>
    return da16k_check_send_and_destroy_msg(da16k_create_msg_int(key, value));
 800240c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f7ff ff51 	bl	80022b8 <da16k_create_msg_int>
 8002416:	4603      	mov	r3, r0
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff81 	bl	8002320 <da16k_check_send_and_destroy_msg>
 800241e:	4603      	mov	r3, r0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	0800d220 	.word	0x0800d220
 800242c:	0800cb60 	.word	0x0800cb60

08002430 <da16k_send_msg>:
da16k_err_t da16k_send_msg_direct_bool(const char *key, bool value) {
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, key);
    return da16k_check_send_and_destroy_msg(da16k_create_msg_bool(key, value));
}

da16k_err_t da16k_send_msg(da16k_msg_t *msg) {
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af02      	add	r7, sp, #8
 8002436:	6078      	str	r0, [r7, #4]
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, msg);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <da16k_send_msg+0x1c>
 800243e:	22f1      	movs	r2, #241	@ 0xf1
 8002440:	4916      	ldr	r1, [pc, #88]	@ (800249c <da16k_send_msg+0x6c>)
 8002442:	4817      	ldr	r0, [pc, #92]	@ (80024a0 <da16k_send_msg+0x70>)
 8002444:	f004 fb9e 	bl	8006b84 <printf>
 8002448:	230b      	movs	r3, #11
 800244a:	e022      	b.n	8002492 <da16k_send_msg+0x62>
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, msg->key);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d106      	bne.n	8002462 <da16k_send_msg+0x32>
 8002454:	22f2      	movs	r2, #242	@ 0xf2
 8002456:	4911      	ldr	r1, [pc, #68]	@ (800249c <da16k_send_msg+0x6c>)
 8002458:	4812      	ldr	r0, [pc, #72]	@ (80024a4 <da16k_send_msg+0x74>)
 800245a:	f004 fb93 	bl	8006b84 <printf>
 800245e:	230b      	movs	r3, #11
 8002460:	e017      	b.n	8002492 <da16k_send_msg+0x62>
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, msg->value);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <da16k_send_msg+0x48>
 800246a:	22f3      	movs	r2, #243	@ 0xf3
 800246c:	490b      	ldr	r1, [pc, #44]	@ (800249c <da16k_send_msg+0x6c>)
 800246e:	480e      	ldr	r0, [pc, #56]	@ (80024a8 <da16k_send_msg+0x78>)
 8002470:	f004 fb88 	bl	8006b84 <printf>
 8002474:	230b      	movs	r3, #11
 8002476:	e00c      	b.n	8002492 <da16k_send_msg+0x62>

    return da16k_at_send_formatted_and_check_success(s_network_timeout_ms, NULL, "AT+NWICMSG %s,%s", msg->key, msg->value);
 8002478:	4b0c      	ldr	r3, [pc, #48]	@ (80024ac <da16k_send_msg+0x7c>)
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	4613      	mov	r3, r2
 8002488:	4a09      	ldr	r2, [pc, #36]	@ (80024b0 <da16k_send_msg+0x80>)
 800248a:	2100      	movs	r1, #0
 800248c:	f7ff fcb4 	bl	8001df8 <da16k_at_send_formatted_and_check_success>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	0800d23c 	.word	0x0800d23c
 80024a0:	0800cb34 	.word	0x0800cb34
 80024a4:	0800cc5c 	.word	0x0800cc5c
 80024a8:	0800cc8c 	.word	0x0800cc8c
 80024ac:	20000004 	.word	0x20000004
 80024b0:	0800ccc0 	.word	0x0800ccc0

080024b4 <da16k_set_iotc_connection_type>:

da16k_err_t da16k_set_iotc_connection_type(da16k_iotc_mode_t type) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
    return da16k_at_send_formatted_and_check_success(DA16K_UART_TIMEOUT_MS, NULL, "AT+NWICCT %u", (unsigned) type);
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	4a05      	ldr	r2, [pc, #20]	@ (80024d8 <da16k_set_iotc_connection_type+0x24>)
 80024c2:	2100      	movs	r1, #0
 80024c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80024c8:	f7ff fc96 	bl	8001df8 <da16k_at_send_formatted_and_check_success>
 80024cc:	4603      	mov	r3, r0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	0800ccd4 	.word	0x0800ccd4

080024dc <da16k_set_iotc_auth_type>:

da16k_err_t da16k_set_iotc_auth_type(da16k_iotc_auth_type_t type) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
    return da16k_at_send_formatted_and_check_success(DA16K_UART_TIMEOUT_MS, NULL, "AT+NWICAT %u", (unsigned) type);
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	4a05      	ldr	r2, [pc, #20]	@ (8002500 <da16k_set_iotc_auth_type+0x24>)
 80024ea:	2100      	movs	r1, #0
 80024ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80024f0:	f7ff fc82 	bl	8001df8 <da16k_at_send_formatted_and_check_success>
 80024f4:	4603      	mov	r3, r0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	0800cce4 	.word	0x0800cce4

08002504 <da16k_set_iotc_cpid>:

da16k_err_t da16k_set_iotc_cpid(const char *cpid) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cpid);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d107      	bne.n	8002522 <da16k_set_iotc_cpid+0x1e>
 8002512:	f240 1201 	movw	r2, #257	@ 0x101
 8002516:	4909      	ldr	r1, [pc, #36]	@ (800253c <da16k_set_iotc_cpid+0x38>)
 8002518:	4809      	ldr	r0, [pc, #36]	@ (8002540 <da16k_set_iotc_cpid+0x3c>)
 800251a:	f004 fb33 	bl	8006b84 <printf>
 800251e:	230b      	movs	r3, #11
 8002520:	e007      	b.n	8002532 <da16k_set_iotc_cpid+0x2e>
    return da16k_at_send_formatted_and_check_success(DA16K_UART_TIMEOUT_MS, NULL, "AT+NWICCPID %s", cpid);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a07      	ldr	r2, [pc, #28]	@ (8002544 <da16k_set_iotc_cpid+0x40>)
 8002526:	2100      	movs	r1, #0
 8002528:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800252c:	f7ff fc64 	bl	8001df8 <da16k_at_send_formatted_and_check_success>
 8002530:	4603      	mov	r3, r0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	0800d24c 	.word	0x0800d24c
 8002540:	0800ccf4 	.word	0x0800ccf4
 8002544:	0800cd20 	.word	0x0800cd20

08002548 <da16k_set_iotc_duid>:

da16k_err_t da16k_set_iotc_duid(const char *duid) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, duid);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d107      	bne.n	8002566 <da16k_set_iotc_duid+0x1e>
 8002556:	f44f 7283 	mov.w	r2, #262	@ 0x106
 800255a:	4909      	ldr	r1, [pc, #36]	@ (8002580 <da16k_set_iotc_duid+0x38>)
 800255c:	4809      	ldr	r0, [pc, #36]	@ (8002584 <da16k_set_iotc_duid+0x3c>)
 800255e:	f004 fb11 	bl	8006b84 <printf>
 8002562:	230b      	movs	r3, #11
 8002564:	e007      	b.n	8002576 <da16k_set_iotc_duid+0x2e>
    return da16k_at_send_formatted_and_check_success(DA16K_UART_TIMEOUT_MS, NULL, "AT+NWICDUID %s", duid);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a07      	ldr	r2, [pc, #28]	@ (8002588 <da16k_set_iotc_duid+0x40>)
 800256a:	2100      	movs	r1, #0
 800256c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002570:	f7ff fc42 	bl	8001df8 <da16k_at_send_formatted_and_check_success>
 8002574:	4603      	mov	r3, r0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	0800d260 	.word	0x0800d260
 8002584:	0800cd30 	.word	0x0800cd30
 8002588:	0800cd5c 	.word	0x0800cd5c

0800258c <da16k_set_iotc_env>:

da16k_err_t da16k_set_iotc_env(const char *env) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, env);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d107      	bne.n	80025aa <da16k_set_iotc_env+0x1e>
 800259a:	f240 120b 	movw	r2, #267	@ 0x10b
 800259e:	4909      	ldr	r1, [pc, #36]	@ (80025c4 <da16k_set_iotc_env+0x38>)
 80025a0:	4809      	ldr	r0, [pc, #36]	@ (80025c8 <da16k_set_iotc_env+0x3c>)
 80025a2:	f004 faef 	bl	8006b84 <printf>
 80025a6:	230b      	movs	r3, #11
 80025a8:	e007      	b.n	80025ba <da16k_set_iotc_env+0x2e>
    return da16k_at_send_formatted_and_check_success(DA16K_UART_TIMEOUT_MS, NULL, "AT+NWICENV %s", env);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a07      	ldr	r2, [pc, #28]	@ (80025cc <da16k_set_iotc_env+0x40>)
 80025ae:	2100      	movs	r1, #0
 80025b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80025b4:	f7ff fc20 	bl	8001df8 <da16k_at_send_formatted_and_check_success>
 80025b8:	4603      	mov	r3, r0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	0800d274 	.word	0x0800d274
 80025c8:	0800cd6c 	.word	0x0800cd6c
 80025cc:	0800cd98 	.word	0x0800cd98

080025d0 <da16k_iotc_start>:

da16k_err_t da16k_iotc_start(void) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
    da16k_err_t ret = DA16K_SUCCESS;
 80025d6:	2300      	movs	r3, #0
 80025d8:	71fb      	strb	r3, [r7, #7]
    
    /* Starting consists of two parts: the setup and the actual start. Since decoupling the two from our POV is pointless,
       we do both of these in this wrapper. */

    ret = da16k_at_send_formatted_and_check_success(s_network_timeout_ms, "+NWICSETUPEND", "AT+NWICSETUP");
 80025da:	4b0d      	ldr	r3, [pc, #52]	@ (8002610 <da16k_iotc_start+0x40>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a0d      	ldr	r2, [pc, #52]	@ (8002614 <da16k_iotc_start+0x44>)
 80025e0:	490d      	ldr	r1, [pc, #52]	@ (8002618 <da16k_iotc_start+0x48>)
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fc08 	bl	8001df8 <da16k_at_send_formatted_and_check_success>
 80025e8:	4603      	mov	r3, r0
 80025ea:	71fb      	strb	r3, [r7, #7]
    if (ret == DA16K_SUCCESS) {
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d108      	bne.n	8002604 <da16k_iotc_start+0x34>
        ret = da16k_at_send_formatted_and_check_success(s_iotc_connect_timeout_ms, "+NWICSTARTEND", "AT+NWICSTART");
 80025f2:	4b0a      	ldr	r3, [pc, #40]	@ (800261c <da16k_iotc_start+0x4c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002620 <da16k_iotc_start+0x50>)
 80025f8:	490a      	ldr	r1, [pc, #40]	@ (8002624 <da16k_iotc_start+0x54>)
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fbfc 	bl	8001df8 <da16k_at_send_formatted_and_check_success>
 8002600:	4603      	mov	r3, r0
 8002602:	71fb      	strb	r3, [r7, #7]
    }
    return ret;
 8002604:	79fb      	ldrb	r3, [r7, #7]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000004 	.word	0x20000004
 8002614:	0800cda8 	.word	0x0800cda8
 8002618:	0800cdb8 	.word	0x0800cdb8
 800261c:	20000008 	.word	0x20000008
 8002620:	0800cdc8 	.word	0x0800cdc8
 8002624:	0800cdd8 	.word	0x0800cdd8

08002628 <da16k_iotc_stop>:

da16k_err_t da16k_iotc_stop(void) {
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
    return da16k_at_send_formatted_and_check_success(s_network_timeout_ms, "+NWICSTOPEND", "AT+NWICSTOP");
 800262c:	4b04      	ldr	r3, [pc, #16]	@ (8002640 <da16k_iotc_stop+0x18>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a04      	ldr	r2, [pc, #16]	@ (8002644 <da16k_iotc_stop+0x1c>)
 8002632:	4905      	ldr	r1, [pc, #20]	@ (8002648 <da16k_iotc_stop+0x20>)
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fbdf 	bl	8001df8 <da16k_at_send_formatted_and_check_success>
 800263a:	4603      	mov	r3, r0
}
 800263c:	4618      	mov	r0, r3
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000004 	.word	0x20000004
 8002644:	0800cde8 	.word	0x0800cde8
 8002648:	0800cdf4 	.word	0x0800cdf4

0800264c <da16k_iotc_reset>:

da16k_err_t da16k_iotc_reset(void) {
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
    return da16k_at_send_formatted_and_check_success(s_network_timeout_ms, "+NWICRESETEND", "AT+NWICRESET");
 8002650:	4b04      	ldr	r3, [pc, #16]	@ (8002664 <da16k_iotc_reset+0x18>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a04      	ldr	r2, [pc, #16]	@ (8002668 <da16k_iotc_reset+0x1c>)
 8002656:	4905      	ldr	r1, [pc, #20]	@ (800266c <da16k_iotc_reset+0x20>)
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fbcd 	bl	8001df8 <da16k_at_send_formatted_and_check_success>
 800265e:	4603      	mov	r3, r0
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000004 	.word	0x20000004
 8002668:	0800ce04 	.word	0x0800ce04
 800266c:	0800ce14 	.word	0x0800ce14

08002670 <da16k_set_wifi_config>:

da16k_err_t da16k_set_wifi_config(const da16k_wifi_cfg_t *cfg) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af02      	add	r7, sp, #8
 8002676:	6078      	str	r0, [r7, #4]
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cfg);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d107      	bne.n	800268e <da16k_set_wifi_config+0x1e>
 800267e:	f240 1225 	movw	r2, #293	@ 0x125
 8002682:	491a      	ldr	r1, [pc, #104]	@ (80026ec <da16k_set_wifi_config+0x7c>)
 8002684:	481a      	ldr	r0, [pc, #104]	@ (80026f0 <da16k_set_wifi_config+0x80>)
 8002686:	f004 fa7d 	bl	8006b84 <printf>
 800268a:	230b      	movs	r3, #11
 800268c:	e02a      	b.n	80026e4 <da16k_set_wifi_config+0x74>
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cfg->ssid);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d107      	bne.n	80026a6 <da16k_set_wifi_config+0x36>
 8002696:	f44f 7293 	mov.w	r2, #294	@ 0x126
 800269a:	4914      	ldr	r1, [pc, #80]	@ (80026ec <da16k_set_wifi_config+0x7c>)
 800269c:	4815      	ldr	r0, [pc, #84]	@ (80026f4 <da16k_set_wifi_config+0x84>)
 800269e:	f004 fa71 	bl	8006b84 <printf>
 80026a2:	230b      	movs	r3, #11
 80026a4:	e01e      	b.n	80026e4 <da16k_set_wifi_config+0x74>

    /* Existing IoTC session must be stopped first to avoid reconnection attempts while wifi is connecting.
       Return codes can be ignored for this as when there is no connection in place, only "OK" will arrive. */
    da16k_iotc_stop();
 80026a6:	f7ff ffbf 	bl	8002628 <da16k_iotc_stop>

    return da16k_at_send_formatted_and_check_success(
        cfg->wifi_connect_timeout_ms ? cfg->wifi_connect_timeout_ms : DA16K_DEFAULT_WIFI_TIMEOUT_MS,    /* Timeout, if present */
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
    return da16k_at_send_formatted_and_check_success(
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <da16k_set_wifi_config+0x48>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68d8      	ldr	r0, [r3, #12]
 80026b6:	e001      	b.n	80026bc <da16k_set_wifi_config+0x4c>
 80026b8:	f643 2098 	movw	r0, #15000	@ 0x3a98
        "+WFJAP", "AT+WFJAPA %s,%s,%d", /* AT Command*/
        cfg->ssid,                      /* SSID */
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6819      	ldr	r1, [r3, #0]
        cfg->key ? cfg->key : "",       /* Passphrase if present, blank if not */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
    return da16k_at_send_formatted_and_check_success(
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <da16k_set_wifi_config+0x5e>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	e000      	b.n	80026d0 <da16k_set_wifi_config+0x60>
 80026ce:	4b0a      	ldr	r3, [pc, #40]	@ (80026f8 <da16k_set_wifi_config+0x88>)
        cfg->hidden ? 1 : 0);           /* Hidden network flag */
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	7a12      	ldrb	r2, [r2, #8]
    return da16k_at_send_formatted_and_check_success(
 80026d4:	9201      	str	r2, [sp, #4]
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	460b      	mov	r3, r1
 80026da:	4a08      	ldr	r2, [pc, #32]	@ (80026fc <da16k_set_wifi_config+0x8c>)
 80026dc:	4908      	ldr	r1, [pc, #32]	@ (8002700 <da16k_set_wifi_config+0x90>)
 80026de:	f7ff fb8b 	bl	8001df8 <da16k_at_send_formatted_and_check_success>
 80026e2:	4603      	mov	r3, r0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	0800d288 	.word	0x0800d288
 80026f0:	0800caa0 	.word	0x0800caa0
 80026f4:	0800ce24 	.word	0x0800ce24
 80026f8:	0800ce54 	.word	0x0800ce54
 80026fc:	0800ce58 	.word	0x0800ce58
 8002700:	0800ce6c 	.word	0x0800ce6c

08002704 <da16k_set_device_cert>:

da16k_err_t da16k_set_device_cert(const char *cert, const char *key) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
    da16k_err_t ret = DA16K_SUCCESS;
 800270e:	2300      	movs	r3, #0
 8002710:	73fb      	strb	r3, [r7, #15]

    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cert);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d107      	bne.n	8002728 <da16k_set_device_cert+0x24>
 8002718:	f240 1237 	movw	r2, #311	@ 0x137
 800271c:	4918      	ldr	r1, [pc, #96]	@ (8002780 <da16k_set_device_cert+0x7c>)
 800271e:	4819      	ldr	r0, [pc, #100]	@ (8002784 <da16k_set_device_cert+0x80>)
 8002720:	f004 fa30 	bl	8006b84 <printf>
 8002724:	230b      	movs	r3, #11
 8002726:	e027      	b.n	8002778 <da16k_set_device_cert+0x74>
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, key);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d107      	bne.n	800273e <da16k_set_device_cert+0x3a>
 800272e:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8002732:	4913      	ldr	r1, [pc, #76]	@ (8002780 <da16k_set_device_cert+0x7c>)
 8002734:	4814      	ldr	r0, [pc, #80]	@ (8002788 <da16k_set_device_cert+0x84>)
 8002736:	f004 fa25 	bl	8006b84 <printf>
 800273a:	230b      	movs	r3, #11
 800273c:	e01c      	b.n	8002778 <da16k_set_device_cert+0x74>

    DA16K_WARN("WARNING: Client certificate transmission via the AT command protocol is *INSECURE* and may ONLY be used for testing / development purposes!\r\n");
 800273e:	f44f 729d 	mov.w	r2, #314	@ 0x13a
 8002742:	490f      	ldr	r1, [pc, #60]	@ (8002780 <da16k_set_device_cert+0x7c>)
 8002744:	4811      	ldr	r0, [pc, #68]	@ (800278c <da16k_set_device_cert+0x88>)
 8002746:	f004 fa1d 	bl	8006b84 <printf>

    /* MQTT Client Certificate */
    if (DA16K_SUCCESS != (ret = da16k_at_send_certificate(DA16K_CERT_MQTT_DEV_CERT, cert))) { return ret; }
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	2001      	movs	r0, #1
 800274e:	f7ff fba5 	bl	8001e9c <da16k_at_send_certificate>
 8002752:	4603      	mov	r3, r0
 8002754:	73fb      	strb	r3, [r7, #15]
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <da16k_set_device_cert+0x5c>
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	e00b      	b.n	8002778 <da16k_set_device_cert+0x74>
    /* MQTT Client Private Key */
    if (DA16K_SUCCESS != (ret = da16k_at_send_certificate(DA16K_CERT_MQTT_DEV_KEY, key)))   { return ret; }
 8002760:	6839      	ldr	r1, [r7, #0]
 8002762:	2002      	movs	r0, #2
 8002764:	f7ff fb9a 	bl	8001e9c <da16k_at_send_certificate>
 8002768:	4603      	mov	r3, r0
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <da16k_set_device_cert+0x72>
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	e000      	b.n	8002778 <da16k_set_device_cert+0x74>

    return ret;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	0800d2a0 	.word	0x0800d2a0
 8002784:	0800ce74 	.word	0x0800ce74
 8002788:	0800cb60 	.word	0x0800cb60
 800278c:	0800cea0 	.word	0x0800cea0

08002790 <da16k_setup_iotc_and_connect>:

da16k_err_t da16k_setup_iotc_and_connect(const da16k_iotc_cfg_t *cfg) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
    da16k_err_t ret = DA16K_SUCCESS;
 8002798:	2300      	movs	r3, #0
 800279a:	73fb      	strb	r3, [r7, #15]

    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cfg);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d107      	bne.n	80027b2 <da16k_setup_iotc_and_connect+0x22>
 80027a2:	f240 1247 	movw	r2, #327	@ 0x147
 80027a6:	494b      	ldr	r1, [pc, #300]	@ (80028d4 <da16k_setup_iotc_and_connect+0x144>)
 80027a8:	484b      	ldr	r0, [pc, #300]	@ (80028d8 <da16k_setup_iotc_and_connect+0x148>)
 80027aa:	f004 f9eb 	bl	8006b84 <printf>
 80027ae:	230b      	movs	r3, #11
 80027b0:	e08c      	b.n	80028cc <da16k_setup_iotc_and_connect+0x13c>
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cfg->cpid);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d107      	bne.n	80027ca <da16k_setup_iotc_and_connect+0x3a>
 80027ba:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 80027be:	4945      	ldr	r1, [pc, #276]	@ (80028d4 <da16k_setup_iotc_and_connect+0x144>)
 80027c0:	4846      	ldr	r0, [pc, #280]	@ (80028dc <da16k_setup_iotc_and_connect+0x14c>)
 80027c2:	f004 f9df 	bl	8006b84 <printf>
 80027c6:	230b      	movs	r3, #11
 80027c8:	e080      	b.n	80028cc <da16k_setup_iotc_and_connect+0x13c>
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cfg->duid);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d107      	bne.n	80027e2 <da16k_setup_iotc_and_connect+0x52>
 80027d2:	f240 1249 	movw	r2, #329	@ 0x149
 80027d6:	493f      	ldr	r1, [pc, #252]	@ (80028d4 <da16k_setup_iotc_and_connect+0x144>)
 80027d8:	4841      	ldr	r0, [pc, #260]	@ (80028e0 <da16k_setup_iotc_and_connect+0x150>)
 80027da:	f004 f9d3 	bl	8006b84 <printf>
 80027de:	230b      	movs	r3, #11
 80027e0:	e074      	b.n	80028cc <da16k_setup_iotc_and_connect+0x13c>
    DA16K_RETURN_ON_NULL(DA16K_INVALID_PARAMETER, cfg->env);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d107      	bne.n	80027fa <da16k_setup_iotc_and_connect+0x6a>
 80027ea:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80027ee:	4939      	ldr	r1, [pc, #228]	@ (80028d4 <da16k_setup_iotc_and_connect+0x144>)
 80027f0:	483c      	ldr	r0, [pc, #240]	@ (80028e4 <da16k_setup_iotc_and_connect+0x154>)
 80027f2:	f004 f9c7 	bl	8006b84 <printf>
 80027f6:	230b      	movs	r3, #11
 80027f8:	e068      	b.n	80028cc <da16k_setup_iotc_and_connect+0x13c>

    if (DA16K_SUCCESS != (ret = da16k_iotc_stop()))                                             { return ret; }
 80027fa:	f7ff ff15 	bl	8002628 <da16k_iotc_stop>
 80027fe:	4603      	mov	r3, r0
 8002800:	73fb      	strb	r3, [r7, #15]
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <da16k_setup_iotc_and_connect+0x7c>
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	e05f      	b.n	80028cc <da16k_setup_iotc_and_connect+0x13c>

    if (DA16K_SUCCESS != (ret = da16k_set_iotc_connection_type(cfg->mode)))                     { return ret; }
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff fe4f 	bl	80024b4 <da16k_set_iotc_connection_type>
 8002816:	4603      	mov	r3, r0
 8002818:	73fb      	strb	r3, [r7, #15]
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <da16k_setup_iotc_and_connect+0x94>
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	e053      	b.n	80028cc <da16k_setup_iotc_and_connect+0x13c>
    if (DA16K_SUCCESS != (ret = da16k_set_iotc_cpid(cfg->cpid)))                                { return ret; }
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fe6b 	bl	8002504 <da16k_set_iotc_cpid>
 800282e:	4603      	mov	r3, r0
 8002830:	73fb      	strb	r3, [r7, #15]
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <da16k_setup_iotc_and_connect+0xac>
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	e047      	b.n	80028cc <da16k_setup_iotc_and_connect+0x13c>
    if (DA16K_SUCCESS != (ret = da16k_set_iotc_duid(cfg->duid)))                                { return ret; }
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fe81 	bl	8002548 <da16k_set_iotc_duid>
 8002846:	4603      	mov	r3, r0
 8002848:	73fb      	strb	r3, [r7, #15]
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <da16k_setup_iotc_and_connect+0xc4>
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	e03b      	b.n	80028cc <da16k_setup_iotc_and_connect+0x13c>
    if (DA16K_SUCCESS != (ret = da16k_set_iotc_env(cfg->env)))                                  { return ret; }
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fe97 	bl	800258c <da16k_set_iotc_env>
 800285e:	4603      	mov	r3, r0
 8002860:	73fb      	strb	r3, [r7, #15]
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <da16k_setup_iotc_and_connect+0xdc>
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	e02f      	b.n	80028cc <da16k_setup_iotc_and_connect+0x13c>
    if (DA16K_SUCCESS != (ret = da16k_set_iotc_auth_type(DA16K_IOTC_AT_X509)))                  { return ret; }
 800286c:	2001      	movs	r0, #1
 800286e:	f7ff fe35 	bl	80024dc <da16k_set_iotc_auth_type>
 8002872:	4603      	mov	r3, r0
 8002874:	73fb      	strb	r3, [r7, #15]
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <da16k_setup_iotc_and_connect+0xf0>
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	e025      	b.n	80028cc <da16k_setup_iotc_and_connect+0x13c>

    if (cfg->device_cert) {
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00e      	beq.n	80028a6 <da16k_setup_iotc_and_connect+0x116>
        if (DA16K_SUCCESS != (ret = da16k_set_device_cert(cfg->device_cert, cfg->device_key)))  { return ret; }
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f7ff ff36 	bl	8002704 <da16k_set_device_cert>
 8002898:	4603      	mov	r3, r0
 800289a:	73fb      	strb	r3, [r7, #15]
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <da16k_setup_iotc_and_connect+0x116>
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	e012      	b.n	80028cc <da16k_setup_iotc_and_connect+0x13c>
    }

    if (DA16K_SUCCESS != (ret = da16k_iotc_reset()))                                            { return ret; }
 80028a6:	f7ff fed1 	bl	800264c <da16k_iotc_reset>
 80028aa:	4603      	mov	r3, r0
 80028ac:	73fb      	strb	r3, [r7, #15]
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <da16k_setup_iotc_and_connect+0x128>
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	e009      	b.n	80028cc <da16k_setup_iotc_and_connect+0x13c>
    if (DA16K_SUCCESS != (ret = da16k_iotc_start()))                                            { return ret; }
 80028b8:	f7ff fe8a 	bl	80025d0 <da16k_iotc_start>
 80028bc:	4603      	mov	r3, r0
 80028be:	73fb      	strb	r3, [r7, #15]
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <da16k_setup_iotc_and_connect+0x13a>
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	e000      	b.n	80028cc <da16k_setup_iotc_and_connect+0x13c>

    return ret;
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	0800d2b8 	.word	0x0800d2b8
 80028d8:	0800caa0 	.word	0x0800caa0
 80028dc:	0800cf44 	.word	0x0800cf44
 80028e0:	0800cf74 	.word	0x0800cf74
 80028e4:	0800cfa4 	.word	0x0800cfa4

080028e8 <da16k_malloc>:

#include <stdio.h>

/* Wrappers for external functions that may be unreliable / redefined */

void *da16k_malloc(size_t size) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
    return DA16K_CONFIG_MALLOC_FN(size);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f003 fdab 	bl	800644c <malloc>
 80028f6:	4603      	mov	r3, r0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <da16k_free>:

void da16k_free(void *ptr) {
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
    if (ptr != NULL) {  /* some non-compliant C libraries may crash on freeing NULL pointers... */
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <da16k_free+0x14>
        DA16K_CONFIG_FREE_FN(ptr);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f003 fda4 	bl	800645c <free>
    }
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <da16k_strdup>:

char *da16k_strdup(const char *src) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
    size_t str_size = strlen(src) + 1; /* + 1 for null terminator */
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7fd fc5d 	bl	80001e4 <strlen>
 800292a:	4603      	mov	r3, r0
 800292c:	3301      	adds	r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
    char *ret = da16k_malloc(str_size);
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f7ff ffd9 	bl	80028e8 <da16k_malloc>
 8002936:	60b8      	str	r0, [r7, #8]

    if (ret) {
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d004      	beq.n	8002948 <da16k_strdup+0x2c>
        memcpy(ret, src, str_size);
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	68b8      	ldr	r0, [r7, #8]
 8002944:	f004 fb24 	bl	8006f90 <memcpy>
    }

    return ret;
 8002948:	68bb      	ldr	r3, [r7, #8]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800295c:	2003      	movs	r0, #3
 800295e:	f000 f961 	bl	8002c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002962:	2000      	movs	r0, #0
 8002964:	f000 f80e 	bl	8002984 <HAL_InitTick>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	71fb      	strb	r3, [r7, #7]
 8002972:	e001      	b.n	8002978 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002974:	f7fe fd40 	bl	80013f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002978:	79fb      	ldrb	r3, [r7, #7]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002990:	4b17      	ldr	r3, [pc, #92]	@ (80029f0 <HAL_InitTick+0x6c>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d023      	beq.n	80029e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002998:	4b16      	ldr	r3, [pc, #88]	@ (80029f4 <HAL_InitTick+0x70>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b14      	ldr	r3, [pc, #80]	@ (80029f0 <HAL_InitTick+0x6c>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 f97b 	bl	8002caa <HAL_SYSTICK_Config>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10f      	bne.n	80029da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b0f      	cmp	r3, #15
 80029be:	d809      	bhi.n	80029d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c0:	2200      	movs	r2, #0
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	f04f 30ff 	mov.w	r0, #4294967295
 80029c8:	f000 f937 	bl	8002c3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029cc:	4a0a      	ldr	r2, [pc, #40]	@ (80029f8 <HAL_InitTick+0x74>)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	e007      	b.n	80029e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
 80029d8:	e004      	b.n	80029e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
 80029de:	e001      	b.n	80029e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000010 	.word	0x20000010
 80029f4:	20000000 	.word	0x20000000
 80029f8:	2000000c 	.word	0x2000000c

080029fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a00:	4b06      	ldr	r3, [pc, #24]	@ (8002a1c <HAL_IncTick+0x20>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <HAL_IncTick+0x24>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4a04      	ldr	r2, [pc, #16]	@ (8002a20 <HAL_IncTick+0x24>)
 8002a0e:	6013      	str	r3, [r2, #0]
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20000010 	.word	0x20000010
 8002a20:	20000ee8 	.word	0x20000ee8

08002a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return uwTick;
 8002a28:	4b03      	ldr	r3, [pc, #12]	@ (8002a38 <HAL_GetTick+0x14>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	20000ee8 	.word	0x20000ee8

08002a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6e:	4a04      	ldr	r2, [pc, #16]	@ (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	60d3      	str	r3, [r2, #12]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a88:	4b04      	ldr	r3, [pc, #16]	@ (8002a9c <__NVIC_GetPriorityGrouping+0x18>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	f003 0307 	and.w	r3, r3, #7
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	db0b      	blt.n	8002aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	4907      	ldr	r1, [pc, #28]	@ (8002ad8 <__NVIC_EnableIRQ+0x38>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000e100 	.word	0xe000e100

08002adc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	db12      	blt.n	8002b14 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	f003 021f 	and.w	r2, r3, #31
 8002af4:	490a      	ldr	r1, [pc, #40]	@ (8002b20 <__NVIC_DisableIRQ+0x44>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	2001      	movs	r0, #1
 8002afe:	fa00 f202 	lsl.w	r2, r0, r2
 8002b02:	3320      	adds	r3, #32
 8002b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b08:	f3bf 8f4f 	dsb	sy
}
 8002b0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b0e:	f3bf 8f6f 	isb	sy
}
 8002b12:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000e100 	.word	0xe000e100

08002b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	6039      	str	r1, [r7, #0]
 8002b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	db0a      	blt.n	8002b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	490c      	ldr	r1, [pc, #48]	@ (8002b70 <__NVIC_SetPriority+0x4c>)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	0112      	lsls	r2, r2, #4
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	440b      	add	r3, r1
 8002b48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b4c:	e00a      	b.n	8002b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4908      	ldr	r1, [pc, #32]	@ (8002b74 <__NVIC_SetPriority+0x50>)
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	3b04      	subs	r3, #4
 8002b5c:	0112      	lsls	r2, r2, #4
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	440b      	add	r3, r1
 8002b62:	761a      	strb	r2, [r3, #24]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000e100 	.word	0xe000e100
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	@ 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f1c3 0307 	rsb	r3, r3, #7
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	bf28      	it	cs
 8002b96:	2304      	movcs	r3, #4
 8002b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2b06      	cmp	r3, #6
 8002ba0:	d902      	bls.n	8002ba8 <NVIC_EncodePriority+0x30>
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3b03      	subs	r3, #3
 8002ba6:	e000      	b.n	8002baa <NVIC_EncodePriority+0x32>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bac:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	401a      	ands	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	43d9      	mvns	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	4313      	orrs	r3, r2
         );
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3724      	adds	r7, #36	@ 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bf0:	d301      	bcc.n	8002bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e00f      	b.n	8002c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c20 <SysTick_Config+0x40>)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bfe:	210f      	movs	r1, #15
 8002c00:	f04f 30ff 	mov.w	r0, #4294967295
 8002c04:	f7ff ff8e 	bl	8002b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c08:	4b05      	ldr	r3, [pc, #20]	@ (8002c20 <SysTick_Config+0x40>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0e:	4b04      	ldr	r3, [pc, #16]	@ (8002c20 <SysTick_Config+0x40>)
 8002c10:	2207      	movs	r2, #7
 8002c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	e000e010 	.word	0xe000e010

08002c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ff05 	bl	8002a3c <__NVIC_SetPriorityGrouping>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b086      	sub	sp, #24
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	4603      	mov	r3, r0
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c4c:	f7ff ff1a 	bl	8002a84 <__NVIC_GetPriorityGrouping>
 8002c50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	6978      	ldr	r0, [r7, #20]
 8002c58:	f7ff ff8e 	bl	8002b78 <NVIC_EncodePriority>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c62:	4611      	mov	r1, r2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff5d 	bl	8002b24 <__NVIC_SetPriority>
}
 8002c6a:	bf00      	nop
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	4603      	mov	r3, r0
 8002c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff0d 	bl	8002aa0 <__NVIC_EnableIRQ>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff1d 	bl	8002adc <__NVIC_DisableIRQ>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff ff94 	bl	8002be0 <SysTick_Config>
 8002cb8:	4603      	mov	r3, r0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b085      	sub	sp, #20
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d008      	beq.n	8002cec <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2204      	movs	r2, #4
 8002cde:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e022      	b.n	8002d32 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 020e 	bic.w	r2, r2, #14
 8002cfa:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d10:	f003 021c 	and.w	r2, r3, #28
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d18:	2101      	movs	r1, #1
 8002d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d005      	beq.n	8002d62 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2204      	movs	r2, #4
 8002d5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
 8002d60:	e029      	b.n	8002db6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 020e 	bic.w	r2, r2, #14
 8002d70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0201 	bic.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d86:	f003 021c 	and.w	r2, r3, #28
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	2101      	movs	r1, #1
 8002d90:	fa01 f202 	lsl.w	r2, r1, r2
 8002d94:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	4798      	blx	r3
    }
  }
  return status;
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dce:	e148      	b.n	8003062 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 813a 	beq.w	800305c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d005      	beq.n	8002e00 <HAL_GPIO_Init+0x40>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d130      	bne.n	8002e62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e36:	2201      	movs	r2, #1
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4013      	ands	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	091b      	lsrs	r3, r3, #4
 8002e4c:	f003 0201 	and.w	r2, r3, #1
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d017      	beq.n	8002e9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	2203      	movs	r2, #3
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4013      	ands	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d123      	bne.n	8002ef2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	08da      	lsrs	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3208      	adds	r2, #8
 8002eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	220f      	movs	r2, #15
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	08da      	lsrs	r2, r3, #3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3208      	adds	r2, #8
 8002eec:	6939      	ldr	r1, [r7, #16]
 8002eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	2203      	movs	r2, #3
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4013      	ands	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 0203 	and.w	r2, r3, #3
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 8094 	beq.w	800305c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f34:	4b52      	ldr	r3, [pc, #328]	@ (8003080 <HAL_GPIO_Init+0x2c0>)
 8002f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f38:	4a51      	ldr	r2, [pc, #324]	@ (8003080 <HAL_GPIO_Init+0x2c0>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f40:	4b4f      	ldr	r3, [pc, #316]	@ (8003080 <HAL_GPIO_Init+0x2c0>)
 8002f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f4c:	4a4d      	ldr	r2, [pc, #308]	@ (8003084 <HAL_GPIO_Init+0x2c4>)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	089b      	lsrs	r3, r3, #2
 8002f52:	3302      	adds	r3, #2
 8002f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	220f      	movs	r2, #15
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f76:	d00d      	beq.n	8002f94 <HAL_GPIO_Init+0x1d4>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a43      	ldr	r2, [pc, #268]	@ (8003088 <HAL_GPIO_Init+0x2c8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d007      	beq.n	8002f90 <HAL_GPIO_Init+0x1d0>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a42      	ldr	r2, [pc, #264]	@ (800308c <HAL_GPIO_Init+0x2cc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d101      	bne.n	8002f8c <HAL_GPIO_Init+0x1cc>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e004      	b.n	8002f96 <HAL_GPIO_Init+0x1d6>
 8002f8c:	2307      	movs	r3, #7
 8002f8e:	e002      	b.n	8002f96 <HAL_GPIO_Init+0x1d6>
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <HAL_GPIO_Init+0x1d6>
 8002f94:	2300      	movs	r3, #0
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	f002 0203 	and.w	r2, r2, #3
 8002f9c:	0092      	lsls	r2, r2, #2
 8002f9e:	4093      	lsls	r3, r2
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fa6:	4937      	ldr	r1, [pc, #220]	@ (8003084 <HAL_GPIO_Init+0x2c4>)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	089b      	lsrs	r3, r3, #2
 8002fac:	3302      	adds	r3, #2
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fb4:	4b36      	ldr	r3, [pc, #216]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fd8:	4a2d      	ldr	r2, [pc, #180]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fde:	4b2c      	ldr	r3, [pc, #176]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003002:	4a23      	ldr	r2, [pc, #140]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003008:	4b21      	ldr	r3, [pc, #132]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	43db      	mvns	r3, r3
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800302c:	4a18      	ldr	r2, [pc, #96]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003032:	4b17      	ldr	r3, [pc, #92]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	43db      	mvns	r3, r3
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4013      	ands	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4313      	orrs	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003056:	4a0e      	ldr	r2, [pc, #56]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	3301      	adds	r3, #1
 8003060:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	f47f aeaf 	bne.w	8002dd0 <HAL_GPIO_Init+0x10>
  }
}
 8003072:	bf00      	nop
 8003074:	bf00      	nop
 8003076:	371c      	adds	r7, #28
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	40021000 	.word	0x40021000
 8003084:	40010000 	.word	0x40010000
 8003088:	48000400 	.word	0x48000400
 800308c:	48000800 	.word	0x48000800
 8003090:	40010400 	.word	0x40010400

08003094 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80030a2:	e0ab      	b.n	80031fc <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80030a4:	2201      	movs	r2, #1
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	4013      	ands	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 809e 	beq.w	80031f6 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80030ba:	4a57      	ldr	r2, [pc, #348]	@ (8003218 <HAL_GPIO_DeInit+0x184>)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	089b      	lsrs	r3, r3, #2
 80030c0:	3302      	adds	r3, #2
 80030c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	220f      	movs	r2, #15
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4013      	ands	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030e2:	d00d      	beq.n	8003100 <HAL_GPIO_DeInit+0x6c>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a4d      	ldr	r2, [pc, #308]	@ (800321c <HAL_GPIO_DeInit+0x188>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d007      	beq.n	80030fc <HAL_GPIO_DeInit+0x68>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a4c      	ldr	r2, [pc, #304]	@ (8003220 <HAL_GPIO_DeInit+0x18c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d101      	bne.n	80030f8 <HAL_GPIO_DeInit+0x64>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e004      	b.n	8003102 <HAL_GPIO_DeInit+0x6e>
 80030f8:	2307      	movs	r3, #7
 80030fa:	e002      	b.n	8003102 <HAL_GPIO_DeInit+0x6e>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <HAL_GPIO_DeInit+0x6e>
 8003100:	2300      	movs	r3, #0
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	f002 0203 	and.w	r2, r2, #3
 8003108:	0092      	lsls	r2, r2, #2
 800310a:	4093      	lsls	r3, r2
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	429a      	cmp	r2, r3
 8003110:	d132      	bne.n	8003178 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003112:	4b44      	ldr	r3, [pc, #272]	@ (8003224 <HAL_GPIO_DeInit+0x190>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	43db      	mvns	r3, r3
 800311a:	4942      	ldr	r1, [pc, #264]	@ (8003224 <HAL_GPIO_DeInit+0x190>)
 800311c:	4013      	ands	r3, r2
 800311e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003120:	4b40      	ldr	r3, [pc, #256]	@ (8003224 <HAL_GPIO_DeInit+0x190>)
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	43db      	mvns	r3, r3
 8003128:	493e      	ldr	r1, [pc, #248]	@ (8003224 <HAL_GPIO_DeInit+0x190>)
 800312a:	4013      	ands	r3, r2
 800312c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800312e:	4b3d      	ldr	r3, [pc, #244]	@ (8003224 <HAL_GPIO_DeInit+0x190>)
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	43db      	mvns	r3, r3
 8003136:	493b      	ldr	r1, [pc, #236]	@ (8003224 <HAL_GPIO_DeInit+0x190>)
 8003138:	4013      	ands	r3, r2
 800313a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800313c:	4b39      	ldr	r3, [pc, #228]	@ (8003224 <HAL_GPIO_DeInit+0x190>)
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	43db      	mvns	r3, r3
 8003144:	4937      	ldr	r1, [pc, #220]	@ (8003224 <HAL_GPIO_DeInit+0x190>)
 8003146:	4013      	ands	r3, r2
 8003148:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	220f      	movs	r2, #15
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800315a:	4a2f      	ldr	r2, [pc, #188]	@ (8003218 <HAL_GPIO_DeInit+0x184>)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	089b      	lsrs	r3, r3, #2
 8003160:	3302      	adds	r3, #2
 8003162:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	43da      	mvns	r2, r3
 800316a:	482b      	ldr	r0, [pc, #172]	@ (8003218 <HAL_GPIO_DeInit+0x184>)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	400a      	ands	r2, r1
 8003172:	3302      	adds	r3, #2
 8003174:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	2103      	movs	r1, #3
 8003182:	fa01 f303 	lsl.w	r3, r1, r3
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	08da      	lsrs	r2, r3, #3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3208      	adds	r2, #8
 8003194:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	220f      	movs	r2, #15
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	08d2      	lsrs	r2, r2, #3
 80031ac:	4019      	ands	r1, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3208      	adds	r2, #8
 80031b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	2103      	movs	r1, #3
 80031c0:	fa01 f303 	lsl.w	r3, r1, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	401a      	ands	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	2101      	movs	r1, #1
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	401a      	ands	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	2103      	movs	r1, #3
 80031ea:	fa01 f303 	lsl.w	r3, r1, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	401a      	ands	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	3301      	adds	r3, #1
 80031fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	f47f af4d 	bne.w	80030a4 <HAL_GPIO_DeInit+0x10>
  }
}
 800320a:	bf00      	nop
 800320c:	bf00      	nop
 800320e:	371c      	adds	r7, #28
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	40010000 	.word	0x40010000
 800321c:	48000400 	.word	0x48000400
 8003220:	48000800 	.word	0x48000800
 8003224:	40010400 	.word	0x40010400

08003228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	807b      	strh	r3, [r7, #2]
 8003234:	4613      	mov	r3, r2
 8003236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003238:	787b      	ldrb	r3, [r7, #1]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003244:	e002      	b.n	800324c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800326a:	887a      	ldrh	r2, [r7, #2]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4013      	ands	r3, r2
 8003270:	041a      	lsls	r2, r3, #16
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	43d9      	mvns	r1, r3
 8003276:	887b      	ldrh	r3, [r7, #2]
 8003278:	400b      	ands	r3, r1
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	619a      	str	r2, [r3, #24]
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003296:	4b08      	ldr	r3, [pc, #32]	@ (80032b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d006      	beq.n	80032b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032a2:	4a05      	ldr	r2, [pc, #20]	@ (80032b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd feaa 	bl	8001004 <HAL_GPIO_EXTI_Callback>
  }
}
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40010400 	.word	0x40010400

080032bc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032c0:	4b05      	ldr	r3, [pc, #20]	@ (80032d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a04      	ldr	r2, [pc, #16]	@ (80032d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ca:	6013      	str	r3, [r2, #0]
}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40007000 	.word	0x40007000

080032dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032e0:	4b04      	ldr	r3, [pc, #16]	@ (80032f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40007000 	.word	0x40007000

080032f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003306:	d130      	bne.n	800336a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003308:	4b23      	ldr	r3, [pc, #140]	@ (8003398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003310:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003314:	d038      	beq.n	8003388 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003316:	4b20      	ldr	r3, [pc, #128]	@ (8003398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800331e:	4a1e      	ldr	r2, [pc, #120]	@ (8003398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003320:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003324:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003326:	4b1d      	ldr	r3, [pc, #116]	@ (800339c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2232      	movs	r2, #50	@ 0x32
 800332c:	fb02 f303 	mul.w	r3, r2, r3
 8003330:	4a1b      	ldr	r2, [pc, #108]	@ (80033a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	0c9b      	lsrs	r3, r3, #18
 8003338:	3301      	adds	r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800333c:	e002      	b.n	8003344 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	3b01      	subs	r3, #1
 8003342:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003344:	4b14      	ldr	r3, [pc, #80]	@ (8003398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800334c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003350:	d102      	bne.n	8003358 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1f2      	bne.n	800333e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003358:	4b0f      	ldr	r3, [pc, #60]	@ (8003398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003364:	d110      	bne.n	8003388 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e00f      	b.n	800338a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800336a:	4b0b      	ldr	r3, [pc, #44]	@ (8003398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003376:	d007      	beq.n	8003388 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003378:	4b07      	ldr	r3, [pc, #28]	@ (8003398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003380:	4a05      	ldr	r2, [pc, #20]	@ (8003398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003382:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003386:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40007000 	.word	0x40007000
 800339c:	20000000 	.word	0x20000000
 80033a0:	431bde83 	.word	0x431bde83

080033a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d102      	bne.n	80033b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f000 bc02 	b.w	8003bbc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b8:	4b96      	ldr	r3, [pc, #600]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 030c 	and.w	r3, r3, #12
 80033c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033c2:	4b94      	ldr	r3, [pc, #592]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0310 	and.w	r3, r3, #16
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80e4 	beq.w	80035a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <HAL_RCC_OscConfig+0x4c>
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	2b0c      	cmp	r3, #12
 80033e4:	f040 808b 	bne.w	80034fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	f040 8087 	bne.w	80034fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033f0:	4b88      	ldr	r3, [pc, #544]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_OscConfig+0x64>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e3d9      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1a      	ldr	r2, [r3, #32]
 800340c:	4b81      	ldr	r3, [pc, #516]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d004      	beq.n	8003422 <HAL_RCC_OscConfig+0x7e>
 8003418:	4b7e      	ldr	r3, [pc, #504]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003420:	e005      	b.n	800342e <HAL_RCC_OscConfig+0x8a>
 8003422:	4b7c      	ldr	r3, [pc, #496]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 8003424:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800342e:	4293      	cmp	r3, r2
 8003430:	d223      	bcs.n	800347a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fd8c 	bl	8003f54 <RCC_SetFlashLatencyFromMSIRange>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e3ba      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003446:	4b73      	ldr	r3, [pc, #460]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a72      	ldr	r2, [pc, #456]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 800344c:	f043 0308 	orr.w	r3, r3, #8
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	4b70      	ldr	r3, [pc, #448]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	496d      	ldr	r1, [pc, #436]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 8003460:	4313      	orrs	r3, r2
 8003462:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003464:	4b6b      	ldr	r3, [pc, #428]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	4968      	ldr	r1, [pc, #416]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]
 8003478:	e025      	b.n	80034c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800347a:	4b66      	ldr	r3, [pc, #408]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a65      	ldr	r2, [pc, #404]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 8003480:	f043 0308 	orr.w	r3, r3, #8
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	4b63      	ldr	r3, [pc, #396]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	4960      	ldr	r1, [pc, #384]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 8003494:	4313      	orrs	r3, r2
 8003496:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003498:	4b5e      	ldr	r3, [pc, #376]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	021b      	lsls	r3, r3, #8
 80034a6:	495b      	ldr	r1, [pc, #364]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fd4c 	bl	8003f54 <RCC_SetFlashLatencyFromMSIRange>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e37a      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034c6:	f000 fc81 	bl	8003dcc <HAL_RCC_GetSysClockFreq>
 80034ca:	4602      	mov	r2, r0
 80034cc:	4b51      	ldr	r3, [pc, #324]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	4950      	ldr	r1, [pc, #320]	@ (8003618 <HAL_RCC_OscConfig+0x274>)
 80034d8:	5ccb      	ldrb	r3, [r1, r3]
 80034da:	f003 031f 	and.w	r3, r3, #31
 80034de:	fa22 f303 	lsr.w	r3, r2, r3
 80034e2:	4a4e      	ldr	r2, [pc, #312]	@ (800361c <HAL_RCC_OscConfig+0x278>)
 80034e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034e6:	4b4e      	ldr	r3, [pc, #312]	@ (8003620 <HAL_RCC_OscConfig+0x27c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff fa4a 	bl	8002984 <HAL_InitTick>
 80034f0:	4603      	mov	r3, r0
 80034f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d052      	beq.n	80035a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	e35e      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d032      	beq.n	800356c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003506:	4b43      	ldr	r3, [pc, #268]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a42      	ldr	r2, [pc, #264]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003512:	f7ff fa87 	bl	8002a24 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800351a:	f7ff fa83 	bl	8002a24 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e347      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800352c:	4b39      	ldr	r3, [pc, #228]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003538:	4b36      	ldr	r3, [pc, #216]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a35      	ldr	r2, [pc, #212]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 800353e:	f043 0308 	orr.w	r3, r3, #8
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	4b33      	ldr	r3, [pc, #204]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4930      	ldr	r1, [pc, #192]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 8003552:	4313      	orrs	r3, r2
 8003554:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003556:	4b2f      	ldr	r3, [pc, #188]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	492b      	ldr	r1, [pc, #172]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 8003566:	4313      	orrs	r3, r2
 8003568:	604b      	str	r3, [r1, #4]
 800356a:	e01a      	b.n	80035a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800356c:	4b29      	ldr	r3, [pc, #164]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a28      	ldr	r2, [pc, #160]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 8003572:	f023 0301 	bic.w	r3, r3, #1
 8003576:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003578:	f7ff fa54 	bl	8002a24 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003580:	f7ff fa50 	bl	8002a24 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e314      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003592:	4b20      	ldr	r3, [pc, #128]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x1dc>
 800359e:	e000      	b.n	80035a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d073      	beq.n	8003696 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d005      	beq.n	80035c0 <HAL_RCC_OscConfig+0x21c>
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	2b0c      	cmp	r3, #12
 80035b8:	d10e      	bne.n	80035d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b03      	cmp	r3, #3
 80035be:	d10b      	bne.n	80035d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c0:	4b14      	ldr	r3, [pc, #80]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d063      	beq.n	8003694 <HAL_RCC_OscConfig+0x2f0>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d15f      	bne.n	8003694 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e2f1      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e0:	d106      	bne.n	80035f0 <HAL_RCC_OscConfig+0x24c>
 80035e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a0b      	ldr	r2, [pc, #44]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e025      	b.n	800363c <HAL_RCC_OscConfig+0x298>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035f8:	d114      	bne.n	8003624 <HAL_RCC_OscConfig+0x280>
 80035fa:	4b06      	ldr	r3, [pc, #24]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a05      	ldr	r2, [pc, #20]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 8003600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4b03      	ldr	r3, [pc, #12]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a02      	ldr	r2, [pc, #8]	@ (8003614 <HAL_RCC_OscConfig+0x270>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e013      	b.n	800363c <HAL_RCC_OscConfig+0x298>
 8003614:	40021000 	.word	0x40021000
 8003618:	0800d050 	.word	0x0800d050
 800361c:	20000000 	.word	0x20000000
 8003620:	2000000c 	.word	0x2000000c
 8003624:	4ba0      	ldr	r3, [pc, #640]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a9f      	ldr	r2, [pc, #636]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 800362a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	4b9d      	ldr	r3, [pc, #628]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a9c      	ldr	r2, [pc, #624]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 8003636:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800363a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d013      	beq.n	800366c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7ff f9ee 	bl	8002a24 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800364c:	f7ff f9ea 	bl	8002a24 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b64      	cmp	r3, #100	@ 0x64
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e2ae      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800365e:	4b92      	ldr	r3, [pc, #584]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0x2a8>
 800366a:	e014      	b.n	8003696 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7ff f9da 	bl	8002a24 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003674:	f7ff f9d6 	bl	8002a24 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	@ 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e29a      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003686:	4b88      	ldr	r3, [pc, #544]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x2d0>
 8003692:	e000      	b.n	8003696 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d060      	beq.n	8003764 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d005      	beq.n	80036b4 <HAL_RCC_OscConfig+0x310>
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b0c      	cmp	r3, #12
 80036ac:	d119      	bne.n	80036e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d116      	bne.n	80036e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b4:	4b7c      	ldr	r3, [pc, #496]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d005      	beq.n	80036cc <HAL_RCC_OscConfig+0x328>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e277      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036cc:	4b76      	ldr	r3, [pc, #472]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	061b      	lsls	r3, r3, #24
 80036da:	4973      	ldr	r1, [pc, #460]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e0:	e040      	b.n	8003764 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d023      	beq.n	8003732 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ea:	4b6f      	ldr	r3, [pc, #444]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a6e      	ldr	r2, [pc, #440]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 80036f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7ff f995 	bl	8002a24 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fe:	f7ff f991 	bl	8002a24 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e255      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003710:	4b65      	ldr	r3, [pc, #404]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371c:	4b62      	ldr	r3, [pc, #392]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	061b      	lsls	r3, r3, #24
 800372a:	495f      	ldr	r1, [pc, #380]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 800372c:	4313      	orrs	r3, r2
 800372e:	604b      	str	r3, [r1, #4]
 8003730:	e018      	b.n	8003764 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003732:	4b5d      	ldr	r3, [pc, #372]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a5c      	ldr	r2, [pc, #368]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 8003738:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800373c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373e:	f7ff f971 	bl	8002a24 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003746:	f7ff f96d 	bl	8002a24 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e231      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003758:	4b53      	ldr	r3, [pc, #332]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1f0      	bne.n	8003746 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d03c      	beq.n	80037ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01c      	beq.n	80037b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003778:	4b4b      	ldr	r3, [pc, #300]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 800377a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800377e:	4a4a      	ldr	r2, [pc, #296]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003788:	f7ff f94c 	bl	8002a24 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003790:	f7ff f948 	bl	8002a24 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e20c      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037a2:	4b41      	ldr	r3, [pc, #260]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 80037a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0ef      	beq.n	8003790 <HAL_RCC_OscConfig+0x3ec>
 80037b0:	e01b      	b.n	80037ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037b2:	4b3d      	ldr	r3, [pc, #244]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 80037b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037b8:	4a3b      	ldr	r2, [pc, #236]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 80037ba:	f023 0301 	bic.w	r3, r3, #1
 80037be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c2:	f7ff f92f 	bl	8002a24 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ca:	f7ff f92b 	bl	8002a24 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e1ef      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037dc:	4b32      	ldr	r3, [pc, #200]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 80037de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1ef      	bne.n	80037ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 80a6 	beq.w	8003944 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037f8:	2300      	movs	r3, #0
 80037fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037fc:	4b2a      	ldr	r3, [pc, #168]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 80037fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10d      	bne.n	8003824 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003808:	4b27      	ldr	r3, [pc, #156]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 800380a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380c:	4a26      	ldr	r2, [pc, #152]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 800380e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003812:	6593      	str	r3, [r2, #88]	@ 0x58
 8003814:	4b24      	ldr	r3, [pc, #144]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 8003816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003820:	2301      	movs	r3, #1
 8003822:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003824:	4b21      	ldr	r3, [pc, #132]	@ (80038ac <HAL_RCC_OscConfig+0x508>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d118      	bne.n	8003862 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003830:	4b1e      	ldr	r3, [pc, #120]	@ (80038ac <HAL_RCC_OscConfig+0x508>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a1d      	ldr	r2, [pc, #116]	@ (80038ac <HAL_RCC_OscConfig+0x508>)
 8003836:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800383a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800383c:	f7ff f8f2 	bl	8002a24 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003844:	f7ff f8ee 	bl	8002a24 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e1b2      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003856:	4b15      	ldr	r3, [pc, #84]	@ (80038ac <HAL_RCC_OscConfig+0x508>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d108      	bne.n	800387c <HAL_RCC_OscConfig+0x4d8>
 800386a:	4b0f      	ldr	r3, [pc, #60]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003870:	4a0d      	ldr	r2, [pc, #52]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 8003872:	f043 0301 	orr.w	r3, r3, #1
 8003876:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800387a:	e029      	b.n	80038d0 <HAL_RCC_OscConfig+0x52c>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b05      	cmp	r3, #5
 8003882:	d115      	bne.n	80038b0 <HAL_RCC_OscConfig+0x50c>
 8003884:	4b08      	ldr	r3, [pc, #32]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388a:	4a07      	ldr	r2, [pc, #28]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 800388c:	f043 0304 	orr.w	r3, r3, #4
 8003890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003894:	4b04      	ldr	r3, [pc, #16]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389a:	4a03      	ldr	r2, [pc, #12]	@ (80038a8 <HAL_RCC_OscConfig+0x504>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038a4:	e014      	b.n	80038d0 <HAL_RCC_OscConfig+0x52c>
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40007000 	.word	0x40007000
 80038b0:	4b9a      	ldr	r3, [pc, #616]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b6:	4a99      	ldr	r2, [pc, #612]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 80038b8:	f023 0301 	bic.w	r3, r3, #1
 80038bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038c0:	4b96      	ldr	r3, [pc, #600]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 80038c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c6:	4a95      	ldr	r2, [pc, #596]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 80038c8:	f023 0304 	bic.w	r3, r3, #4
 80038cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d016      	beq.n	8003906 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d8:	f7ff f8a4 	bl	8002a24 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e0:	f7ff f8a0 	bl	8002a24 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e162      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038f6:	4b89      	ldr	r3, [pc, #548]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 80038f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0ed      	beq.n	80038e0 <HAL_RCC_OscConfig+0x53c>
 8003904:	e015      	b.n	8003932 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003906:	f7ff f88d 	bl	8002a24 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800390c:	e00a      	b.n	8003924 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390e:	f7ff f889 	bl	8002a24 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391c:	4293      	cmp	r3, r2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e14b      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003924:	4b7d      	ldr	r3, [pc, #500]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1ed      	bne.n	800390e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003932:	7ffb      	ldrb	r3, [r7, #31]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d105      	bne.n	8003944 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003938:	4b78      	ldr	r3, [pc, #480]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 800393a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393c:	4a77      	ldr	r2, [pc, #476]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 800393e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003942:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b00      	cmp	r3, #0
 800394e:	d03c      	beq.n	80039ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01c      	beq.n	8003992 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003958:	4b70      	ldr	r3, [pc, #448]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 800395a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800395e:	4a6f      	ldr	r2, [pc, #444]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003968:	f7ff f85c 	bl	8002a24 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003970:	f7ff f858 	bl	8002a24 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e11c      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003982:	4b66      	ldr	r3, [pc, #408]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 8003984:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0ef      	beq.n	8003970 <HAL_RCC_OscConfig+0x5cc>
 8003990:	e01b      	b.n	80039ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003992:	4b62      	ldr	r3, [pc, #392]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 8003994:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003998:	4a60      	ldr	r2, [pc, #384]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 800399a:	f023 0301 	bic.w	r3, r3, #1
 800399e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a2:	f7ff f83f 	bl	8002a24 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039aa:	f7ff f83b 	bl	8002a24 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e0ff      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039bc:	4b57      	ldr	r3, [pc, #348]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 80039be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1ef      	bne.n	80039aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 80f3 	beq.w	8003bba <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d8:	2b02      	cmp	r3, #2
 80039da:	f040 80c9 	bne.w	8003b70 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039de:	4b4f      	ldr	r3, [pc, #316]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f003 0203 	and.w	r2, r3, #3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d12c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fc:	3b01      	subs	r3, #1
 80039fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d123      	bne.n	8003a4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a0e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d11b      	bne.n	8003a4c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d113      	bne.n	8003a4c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2e:	085b      	lsrs	r3, r3, #1
 8003a30:	3b01      	subs	r3, #1
 8003a32:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d109      	bne.n	8003a4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	3b01      	subs	r3, #1
 8003a46:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d06b      	beq.n	8003b24 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b0c      	cmp	r3, #12
 8003a50:	d062      	beq.n	8003b18 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a52:	4b32      	ldr	r3, [pc, #200]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e0ac      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a62:	4b2e      	ldr	r3, [pc, #184]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a2d      	ldr	r2, [pc, #180]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 8003a68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a6c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a6e:	f7fe ffd9 	bl	8002a24 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a76:	f7fe ffd5 	bl	8002a24 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e099      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a88:	4b24      	ldr	r3, [pc, #144]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f0      	bne.n	8003a76 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a94:	4b21      	ldr	r3, [pc, #132]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	4b21      	ldr	r3, [pc, #132]	@ (8003b20 <HAL_RCC_OscConfig+0x77c>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003aa4:	3a01      	subs	r2, #1
 8003aa6:	0112      	lsls	r2, r2, #4
 8003aa8:	4311      	orrs	r1, r2
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003aae:	0212      	lsls	r2, r2, #8
 8003ab0:	4311      	orrs	r1, r2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ab6:	0852      	lsrs	r2, r2, #1
 8003ab8:	3a01      	subs	r2, #1
 8003aba:	0552      	lsls	r2, r2, #21
 8003abc:	4311      	orrs	r1, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ac2:	0852      	lsrs	r2, r2, #1
 8003ac4:	3a01      	subs	r2, #1
 8003ac6:	0652      	lsls	r2, r2, #25
 8003ac8:	4311      	orrs	r1, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ace:	06d2      	lsls	r2, r2, #27
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	4912      	ldr	r1, [pc, #72]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ad8:	4b10      	ldr	r3, [pc, #64]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a0f      	ldr	r2, [pc, #60]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 8003ade:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ae2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4a0c      	ldr	r2, [pc, #48]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 8003aea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003af0:	f7fe ff98 	bl	8002a24 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af8:	f7fe ff94 	bl	8002a24 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e058      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0a:	4b04      	ldr	r3, [pc, #16]	@ (8003b1c <HAL_RCC_OscConfig+0x778>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b16:	e050      	b.n	8003bba <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e04f      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b24:	4b27      	ldr	r3, [pc, #156]	@ (8003bc4 <HAL_RCC_OscConfig+0x820>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d144      	bne.n	8003bba <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b30:	4b24      	ldr	r3, [pc, #144]	@ (8003bc4 <HAL_RCC_OscConfig+0x820>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a23      	ldr	r2, [pc, #140]	@ (8003bc4 <HAL_RCC_OscConfig+0x820>)
 8003b36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b3c:	4b21      	ldr	r3, [pc, #132]	@ (8003bc4 <HAL_RCC_OscConfig+0x820>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4a20      	ldr	r2, [pc, #128]	@ (8003bc4 <HAL_RCC_OscConfig+0x820>)
 8003b42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b48:	f7fe ff6c 	bl	8002a24 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b50:	f7fe ff68 	bl	8002a24 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e02c      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b62:	4b18      	ldr	r3, [pc, #96]	@ (8003bc4 <HAL_RCC_OscConfig+0x820>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0f0      	beq.n	8003b50 <HAL_RCC_OscConfig+0x7ac>
 8003b6e:	e024      	b.n	8003bba <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	2b0c      	cmp	r3, #12
 8003b74:	d01f      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b76:	4b13      	ldr	r3, [pc, #76]	@ (8003bc4 <HAL_RCC_OscConfig+0x820>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a12      	ldr	r2, [pc, #72]	@ (8003bc4 <HAL_RCC_OscConfig+0x820>)
 8003b7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fe ff4f 	bl	8002a24 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b8a:	f7fe ff4b 	bl	8002a24 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e00f      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b9c:	4b09      	ldr	r3, [pc, #36]	@ (8003bc4 <HAL_RCC_OscConfig+0x820>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f0      	bne.n	8003b8a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003ba8:	4b06      	ldr	r3, [pc, #24]	@ (8003bc4 <HAL_RCC_OscConfig+0x820>)
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	4905      	ldr	r1, [pc, #20]	@ (8003bc4 <HAL_RCC_OscConfig+0x820>)
 8003bae:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <HAL_RCC_OscConfig+0x824>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	60cb      	str	r3, [r1, #12]
 8003bb4:	e001      	b.n	8003bba <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3720      	adds	r7, #32
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	feeefffc 	.word	0xfeeefffc

08003bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0e7      	b.n	8003db0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be0:	4b75      	ldr	r3, [pc, #468]	@ (8003db8 <HAL_RCC_ClockConfig+0x1ec>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d910      	bls.n	8003c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b72      	ldr	r3, [pc, #456]	@ (8003db8 <HAL_RCC_ClockConfig+0x1ec>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 0207 	bic.w	r2, r3, #7
 8003bf6:	4970      	ldr	r1, [pc, #448]	@ (8003db8 <HAL_RCC_ClockConfig+0x1ec>)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b6e      	ldr	r3, [pc, #440]	@ (8003db8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0cf      	b.n	8003db0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d010      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	4b66      	ldr	r3, [pc, #408]	@ (8003dbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d908      	bls.n	8003c3e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c2c:	4b63      	ldr	r3, [pc, #396]	@ (8003dbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4960      	ldr	r1, [pc, #384]	@ (8003dbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d04c      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d107      	bne.n	8003c62 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c52:	4b5a      	ldr	r3, [pc, #360]	@ (8003dbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d121      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e0a6      	b.n	8003db0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d107      	bne.n	8003c7a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c6a:	4b54      	ldr	r3, [pc, #336]	@ (8003dbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d115      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e09a      	b.n	8003db0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d107      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c82:	4b4e      	ldr	r3, [pc, #312]	@ (8003dbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e08e      	b.n	8003db0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c92:	4b4a      	ldr	r3, [pc, #296]	@ (8003dbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e086      	b.n	8003db0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ca2:	4b46      	ldr	r3, [pc, #280]	@ (8003dbc <HAL_RCC_ClockConfig+0x1f0>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f023 0203 	bic.w	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	4943      	ldr	r1, [pc, #268]	@ (8003dbc <HAL_RCC_ClockConfig+0x1f0>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb4:	f7fe feb6 	bl	8002a24 <HAL_GetTick>
 8003cb8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cba:	e00a      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cbc:	f7fe feb2 	bl	8002a24 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e06e      	b.n	8003db0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd2:	4b3a      	ldr	r3, [pc, #232]	@ (8003dbc <HAL_RCC_ClockConfig+0x1f0>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 020c 	and.w	r2, r3, #12
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d1eb      	bne.n	8003cbc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d010      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	4b31      	ldr	r3, [pc, #196]	@ (8003dbc <HAL_RCC_ClockConfig+0x1f0>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d208      	bcs.n	8003d12 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d00:	4b2e      	ldr	r3, [pc, #184]	@ (8003dbc <HAL_RCC_ClockConfig+0x1f0>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	492b      	ldr	r1, [pc, #172]	@ (8003dbc <HAL_RCC_ClockConfig+0x1f0>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d12:	4b29      	ldr	r3, [pc, #164]	@ (8003db8 <HAL_RCC_ClockConfig+0x1ec>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d210      	bcs.n	8003d42 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d20:	4b25      	ldr	r3, [pc, #148]	@ (8003db8 <HAL_RCC_ClockConfig+0x1ec>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f023 0207 	bic.w	r2, r3, #7
 8003d28:	4923      	ldr	r1, [pc, #140]	@ (8003db8 <HAL_RCC_ClockConfig+0x1ec>)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d30:	4b21      	ldr	r3, [pc, #132]	@ (8003db8 <HAL_RCC_ClockConfig+0x1ec>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d001      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e036      	b.n	8003db0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d008      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dbc <HAL_RCC_ClockConfig+0x1f0>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	4918      	ldr	r1, [pc, #96]	@ (8003dbc <HAL_RCC_ClockConfig+0x1f0>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d009      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d6c:	4b13      	ldr	r3, [pc, #76]	@ (8003dbc <HAL_RCC_ClockConfig+0x1f0>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4910      	ldr	r1, [pc, #64]	@ (8003dbc <HAL_RCC_ClockConfig+0x1f0>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d80:	f000 f824 	bl	8003dcc <HAL_RCC_GetSysClockFreq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b0d      	ldr	r3, [pc, #52]	@ (8003dbc <HAL_RCC_ClockConfig+0x1f0>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	091b      	lsrs	r3, r3, #4
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	490b      	ldr	r1, [pc, #44]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1f4>)
 8003d92:	5ccb      	ldrb	r3, [r1, r3]
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	fa22 f303 	lsr.w	r3, r2, r3
 8003d9c:	4a09      	ldr	r2, [pc, #36]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8003d9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003da0:	4b09      	ldr	r3, [pc, #36]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1fc>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fe fded 	bl	8002984 <HAL_InitTick>
 8003daa:	4603      	mov	r3, r0
 8003dac:	72fb      	strb	r3, [r7, #11]

  return status;
 8003dae:	7afb      	ldrb	r3, [r7, #11]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40022000 	.word	0x40022000
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	0800d050 	.word	0x0800d050
 8003dc4:	20000000 	.word	0x20000000
 8003dc8:	2000000c 	.word	0x2000000c

08003dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b089      	sub	sp, #36	@ 0x24
 8003dd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dda:	4b3e      	ldr	r3, [pc, #248]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003de4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d005      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0x34>
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	2b0c      	cmp	r3, #12
 8003df8:	d121      	bne.n	8003e3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d11e      	bne.n	8003e3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e00:	4b34      	ldr	r3, [pc, #208]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d107      	bne.n	8003e1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e0c:	4b31      	ldr	r3, [pc, #196]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	61fb      	str	r3, [r7, #28]
 8003e1a:	e005      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	091b      	lsrs	r3, r3, #4
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e28:	4a2b      	ldr	r2, [pc, #172]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10d      	bne.n	8003e54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e3c:	e00a      	b.n	8003e54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d102      	bne.n	8003e4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e44:	4b25      	ldr	r3, [pc, #148]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x110>)
 8003e46:	61bb      	str	r3, [r7, #24]
 8003e48:	e004      	b.n	8003e54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d101      	bne.n	8003e54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e50:	4b23      	ldr	r3, [pc, #140]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b0c      	cmp	r3, #12
 8003e58:	d134      	bne.n	8003ec4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d003      	beq.n	8003e72 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d003      	beq.n	8003e78 <HAL_RCC_GetSysClockFreq+0xac>
 8003e70:	e005      	b.n	8003e7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e72:	4b1a      	ldr	r3, [pc, #104]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x110>)
 8003e74:	617b      	str	r3, [r7, #20]
      break;
 8003e76:	e005      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e78:	4b19      	ldr	r3, [pc, #100]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e7a:	617b      	str	r3, [r7, #20]
      break;
 8003e7c:	e002      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	617b      	str	r3, [r7, #20]
      break;
 8003e82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e84:	4b13      	ldr	r3, [pc, #76]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	091b      	lsrs	r3, r3, #4
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	3301      	adds	r3, #1
 8003e90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e92:	4b10      	ldr	r3, [pc, #64]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	0a1b      	lsrs	r3, r3, #8
 8003e98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	fb03 f202 	mul.w	r2, r3, r2
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	0e5b      	lsrs	r3, r3, #25
 8003eb0:	f003 0303 	and.w	r3, r3, #3
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ec4:	69bb      	ldr	r3, [r7, #24]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3724      	adds	r7, #36	@ 0x24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	0800d068 	.word	0x0800d068
 8003edc:	00f42400 	.word	0x00f42400
 8003ee0:	007a1200 	.word	0x007a1200

08003ee4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ee8:	4b03      	ldr	r3, [pc, #12]	@ (8003ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eea:	681b      	ldr	r3, [r3, #0]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	20000000 	.word	0x20000000

08003efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f00:	f7ff fff0 	bl	8003ee4 <HAL_RCC_GetHCLKFreq>
 8003f04:	4602      	mov	r2, r0
 8003f06:	4b06      	ldr	r3, [pc, #24]	@ (8003f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	4904      	ldr	r1, [pc, #16]	@ (8003f24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f12:	5ccb      	ldrb	r3, [r1, r3]
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40021000 	.word	0x40021000
 8003f24:	0800d060 	.word	0x0800d060

08003f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f2c:	f7ff ffda 	bl	8003ee4 <HAL_RCC_GetHCLKFreq>
 8003f30:	4602      	mov	r2, r0
 8003f32:	4b06      	ldr	r3, [pc, #24]	@ (8003f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	0adb      	lsrs	r3, r3, #11
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	4904      	ldr	r1, [pc, #16]	@ (8003f50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f3e:	5ccb      	ldrb	r3, [r1, r3]
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	0800d060 	.word	0x0800d060

08003f54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f60:	4b2a      	ldr	r3, [pc, #168]	@ (800400c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f6c:	f7ff f9b6 	bl	80032dc <HAL_PWREx_GetVoltageRange>
 8003f70:	6178      	str	r0, [r7, #20]
 8003f72:	e014      	b.n	8003f9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f74:	4b25      	ldr	r3, [pc, #148]	@ (800400c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f78:	4a24      	ldr	r2, [pc, #144]	@ (800400c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f80:	4b22      	ldr	r3, [pc, #136]	@ (800400c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f8c:	f7ff f9a6 	bl	80032dc <HAL_PWREx_GetVoltageRange>
 8003f90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f92:	4b1e      	ldr	r3, [pc, #120]	@ (800400c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f96:	4a1d      	ldr	r2, [pc, #116]	@ (800400c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fa4:	d10b      	bne.n	8003fbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b80      	cmp	r3, #128	@ 0x80
 8003faa:	d919      	bls.n	8003fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2ba0      	cmp	r3, #160	@ 0xa0
 8003fb0:	d902      	bls.n	8003fb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	e013      	b.n	8003fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fb8:	2301      	movs	r3, #1
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	e010      	b.n	8003fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b80      	cmp	r3, #128	@ 0x80
 8003fc2:	d902      	bls.n	8003fca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	613b      	str	r3, [r7, #16]
 8003fc8:	e00a      	b.n	8003fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b80      	cmp	r3, #128	@ 0x80
 8003fce:	d102      	bne.n	8003fd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	e004      	b.n	8003fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b70      	cmp	r3, #112	@ 0x70
 8003fda:	d101      	bne.n	8003fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fdc:	2301      	movs	r3, #1
 8003fde:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8004010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f023 0207 	bic.w	r2, r3, #7
 8003fe8:	4909      	ldr	r1, [pc, #36]	@ (8004010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ff0:	4b07      	ldr	r3, [pc, #28]	@ (8004010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d001      	beq.n	8004002 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40021000 	.word	0x40021000
 8004010:	40022000 	.word	0x40022000

08004014 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800401c:	2300      	movs	r3, #0
 800401e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004020:	2300      	movs	r3, #0
 8004022:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800402c:	2b00      	cmp	r3, #0
 800402e:	d031      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004034:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004038:	d01a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800403a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800403e:	d814      	bhi.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004040:	2b00      	cmp	r3, #0
 8004042:	d009      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004044:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004048:	d10f      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800404a:	4b5d      	ldr	r3, [pc, #372]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	4a5c      	ldr	r2, [pc, #368]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004054:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004056:	e00c      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	2100      	movs	r1, #0
 800405e:	4618      	mov	r0, r3
 8004060:	f000 f9de 	bl	8004420 <RCCEx_PLLSAI1_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004068:	e003      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	74fb      	strb	r3, [r7, #19]
      break;
 800406e:	e000      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004070:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004072:	7cfb      	ldrb	r3, [r7, #19]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10b      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004078:	4b51      	ldr	r3, [pc, #324]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004086:	494e      	ldr	r1, [pc, #312]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800408e:	e001      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 809e 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040a2:	2300      	movs	r3, #0
 80040a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040a6:	4b46      	ldr	r3, [pc, #280]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80040b6:	2300      	movs	r3, #0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00d      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040bc:	4b40      	ldr	r3, [pc, #256]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c0:	4a3f      	ldr	r2, [pc, #252]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80040c8:	4b3d      	ldr	r3, [pc, #244]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d4:	2301      	movs	r3, #1
 80040d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040d8:	4b3a      	ldr	r3, [pc, #232]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a39      	ldr	r2, [pc, #228]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80040de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040e4:	f7fe fc9e 	bl	8002a24 <HAL_GetTick>
 80040e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040ea:	e009      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ec:	f7fe fc9a 	bl	8002a24 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d902      	bls.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	74fb      	strb	r3, [r7, #19]
        break;
 80040fe:	e005      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004100:	4b30      	ldr	r3, [pc, #192]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0ef      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800410c:	7cfb      	ldrb	r3, [r7, #19]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d15a      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004112:	4b2b      	ldr	r3, [pc, #172]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004118:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800411c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d01e      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	429a      	cmp	r2, r3
 800412c:	d019      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800412e:	4b24      	ldr	r3, [pc, #144]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004134:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004138:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800413a:	4b21      	ldr	r3, [pc, #132]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800413c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004140:	4a1f      	ldr	r2, [pc, #124]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004142:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004146:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800414a:	4b1d      	ldr	r3, [pc, #116]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004150:	4a1b      	ldr	r2, [pc, #108]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004156:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800415a:	4a19      	ldr	r2, [pc, #100]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d016      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fe fc5a 	bl	8002a24 <HAL_GetTick>
 8004170:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004172:	e00b      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004174:	f7fe fc56 	bl	8002a24 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004182:	4293      	cmp	r3, r2
 8004184:	d902      	bls.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	74fb      	strb	r3, [r7, #19]
            break;
 800418a:	e006      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800418c:	4b0c      	ldr	r3, [pc, #48]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800418e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0ec      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800419a:	7cfb      	ldrb	r3, [r7, #19]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10b      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041a0:	4b07      	ldr	r3, [pc, #28]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ae:	4904      	ldr	r1, [pc, #16]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80041b6:	e009      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041b8:	7cfb      	ldrb	r3, [r7, #19]
 80041ba:	74bb      	strb	r3, [r7, #18]
 80041bc:	e006      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c8:	7cfb      	ldrb	r3, [r7, #19]
 80041ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041cc:	7c7b      	ldrb	r3, [r7, #17]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d105      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d2:	4b8a      	ldr	r3, [pc, #552]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d6:	4a89      	ldr	r2, [pc, #548]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041ea:	4b84      	ldr	r3, [pc, #528]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f0:	f023 0203 	bic.w	r2, r3, #3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	4980      	ldr	r1, [pc, #512]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800420c:	4b7b      	ldr	r3, [pc, #492]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004212:	f023 020c 	bic.w	r2, r3, #12
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421a:	4978      	ldr	r1, [pc, #480]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800422e:	4b73      	ldr	r3, [pc, #460]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004234:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423c:	496f      	ldr	r1, [pc, #444]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004250:	4b6a      	ldr	r3, [pc, #424]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004256:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800425e:	4967      	ldr	r1, [pc, #412]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004272:	4b62      	ldr	r3, [pc, #392]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004278:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004280:	495e      	ldr	r1, [pc, #376]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004294:	4b59      	ldr	r3, [pc, #356]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a2:	4956      	ldr	r1, [pc, #344]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042b6:	4b51      	ldr	r3, [pc, #324]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c4:	494d      	ldr	r1, [pc, #308]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d028      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042d8:	4b48      	ldr	r3, [pc, #288]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e6:	4945      	ldr	r1, [pc, #276]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042f6:	d106      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042f8:	4b40      	ldr	r3, [pc, #256]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4a3f      	ldr	r2, [pc, #252]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004302:	60d3      	str	r3, [r2, #12]
 8004304:	e011      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800430e:	d10c      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3304      	adds	r3, #4
 8004314:	2101      	movs	r1, #1
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f882 	bl	8004420 <RCCEx_PLLSAI1_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004320:	7cfb      	ldrb	r3, [r7, #19]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004326:	7cfb      	ldrb	r3, [r7, #19]
 8004328:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d028      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004336:	4b31      	ldr	r3, [pc, #196]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004344:	492d      	ldr	r1, [pc, #180]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004350:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004354:	d106      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004356:	4b29      	ldr	r3, [pc, #164]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	4a28      	ldr	r2, [pc, #160]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800435c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004360:	60d3      	str	r3, [r2, #12]
 8004362:	e011      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004368:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800436c:	d10c      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3304      	adds	r3, #4
 8004372:	2101      	movs	r1, #1
 8004374:	4618      	mov	r0, r3
 8004376:	f000 f853 	bl	8004420 <RCCEx_PLLSAI1_Config>
 800437a:	4603      	mov	r3, r0
 800437c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800437e:	7cfb      	ldrb	r3, [r7, #19]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004384:	7cfb      	ldrb	r3, [r7, #19]
 8004386:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01c      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004394:	4b19      	ldr	r3, [pc, #100]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800439a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043a2:	4916      	ldr	r1, [pc, #88]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043b2:	d10c      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	2102      	movs	r1, #2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 f830 	bl	8004420 <RCCEx_PLLSAI1_Config>
 80043c0:	4603      	mov	r3, r0
 80043c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043c4:	7cfb      	ldrb	r3, [r7, #19]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80043ca:	7cfb      	ldrb	r3, [r7, #19]
 80043cc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043da:	4b08      	ldr	r3, [pc, #32]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e8:	4904      	ldr	r1, [pc, #16]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40021000 	.word	0x40021000

08004400 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004404:	4b05      	ldr	r3, [pc, #20]	@ (800441c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a04      	ldr	r2, [pc, #16]	@ (800441c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800440a:	f043 0304 	orr.w	r3, r3, #4
 800440e:	6013      	str	r3, [r2, #0]
}
 8004410:	bf00      	nop
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40021000 	.word	0x40021000

08004420 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800442e:	4b74      	ldr	r3, [pc, #464]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d018      	beq.n	800446c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800443a:	4b71      	ldr	r3, [pc, #452]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 0203 	and.w	r2, r3, #3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d10d      	bne.n	8004466 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
       ||
 800444e:	2b00      	cmp	r3, #0
 8004450:	d009      	beq.n	8004466 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004452:	4b6b      	ldr	r3, [pc, #428]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	091b      	lsrs	r3, r3, #4
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
       ||
 8004462:	429a      	cmp	r2, r3
 8004464:	d047      	beq.n	80044f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
 800446a:	e044      	b.n	80044f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b03      	cmp	r3, #3
 8004472:	d018      	beq.n	80044a6 <RCCEx_PLLSAI1_Config+0x86>
 8004474:	2b03      	cmp	r3, #3
 8004476:	d825      	bhi.n	80044c4 <RCCEx_PLLSAI1_Config+0xa4>
 8004478:	2b01      	cmp	r3, #1
 800447a:	d002      	beq.n	8004482 <RCCEx_PLLSAI1_Config+0x62>
 800447c:	2b02      	cmp	r3, #2
 800447e:	d009      	beq.n	8004494 <RCCEx_PLLSAI1_Config+0x74>
 8004480:	e020      	b.n	80044c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004482:	4b5f      	ldr	r3, [pc, #380]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d11d      	bne.n	80044ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004492:	e01a      	b.n	80044ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004494:	4b5a      	ldr	r3, [pc, #360]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449c:	2b00      	cmp	r3, #0
 800449e:	d116      	bne.n	80044ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a4:	e013      	b.n	80044ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044a6:	4b56      	ldr	r3, [pc, #344]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10f      	bne.n	80044d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044b2:	4b53      	ldr	r3, [pc, #332]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044c2:	e006      	b.n	80044d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	73fb      	strb	r3, [r7, #15]
      break;
 80044c8:	e004      	b.n	80044d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044ca:	bf00      	nop
 80044cc:	e002      	b.n	80044d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044ce:	bf00      	nop
 80044d0:	e000      	b.n	80044d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10d      	bne.n	80044f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044da:	4b49      	ldr	r3, [pc, #292]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6819      	ldr	r1, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	430b      	orrs	r3, r1
 80044f0:	4943      	ldr	r1, [pc, #268]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d17c      	bne.n	80045f6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044fc:	4b40      	ldr	r3, [pc, #256]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a3f      	ldr	r2, [pc, #252]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004502:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004506:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004508:	f7fe fa8c 	bl	8002a24 <HAL_GetTick>
 800450c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800450e:	e009      	b.n	8004524 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004510:	f7fe fa88 	bl	8002a24 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d902      	bls.n	8004524 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	73fb      	strb	r3, [r7, #15]
        break;
 8004522:	e005      	b.n	8004530 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004524:	4b36      	ldr	r3, [pc, #216]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1ef      	bne.n	8004510 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d15f      	bne.n	80045f6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d110      	bne.n	800455e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800453c:	4b30      	ldr	r3, [pc, #192]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004544:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6892      	ldr	r2, [r2, #8]
 800454c:	0211      	lsls	r1, r2, #8
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	68d2      	ldr	r2, [r2, #12]
 8004552:	06d2      	lsls	r2, r2, #27
 8004554:	430a      	orrs	r2, r1
 8004556:	492a      	ldr	r1, [pc, #168]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004558:	4313      	orrs	r3, r2
 800455a:	610b      	str	r3, [r1, #16]
 800455c:	e027      	b.n	80045ae <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d112      	bne.n	800458a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004564:	4b26      	ldr	r3, [pc, #152]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800456c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6892      	ldr	r2, [r2, #8]
 8004574:	0211      	lsls	r1, r2, #8
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6912      	ldr	r2, [r2, #16]
 800457a:	0852      	lsrs	r2, r2, #1
 800457c:	3a01      	subs	r2, #1
 800457e:	0552      	lsls	r2, r2, #21
 8004580:	430a      	orrs	r2, r1
 8004582:	491f      	ldr	r1, [pc, #124]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004584:	4313      	orrs	r3, r2
 8004586:	610b      	str	r3, [r1, #16]
 8004588:	e011      	b.n	80045ae <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800458a:	4b1d      	ldr	r3, [pc, #116]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004592:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6892      	ldr	r2, [r2, #8]
 800459a:	0211      	lsls	r1, r2, #8
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6952      	ldr	r2, [r2, #20]
 80045a0:	0852      	lsrs	r2, r2, #1
 80045a2:	3a01      	subs	r2, #1
 80045a4:	0652      	lsls	r2, r2, #25
 80045a6:	430a      	orrs	r2, r1
 80045a8:	4915      	ldr	r1, [pc, #84]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045ae:	4b14      	ldr	r3, [pc, #80]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a13      	ldr	r2, [pc, #76]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ba:	f7fe fa33 	bl	8002a24 <HAL_GetTick>
 80045be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045c0:	e009      	b.n	80045d6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045c2:	f7fe fa2f 	bl	8002a24 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d902      	bls.n	80045d6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	73fb      	strb	r3, [r7, #15]
          break;
 80045d4:	e005      	b.n	80045e2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0ef      	beq.n	80045c2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045e8:	4b05      	ldr	r3, [pc, #20]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	4903      	ldr	r1, [pc, #12]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40021000 	.word	0x40021000

08004604 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e04e      	b.n	80046b4 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800461a:	2b00      	cmp	r3, #0
 800461c:	d114      	bne.n	8004648 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fdae 	bl	8005188 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d103      	bne.n	800463e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a20      	ldr	r2, [pc, #128]	@ (80046bc <HAL_UART_Init+0xb8>)
 800463a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2224      	movs	r2, #36	@ 0x24
 800464c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0201 	bic.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f001 f800 	bl	800566c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 fdd1 	bl	8005214 <UART_SetConfig>
 8004672:	4603      	mov	r3, r0
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_UART_Init+0x78>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e01b      	b.n	80046b4 <HAL_UART_Init+0xb0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800468a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800469a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0201 	orr.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f001 f87f 	bl	80057b0 <UART_CheckIdleState>
 80046b2:	4603      	mov	r3, r0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	08001441 	.word	0x08001441

080046c0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	460b      	mov	r3, r1
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d109      	bne.n	80046ec <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e08f      	b.n	800480c <HAL_UART_RegisterCallback+0x14c>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d161      	bne.n	80047b8 <HAL_UART_RegisterCallback+0xf8>
  {
    switch (CallbackID)
 80046f4:	7afb      	ldrb	r3, [r7, #11]
 80046f6:	2b0c      	cmp	r3, #12
 80046f8:	d853      	bhi.n	80047a2 <HAL_UART_RegisterCallback+0xe2>
 80046fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004700 <HAL_UART_RegisterCallback+0x40>)
 80046fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004700:	08004735 	.word	0x08004735
 8004704:	0800473f 	.word	0x0800473f
 8004708:	08004749 	.word	0x08004749
 800470c:	08004753 	.word	0x08004753
 8004710:	0800475d 	.word	0x0800475d
 8004714:	08004767 	.word	0x08004767
 8004718:	08004771 	.word	0x08004771
 800471c:	0800477b 	.word	0x0800477b
 8004720:	08004785 	.word	0x08004785
 8004724:	080047a3 	.word	0x080047a3
 8004728:	080047a3 	.word	0x080047a3
 800472c:	0800478f 	.word	0x0800478f
 8004730:	08004799 	.word	0x08004799
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800473c:	e065      	b.n	800480a <HAL_UART_RegisterCallback+0x14a>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8004746:	e060      	b.n	800480a <HAL_UART_RegisterCallback+0x14a>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8004750:	e05b      	b.n	800480a <HAL_UART_RegisterCallback+0x14a>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800475a:	e056      	b.n	800480a <HAL_UART_RegisterCallback+0x14a>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8004764:	e051      	b.n	800480a <HAL_UART_RegisterCallback+0x14a>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800476e:	e04c      	b.n	800480a <HAL_UART_RegisterCallback+0x14a>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8004778:	e047      	b.n	800480a <HAL_UART_RegisterCallback+0x14a>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8004782:	e042      	b.n	800480a <HAL_UART_RegisterCallback+0x14a>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800478c:	e03d      	b.n	800480a <HAL_UART_RegisterCallback+0x14a>
        huart->TxFifoEmptyCallback = pCallback;
        break;
#endif /* USART_CR1_FIFOEN */

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8004796:	e038      	b.n	800480a <HAL_UART_RegisterCallback+0x14a>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80047a0:	e033      	b.n	800480a <HAL_UART_RegisterCallback+0x14a>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        status =  HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	75fb      	strb	r3, [r7, #23]
        break;
 80047b6:	e028      	b.n	800480a <HAL_UART_RegisterCallback+0x14a>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d11a      	bne.n	80047f6 <HAL_UART_RegisterCallback+0x136>
  {
    switch (CallbackID)
 80047c0:	7afb      	ldrb	r3, [r7, #11]
 80047c2:	2b0b      	cmp	r3, #11
 80047c4:	d002      	beq.n	80047cc <HAL_UART_RegisterCallback+0x10c>
 80047c6:	2b0c      	cmp	r3, #12
 80047c8:	d005      	beq.n	80047d6 <HAL_UART_RegisterCallback+0x116>
 80047ca:	e009      	b.n	80047e0 <HAL_UART_RegisterCallback+0x120>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80047d4:	e019      	b.n	800480a <HAL_UART_RegisterCallback+0x14a>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80047de:	e014      	b.n	800480a <HAL_UART_RegisterCallback+0x14a>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        status =  HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	75fb      	strb	r3, [r7, #23]
        break;
 80047f4:	e009      	b.n	800480a <HAL_UART_RegisterCallback+0x14a>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    status =  HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800480a:	7dfb      	ldrb	r3, [r7, #23]
}
 800480c:	4618      	mov	r0, r3
 800480e:	371c      	adds	r7, #28
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	@ 0x28
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	4613      	mov	r3, r2
 8004826:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800482c:	2b20      	cmp	r3, #32
 800482e:	d177      	bne.n	8004920 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <HAL_UART_Transmit+0x24>
 8004836:	88fb      	ldrh	r3, [r7, #6]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e070      	b.n	8004922 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2221      	movs	r2, #33	@ 0x21
 800484c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800484e:	f7fe f8e9 	bl	8002a24 <HAL_GetTick>
 8004852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	88fa      	ldrh	r2, [r7, #6]
 8004858:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	88fa      	ldrh	r2, [r7, #6]
 8004860:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800486c:	d108      	bne.n	8004880 <HAL_UART_Transmit+0x68>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004876:	2300      	movs	r3, #0
 8004878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	e003      	b.n	8004888 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004884:	2300      	movs	r3, #0
 8004886:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004888:	e02f      	b.n	80048ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2200      	movs	r2, #0
 8004892:	2180      	movs	r1, #128	@ 0x80
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f001 f833 	bl	8005900 <UART_WaitOnFlagUntilTimeout>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d004      	beq.n	80048aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2220      	movs	r2, #32
 80048a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e03b      	b.n	8004922 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10b      	bne.n	80048c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	881a      	ldrh	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048bc:	b292      	uxth	r2, r2
 80048be:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	3302      	adds	r3, #2
 80048c4:	61bb      	str	r3, [r7, #24]
 80048c6:	e007      	b.n	80048d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	781a      	ldrb	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	3301      	adds	r3, #1
 80048d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1c9      	bne.n	800488a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2200      	movs	r2, #0
 80048fe:	2140      	movs	r1, #64	@ 0x40
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 fffd 	bl	8005900 <UART_WaitOnFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d004      	beq.n	8004916 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e005      	b.n	8004922 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2220      	movs	r2, #32
 800491a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	e000      	b.n	8004922 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004920:	2302      	movs	r3, #2
  }
}
 8004922:	4618      	mov	r0, r3
 8004924:	3720      	adds	r7, #32
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
	...

0800492c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800492c:	b480      	push	{r7}
 800492e:	b08b      	sub	sp, #44	@ 0x2c
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	4613      	mov	r3, r2
 8004938:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800493e:	2b20      	cmp	r3, #32
 8004940:	d147      	bne.n	80049d2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_UART_Transmit_IT+0x22>
 8004948:	88fb      	ldrh	r3, [r7, #6]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e040      	b.n	80049d4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	88fa      	ldrh	r2, [r7, #6]
 800495c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	88fa      	ldrh	r2, [r7, #6]
 8004964:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2221      	movs	r2, #33	@ 0x21
 800497a:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004984:	d107      	bne.n	8004996 <HAL_UART_Transmit_IT+0x6a>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d103      	bne.n	8004996 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4a13      	ldr	r2, [pc, #76]	@ (80049e0 <HAL_UART_Transmit_IT+0xb4>)
 8004992:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004994:	e002      	b.n	800499c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a12      	ldr	r2, [pc, #72]	@ (80049e4 <HAL_UART_Transmit_IT+0xb8>)
 800499a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	e853 3f00 	ldrex	r3, [r3]
 80049a8:	613b      	str	r3, [r7, #16]
   return(result);
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	461a      	mov	r2, r3
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	623b      	str	r3, [r7, #32]
 80049bc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	69f9      	ldr	r1, [r7, #28]
 80049c0:	6a3a      	ldr	r2, [r7, #32]
 80049c2:	e841 2300 	strex	r3, r2, [r1]
 80049c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e6      	bne.n	800499c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	e000      	b.n	80049d4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80049d2:	2302      	movs	r3, #2
  }
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	372c      	adds	r7, #44	@ 0x2c
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	08005d17 	.word	0x08005d17
 80049e4:	08005c61 	.word	0x08005c61

080049e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	@ 0x28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	4613      	mov	r3, r2
 80049f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d137      	bne.n	8004a70 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <HAL_UART_Receive_IT+0x24>
 8004a06:	88fb      	ldrh	r3, [r7, #6]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e030      	b.n	8004a72 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a18      	ldr	r2, [pc, #96]	@ (8004a7c <HAL_UART_Receive_IT+0x94>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d01f      	beq.n	8004a60 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d018      	beq.n	8004a60 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	e853 3f00 	ldrex	r3, [r3]
 8004a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	623b      	str	r3, [r7, #32]
 8004a4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	69f9      	ldr	r1, [r7, #28]
 8004a52:	6a3a      	ldr	r2, [r7, #32]
 8004a54:	e841 2300 	strex	r3, r2, [r1]
 8004a58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e6      	bne.n	8004a2e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a60:	88fb      	ldrh	r3, [r7, #6]
 8004a62:	461a      	mov	r2, r3
 8004a64:	68b9      	ldr	r1, [r7, #8]
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 ffb8 	bl	80059dc <UART_Start_Receive_IT>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	e000      	b.n	8004a72 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a70:	2302      	movs	r3, #2
  }
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3728      	adds	r7, #40	@ 0x28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40008000 	.word	0x40008000

08004a80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b0ba      	sub	sp, #232	@ 0xe8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004aa6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004aaa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004aae:	4013      	ands	r3, r2
 8004ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004ab4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d115      	bne.n	8004ae8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00f      	beq.n	8004ae8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004acc:	f003 0320 	and.w	r3, r3, #32
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d009      	beq.n	8004ae8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 82d8 	beq.w	800508e <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	4798      	blx	r3
      }
      return;
 8004ae6:	e2d2      	b.n	800508e <HAL_UART_IRQHandler+0x60e>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004ae8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 811d 	beq.w	8004d2c <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004afe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004b02:	4b88      	ldr	r3, [pc, #544]	@ (8004d24 <HAL_UART_IRQHandler+0x2a4>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8110 	beq.w	8004d2c <HAL_UART_IRQHandler+0x2ac>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d011      	beq.n	8004b3c <HAL_UART_IRQHandler+0xbc>
 8004b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00b      	beq.n	8004b3c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b32:	f043 0201 	orr.w	r2, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d011      	beq.n	8004b6c <HAL_UART_IRQHandler+0xec>
 8004b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00b      	beq.n	8004b6c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2202      	movs	r2, #2
 8004b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b62:	f043 0204 	orr.w	r2, r3, #4
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d011      	beq.n	8004b9c <HAL_UART_IRQHandler+0x11c>
 8004b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00b      	beq.n	8004b9c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2204      	movs	r2, #4
 8004b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b92:	f043 0202 	orr.w	r2, r3, #2
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d017      	beq.n	8004bd8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d105      	bne.n	8004bc0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bb8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00b      	beq.n	8004bd8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2208      	movs	r2, #8
 8004bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bce:	f043 0208 	orr.w	r2, r3, #8
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d012      	beq.n	8004c0a <HAL_UART_IRQHandler+0x18a>
 8004be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004be8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00c      	beq.n	8004c0a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c00:	f043 0220 	orr.w	r2, r3, #32
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 823e 	beq.w	8005092 <HAL_UART_IRQHandler+0x612>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00d      	beq.n	8004c3e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d007      	beq.n	8004c3e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c44:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c52:	2b40      	cmp	r3, #64	@ 0x40
 8004c54:	d005      	beq.n	8004c62 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c5a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d053      	beq.n	8004d0a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 ff80 	bl	8005b68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c72:	2b40      	cmp	r3, #64	@ 0x40
 8004c74:	d143      	bne.n	8004cfe <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c84:	e853 3f00 	ldrex	r3, [r3]
 8004c88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3308      	adds	r3, #8
 8004c9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004ca2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004caa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004cae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004cb2:	e841 2300 	strex	r3, r2, [r1]
 8004cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004cba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1d9      	bne.n	8004c76 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d013      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cce:	4a16      	ldr	r2, [pc, #88]	@ (8004d28 <HAL_UART_IRQHandler+0x2a8>)
 8004cd0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe f831 	bl	8002d3e <HAL_DMA_Abort_IT>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d01d      	beq.n	8004d1e <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004cec:	4610      	mov	r0, r2
 8004cee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf0:	e015      	b.n	8004d1e <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cfc:	e00f      	b.n	8004d1e <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d08:	e009      	b.n	8004d1e <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004d1c:	e1b9      	b.n	8005092 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d1e:	bf00      	nop
    return;
 8004d20:	e1b7      	b.n	8005092 <HAL_UART_IRQHandler+0x612>
 8004d22:	bf00      	nop
 8004d24:	04000120 	.word	0x04000120
 8004d28:	08005c31 	.word	0x08005c31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	f040 8170 	bne.w	8005016 <HAL_UART_IRQHandler+0x596>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d3a:	f003 0310 	and.w	r3, r3, #16
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 8169 	beq.w	8005016 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d48:	f003 0310 	and.w	r3, r3, #16
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 8162 	beq.w	8005016 <HAL_UART_IRQHandler+0x596>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2210      	movs	r2, #16
 8004d58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d64:	2b40      	cmp	r3, #64	@ 0x40
 8004d66:	f040 80d8 	bne.w	8004f1a <HAL_UART_IRQHandler+0x49a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d76:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 80af 	beq.w	8004ede <HAL_UART_IRQHandler+0x45e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	f080 80a7 	bcs.w	8004ede <HAL_UART_IRQHandler+0x45e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d96:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f040 8086 	bne.w	8004eb8 <HAL_UART_IRQHandler+0x438>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004db8:	e853 3f00 	ldrex	r3, [r3]
 8004dbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004dd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004dda:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004de2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004dee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1da      	bne.n	8004dac <HAL_UART_IRQHandler+0x32c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3308      	adds	r3, #8
 8004dfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e00:	e853 3f00 	ldrex	r3, [r3]
 8004e04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004e06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e08:	f023 0301 	bic.w	r3, r3, #1
 8004e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3308      	adds	r3, #8
 8004e16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004e1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004e22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004e2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e1      	bne.n	8004df6 <HAL_UART_IRQHandler+0x376>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3308      	adds	r3, #8
 8004e38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3308      	adds	r3, #8
 8004e52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e5e:	e841 2300 	strex	r3, r2, [r1]
 8004e62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1e3      	bne.n	8004e32 <HAL_UART_IRQHandler+0x3b2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e80:	e853 3f00 	ldrex	r3, [r3]
 8004e84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e88:	f023 0310 	bic.w	r3, r3, #16
 8004e8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	461a      	mov	r2, r3
 8004e96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ea0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e4      	bne.n	8004e78 <HAL_UART_IRQHandler+0x3f8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fd ff05 	bl	8002cc2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	f8b2 1058 	ldrh.w	r1, [r2, #88]	@ 0x58
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	f8b2 205a 	ldrh.w	r2, [r2, #90]	@ 0x5a
 8004ed0:	b292      	uxth	r2, r2
 8004ed2:	1a8a      	subs	r2, r1, r2
 8004ed4:	b292      	uxth	r2, r2
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004edc:	e0db      	b.n	8005096 <HAL_UART_IRQHandler+0x616>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ee4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	f040 80d4 	bne.w	8005096 <HAL_UART_IRQHandler+0x616>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b20      	cmp	r3, #32
 8004efc:	f040 80cb 	bne.w	8005096 <HAL_UART_IRQHandler+0x616>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	665a      	str	r2, [r3, #100]	@ 0x64
            huart->RxEventCallback(huart, huart->RxXferSize);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	f8b2 2058 	ldrh.w	r2, [r2, #88]	@ 0x58
 8004f12:	4611      	mov	r1, r2
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	4798      	blx	r3
      return;
 8004f18:	e0bd      	b.n	8005096 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 80af 	beq.w	800509a <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8004f3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 80aa 	beq.w	800509a <HAL_UART_IRQHandler+0x61a>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f4e:	e853 3f00 	ldrex	r3, [r3]
 8004f52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004f68:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f70:	e841 2300 	strex	r3, r2, [r1]
 8004f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e4      	bne.n	8004f46 <HAL_UART_IRQHandler+0x4c6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3308      	adds	r3, #8
 8004f82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	623b      	str	r3, [r7, #32]
   return(result);
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	f023 0301 	bic.w	r3, r3, #1
 8004f92:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004fa0:	633a      	str	r2, [r7, #48]	@ 0x30
 8004fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fa8:	e841 2300 	strex	r3, r2, [r1]
 8004fac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1e3      	bne.n	8004f7c <HAL_UART_IRQHandler+0x4fc>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	e853 3f00 	ldrex	r3, [r3]
 8004fd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f023 0310 	bic.w	r3, r3, #16
 8004fdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004fea:	61fb      	str	r3, [r7, #28]
 8004fec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fee:	69b9      	ldr	r1, [r7, #24]
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	e841 2300 	strex	r3, r2, [r1]
 8004ff6:	617b      	str	r3, [r7, #20]
   return(result);
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1e4      	bne.n	8004fc8 <HAL_UART_IRQHandler+0x548>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2202      	movs	r2, #2
 8005002:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800500a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800500e:	4611      	mov	r1, r2
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005014:	e041      	b.n	800509a <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800501a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d010      	beq.n	8005044 <HAL_UART_IRQHandler+0x5c4>
 8005022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005026:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <HAL_UART_IRQHandler+0x5c4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005036:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005042:	e02d      	b.n	80050a0 <HAL_UART_IRQHandler+0x620>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00e      	beq.n	800506e <HAL_UART_IRQHandler+0x5ee>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005058:	2b00      	cmp	r3, #0
 800505a:	d008      	beq.n	800506e <HAL_UART_IRQHandler+0x5ee>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01c      	beq.n	800509e <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	4798      	blx	r3
    }
    return;
 800506c:	e017      	b.n	800509e <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800506e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	d012      	beq.n	80050a0 <HAL_UART_IRQHandler+0x620>
 800507a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800507e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00c      	beq.n	80050a0 <HAL_UART_IRQHandler+0x620>
  {
    UART_EndTransmit_IT(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fea5 	bl	8005dd6 <UART_EndTransmit_IT>
    return;
 800508c:	e008      	b.n	80050a0 <HAL_UART_IRQHandler+0x620>
      return;
 800508e:	bf00      	nop
 8005090:	e006      	b.n	80050a0 <HAL_UART_IRQHandler+0x620>
    return;
 8005092:	bf00      	nop
 8005094:	e004      	b.n	80050a0 <HAL_UART_IRQHandler+0x620>
      return;
 8005096:	bf00      	nop
 8005098:	e002      	b.n	80050a0 <HAL_UART_IRQHandler+0x620>
      return;
 800509a:	bf00      	nop
 800509c:	e000      	b.n	80050a0 <HAL_UART_IRQHandler+0x620>
    return;
 800509e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80050a0:	37e8      	adds	r7, #232	@ 0xe8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop

080050a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800516c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005174:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4313      	orrs	r3, r2
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a16      	ldr	r2, [pc, #88]	@ (80051ec <UART_InitCallbacksToDefault+0x64>)
 8005194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a15      	ldr	r2, [pc, #84]	@ (80051f0 <UART_InitCallbacksToDefault+0x68>)
 800519c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a14      	ldr	r2, [pc, #80]	@ (80051f4 <UART_InitCallbacksToDefault+0x6c>)
 80051a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a13      	ldr	r2, [pc, #76]	@ (80051f8 <UART_InitCallbacksToDefault+0x70>)
 80051ac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a12      	ldr	r2, [pc, #72]	@ (80051fc <UART_InitCallbacksToDefault+0x74>)
 80051b4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a11      	ldr	r2, [pc, #68]	@ (8005200 <UART_InitCallbacksToDefault+0x78>)
 80051bc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a10      	ldr	r2, [pc, #64]	@ (8005204 <UART_InitCallbacksToDefault+0x7c>)
 80051c4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a0f      	ldr	r2, [pc, #60]	@ (8005208 <UART_InitCallbacksToDefault+0x80>)
 80051cc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a0e      	ldr	r2, [pc, #56]	@ (800520c <UART_InitCallbacksToDefault+0x84>)
 80051d4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
#if defined(USART_CR1_FIFOEN)
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
#endif /* USART_CR1_FIFOEN */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a0d      	ldr	r2, [pc, #52]	@ (8005210 <UART_InitCallbacksToDefault+0x88>)
 80051dc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	080050bd 	.word	0x080050bd
 80051f0:	080050a9 	.word	0x080050a9
 80051f4:	080050e5 	.word	0x080050e5
 80051f8:	080050d1 	.word	0x080050d1
 80051fc:	080050f9 	.word	0x080050f9
 8005200:	0800510d 	.word	0x0800510d
 8005204:	08005121 	.word	0x08005121
 8005208:	08005135 	.word	0x08005135
 800520c:	080061b9 	.word	0x080061b9
 8005210:	08005149 	.word	0x08005149

08005214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005218:	b08a      	sub	sp, #40	@ 0x28
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	431a      	orrs	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	431a      	orrs	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	4313      	orrs	r3, r2
 800523a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4bb4      	ldr	r3, [pc, #720]	@ (8005514 <UART_SetConfig+0x300>)
 8005244:	4013      	ands	r3, r2
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	6812      	ldr	r2, [r2, #0]
 800524a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800524c:	430b      	orrs	r3, r1
 800524e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4aa9      	ldr	r2, [pc, #676]	@ (8005518 <UART_SetConfig+0x304>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d004      	beq.n	8005280 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800527c:	4313      	orrs	r3, r2
 800527e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005290:	430a      	orrs	r2, r1
 8005292:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4aa0      	ldr	r2, [pc, #640]	@ (800551c <UART_SetConfig+0x308>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d126      	bne.n	80052ec <UART_SetConfig+0xd8>
 800529e:	4ba0      	ldr	r3, [pc, #640]	@ (8005520 <UART_SetConfig+0x30c>)
 80052a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a4:	f003 0303 	and.w	r3, r3, #3
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d81b      	bhi.n	80052e4 <UART_SetConfig+0xd0>
 80052ac:	a201      	add	r2, pc, #4	@ (adr r2, 80052b4 <UART_SetConfig+0xa0>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052c5 	.word	0x080052c5
 80052b8:	080052d5 	.word	0x080052d5
 80052bc:	080052cd 	.word	0x080052cd
 80052c0:	080052dd 	.word	0x080052dd
 80052c4:	2301      	movs	r3, #1
 80052c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ca:	e080      	b.n	80053ce <UART_SetConfig+0x1ba>
 80052cc:	2302      	movs	r3, #2
 80052ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052d2:	e07c      	b.n	80053ce <UART_SetConfig+0x1ba>
 80052d4:	2304      	movs	r3, #4
 80052d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052da:	e078      	b.n	80053ce <UART_SetConfig+0x1ba>
 80052dc:	2308      	movs	r3, #8
 80052de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052e2:	e074      	b.n	80053ce <UART_SetConfig+0x1ba>
 80052e4:	2310      	movs	r3, #16
 80052e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ea:	e070      	b.n	80053ce <UART_SetConfig+0x1ba>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a8c      	ldr	r2, [pc, #560]	@ (8005524 <UART_SetConfig+0x310>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d138      	bne.n	8005368 <UART_SetConfig+0x154>
 80052f6:	4b8a      	ldr	r3, [pc, #552]	@ (8005520 <UART_SetConfig+0x30c>)
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fc:	f003 030c 	and.w	r3, r3, #12
 8005300:	2b0c      	cmp	r3, #12
 8005302:	d82d      	bhi.n	8005360 <UART_SetConfig+0x14c>
 8005304:	a201      	add	r2, pc, #4	@ (adr r2, 800530c <UART_SetConfig+0xf8>)
 8005306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530a:	bf00      	nop
 800530c:	08005341 	.word	0x08005341
 8005310:	08005361 	.word	0x08005361
 8005314:	08005361 	.word	0x08005361
 8005318:	08005361 	.word	0x08005361
 800531c:	08005351 	.word	0x08005351
 8005320:	08005361 	.word	0x08005361
 8005324:	08005361 	.word	0x08005361
 8005328:	08005361 	.word	0x08005361
 800532c:	08005349 	.word	0x08005349
 8005330:	08005361 	.word	0x08005361
 8005334:	08005361 	.word	0x08005361
 8005338:	08005361 	.word	0x08005361
 800533c:	08005359 	.word	0x08005359
 8005340:	2300      	movs	r3, #0
 8005342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005346:	e042      	b.n	80053ce <UART_SetConfig+0x1ba>
 8005348:	2302      	movs	r3, #2
 800534a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800534e:	e03e      	b.n	80053ce <UART_SetConfig+0x1ba>
 8005350:	2304      	movs	r3, #4
 8005352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005356:	e03a      	b.n	80053ce <UART_SetConfig+0x1ba>
 8005358:	2308      	movs	r3, #8
 800535a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800535e:	e036      	b.n	80053ce <UART_SetConfig+0x1ba>
 8005360:	2310      	movs	r3, #16
 8005362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005366:	e032      	b.n	80053ce <UART_SetConfig+0x1ba>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a6a      	ldr	r2, [pc, #424]	@ (8005518 <UART_SetConfig+0x304>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d12a      	bne.n	80053c8 <UART_SetConfig+0x1b4>
 8005372:	4b6b      	ldr	r3, [pc, #428]	@ (8005520 <UART_SetConfig+0x30c>)
 8005374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005378:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800537c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005380:	d01a      	beq.n	80053b8 <UART_SetConfig+0x1a4>
 8005382:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005386:	d81b      	bhi.n	80053c0 <UART_SetConfig+0x1ac>
 8005388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800538c:	d00c      	beq.n	80053a8 <UART_SetConfig+0x194>
 800538e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005392:	d815      	bhi.n	80053c0 <UART_SetConfig+0x1ac>
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <UART_SetConfig+0x18c>
 8005398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800539c:	d008      	beq.n	80053b0 <UART_SetConfig+0x19c>
 800539e:	e00f      	b.n	80053c0 <UART_SetConfig+0x1ac>
 80053a0:	2300      	movs	r3, #0
 80053a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053a6:	e012      	b.n	80053ce <UART_SetConfig+0x1ba>
 80053a8:	2302      	movs	r3, #2
 80053aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ae:	e00e      	b.n	80053ce <UART_SetConfig+0x1ba>
 80053b0:	2304      	movs	r3, #4
 80053b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053b6:	e00a      	b.n	80053ce <UART_SetConfig+0x1ba>
 80053b8:	2308      	movs	r3, #8
 80053ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053be:	e006      	b.n	80053ce <UART_SetConfig+0x1ba>
 80053c0:	2310      	movs	r3, #16
 80053c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053c6:	e002      	b.n	80053ce <UART_SetConfig+0x1ba>
 80053c8:	2310      	movs	r3, #16
 80053ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a51      	ldr	r2, [pc, #324]	@ (8005518 <UART_SetConfig+0x304>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d17a      	bne.n	80054ce <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d824      	bhi.n	800542a <UART_SetConfig+0x216>
 80053e0:	a201      	add	r2, pc, #4	@ (adr r2, 80053e8 <UART_SetConfig+0x1d4>)
 80053e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e6:	bf00      	nop
 80053e8:	0800540d 	.word	0x0800540d
 80053ec:	0800542b 	.word	0x0800542b
 80053f0:	08005415 	.word	0x08005415
 80053f4:	0800542b 	.word	0x0800542b
 80053f8:	0800541b 	.word	0x0800541b
 80053fc:	0800542b 	.word	0x0800542b
 8005400:	0800542b 	.word	0x0800542b
 8005404:	0800542b 	.word	0x0800542b
 8005408:	08005423 	.word	0x08005423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800540c:	f7fe fd76 	bl	8003efc <HAL_RCC_GetPCLK1Freq>
 8005410:	61f8      	str	r0, [r7, #28]
        break;
 8005412:	e010      	b.n	8005436 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005414:	4b44      	ldr	r3, [pc, #272]	@ (8005528 <UART_SetConfig+0x314>)
 8005416:	61fb      	str	r3, [r7, #28]
        break;
 8005418:	e00d      	b.n	8005436 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800541a:	f7fe fcd7 	bl	8003dcc <HAL_RCC_GetSysClockFreq>
 800541e:	61f8      	str	r0, [r7, #28]
        break;
 8005420:	e009      	b.n	8005436 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005426:	61fb      	str	r3, [r7, #28]
        break;
 8005428:	e005      	b.n	8005436 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005434:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 8107 	beq.w	800564c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	4613      	mov	r3, r2
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	4413      	add	r3, r2
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	429a      	cmp	r2, r3
 800544c:	d305      	bcc.n	800545a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005454:	69fa      	ldr	r2, [r7, #28]
 8005456:	429a      	cmp	r2, r3
 8005458:	d903      	bls.n	8005462 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005460:	e0f4      	b.n	800564c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	2200      	movs	r2, #0
 8005466:	461c      	mov	r4, r3
 8005468:	4615      	mov	r5, r2
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	022b      	lsls	r3, r5, #8
 8005474:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005478:	0222      	lsls	r2, r4, #8
 800547a:	68f9      	ldr	r1, [r7, #12]
 800547c:	6849      	ldr	r1, [r1, #4]
 800547e:	0849      	lsrs	r1, r1, #1
 8005480:	2000      	movs	r0, #0
 8005482:	4688      	mov	r8, r1
 8005484:	4681      	mov	r9, r0
 8005486:	eb12 0a08 	adds.w	sl, r2, r8
 800548a:	eb43 0b09 	adc.w	fp, r3, r9
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	603b      	str	r3, [r7, #0]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800549c:	4650      	mov	r0, sl
 800549e:	4659      	mov	r1, fp
 80054a0:	f7fb fb92 	bl	8000bc8 <__aeabi_uldivmod>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4613      	mov	r3, r2
 80054aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054b2:	d308      	bcc.n	80054c6 <UART_SetConfig+0x2b2>
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054ba:	d204      	bcs.n	80054c6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	60da      	str	r2, [r3, #12]
 80054c4:	e0c2      	b.n	800564c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80054cc:	e0be      	b.n	800564c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054d6:	d16a      	bne.n	80055ae <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80054d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80054dc:	2b08      	cmp	r3, #8
 80054de:	d834      	bhi.n	800554a <UART_SetConfig+0x336>
 80054e0:	a201      	add	r2, pc, #4	@ (adr r2, 80054e8 <UART_SetConfig+0x2d4>)
 80054e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e6:	bf00      	nop
 80054e8:	0800550d 	.word	0x0800550d
 80054ec:	0800552d 	.word	0x0800552d
 80054f0:	08005535 	.word	0x08005535
 80054f4:	0800554b 	.word	0x0800554b
 80054f8:	0800553b 	.word	0x0800553b
 80054fc:	0800554b 	.word	0x0800554b
 8005500:	0800554b 	.word	0x0800554b
 8005504:	0800554b 	.word	0x0800554b
 8005508:	08005543 	.word	0x08005543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800550c:	f7fe fcf6 	bl	8003efc <HAL_RCC_GetPCLK1Freq>
 8005510:	61f8      	str	r0, [r7, #28]
        break;
 8005512:	e020      	b.n	8005556 <UART_SetConfig+0x342>
 8005514:	efff69f3 	.word	0xefff69f3
 8005518:	40008000 	.word	0x40008000
 800551c:	40013800 	.word	0x40013800
 8005520:	40021000 	.word	0x40021000
 8005524:	40004400 	.word	0x40004400
 8005528:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800552c:	f7fe fcfc 	bl	8003f28 <HAL_RCC_GetPCLK2Freq>
 8005530:	61f8      	str	r0, [r7, #28]
        break;
 8005532:	e010      	b.n	8005556 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005534:	4b4c      	ldr	r3, [pc, #304]	@ (8005668 <UART_SetConfig+0x454>)
 8005536:	61fb      	str	r3, [r7, #28]
        break;
 8005538:	e00d      	b.n	8005556 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800553a:	f7fe fc47 	bl	8003dcc <HAL_RCC_GetSysClockFreq>
 800553e:	61f8      	str	r0, [r7, #28]
        break;
 8005540:	e009      	b.n	8005556 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005546:	61fb      	str	r3, [r7, #28]
        break;
 8005548:	e005      	b.n	8005556 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005554:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d077      	beq.n	800564c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	005a      	lsls	r2, r3, #1
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	085b      	lsrs	r3, r3, #1
 8005566:	441a      	add	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005570:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	2b0f      	cmp	r3, #15
 8005576:	d916      	bls.n	80055a6 <UART_SetConfig+0x392>
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800557e:	d212      	bcs.n	80055a6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	b29b      	uxth	r3, r3
 8005584:	f023 030f 	bic.w	r3, r3, #15
 8005588:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	085b      	lsrs	r3, r3, #1
 800558e:	b29b      	uxth	r3, r3
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	b29a      	uxth	r2, r3
 8005596:	8afb      	ldrh	r3, [r7, #22]
 8005598:	4313      	orrs	r3, r2
 800559a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	8afa      	ldrh	r2, [r7, #22]
 80055a2:	60da      	str	r2, [r3, #12]
 80055a4:	e052      	b.n	800564c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80055ac:	e04e      	b.n	800564c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d827      	bhi.n	8005606 <UART_SetConfig+0x3f2>
 80055b6:	a201      	add	r2, pc, #4	@ (adr r2, 80055bc <UART_SetConfig+0x3a8>)
 80055b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055bc:	080055e1 	.word	0x080055e1
 80055c0:	080055e9 	.word	0x080055e9
 80055c4:	080055f1 	.word	0x080055f1
 80055c8:	08005607 	.word	0x08005607
 80055cc:	080055f7 	.word	0x080055f7
 80055d0:	08005607 	.word	0x08005607
 80055d4:	08005607 	.word	0x08005607
 80055d8:	08005607 	.word	0x08005607
 80055dc:	080055ff 	.word	0x080055ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e0:	f7fe fc8c 	bl	8003efc <HAL_RCC_GetPCLK1Freq>
 80055e4:	61f8      	str	r0, [r7, #28]
        break;
 80055e6:	e014      	b.n	8005612 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055e8:	f7fe fc9e 	bl	8003f28 <HAL_RCC_GetPCLK2Freq>
 80055ec:	61f8      	str	r0, [r7, #28]
        break;
 80055ee:	e010      	b.n	8005612 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005668 <UART_SetConfig+0x454>)
 80055f2:	61fb      	str	r3, [r7, #28]
        break;
 80055f4:	e00d      	b.n	8005612 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055f6:	f7fe fbe9 	bl	8003dcc <HAL_RCC_GetSysClockFreq>
 80055fa:	61f8      	str	r0, [r7, #28]
        break;
 80055fc:	e009      	b.n	8005612 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005602:	61fb      	str	r3, [r7, #28]
        break;
 8005604:	e005      	b.n	8005612 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005610:	bf00      	nop
    }

    if (pclk != 0U)
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d019      	beq.n	800564c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	085a      	lsrs	r2, r3, #1
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	441a      	add	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	fbb2 f3f3 	udiv	r3, r2, r3
 800562a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	2b0f      	cmp	r3, #15
 8005630:	d909      	bls.n	8005646 <UART_SetConfig+0x432>
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005638:	d205      	bcs.n	8005646 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60da      	str	r2, [r3, #12]
 8005644:	e002      	b.n	800564c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005658:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800565c:	4618      	mov	r0, r3
 800565e:	3728      	adds	r7, #40	@ 0x28
 8005660:	46bd      	mov	sp, r7
 8005662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005666:	bf00      	nop
 8005668:	00f42400 	.word	0x00f42400

0800566c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005722:	f003 0320 	and.w	r3, r3, #32
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005748:	2b00      	cmp	r3, #0
 800574a:	d01a      	beq.n	8005782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005766:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800576a:	d10a      	bne.n	8005782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	605a      	str	r2, [r3, #4]
  }
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b098      	sub	sp, #96	@ 0x60
 80057b4:	af02      	add	r7, sp, #8
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057c0:	f7fd f930 	bl	8002a24 <HAL_GetTick>
 80057c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d12e      	bne.n	8005832 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057dc:	2200      	movs	r2, #0
 80057de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f88c 	bl	8005900 <UART_WaitOnFlagUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d021      	beq.n	8005832 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005802:	653b      	str	r3, [r7, #80]	@ 0x50
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800580c:	647b      	str	r3, [r7, #68]	@ 0x44
 800580e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800581a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e6      	bne.n	80057ee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2220      	movs	r2, #32
 8005824:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e062      	b.n	80058f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b04      	cmp	r3, #4
 800583e:	d149      	bne.n	80058d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005840:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005848:	2200      	movs	r2, #0
 800584a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f856 	bl	8005900 <UART_WaitOnFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d03c      	beq.n	80058d4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	623b      	str	r3, [r7, #32]
   return(result);
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800586e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	461a      	mov	r2, r3
 8005876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005878:	633b      	str	r3, [r7, #48]	@ 0x30
 800587a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800587e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e6      	bne.n	800585a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3308      	adds	r3, #8
 8005892:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	60fb      	str	r3, [r7, #12]
   return(result);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0301 	bic.w	r3, r3, #1
 80058a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3308      	adds	r3, #8
 80058aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058ac:	61fa      	str	r2, [r7, #28]
 80058ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	69b9      	ldr	r1, [r7, #24]
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	617b      	str	r3, [r7, #20]
   return(result);
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e5      	bne.n	800588c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e011      	b.n	80058f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2220      	movs	r2, #32
 80058de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3758      	adds	r7, #88	@ 0x58
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	4613      	mov	r3, r2
 800590e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005910:	e04f      	b.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005918:	d04b      	beq.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591a:	f7fd f883 	bl	8002a24 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	429a      	cmp	r2, r3
 8005928:	d302      	bcc.n	8005930 <UART_WaitOnFlagUntilTimeout+0x30>
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e04e      	b.n	80059d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b00      	cmp	r3, #0
 8005940:	d037      	beq.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b80      	cmp	r3, #128	@ 0x80
 8005946:	d034      	beq.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b40      	cmp	r3, #64	@ 0x40
 800594c:	d031      	beq.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	f003 0308 	and.w	r3, r3, #8
 8005958:	2b08      	cmp	r3, #8
 800595a:	d110      	bne.n	800597e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2208      	movs	r2, #8
 8005962:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f8ff 	bl	8005b68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2208      	movs	r2, #8
 800596e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e029      	b.n	80059d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005988:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800598c:	d111      	bne.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005996:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f8e5 	bl	8005b68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e00f      	b.n	80059d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4013      	ands	r3, r2
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	429a      	cmp	r2, r3
 80059c0:	bf0c      	ite	eq
 80059c2:	2301      	moveq	r3, #1
 80059c4:	2300      	movne	r3, #0
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	461a      	mov	r2, r3
 80059ca:	79fb      	ldrb	r3, [r7, #7]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d0a0      	beq.n	8005912 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059dc:	b480      	push	{r7}
 80059de:	b097      	sub	sp, #92	@ 0x5c
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	4613      	mov	r3, r2
 80059e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	88fa      	ldrh	r2, [r7, #6]
 80059f4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	88fa      	ldrh	r2, [r7, #6]
 80059fc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a0e:	d10e      	bne.n	8005a2e <UART_Start_Receive_IT+0x52>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d105      	bne.n	8005a24 <UART_Start_Receive_IT+0x48>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005a1e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a22:	e02d      	b.n	8005a80 <UART_Start_Receive_IT+0xa4>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	22ff      	movs	r2, #255	@ 0xff
 8005a28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a2c:	e028      	b.n	8005a80 <UART_Start_Receive_IT+0xa4>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10d      	bne.n	8005a52 <UART_Start_Receive_IT+0x76>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d104      	bne.n	8005a48 <UART_Start_Receive_IT+0x6c>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	22ff      	movs	r2, #255	@ 0xff
 8005a42:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a46:	e01b      	b.n	8005a80 <UART_Start_Receive_IT+0xa4>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	227f      	movs	r2, #127	@ 0x7f
 8005a4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a50:	e016      	b.n	8005a80 <UART_Start_Receive_IT+0xa4>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a5a:	d10d      	bne.n	8005a78 <UART_Start_Receive_IT+0x9c>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <UART_Start_Receive_IT+0x92>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	227f      	movs	r2, #127	@ 0x7f
 8005a68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a6c:	e008      	b.n	8005a80 <UART_Start_Receive_IT+0xa4>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	223f      	movs	r2, #63	@ 0x3f
 8005a72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a76:	e003      	b.n	8005a80 <UART_Start_Receive_IT+0xa4>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2222      	movs	r2, #34	@ 0x22
 8005a8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3308      	adds	r3, #8
 8005a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa2:	f043 0301 	orr.w	r3, r3, #1
 8005aa6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3308      	adds	r3, #8
 8005aae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005ab0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005ab2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ab6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ab8:	e841 2300 	strex	r3, r2, [r1]
 8005abc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e5      	bne.n	8005a90 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005acc:	d107      	bne.n	8005ade <UART_Start_Receive_IT+0x102>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d103      	bne.n	8005ade <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	4a21      	ldr	r2, [pc, #132]	@ (8005b60 <UART_Start_Receive_IT+0x184>)
 8005ada:	669a      	str	r2, [r3, #104]	@ 0x68
 8005adc:	e002      	b.n	8005ae4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4a20      	ldr	r2, [pc, #128]	@ (8005b64 <UART_Start_Receive_IT+0x188>)
 8005ae2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d019      	beq.n	8005b20 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	461a      	mov	r2, r3
 8005b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b0c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1e6      	bne.n	8005aec <UART_Start_Receive_IT+0x110>
 8005b1e:	e018      	b.n	8005b52 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f043 0320 	orr.w	r3, r3, #32
 8005b34:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b3e:	623b      	str	r3, [r7, #32]
 8005b40:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b42:	69f9      	ldr	r1, [r7, #28]
 8005b44:	6a3a      	ldr	r2, [r7, #32]
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e6      	bne.n	8005b20 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	375c      	adds	r7, #92	@ 0x5c
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	08005ff5 	.word	0x08005ff5
 8005b64:	08005e31 	.word	0x08005e31

08005b68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b095      	sub	sp, #84	@ 0x54
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b90:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e6      	bne.n	8005b70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3308      	adds	r3, #8
 8005ba8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	f023 0301 	bic.w	r3, r3, #1
 8005bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bca:	e841 2300 	strex	r3, r2, [r1]
 8005bce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1e5      	bne.n	8005ba2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d118      	bne.n	8005c10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	e853 3f00 	ldrex	r3, [r3]
 8005bea:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f023 0310 	bic.w	r3, r3, #16
 8005bf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bfc:	61bb      	str	r3, [r7, #24]
 8005bfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6979      	ldr	r1, [r7, #20]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	e841 2300 	strex	r3, r2, [r1]
 8005c08:	613b      	str	r3, [r7, #16]
   return(result);
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e6      	bne.n	8005bde <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005c24:	bf00      	nop
 8005c26:	3754      	adds	r7, #84	@ 0x54
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c58:	bf00      	nop
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b08f      	sub	sp, #60	@ 0x3c
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c6c:	2b21      	cmp	r3, #33	@ 0x21
 8005c6e:	d14c      	bne.n	8005d0a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d132      	bne.n	8005ce2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c9c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ca0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ca2:	e841 2300 	strex	r3, r2, [r1]
 8005ca6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e6      	bne.n	8005c7c <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ccc:	61bb      	str	r3, [r7, #24]
 8005cce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	6979      	ldr	r1, [r7, #20]
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e6      	bne.n	8005cae <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005ce0:	e013      	b.n	8005d0a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ce6:	781a      	ldrb	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005d0a:	bf00      	nop
 8005d0c:	373c      	adds	r7, #60	@ 0x3c
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b091      	sub	sp, #68	@ 0x44
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d22:	2b21      	cmp	r3, #33	@ 0x21
 8005d24:	d151      	bne.n	8005dca <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d132      	bne.n	8005d98 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d50:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d52:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e6      	bne.n	8005d32 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d82:	61fb      	str	r3, [r7, #28]
 8005d84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	69b9      	ldr	r1, [r7, #24]
 8005d88:	69fa      	ldr	r2, [r7, #28]
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	617b      	str	r3, [r7, #20]
   return(result);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e6      	bne.n	8005d64 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005d96:	e018      	b.n	8005dca <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005da0:	881a      	ldrh	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005daa:	b292      	uxth	r2, r2
 8005dac:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005db2:	1c9a      	adds	r2, r3, #2
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005dca:	bf00      	nop
 8005dcc:	3744      	adds	r7, #68	@ 0x44
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b088      	sub	sp, #32
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005df2:	61fb      	str	r3, [r7, #28]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	61bb      	str	r3, [r7, #24]
 8005dfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e00:	6979      	ldr	r1, [r7, #20]
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	e841 2300 	strex	r3, r2, [r1]
 8005e08:	613b      	str	r3, [r7, #16]
   return(result);
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e6      	bne.n	8005dde <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2220      	movs	r2, #32
 8005e14:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e26:	bf00      	nop
 8005e28:	3720      	adds	r7, #32
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
	...

08005e30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b09c      	sub	sp, #112	@ 0x70
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e3e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e48:	2b22      	cmp	r3, #34	@ 0x22
 8005e4a:	f040 80c2 	bne.w	8005fd2 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005e54:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005e5c:	b2d9      	uxtb	r1, r3
 8005e5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e68:	400a      	ands	r2, r1
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f040 80a7 	bne.w	8005fe6 <UART_RxISR_8BIT+0x1b6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ea8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005eac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005eb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005eb8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ebc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ec4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e6      	bne.n	8005e98 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3308      	adds	r3, #8
 8005ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005edc:	f023 0301 	bic.w	r3, r3, #1
 8005ee0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005eea:	647a      	str	r2, [r7, #68]	@ 0x44
 8005eec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ef0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1e5      	bne.n	8005eca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a36      	ldr	r2, [pc, #216]	@ (8005ff0 <UART_RxISR_8BIT+0x1c0>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d01f      	beq.n	8005f5c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d018      	beq.n	8005f5c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f32:	e853 3f00 	ldrex	r3, [r3]
 8005f36:	623b      	str	r3, [r7, #32]
   return(result);
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f50:	e841 2300 	strex	r3, r2, [r1]
 8005f54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1e6      	bne.n	8005f2a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d130      	bne.n	8005fc6 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	e853 3f00 	ldrex	r3, [r3]
 8005f76:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0310 	bic.w	r3, r3, #16
 8005f7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f88:	61fb      	str	r3, [r7, #28]
 8005f8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	69b9      	ldr	r1, [r7, #24]
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	617b      	str	r3, [r7, #20]
   return(result);
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e6      	bne.n	8005f6a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	2b10      	cmp	r3, #16
 8005fa8:	d103      	bne.n	8005fb2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2210      	movs	r2, #16
 8005fb0:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	f8b2 2058 	ldrh.w	r2, [r2, #88]	@ 0x58
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fc4:	e00f      	b.n	8005fe6 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	4798      	blx	r3
}
 8005fd0:	e009      	b.n	8005fe6 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	8b1b      	ldrh	r3, [r3, #24]
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f042 0208 	orr.w	r2, r2, #8
 8005fe2:	b292      	uxth	r2, r2
 8005fe4:	831a      	strh	r2, [r3, #24]
}
 8005fe6:	bf00      	nop
 8005fe8:	3770      	adds	r7, #112	@ 0x70
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	40008000 	.word	0x40008000

08005ff4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b09c      	sub	sp, #112	@ 0x70
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006002:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800600c:	2b22      	cmp	r3, #34	@ 0x22
 800600e:	f040 80c2 	bne.w	8006196 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006018:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006020:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006022:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006026:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800602a:	4013      	ands	r3, r2
 800602c:	b29a      	uxth	r2, r3
 800602e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006030:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006036:	1c9a      	adds	r2, r3, #2
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006042:	b29b      	uxth	r3, r3
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	f040 80a7 	bne.w	80061aa <UART_RxISR_16BIT+0x1b6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800606a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800606c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006070:	667b      	str	r3, [r7, #100]	@ 0x64
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800607a:	657b      	str	r3, [r7, #84]	@ 0x54
 800607c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006080:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e6      	bne.n	800605c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3308      	adds	r3, #8
 8006094:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800609e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a0:	f023 0301 	bic.w	r3, r3, #1
 80060a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3308      	adds	r3, #8
 80060ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80060ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80060b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1e5      	bne.n	800608e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a36      	ldr	r2, [pc, #216]	@ (80061b4 <UART_RxISR_16BIT+0x1c0>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d01f      	beq.n	8006120 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d018      	beq.n	8006120 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f4:	6a3b      	ldr	r3, [r7, #32]
 80060f6:	e853 3f00 	ldrex	r3, [r3]
 80060fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006102:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	461a      	mov	r2, r3
 800610a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800610c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800610e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006110:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006114:	e841 2300 	strex	r3, r2, [r1]
 8006118:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800611a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1e6      	bne.n	80060ee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006124:	2b01      	cmp	r3, #1
 8006126:	d130      	bne.n	800618a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	e853 3f00 	ldrex	r3, [r3]
 800613a:	60bb      	str	r3, [r7, #8]
   return(result);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f023 0310 	bic.w	r3, r3, #16
 8006142:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	461a      	mov	r2, r3
 800614a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800614c:	61bb      	str	r3, [r7, #24]
 800614e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006150:	6979      	ldr	r1, [r7, #20]
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	e841 2300 	strex	r3, r2, [r1]
 8006158:	613b      	str	r3, [r7, #16]
   return(result);
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1e6      	bne.n	800612e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	f003 0310 	and.w	r3, r3, #16
 800616a:	2b10      	cmp	r3, #16
 800616c:	d103      	bne.n	8006176 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2210      	movs	r2, #16
 8006174:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	f8b2 2058 	ldrh.w	r2, [r2, #88]	@ 0x58
 8006182:	4611      	mov	r1, r2
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006188:	e00f      	b.n	80061aa <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	4798      	blx	r3
}
 8006194:	e009      	b.n	80061aa <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	8b1b      	ldrh	r3, [r3, #24]
 800619c:	b29a      	uxth	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f042 0208 	orr.w	r2, r2, #8
 80061a6:	b292      	uxth	r2, r2
 80061a8:	831a      	strh	r2, [r3, #24]
}
 80061aa:	bf00      	nop
 80061ac:	3770      	adds	r7, #112	@ 0x70
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	40008000 	.word	0x40008000

080061b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <da16k_get_config>:

/*
 * Function that fetches configuration info from somewhere during initialisation. Written as weak so it can be easily
 * replaced by a board specific version. By default it returns the configuration variables above.
 */
__weak da16k_cfg_t * da16k_get_config(void) {
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0
    return &mx_iotc_cfg;
 80061d0:	4b02      	ldr	r3, [pc, #8]	@ (80061dc <da16k_get_config+0x10>)
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	20000040 	.word	0x20000040

080061e0 <MX_iotc_da16k_pmod_Init>:

/*
 * Function definition as per the CubeMX framework. Initialises the chosen serial port & any other data as required by
 * the AT library, e.g. configuration data.
 */
int MX_iotc_da16k_pmod_Init(void) {
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
    int err = 0;
 80061e6:	2300      	movs	r3, #0
 80061e8:	607b      	str	r3, [r7, #4]
    da16k_cfg_t * cfg_p = da16k_get_config();
 80061ea:	f7ff ffef 	bl	80061cc <da16k_get_config>
 80061ee:	6038      	str	r0, [r7, #0]

    if(!cfg_p)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d102      	bne.n	80061fc <MX_iotc_da16k_pmod_Init+0x1c>
        return -1;
 80061f6:	f04f 33ff 	mov.w	r3, #4294967295
 80061fa:	e009      	b.n	8006210 <MX_iotc_da16k_pmod_Init+0x30>

    if(da16k_init(cfg_p) != DA16K_SUCCESS)
 80061fc:	6838      	ldr	r0, [r7, #0]
 80061fe:	f7fb ff9d 	bl	800213c <da16k_init>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <MX_iotc_da16k_pmod_Init+0x2e>
        err=-2;
 8006208:	f06f 0301 	mvn.w	r3, #1
 800620c:	607b      	str	r3, [r7, #4]

    return err;
 800620e:	687b      	ldr	r3, [r7, #4]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <MX_iotc_da16k_pmod_Process>:
/*
 * Function definition as per the CubeMX framework. Called from within the super loop of single-threaded implementations
 * Its main job is to read communications from the DA16k PMOD board, detect any c2d commands & call a commands handler
 * function accordingly.
 */
int MX_iotc_da16k_pmod_Process(void) {
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
    da16k_cmd_t current_cmd = {0};
 800621e:	463b      	mov	r3, r7
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	605a      	str	r2, [r3, #4]
    da16k_err_t err;
    static uint32_t tick_expiry = 0;
    uint32_t tick_current = HAL_GetTick();
 8006226:	f7fc fbfd 	bl	8002a24 <HAL_GetTick>
 800622a:	60f8      	str	r0, [r7, #12]

    if(tick_current < tick_expiry) {
 800622c:	4b11      	ldr	r3, [pc, #68]	@ (8006274 <MX_iotc_da16k_pmod_Process+0x5c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	429a      	cmp	r2, r3
 8006234:	d201      	bcs.n	800623a <MX_iotc_da16k_pmod_Process+0x22>
        return 0;
 8006236:	2300      	movs	r3, #0
 8006238:	e018      	b.n	800626c <MX_iotc_da16k_pmod_Process+0x54>
    } else {
        tick_expiry += 2000;
 800623a:	4b0e      	ldr	r3, [pc, #56]	@ (8006274 <MX_iotc_da16k_pmod_Process+0x5c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8006242:	4a0c      	ldr	r2, [pc, #48]	@ (8006274 <MX_iotc_da16k_pmod_Process+0x5c>)
 8006244:	6013      	str	r3, [r2, #0]
    }

    err = da16k_get_cmd(&current_cmd);
 8006246:	463b      	mov	r3, r7
 8006248:	4618      	mov	r0, r3
 800624a:	f7fb fea9 	bl	8001fa0 <da16k_get_cmd>
 800624e:	4603      	mov	r3, r0
 8006250:	72fb      	strb	r3, [r7, #11]

    if (err == DA16K_SUCCESS) {
 8006252:	7afb      	ldrb	r3, [r7, #11]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d108      	bne.n	800626a <MX_iotc_da16k_pmod_Process+0x52>
        da16k_cmd_handler(&current_cmd);
 8006258:	463b      	mov	r3, r7
 800625a:	4618      	mov	r0, r3
 800625c:	f7fa fee6 	bl	800102c <da16k_cmd_handler>
        da16k_destroy_cmd(current_cmd);
 8006260:	463b      	mov	r3, r7
 8006262:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006266:	f7fb ff51 	bl	800210c <da16k_destroy_cmd>
    }

    return 0;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20000eec 	.word	0x20000eec

08006278 <HAL_DA16K_UART_TxCpltCallback>:

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
/*
 * Callback that occurs at the end of a transmission. Clears the tx_dma_busy flag to allow subsequent transmissions.
 */
void HAL_DA16K_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_DA16K_UART_RxCpltCallback>:

/*
 * Callback that happens when characters are received via interrupt one at a time. The function places each byte in a
 * buffer to be processed when the system can.
 */
void HAL_DA16K_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
    if(huart == da_uart_p) {
 8006294:	4b10      	ldr	r3, [pc, #64]	@ (80062d8 <HAL_DA16K_UART_RxCpltCallback+0x4c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	429a      	cmp	r2, r3
 800629c:	d118      	bne.n	80062d0 <HAL_DA16K_UART_RxCpltCallback+0x44>
        HAL_UART_Receive_IT(da_uart_p, (uint8_t *) &rx_byte, 1);
 800629e:	4b0e      	ldr	r3, [pc, #56]	@ (80062d8 <HAL_DA16K_UART_RxCpltCallback+0x4c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2201      	movs	r2, #1
 80062a4:	490d      	ldr	r1, [pc, #52]	@ (80062dc <HAL_DA16K_UART_RxCpltCallback+0x50>)
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fe fb9e 	bl	80049e8 <HAL_UART_Receive_IT>
        rx_buf[head] = rx_byte;
 80062ac:	4b0c      	ldr	r3, [pc, #48]	@ (80062e0 <HAL_DA16K_UART_RxCpltCallback+0x54>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a0a      	ldr	r2, [pc, #40]	@ (80062dc <HAL_DA16K_UART_RxCpltCallback+0x50>)
 80062b2:	7811      	ldrb	r1, [r2, #0]
 80062b4:	4a0b      	ldr	r2, [pc, #44]	@ (80062e4 <HAL_DA16K_UART_RxCpltCallback+0x58>)
 80062b6:	54d1      	strb	r1, [r2, r3]
        if(++head >= TERM_LINE_SIZ) {
 80062b8:	4b09      	ldr	r3, [pc, #36]	@ (80062e0 <HAL_DA16K_UART_RxCpltCallback+0x54>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3301      	adds	r3, #1
 80062be:	4a08      	ldr	r2, [pc, #32]	@ (80062e0 <HAL_DA16K_UART_RxCpltCallback+0x54>)
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	4b07      	ldr	r3, [pc, #28]	@ (80062e0 <HAL_DA16K_UART_RxCpltCallback+0x54>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2bff      	cmp	r3, #255	@ 0xff
 80062c8:	dd02      	ble.n	80062d0 <HAL_DA16K_UART_RxCpltCallback+0x44>
            head = 0;
 80062ca:	4b05      	ldr	r3, [pc, #20]	@ (80062e0 <HAL_DA16K_UART_RxCpltCallback+0x54>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	601a      	str	r2, [r3, #0]
        }
    }
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	2000004c 	.word	0x2000004c
 80062dc:	20000ff8 	.word	0x20000ff8
 80062e0:	20000ff0 	.word	0x20000ff0
 80062e4:	20000ef0 	.word	0x20000ef0

080062e8 <da16k_uart_init>:

/*
 * Function required by the AT cmd lib. This initialises the serial port so it's ready to place received bytes via
 * interrupt into a buffer. It also sets the serial port hardware ready to transmit strings, via DMA preferably.
 */
bool da16k_uart_init(void) {
 80062e8:	b580      	push	{r7, lr}
 80062ea:	af00      	add	r7, sp, #0

    if(BSP_USART1_Init()) {
 80062ec:	f7fb f964 	bl	80015b8 <BSP_USART1_Init>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <da16k_uart_init+0x12>
        return false;
 80062f6:	2300      	movs	r3, #0
 80062f8:	e01f      	b.n	800633a <da16k_uart_init+0x52>
    }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if(HAL_OK != HAL_UART_RegisterCallback(da_uart_p, HAL_UART_TX_COMPLETE_CB_ID,
 80062fa:	4b11      	ldr	r3, [pc, #68]	@ (8006340 <da16k_uart_init+0x58>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a11      	ldr	r2, [pc, #68]	@ (8006344 <da16k_uart_init+0x5c>)
 8006300:	2101      	movs	r1, #1
 8006302:	4618      	mov	r0, r3
 8006304:	f7fe f9dc 	bl	80046c0 <HAL_UART_RegisterCallback>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <da16k_uart_init+0x2a>
        &HAL_DA16K_UART_TxCpltCallback) ) {
        return false;
 800630e:	2300      	movs	r3, #0
 8006310:	e013      	b.n	800633a <da16k_uart_init+0x52>
    }

    if(HAL_OK != HAL_UART_RegisterCallback(da_uart_p, HAL_UART_RX_COMPLETE_CB_ID,
 8006312:	4b0b      	ldr	r3, [pc, #44]	@ (8006340 <da16k_uart_init+0x58>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a0c      	ldr	r2, [pc, #48]	@ (8006348 <da16k_uart_init+0x60>)
 8006318:	2103      	movs	r1, #3
 800631a:	4618      	mov	r0, r3
 800631c:	f7fe f9d0 	bl	80046c0 <HAL_UART_RegisterCallback>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <da16k_uart_init+0x42>
        &HAL_DA16K_UART_RxCpltCallback) ) {
        return false;
 8006326:	2300      	movs	r3, #0
 8006328:	e007      	b.n	800633a <da16k_uart_init+0x52>
    }
#endif

    HAL_UART_Receive_IT(da_uart_p, (uint8_t *) &rx_byte, 1);
 800632a:	4b05      	ldr	r3, [pc, #20]	@ (8006340 <da16k_uart_init+0x58>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2201      	movs	r2, #1
 8006330:	4906      	ldr	r1, [pc, #24]	@ (800634c <da16k_uart_init+0x64>)
 8006332:	4618      	mov	r0, r3
 8006334:	f7fe fb58 	bl	80049e8 <HAL_UART_Receive_IT>
    return true;
 8006338:	2301      	movs	r3, #1
}
 800633a:	4618      	mov	r0, r3
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	2000004c 	.word	0x2000004c
 8006344:	08006279 	.word	0x08006279
 8006348:	0800628d 	.word	0x0800628d
 800634c:	20000ff8 	.word	0x20000ff8

08006350 <da16k_uart_send>:
/*
 * Function required by the AT cmd lib. This function sends strings of known length via serial port. Should a 2nd
 * call occur before the 1st transmission has completed it will block here until the transfer is complete or a timeout
 * of 500ms expires.
 */
bool da16k_uart_send(const char *src, size_t length) {
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
    static char tx_buf[2][TERM_LINE_SIZ];
    static int buf_select = 0;
    HAL_StatusTypeDef s;

    if(!src || length==0) {
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <da16k_uart_send+0x16>
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <da16k_uart_send+0x1a>
        return false;
 8006366:	2300      	movs	r3, #0
 8006368:	e025      	b.n	80063b6 <da16k_uart_send+0x66>
    }

    memcpy(tx_buf[buf_select], src, length);
 800636a:	4b15      	ldr	r3, [pc, #84]	@ (80063c0 <da16k_uart_send+0x70>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	021b      	lsls	r3, r3, #8
 8006370:	4a14      	ldr	r2, [pc, #80]	@ (80063c4 <da16k_uart_send+0x74>)
 8006372:	4413      	add	r3, r2
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	6879      	ldr	r1, [r7, #4]
 8006378:	4618      	mov	r0, r3
 800637a:	f000 fe09 	bl	8006f90 <memcpy>
    do {
        s = HAL_UART_Transmit(da_uart_p, (uint8_t*)tx_buf[buf_select], length, _500MS);
 800637e:	4b12      	ldr	r3, [pc, #72]	@ (80063c8 <da16k_uart_send+0x78>)
 8006380:	6818      	ldr	r0, [r3, #0]
 8006382:	4b0f      	ldr	r3, [pc, #60]	@ (80063c0 <da16k_uart_send+0x70>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	021b      	lsls	r3, r3, #8
 8006388:	4a0e      	ldr	r2, [pc, #56]	@ (80063c4 <da16k_uart_send+0x74>)
 800638a:	1899      	adds	r1, r3, r2
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	b29a      	uxth	r2, r3
 8006390:	2332      	movs	r3, #50	@ 0x32
 8006392:	f7fe fa41 	bl	8004818 <HAL_UART_Transmit>
 8006396:	4603      	mov	r3, r0
 8006398:	73fb      	strb	r3, [r7, #15]
    }while(s != HAL_OK);
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1ee      	bne.n	800637e <da16k_uart_send+0x2e>

    buf_select = buf_select ? 0:1;
 80063a0:	4b07      	ldr	r3, [pc, #28]	@ (80063c0 <da16k_uart_send+0x70>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	bf0c      	ite	eq
 80063a8:	2301      	moveq	r3, #1
 80063aa:	2300      	movne	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	461a      	mov	r2, r3
 80063b0:	4b03      	ldr	r3, [pc, #12]	@ (80063c0 <da16k_uart_send+0x70>)
 80063b2:	601a      	str	r2, [r3, #0]

    return true;
 80063b4:	2301      	movs	r3, #1
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20000ffc 	.word	0x20000ffc
 80063c4:	20001000 	.word	0x20001000
 80063c8:	2000004c 	.word	0x2000004c

080063cc <da16k_uart_get_char>:

/*
 * Function required by the AT cmd lib. This function reads character from the receive buffer of the serial port. If
 * there are no characters to be read the code will block here for the specified timeout length.
 */
da16k_err_t da16k_uart_get_char(char *dst, uint32_t timeout_ms) {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
    if(!dst) {
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <da16k_uart_get_char+0x14>
        return DA16K_INVALID_PARAMETER;
 80063dc:	230b      	movs	r3, #11
 80063de:	e027      	b.n	8006430 <da16k_uart_get_char+0x64>
    }

    uint32_t expiry = HAL_GetTick() + timeout_ms;
 80063e0:	f7fc fb20 	bl	8002a24 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	4413      	add	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]

    do {
        if(tail != head) {
 80063ec:	4b12      	ldr	r3, [pc, #72]	@ (8006438 <da16k_uart_get_char+0x6c>)
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	4b12      	ldr	r3, [pc, #72]	@ (800643c <da16k_uart_get_char+0x70>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d014      	beq.n	8006422 <da16k_uart_get_char+0x56>
            *dst = rx_buf[tail];
 80063f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006438 <da16k_uart_get_char+0x6c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a10      	ldr	r2, [pc, #64]	@ (8006440 <da16k_uart_get_char+0x74>)
 80063fe:	5cd3      	ldrb	r3, [r2, r3]
 8006400:	b2da      	uxtb	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	701a      	strb	r2, [r3, #0]
            if(++tail >= TERM_LINE_SIZ) {
 8006406:	4b0c      	ldr	r3, [pc, #48]	@ (8006438 <da16k_uart_get_char+0x6c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3301      	adds	r3, #1
 800640c:	4a0a      	ldr	r2, [pc, #40]	@ (8006438 <da16k_uart_get_char+0x6c>)
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	4b09      	ldr	r3, [pc, #36]	@ (8006438 <da16k_uart_get_char+0x6c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2bff      	cmp	r3, #255	@ 0xff
 8006416:	dd02      	ble.n	800641e <da16k_uart_get_char+0x52>
                tail = 0;
 8006418:	4b07      	ldr	r3, [pc, #28]	@ (8006438 <da16k_uart_get_char+0x6c>)
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]
            }
            return DA16K_SUCCESS;
 800641e:	2300      	movs	r3, #0
 8006420:	e006      	b.n	8006430 <da16k_uart_get_char+0x64>
        }
    }while(HAL_GetTick() < expiry);
 8006422:	f7fc faff 	bl	8002a24 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4293      	cmp	r3, r2
 800642c:	d8de      	bhi.n	80063ec <da16k_uart_get_char+0x20>

    return DA16K_TIMEOUT;
 800642e:	2303      	movs	r3, #3
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	20000ff4 	.word	0x20000ff4
 800643c:	20000ff0 	.word	0x20000ff0
 8006440:	20000ef0 	.word	0x20000ef0

08006444 <atoi>:
 8006444:	220a      	movs	r2, #10
 8006446:	2100      	movs	r1, #0
 8006448:	f000 bad0 	b.w	80069ec <strtol>

0800644c <malloc>:
 800644c:	4b02      	ldr	r3, [pc, #8]	@ (8006458 <malloc+0xc>)
 800644e:	4601      	mov	r1, r0
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	f000 b80b 	b.w	800646c <_malloc_r>
 8006456:	bf00      	nop
 8006458:	2000046c 	.word	0x2000046c

0800645c <free>:
 800645c:	4b02      	ldr	r3, [pc, #8]	@ (8006468 <free+0xc>)
 800645e:	4601      	mov	r1, r0
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	f000 be09 	b.w	8007078 <_free_r>
 8006466:	bf00      	nop
 8006468:	2000046c 	.word	0x2000046c

0800646c <_malloc_r>:
 800646c:	f101 030b 	add.w	r3, r1, #11
 8006470:	2b16      	cmp	r3, #22
 8006472:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006476:	4605      	mov	r5, r0
 8006478:	d906      	bls.n	8006488 <_malloc_r+0x1c>
 800647a:	f033 0707 	bics.w	r7, r3, #7
 800647e:	d504      	bpl.n	800648a <_malloc_r+0x1e>
 8006480:	230c      	movs	r3, #12
 8006482:	602b      	str	r3, [r5, #0]
 8006484:	2400      	movs	r4, #0
 8006486:	e1a3      	b.n	80067d0 <_malloc_r+0x364>
 8006488:	2710      	movs	r7, #16
 800648a:	42b9      	cmp	r1, r7
 800648c:	d8f8      	bhi.n	8006480 <_malloc_r+0x14>
 800648e:	4628      	mov	r0, r5
 8006490:	f000 fa26 	bl	80068e0 <__malloc_lock>
 8006494:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 8006498:	4eaf      	ldr	r6, [pc, #700]	@ (8006758 <_malloc_r+0x2ec>)
 800649a:	d237      	bcs.n	800650c <_malloc_r+0xa0>
 800649c:	f107 0208 	add.w	r2, r7, #8
 80064a0:	4432      	add	r2, r6
 80064a2:	f1a2 0108 	sub.w	r1, r2, #8
 80064a6:	6854      	ldr	r4, [r2, #4]
 80064a8:	428c      	cmp	r4, r1
 80064aa:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80064ae:	d102      	bne.n	80064b6 <_malloc_r+0x4a>
 80064b0:	68d4      	ldr	r4, [r2, #12]
 80064b2:	42a2      	cmp	r2, r4
 80064b4:	d010      	beq.n	80064d8 <_malloc_r+0x6c>
 80064b6:	6863      	ldr	r3, [r4, #4]
 80064b8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80064bc:	f023 0303 	bic.w	r3, r3, #3
 80064c0:	60ca      	str	r2, [r1, #12]
 80064c2:	4423      	add	r3, r4
 80064c4:	6091      	str	r1, [r2, #8]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	f042 0201 	orr.w	r2, r2, #1
 80064cc:	605a      	str	r2, [r3, #4]
 80064ce:	4628      	mov	r0, r5
 80064d0:	f000 fa0c 	bl	80068ec <__malloc_unlock>
 80064d4:	3408      	adds	r4, #8
 80064d6:	e17b      	b.n	80067d0 <_malloc_r+0x364>
 80064d8:	3302      	adds	r3, #2
 80064da:	6934      	ldr	r4, [r6, #16]
 80064dc:	499f      	ldr	r1, [pc, #636]	@ (800675c <_malloc_r+0x2f0>)
 80064de:	428c      	cmp	r4, r1
 80064e0:	d077      	beq.n	80065d2 <_malloc_r+0x166>
 80064e2:	6862      	ldr	r2, [r4, #4]
 80064e4:	f022 0c03 	bic.w	ip, r2, #3
 80064e8:	ebac 0007 	sub.w	r0, ip, r7
 80064ec:	280f      	cmp	r0, #15
 80064ee:	dd48      	ble.n	8006582 <_malloc_r+0x116>
 80064f0:	19e2      	adds	r2, r4, r7
 80064f2:	f040 0301 	orr.w	r3, r0, #1
 80064f6:	f047 0701 	orr.w	r7, r7, #1
 80064fa:	6067      	str	r7, [r4, #4]
 80064fc:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8006500:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8006504:	6053      	str	r3, [r2, #4]
 8006506:	f844 000c 	str.w	r0, [r4, ip]
 800650a:	e7e0      	b.n	80064ce <_malloc_r+0x62>
 800650c:	0a7b      	lsrs	r3, r7, #9
 800650e:	d02a      	beq.n	8006566 <_malloc_r+0xfa>
 8006510:	2b04      	cmp	r3, #4
 8006512:	d812      	bhi.n	800653a <_malloc_r+0xce>
 8006514:	09bb      	lsrs	r3, r7, #6
 8006516:	3338      	adds	r3, #56	@ 0x38
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800651e:	f1a2 0c08 	sub.w	ip, r2, #8
 8006522:	6854      	ldr	r4, [r2, #4]
 8006524:	4564      	cmp	r4, ip
 8006526:	d006      	beq.n	8006536 <_malloc_r+0xca>
 8006528:	6862      	ldr	r2, [r4, #4]
 800652a:	f022 0203 	bic.w	r2, r2, #3
 800652e:	1bd0      	subs	r0, r2, r7
 8006530:	280f      	cmp	r0, #15
 8006532:	dd1c      	ble.n	800656e <_malloc_r+0x102>
 8006534:	3b01      	subs	r3, #1
 8006536:	3301      	adds	r3, #1
 8006538:	e7cf      	b.n	80064da <_malloc_r+0x6e>
 800653a:	2b14      	cmp	r3, #20
 800653c:	d801      	bhi.n	8006542 <_malloc_r+0xd6>
 800653e:	335b      	adds	r3, #91	@ 0x5b
 8006540:	e7ea      	b.n	8006518 <_malloc_r+0xac>
 8006542:	2b54      	cmp	r3, #84	@ 0x54
 8006544:	d802      	bhi.n	800654c <_malloc_r+0xe0>
 8006546:	0b3b      	lsrs	r3, r7, #12
 8006548:	336e      	adds	r3, #110	@ 0x6e
 800654a:	e7e5      	b.n	8006518 <_malloc_r+0xac>
 800654c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8006550:	d802      	bhi.n	8006558 <_malloc_r+0xec>
 8006552:	0bfb      	lsrs	r3, r7, #15
 8006554:	3377      	adds	r3, #119	@ 0x77
 8006556:	e7df      	b.n	8006518 <_malloc_r+0xac>
 8006558:	f240 5254 	movw	r2, #1364	@ 0x554
 800655c:	4293      	cmp	r3, r2
 800655e:	d804      	bhi.n	800656a <_malloc_r+0xfe>
 8006560:	0cbb      	lsrs	r3, r7, #18
 8006562:	337c      	adds	r3, #124	@ 0x7c
 8006564:	e7d8      	b.n	8006518 <_malloc_r+0xac>
 8006566:	233f      	movs	r3, #63	@ 0x3f
 8006568:	e7d6      	b.n	8006518 <_malloc_r+0xac>
 800656a:	237e      	movs	r3, #126	@ 0x7e
 800656c:	e7d4      	b.n	8006518 <_malloc_r+0xac>
 800656e:	2800      	cmp	r0, #0
 8006570:	68e1      	ldr	r1, [r4, #12]
 8006572:	db04      	blt.n	800657e <_malloc_r+0x112>
 8006574:	68a3      	ldr	r3, [r4, #8]
 8006576:	60d9      	str	r1, [r3, #12]
 8006578:	608b      	str	r3, [r1, #8]
 800657a:	18a3      	adds	r3, r4, r2
 800657c:	e7a3      	b.n	80064c6 <_malloc_r+0x5a>
 800657e:	460c      	mov	r4, r1
 8006580:	e7d0      	b.n	8006524 <_malloc_r+0xb8>
 8006582:	2800      	cmp	r0, #0
 8006584:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8006588:	db07      	blt.n	800659a <_malloc_r+0x12e>
 800658a:	44a4      	add	ip, r4
 800658c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8006590:	f043 0301 	orr.w	r3, r3, #1
 8006594:	f8cc 3004 	str.w	r3, [ip, #4]
 8006598:	e799      	b.n	80064ce <_malloc_r+0x62>
 800659a:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800659e:	6870      	ldr	r0, [r6, #4]
 80065a0:	f080 8095 	bcs.w	80066ce <_malloc_r+0x262>
 80065a4:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80065a8:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80065ac:	f04f 0c01 	mov.w	ip, #1
 80065b0:	3201      	adds	r2, #1
 80065b2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80065b6:	ea4c 0000 	orr.w	r0, ip, r0
 80065ba:	6070      	str	r0, [r6, #4]
 80065bc:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80065c0:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80065c4:	3808      	subs	r0, #8
 80065c6:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80065ca:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80065ce:	f8cc 400c 	str.w	r4, [ip, #12]
 80065d2:	1098      	asrs	r0, r3, #2
 80065d4:	2201      	movs	r2, #1
 80065d6:	4082      	lsls	r2, r0
 80065d8:	6870      	ldr	r0, [r6, #4]
 80065da:	4290      	cmp	r0, r2
 80065dc:	d326      	bcc.n	800662c <_malloc_r+0x1c0>
 80065de:	4210      	tst	r0, r2
 80065e0:	d106      	bne.n	80065f0 <_malloc_r+0x184>
 80065e2:	f023 0303 	bic.w	r3, r3, #3
 80065e6:	0052      	lsls	r2, r2, #1
 80065e8:	4210      	tst	r0, r2
 80065ea:	f103 0304 	add.w	r3, r3, #4
 80065ee:	d0fa      	beq.n	80065e6 <_malloc_r+0x17a>
 80065f0:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80065f4:	46c1      	mov	r9, r8
 80065f6:	469e      	mov	lr, r3
 80065f8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80065fc:	454c      	cmp	r4, r9
 80065fe:	f040 80b9 	bne.w	8006774 <_malloc_r+0x308>
 8006602:	f10e 0e01 	add.w	lr, lr, #1
 8006606:	f01e 0f03 	tst.w	lr, #3
 800660a:	f109 0908 	add.w	r9, r9, #8
 800660e:	d1f3      	bne.n	80065f8 <_malloc_r+0x18c>
 8006610:	0798      	lsls	r0, r3, #30
 8006612:	f040 80e3 	bne.w	80067dc <_malloc_r+0x370>
 8006616:	6873      	ldr	r3, [r6, #4]
 8006618:	ea23 0302 	bic.w	r3, r3, r2
 800661c:	6073      	str	r3, [r6, #4]
 800661e:	6870      	ldr	r0, [r6, #4]
 8006620:	0052      	lsls	r2, r2, #1
 8006622:	4290      	cmp	r0, r2
 8006624:	d302      	bcc.n	800662c <_malloc_r+0x1c0>
 8006626:	2a00      	cmp	r2, #0
 8006628:	f040 80e5 	bne.w	80067f6 <_malloc_r+0x38a>
 800662c:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8006630:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006634:	f023 0903 	bic.w	r9, r3, #3
 8006638:	45b9      	cmp	r9, r7
 800663a:	d304      	bcc.n	8006646 <_malloc_r+0x1da>
 800663c:	eba9 0207 	sub.w	r2, r9, r7
 8006640:	2a0f      	cmp	r2, #15
 8006642:	f300 8141 	bgt.w	80068c8 <_malloc_r+0x45c>
 8006646:	4b46      	ldr	r3, [pc, #280]	@ (8006760 <_malloc_r+0x2f4>)
 8006648:	6819      	ldr	r1, [r3, #0]
 800664a:	3110      	adds	r1, #16
 800664c:	4439      	add	r1, r7
 800664e:	2008      	movs	r0, #8
 8006650:	9101      	str	r1, [sp, #4]
 8006652:	f000 fc91 	bl	8006f78 <sysconf>
 8006656:	4a43      	ldr	r2, [pc, #268]	@ (8006764 <_malloc_r+0x2f8>)
 8006658:	9901      	ldr	r1, [sp, #4]
 800665a:	6813      	ldr	r3, [r2, #0]
 800665c:	3301      	adds	r3, #1
 800665e:	bf1f      	itttt	ne
 8006660:	f101 31ff 	addne.w	r1, r1, #4294967295
 8006664:	1809      	addne	r1, r1, r0
 8006666:	4243      	negne	r3, r0
 8006668:	4019      	andne	r1, r3
 800666a:	4680      	mov	r8, r0
 800666c:	4628      	mov	r0, r5
 800666e:	9101      	str	r1, [sp, #4]
 8006670:	f000 fc32 	bl	8006ed8 <_sbrk_r>
 8006674:	1c42      	adds	r2, r0, #1
 8006676:	eb0a 0b09 	add.w	fp, sl, r9
 800667a:	4604      	mov	r4, r0
 800667c:	f000 80f7 	beq.w	800686e <_malloc_r+0x402>
 8006680:	4583      	cmp	fp, r0
 8006682:	9901      	ldr	r1, [sp, #4]
 8006684:	4a37      	ldr	r2, [pc, #220]	@ (8006764 <_malloc_r+0x2f8>)
 8006686:	d902      	bls.n	800668e <_malloc_r+0x222>
 8006688:	45b2      	cmp	sl, r6
 800668a:	f040 80f0 	bne.w	800686e <_malloc_r+0x402>
 800668e:	4b36      	ldr	r3, [pc, #216]	@ (8006768 <_malloc_r+0x2fc>)
 8006690:	6818      	ldr	r0, [r3, #0]
 8006692:	45a3      	cmp	fp, r4
 8006694:	eb00 0e01 	add.w	lr, r0, r1
 8006698:	f8c3 e000 	str.w	lr, [r3]
 800669c:	f108 3cff 	add.w	ip, r8, #4294967295
 80066a0:	f040 80ab 	bne.w	80067fa <_malloc_r+0x38e>
 80066a4:	ea1b 0f0c 	tst.w	fp, ip
 80066a8:	f040 80a7 	bne.w	80067fa <_malloc_r+0x38e>
 80066ac:	68b2      	ldr	r2, [r6, #8]
 80066ae:	4449      	add	r1, r9
 80066b0:	f041 0101 	orr.w	r1, r1, #1
 80066b4:	6051      	str	r1, [r2, #4]
 80066b6:	4a2d      	ldr	r2, [pc, #180]	@ (800676c <_malloc_r+0x300>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6811      	ldr	r1, [r2, #0]
 80066bc:	428b      	cmp	r3, r1
 80066be:	bf88      	it	hi
 80066c0:	6013      	strhi	r3, [r2, #0]
 80066c2:	4a2b      	ldr	r2, [pc, #172]	@ (8006770 <_malloc_r+0x304>)
 80066c4:	6811      	ldr	r1, [r2, #0]
 80066c6:	428b      	cmp	r3, r1
 80066c8:	bf88      	it	hi
 80066ca:	6013      	strhi	r3, [r2, #0]
 80066cc:	e0cf      	b.n	800686e <_malloc_r+0x402>
 80066ce:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 80066d2:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80066d6:	d218      	bcs.n	800670a <_malloc_r+0x29e>
 80066d8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80066dc:	3238      	adds	r2, #56	@ 0x38
 80066de:	f102 0e01 	add.w	lr, r2, #1
 80066e2:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80066e6:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80066ea:	45f0      	cmp	r8, lr
 80066ec:	d12b      	bne.n	8006746 <_malloc_r+0x2da>
 80066ee:	1092      	asrs	r2, r2, #2
 80066f0:	f04f 0c01 	mov.w	ip, #1
 80066f4:	fa0c f202 	lsl.w	r2, ip, r2
 80066f8:	4302      	orrs	r2, r0
 80066fa:	6072      	str	r2, [r6, #4]
 80066fc:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8006700:	f8c8 4008 	str.w	r4, [r8, #8]
 8006704:	f8ce 400c 	str.w	r4, [lr, #12]
 8006708:	e763      	b.n	80065d2 <_malloc_r+0x166>
 800670a:	2a14      	cmp	r2, #20
 800670c:	d801      	bhi.n	8006712 <_malloc_r+0x2a6>
 800670e:	325b      	adds	r2, #91	@ 0x5b
 8006710:	e7e5      	b.n	80066de <_malloc_r+0x272>
 8006712:	2a54      	cmp	r2, #84	@ 0x54
 8006714:	d803      	bhi.n	800671e <_malloc_r+0x2b2>
 8006716:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800671a:	326e      	adds	r2, #110	@ 0x6e
 800671c:	e7df      	b.n	80066de <_malloc_r+0x272>
 800671e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8006722:	d803      	bhi.n	800672c <_malloc_r+0x2c0>
 8006724:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8006728:	3277      	adds	r2, #119	@ 0x77
 800672a:	e7d8      	b.n	80066de <_malloc_r+0x272>
 800672c:	f240 5e54 	movw	lr, #1364	@ 0x554
 8006730:	4572      	cmp	r2, lr
 8006732:	bf9a      	itte	ls
 8006734:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8006738:	327c      	addls	r2, #124	@ 0x7c
 800673a:	227e      	movhi	r2, #126	@ 0x7e
 800673c:	e7cf      	b.n	80066de <_malloc_r+0x272>
 800673e:	f8de e008 	ldr.w	lr, [lr, #8]
 8006742:	45f0      	cmp	r8, lr
 8006744:	d005      	beq.n	8006752 <_malloc_r+0x2e6>
 8006746:	f8de 2004 	ldr.w	r2, [lr, #4]
 800674a:	f022 0203 	bic.w	r2, r2, #3
 800674e:	4562      	cmp	r2, ip
 8006750:	d8f5      	bhi.n	800673e <_malloc_r+0x2d2>
 8006752:	f8de 800c 	ldr.w	r8, [lr, #12]
 8006756:	e7d1      	b.n	80066fc <_malloc_r+0x290>
 8006758:	20000058 	.word	0x20000058
 800675c:	20000060 	.word	0x20000060
 8006760:	20001230 	.word	0x20001230
 8006764:	20000050 	.word	0x20000050
 8006768:	20001200 	.word	0x20001200
 800676c:	2000122c 	.word	0x2000122c
 8006770:	20001228 	.word	0x20001228
 8006774:	6860      	ldr	r0, [r4, #4]
 8006776:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800677a:	f020 0003 	bic.w	r0, r0, #3
 800677e:	eba0 0a07 	sub.w	sl, r0, r7
 8006782:	f1ba 0f0f 	cmp.w	sl, #15
 8006786:	dd12      	ble.n	80067ae <_malloc_r+0x342>
 8006788:	68a3      	ldr	r3, [r4, #8]
 800678a:	19e2      	adds	r2, r4, r7
 800678c:	f047 0701 	orr.w	r7, r7, #1
 8006790:	6067      	str	r7, [r4, #4]
 8006792:	f8c3 c00c 	str.w	ip, [r3, #12]
 8006796:	f8cc 3008 	str.w	r3, [ip, #8]
 800679a:	f04a 0301 	orr.w	r3, sl, #1
 800679e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80067a2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80067a6:	6053      	str	r3, [r2, #4]
 80067a8:	f844 a000 	str.w	sl, [r4, r0]
 80067ac:	e68f      	b.n	80064ce <_malloc_r+0x62>
 80067ae:	f1ba 0f00 	cmp.w	sl, #0
 80067b2:	db11      	blt.n	80067d8 <_malloc_r+0x36c>
 80067b4:	4420      	add	r0, r4
 80067b6:	6843      	ldr	r3, [r0, #4]
 80067b8:	f043 0301 	orr.w	r3, r3, #1
 80067bc:	6043      	str	r3, [r0, #4]
 80067be:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80067c2:	4628      	mov	r0, r5
 80067c4:	f8c3 c00c 	str.w	ip, [r3, #12]
 80067c8:	f8cc 3008 	str.w	r3, [ip, #8]
 80067cc:	f000 f88e 	bl	80068ec <__malloc_unlock>
 80067d0:	4620      	mov	r0, r4
 80067d2:	b003      	add	sp, #12
 80067d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d8:	4664      	mov	r4, ip
 80067da:	e70f      	b.n	80065fc <_malloc_r+0x190>
 80067dc:	f858 0908 	ldr.w	r0, [r8], #-8
 80067e0:	4540      	cmp	r0, r8
 80067e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80067e6:	f43f af13 	beq.w	8006610 <_malloc_r+0x1a4>
 80067ea:	e718      	b.n	800661e <_malloc_r+0x1b2>
 80067ec:	3304      	adds	r3, #4
 80067ee:	0052      	lsls	r2, r2, #1
 80067f0:	4210      	tst	r0, r2
 80067f2:	d0fb      	beq.n	80067ec <_malloc_r+0x380>
 80067f4:	e6fc      	b.n	80065f0 <_malloc_r+0x184>
 80067f6:	4673      	mov	r3, lr
 80067f8:	e7fa      	b.n	80067f0 <_malloc_r+0x384>
 80067fa:	6810      	ldr	r0, [r2, #0]
 80067fc:	3001      	adds	r0, #1
 80067fe:	bf1b      	ittet	ne
 8006800:	eba4 0b0b 	subne.w	fp, r4, fp
 8006804:	eb0b 020e 	addne.w	r2, fp, lr
 8006808:	6014      	streq	r4, [r2, #0]
 800680a:	601a      	strne	r2, [r3, #0]
 800680c:	f014 0b07 	ands.w	fp, r4, #7
 8006810:	bf1a      	itte	ne
 8006812:	f1cb 0008 	rsbne	r0, fp, #8
 8006816:	1824      	addne	r4, r4, r0
 8006818:	4658      	moveq	r0, fp
 800681a:	1862      	adds	r2, r4, r1
 800681c:	ea02 010c 	and.w	r1, r2, ip
 8006820:	4480      	add	r8, r0
 8006822:	eba8 0801 	sub.w	r8, r8, r1
 8006826:	ea08 080c 	and.w	r8, r8, ip
 800682a:	4641      	mov	r1, r8
 800682c:	4628      	mov	r0, r5
 800682e:	9201      	str	r2, [sp, #4]
 8006830:	f000 fb52 	bl	8006ed8 <_sbrk_r>
 8006834:	1c43      	adds	r3, r0, #1
 8006836:	9a01      	ldr	r2, [sp, #4]
 8006838:	4b28      	ldr	r3, [pc, #160]	@ (80068dc <_malloc_r+0x470>)
 800683a:	d107      	bne.n	800684c <_malloc_r+0x3e0>
 800683c:	f1bb 0f00 	cmp.w	fp, #0
 8006840:	d023      	beq.n	800688a <_malloc_r+0x41e>
 8006842:	f1ab 0008 	sub.w	r0, fp, #8
 8006846:	4410      	add	r0, r2
 8006848:	f04f 0800 	mov.w	r8, #0
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	60b4      	str	r4, [r6, #8]
 8006850:	1b00      	subs	r0, r0, r4
 8006852:	4440      	add	r0, r8
 8006854:	4442      	add	r2, r8
 8006856:	f040 0001 	orr.w	r0, r0, #1
 800685a:	45b2      	cmp	sl, r6
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	6060      	str	r0, [r4, #4]
 8006860:	f43f af29 	beq.w	80066b6 <_malloc_r+0x24a>
 8006864:	f1b9 0f0f 	cmp.w	r9, #15
 8006868:	d812      	bhi.n	8006890 <_malloc_r+0x424>
 800686a:	2301      	movs	r3, #1
 800686c:	6063      	str	r3, [r4, #4]
 800686e:	68b3      	ldr	r3, [r6, #8]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f023 0303 	bic.w	r3, r3, #3
 8006876:	42bb      	cmp	r3, r7
 8006878:	eba3 0207 	sub.w	r2, r3, r7
 800687c:	d301      	bcc.n	8006882 <_malloc_r+0x416>
 800687e:	2a0f      	cmp	r2, #15
 8006880:	dc22      	bgt.n	80068c8 <_malloc_r+0x45c>
 8006882:	4628      	mov	r0, r5
 8006884:	f000 f832 	bl	80068ec <__malloc_unlock>
 8006888:	e5fc      	b.n	8006484 <_malloc_r+0x18>
 800688a:	4610      	mov	r0, r2
 800688c:	46d8      	mov	r8, fp
 800688e:	e7dd      	b.n	800684c <_malloc_r+0x3e0>
 8006890:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006894:	f1a9 090c 	sub.w	r9, r9, #12
 8006898:	f029 0907 	bic.w	r9, r9, #7
 800689c:	f002 0201 	and.w	r2, r2, #1
 80068a0:	ea42 0209 	orr.w	r2, r2, r9
 80068a4:	f8ca 2004 	str.w	r2, [sl, #4]
 80068a8:	2105      	movs	r1, #5
 80068aa:	eb0a 0209 	add.w	r2, sl, r9
 80068ae:	f1b9 0f0f 	cmp.w	r9, #15
 80068b2:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80068b6:	f67f aefe 	bls.w	80066b6 <_malloc_r+0x24a>
 80068ba:	f10a 0108 	add.w	r1, sl, #8
 80068be:	4628      	mov	r0, r5
 80068c0:	f000 fbda 	bl	8007078 <_free_r>
 80068c4:	4b05      	ldr	r3, [pc, #20]	@ (80068dc <_malloc_r+0x470>)
 80068c6:	e6f6      	b.n	80066b6 <_malloc_r+0x24a>
 80068c8:	68b4      	ldr	r4, [r6, #8]
 80068ca:	f047 0301 	orr.w	r3, r7, #1
 80068ce:	4427      	add	r7, r4
 80068d0:	f042 0201 	orr.w	r2, r2, #1
 80068d4:	6063      	str	r3, [r4, #4]
 80068d6:	60b7      	str	r7, [r6, #8]
 80068d8:	607a      	str	r2, [r7, #4]
 80068da:	e5f8      	b.n	80064ce <_malloc_r+0x62>
 80068dc:	20001200 	.word	0x20001200

080068e0 <__malloc_lock>:
 80068e0:	4801      	ldr	r0, [pc, #4]	@ (80068e8 <__malloc_lock+0x8>)
 80068e2:	f000 bb47 	b.w	8006f74 <__retarget_lock_acquire_recursive>
 80068e6:	bf00      	nop
 80068e8:	20001374 	.word	0x20001374

080068ec <__malloc_unlock>:
 80068ec:	4801      	ldr	r0, [pc, #4]	@ (80068f4 <__malloc_unlock+0x8>)
 80068ee:	f000 bb42 	b.w	8006f76 <__retarget_lock_release_recursive>
 80068f2:	bf00      	nop
 80068f4:	20001374 	.word	0x20001374

080068f8 <_strtol_l.constprop.0>:
 80068f8:	2b24      	cmp	r3, #36	@ 0x24
 80068fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068fe:	4686      	mov	lr, r0
 8006900:	4690      	mov	r8, r2
 8006902:	d801      	bhi.n	8006908 <_strtol_l.constprop.0+0x10>
 8006904:	2b01      	cmp	r3, #1
 8006906:	d106      	bne.n	8006916 <_strtol_l.constprop.0+0x1e>
 8006908:	f000 fb08 	bl	8006f1c <__errno>
 800690c:	2316      	movs	r3, #22
 800690e:	6003      	str	r3, [r0, #0]
 8006910:	2000      	movs	r0, #0
 8006912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006916:	4834      	ldr	r0, [pc, #208]	@ (80069e8 <_strtol_l.constprop.0+0xf0>)
 8006918:	460d      	mov	r5, r1
 800691a:	462a      	mov	r2, r5
 800691c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006920:	5d06      	ldrb	r6, [r0, r4]
 8006922:	f016 0608 	ands.w	r6, r6, #8
 8006926:	d1f8      	bne.n	800691a <_strtol_l.constprop.0+0x22>
 8006928:	2c2d      	cmp	r4, #45	@ 0x2d
 800692a:	d12d      	bne.n	8006988 <_strtol_l.constprop.0+0x90>
 800692c:	782c      	ldrb	r4, [r5, #0]
 800692e:	2601      	movs	r6, #1
 8006930:	1c95      	adds	r5, r2, #2
 8006932:	f033 0210 	bics.w	r2, r3, #16
 8006936:	d109      	bne.n	800694c <_strtol_l.constprop.0+0x54>
 8006938:	2c30      	cmp	r4, #48	@ 0x30
 800693a:	d12a      	bne.n	8006992 <_strtol_l.constprop.0+0x9a>
 800693c:	782a      	ldrb	r2, [r5, #0]
 800693e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006942:	2a58      	cmp	r2, #88	@ 0x58
 8006944:	d125      	bne.n	8006992 <_strtol_l.constprop.0+0x9a>
 8006946:	786c      	ldrb	r4, [r5, #1]
 8006948:	2310      	movs	r3, #16
 800694a:	3502      	adds	r5, #2
 800694c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006950:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006954:	2200      	movs	r2, #0
 8006956:	fbbc f9f3 	udiv	r9, ip, r3
 800695a:	4610      	mov	r0, r2
 800695c:	fb03 ca19 	mls	sl, r3, r9, ip
 8006960:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006964:	2f09      	cmp	r7, #9
 8006966:	d81b      	bhi.n	80069a0 <_strtol_l.constprop.0+0xa8>
 8006968:	463c      	mov	r4, r7
 800696a:	42a3      	cmp	r3, r4
 800696c:	dd27      	ble.n	80069be <_strtol_l.constprop.0+0xc6>
 800696e:	1c57      	adds	r7, r2, #1
 8006970:	d007      	beq.n	8006982 <_strtol_l.constprop.0+0x8a>
 8006972:	4581      	cmp	r9, r0
 8006974:	d320      	bcc.n	80069b8 <_strtol_l.constprop.0+0xc0>
 8006976:	d101      	bne.n	800697c <_strtol_l.constprop.0+0x84>
 8006978:	45a2      	cmp	sl, r4
 800697a:	db1d      	blt.n	80069b8 <_strtol_l.constprop.0+0xc0>
 800697c:	fb00 4003 	mla	r0, r0, r3, r4
 8006980:	2201      	movs	r2, #1
 8006982:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006986:	e7eb      	b.n	8006960 <_strtol_l.constprop.0+0x68>
 8006988:	2c2b      	cmp	r4, #43	@ 0x2b
 800698a:	bf04      	itt	eq
 800698c:	782c      	ldrbeq	r4, [r5, #0]
 800698e:	1c95      	addeq	r5, r2, #2
 8006990:	e7cf      	b.n	8006932 <_strtol_l.constprop.0+0x3a>
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1da      	bne.n	800694c <_strtol_l.constprop.0+0x54>
 8006996:	2c30      	cmp	r4, #48	@ 0x30
 8006998:	bf0c      	ite	eq
 800699a:	2308      	moveq	r3, #8
 800699c:	230a      	movne	r3, #10
 800699e:	e7d5      	b.n	800694c <_strtol_l.constprop.0+0x54>
 80069a0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80069a4:	2f19      	cmp	r7, #25
 80069a6:	d801      	bhi.n	80069ac <_strtol_l.constprop.0+0xb4>
 80069a8:	3c37      	subs	r4, #55	@ 0x37
 80069aa:	e7de      	b.n	800696a <_strtol_l.constprop.0+0x72>
 80069ac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80069b0:	2f19      	cmp	r7, #25
 80069b2:	d804      	bhi.n	80069be <_strtol_l.constprop.0+0xc6>
 80069b4:	3c57      	subs	r4, #87	@ 0x57
 80069b6:	e7d8      	b.n	800696a <_strtol_l.constprop.0+0x72>
 80069b8:	f04f 32ff 	mov.w	r2, #4294967295
 80069bc:	e7e1      	b.n	8006982 <_strtol_l.constprop.0+0x8a>
 80069be:	1c53      	adds	r3, r2, #1
 80069c0:	d108      	bne.n	80069d4 <_strtol_l.constprop.0+0xdc>
 80069c2:	2322      	movs	r3, #34	@ 0x22
 80069c4:	f8ce 3000 	str.w	r3, [lr]
 80069c8:	4660      	mov	r0, ip
 80069ca:	f1b8 0f00 	cmp.w	r8, #0
 80069ce:	d0a0      	beq.n	8006912 <_strtol_l.constprop.0+0x1a>
 80069d0:	1e69      	subs	r1, r5, #1
 80069d2:	e006      	b.n	80069e2 <_strtol_l.constprop.0+0xea>
 80069d4:	b106      	cbz	r6, 80069d8 <_strtol_l.constprop.0+0xe0>
 80069d6:	4240      	negs	r0, r0
 80069d8:	f1b8 0f00 	cmp.w	r8, #0
 80069dc:	d099      	beq.n	8006912 <_strtol_l.constprop.0+0x1a>
 80069de:	2a00      	cmp	r2, #0
 80069e0:	d1f6      	bne.n	80069d0 <_strtol_l.constprop.0+0xd8>
 80069e2:	f8c8 1000 	str.w	r1, [r8]
 80069e6:	e794      	b.n	8006912 <_strtol_l.constprop.0+0x1a>
 80069e8:	0800d2d6 	.word	0x0800d2d6

080069ec <strtol>:
 80069ec:	4613      	mov	r3, r2
 80069ee:	460a      	mov	r2, r1
 80069f0:	4601      	mov	r1, r0
 80069f2:	4802      	ldr	r0, [pc, #8]	@ (80069fc <strtol+0x10>)
 80069f4:	6800      	ldr	r0, [r0, #0]
 80069f6:	f7ff bf7f 	b.w	80068f8 <_strtol_l.constprop.0>
 80069fa:	bf00      	nop
 80069fc:	2000046c 	.word	0x2000046c

08006a00 <std>:
 8006a00:	2300      	movs	r3, #0
 8006a02:	b510      	push	{r4, lr}
 8006a04:	4604      	mov	r4, r0
 8006a06:	e9c0 3300 	strd	r3, r3, [r0]
 8006a0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a0e:	6083      	str	r3, [r0, #8]
 8006a10:	8181      	strh	r1, [r0, #12]
 8006a12:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a14:	81c2      	strh	r2, [r0, #14]
 8006a16:	6183      	str	r3, [r0, #24]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	2208      	movs	r2, #8
 8006a1c:	305c      	adds	r0, #92	@ 0x5c
 8006a1e:	f000 f9fb 	bl	8006e18 <memset>
 8006a22:	4b0d      	ldr	r3, [pc, #52]	@ (8006a58 <std+0x58>)
 8006a24:	6223      	str	r3, [r4, #32]
 8006a26:	4b0d      	ldr	r3, [pc, #52]	@ (8006a5c <std+0x5c>)
 8006a28:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a60 <std+0x60>)
 8006a2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a64 <std+0x64>)
 8006a30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a32:	4b0d      	ldr	r3, [pc, #52]	@ (8006a68 <std+0x68>)
 8006a34:	61e4      	str	r4, [r4, #28]
 8006a36:	429c      	cmp	r4, r3
 8006a38:	d006      	beq.n	8006a48 <std+0x48>
 8006a3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a3e:	4294      	cmp	r4, r2
 8006a40:	d002      	beq.n	8006a48 <std+0x48>
 8006a42:	33d0      	adds	r3, #208	@ 0xd0
 8006a44:	429c      	cmp	r4, r3
 8006a46:	d105      	bne.n	8006a54 <std+0x54>
 8006a48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a50:	f000 ba8e 	b.w	8006f70 <__retarget_lock_init_recursive>
 8006a54:	bd10      	pop	{r4, pc}
 8006a56:	bf00      	nop
 8006a58:	08006ced 	.word	0x08006ced
 8006a5c:	08006d0f 	.word	0x08006d0f
 8006a60:	08006d47 	.word	0x08006d47
 8006a64:	08006d6b 	.word	0x08006d6b
 8006a68:	20001234 	.word	0x20001234

08006a6c <stdio_exit_handler>:
 8006a6c:	4a02      	ldr	r2, [pc, #8]	@ (8006a78 <stdio_exit_handler+0xc>)
 8006a6e:	4903      	ldr	r1, [pc, #12]	@ (8006a7c <stdio_exit_handler+0x10>)
 8006a70:	4803      	ldr	r0, [pc, #12]	@ (8006a80 <stdio_exit_handler+0x14>)
 8006a72:	f000 b869 	b.w	8006b48 <_fwalk_sglue>
 8006a76:	bf00      	nop
 8006a78:	20000460 	.word	0x20000460
 8006a7c:	0800a485 	.word	0x0800a485
 8006a80:	20000470 	.word	0x20000470

08006a84 <cleanup_stdio>:
 8006a84:	6841      	ldr	r1, [r0, #4]
 8006a86:	4b0c      	ldr	r3, [pc, #48]	@ (8006ab8 <cleanup_stdio+0x34>)
 8006a88:	4299      	cmp	r1, r3
 8006a8a:	b510      	push	{r4, lr}
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	d001      	beq.n	8006a94 <cleanup_stdio+0x10>
 8006a90:	f003 fcf8 	bl	800a484 <_fclose_r>
 8006a94:	68a1      	ldr	r1, [r4, #8]
 8006a96:	4b09      	ldr	r3, [pc, #36]	@ (8006abc <cleanup_stdio+0x38>)
 8006a98:	4299      	cmp	r1, r3
 8006a9a:	d002      	beq.n	8006aa2 <cleanup_stdio+0x1e>
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f003 fcf1 	bl	800a484 <_fclose_r>
 8006aa2:	68e1      	ldr	r1, [r4, #12]
 8006aa4:	4b06      	ldr	r3, [pc, #24]	@ (8006ac0 <cleanup_stdio+0x3c>)
 8006aa6:	4299      	cmp	r1, r3
 8006aa8:	d004      	beq.n	8006ab4 <cleanup_stdio+0x30>
 8006aaa:	4620      	mov	r0, r4
 8006aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ab0:	f003 bce8 	b.w	800a484 <_fclose_r>
 8006ab4:	bd10      	pop	{r4, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20001234 	.word	0x20001234
 8006abc:	2000129c 	.word	0x2000129c
 8006ac0:	20001304 	.word	0x20001304

08006ac4 <global_stdio_init.part.0>:
 8006ac4:	b510      	push	{r4, lr}
 8006ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8006af4 <global_stdio_init.part.0+0x30>)
 8006ac8:	4c0b      	ldr	r4, [pc, #44]	@ (8006af8 <global_stdio_init.part.0+0x34>)
 8006aca:	4a0c      	ldr	r2, [pc, #48]	@ (8006afc <global_stdio_init.part.0+0x38>)
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	4620      	mov	r0, r4
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	2104      	movs	r1, #4
 8006ad4:	f7ff ff94 	bl	8006a00 <std>
 8006ad8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006adc:	2201      	movs	r2, #1
 8006ade:	2109      	movs	r1, #9
 8006ae0:	f7ff ff8e 	bl	8006a00 <std>
 8006ae4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ae8:	2202      	movs	r2, #2
 8006aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aee:	2112      	movs	r1, #18
 8006af0:	f7ff bf86 	b.w	8006a00 <std>
 8006af4:	2000136c 	.word	0x2000136c
 8006af8:	20001234 	.word	0x20001234
 8006afc:	08006a6d 	.word	0x08006a6d

08006b00 <__sfp_lock_acquire>:
 8006b00:	4801      	ldr	r0, [pc, #4]	@ (8006b08 <__sfp_lock_acquire+0x8>)
 8006b02:	f000 ba37 	b.w	8006f74 <__retarget_lock_acquire_recursive>
 8006b06:	bf00      	nop
 8006b08:	20001376 	.word	0x20001376

08006b0c <__sfp_lock_release>:
 8006b0c:	4801      	ldr	r0, [pc, #4]	@ (8006b14 <__sfp_lock_release+0x8>)
 8006b0e:	f000 ba32 	b.w	8006f76 <__retarget_lock_release_recursive>
 8006b12:	bf00      	nop
 8006b14:	20001376 	.word	0x20001376

08006b18 <__sinit>:
 8006b18:	b510      	push	{r4, lr}
 8006b1a:	4604      	mov	r4, r0
 8006b1c:	f7ff fff0 	bl	8006b00 <__sfp_lock_acquire>
 8006b20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b22:	b11b      	cbz	r3, 8006b2c <__sinit+0x14>
 8006b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b28:	f7ff bff0 	b.w	8006b0c <__sfp_lock_release>
 8006b2c:	4b04      	ldr	r3, [pc, #16]	@ (8006b40 <__sinit+0x28>)
 8006b2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b30:	4b04      	ldr	r3, [pc, #16]	@ (8006b44 <__sinit+0x2c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1f5      	bne.n	8006b24 <__sinit+0xc>
 8006b38:	f7ff ffc4 	bl	8006ac4 <global_stdio_init.part.0>
 8006b3c:	e7f2      	b.n	8006b24 <__sinit+0xc>
 8006b3e:	bf00      	nop
 8006b40:	08006a85 	.word	0x08006a85
 8006b44:	2000136c 	.word	0x2000136c

08006b48 <_fwalk_sglue>:
 8006b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b4c:	4607      	mov	r7, r0
 8006b4e:	4688      	mov	r8, r1
 8006b50:	4614      	mov	r4, r2
 8006b52:	2600      	movs	r6, #0
 8006b54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b58:	f1b9 0901 	subs.w	r9, r9, #1
 8006b5c:	d505      	bpl.n	8006b6a <_fwalk_sglue+0x22>
 8006b5e:	6824      	ldr	r4, [r4, #0]
 8006b60:	2c00      	cmp	r4, #0
 8006b62:	d1f7      	bne.n	8006b54 <_fwalk_sglue+0xc>
 8006b64:	4630      	mov	r0, r6
 8006b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b6a:	89ab      	ldrh	r3, [r5, #12]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d907      	bls.n	8006b80 <_fwalk_sglue+0x38>
 8006b70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b74:	3301      	adds	r3, #1
 8006b76:	d003      	beq.n	8006b80 <_fwalk_sglue+0x38>
 8006b78:	4629      	mov	r1, r5
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	47c0      	blx	r8
 8006b7e:	4306      	orrs	r6, r0
 8006b80:	3568      	adds	r5, #104	@ 0x68
 8006b82:	e7e9      	b.n	8006b58 <_fwalk_sglue+0x10>

08006b84 <printf>:
 8006b84:	b40f      	push	{r0, r1, r2, r3}
 8006b86:	b507      	push	{r0, r1, r2, lr}
 8006b88:	4906      	ldr	r1, [pc, #24]	@ (8006ba4 <printf+0x20>)
 8006b8a:	ab04      	add	r3, sp, #16
 8006b8c:	6808      	ldr	r0, [r1, #0]
 8006b8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b92:	6881      	ldr	r1, [r0, #8]
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	f001 fd0f 	bl	80085b8 <_vfprintf_r>
 8006b9a:	b003      	add	sp, #12
 8006b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ba0:	b004      	add	sp, #16
 8006ba2:	4770      	bx	lr
 8006ba4:	2000046c 	.word	0x2000046c

08006ba8 <_puts_r>:
 8006ba8:	b530      	push	{r4, r5, lr}
 8006baa:	4605      	mov	r5, r0
 8006bac:	b089      	sub	sp, #36	@ 0x24
 8006bae:	4608      	mov	r0, r1
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	f7f9 fb17 	bl	80001e4 <strlen>
 8006bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8006c30 <_puts_r+0x88>)
 8006bb8:	9306      	str	r3, [sp, #24]
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8006bc0:	9307      	str	r3, [sp, #28]
 8006bc2:	4418      	add	r0, r3
 8006bc4:	ab04      	add	r3, sp, #16
 8006bc6:	9301      	str	r3, [sp, #4]
 8006bc8:	2302      	movs	r3, #2
 8006bca:	9302      	str	r3, [sp, #8]
 8006bcc:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8006bce:	68ac      	ldr	r4, [r5, #8]
 8006bd0:	9003      	str	r0, [sp, #12]
 8006bd2:	b913      	cbnz	r3, 8006bda <_puts_r+0x32>
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	f7ff ff9f 	bl	8006b18 <__sinit>
 8006bda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bdc:	07db      	lsls	r3, r3, #31
 8006bde:	d405      	bmi.n	8006bec <_puts_r+0x44>
 8006be0:	89a3      	ldrh	r3, [r4, #12]
 8006be2:	0598      	lsls	r0, r3, #22
 8006be4:	d402      	bmi.n	8006bec <_puts_r+0x44>
 8006be6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006be8:	f000 f9c4 	bl	8006f74 <__retarget_lock_acquire_recursive>
 8006bec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bf0:	0499      	lsls	r1, r3, #18
 8006bf2:	d406      	bmi.n	8006c02 <_puts_r+0x5a>
 8006bf4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006bf8:	81a3      	strh	r3, [r4, #12]
 8006bfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bfc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c00:	6663      	str	r3, [r4, #100]	@ 0x64
 8006c02:	4628      	mov	r0, r5
 8006c04:	aa01      	add	r2, sp, #4
 8006c06:	4621      	mov	r1, r4
 8006c08:	f003 fd40 	bl	800a68c <__sfvwrite_r>
 8006c0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	bf0c      	ite	eq
 8006c12:	250a      	moveq	r5, #10
 8006c14:	f04f 35ff 	movne.w	r5, #4294967295
 8006c18:	07da      	lsls	r2, r3, #31
 8006c1a:	d405      	bmi.n	8006c28 <_puts_r+0x80>
 8006c1c:	89a3      	ldrh	r3, [r4, #12]
 8006c1e:	059b      	lsls	r3, r3, #22
 8006c20:	d402      	bmi.n	8006c28 <_puts_r+0x80>
 8006c22:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c24:	f000 f9a7 	bl	8006f76 <__retarget_lock_release_recursive>
 8006c28:	4628      	mov	r0, r5
 8006c2a:	b009      	add	sp, #36	@ 0x24
 8006c2c:	bd30      	pop	{r4, r5, pc}
 8006c2e:	bf00      	nop
 8006c30:	0800d67a 	.word	0x0800d67a

08006c34 <puts>:
 8006c34:	4b02      	ldr	r3, [pc, #8]	@ (8006c40 <puts+0xc>)
 8006c36:	4601      	mov	r1, r0
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	f7ff bfb5 	b.w	8006ba8 <_puts_r>
 8006c3e:	bf00      	nop
 8006c40:	2000046c 	.word	0x2000046c

08006c44 <snprintf>:
 8006c44:	b40c      	push	{r2, r3}
 8006c46:	b530      	push	{r4, r5, lr}
 8006c48:	4b17      	ldr	r3, [pc, #92]	@ (8006ca8 <snprintf+0x64>)
 8006c4a:	1e0c      	subs	r4, r1, #0
 8006c4c:	681d      	ldr	r5, [r3, #0]
 8006c4e:	b09d      	sub	sp, #116	@ 0x74
 8006c50:	da08      	bge.n	8006c64 <snprintf+0x20>
 8006c52:	238b      	movs	r3, #139	@ 0x8b
 8006c54:	602b      	str	r3, [r5, #0]
 8006c56:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5a:	b01d      	add	sp, #116	@ 0x74
 8006c5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c60:	b002      	add	sp, #8
 8006c62:	4770      	bx	lr
 8006c64:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006c68:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006c6c:	bf14      	ite	ne
 8006c6e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006c72:	4623      	moveq	r3, r4
 8006c74:	9304      	str	r3, [sp, #16]
 8006c76:	9307      	str	r3, [sp, #28]
 8006c78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006c7c:	9002      	str	r0, [sp, #8]
 8006c7e:	9006      	str	r0, [sp, #24]
 8006c80:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c84:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006c86:	ab21      	add	r3, sp, #132	@ 0x84
 8006c88:	a902      	add	r1, sp, #8
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	f000 fab3 	bl	80071f8 <_svfprintf_r>
 8006c92:	1c43      	adds	r3, r0, #1
 8006c94:	bfbc      	itt	lt
 8006c96:	238b      	movlt	r3, #139	@ 0x8b
 8006c98:	602b      	strlt	r3, [r5, #0]
 8006c9a:	2c00      	cmp	r4, #0
 8006c9c:	d0dd      	beq.n	8006c5a <snprintf+0x16>
 8006c9e:	9b02      	ldr	r3, [sp, #8]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	701a      	strb	r2, [r3, #0]
 8006ca4:	e7d9      	b.n	8006c5a <snprintf+0x16>
 8006ca6:	bf00      	nop
 8006ca8:	2000046c 	.word	0x2000046c

08006cac <sprintf>:
 8006cac:	b40e      	push	{r1, r2, r3}
 8006cae:	b500      	push	{lr}
 8006cb0:	b09c      	sub	sp, #112	@ 0x70
 8006cb2:	ab1d      	add	r3, sp, #116	@ 0x74
 8006cb4:	9002      	str	r0, [sp, #8]
 8006cb6:	9006      	str	r0, [sp, #24]
 8006cb8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006cbc:	4809      	ldr	r0, [pc, #36]	@ (8006ce4 <sprintf+0x38>)
 8006cbe:	9107      	str	r1, [sp, #28]
 8006cc0:	9104      	str	r1, [sp, #16]
 8006cc2:	4909      	ldr	r1, [pc, #36]	@ (8006ce8 <sprintf+0x3c>)
 8006cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cc8:	9105      	str	r1, [sp, #20]
 8006cca:	6800      	ldr	r0, [r0, #0]
 8006ccc:	9301      	str	r3, [sp, #4]
 8006cce:	a902      	add	r1, sp, #8
 8006cd0:	f000 fa92 	bl	80071f8 <_svfprintf_r>
 8006cd4:	9b02      	ldr	r3, [sp, #8]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	701a      	strb	r2, [r3, #0]
 8006cda:	b01c      	add	sp, #112	@ 0x70
 8006cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ce0:	b003      	add	sp, #12
 8006ce2:	4770      	bx	lr
 8006ce4:	2000046c 	.word	0x2000046c
 8006ce8:	ffff0208 	.word	0xffff0208

08006cec <__sread>:
 8006cec:	b510      	push	{r4, lr}
 8006cee:	460c      	mov	r4, r1
 8006cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf4:	f000 f8de 	bl	8006eb4 <_read_r>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	bfab      	itete	ge
 8006cfc:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 8006cfe:	89a3      	ldrhlt	r3, [r4, #12]
 8006d00:	181b      	addge	r3, r3, r0
 8006d02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d06:	bfac      	ite	ge
 8006d08:	6523      	strge	r3, [r4, #80]	@ 0x50
 8006d0a:	81a3      	strhlt	r3, [r4, #12]
 8006d0c:	bd10      	pop	{r4, pc}

08006d0e <__swrite>:
 8006d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d12:	461f      	mov	r7, r3
 8006d14:	898b      	ldrh	r3, [r1, #12]
 8006d16:	05db      	lsls	r3, r3, #23
 8006d18:	4605      	mov	r5, r0
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	4616      	mov	r6, r2
 8006d1e:	d505      	bpl.n	8006d2c <__swrite+0x1e>
 8006d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d24:	2302      	movs	r3, #2
 8006d26:	2200      	movs	r2, #0
 8006d28:	f000 f8b2 	bl	8006e90 <_lseek_r>
 8006d2c:	89a3      	ldrh	r3, [r4, #12]
 8006d2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d36:	81a3      	strh	r3, [r4, #12]
 8006d38:	4632      	mov	r2, r6
 8006d3a:	463b      	mov	r3, r7
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d42:	f000 b8d9 	b.w	8006ef8 <_write_r>

08006d46 <__sseek>:
 8006d46:	b510      	push	{r4, lr}
 8006d48:	460c      	mov	r4, r1
 8006d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d4e:	f000 f89f 	bl	8006e90 <_lseek_r>
 8006d52:	1c43      	adds	r3, r0, #1
 8006d54:	89a3      	ldrh	r3, [r4, #12]
 8006d56:	bf15      	itete	ne
 8006d58:	6520      	strne	r0, [r4, #80]	@ 0x50
 8006d5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d62:	81a3      	strheq	r3, [r4, #12]
 8006d64:	bf18      	it	ne
 8006d66:	81a3      	strhne	r3, [r4, #12]
 8006d68:	bd10      	pop	{r4, pc}

08006d6a <__sclose>:
 8006d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d6e:	f000 b87f 	b.w	8006e70 <_close_r>

08006d72 <_vsnprintf_r>:
 8006d72:	b530      	push	{r4, r5, lr}
 8006d74:	4614      	mov	r4, r2
 8006d76:	2c00      	cmp	r4, #0
 8006d78:	b09b      	sub	sp, #108	@ 0x6c
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	da05      	bge.n	8006d8c <_vsnprintf_r+0x1a>
 8006d80:	238b      	movs	r3, #139	@ 0x8b
 8006d82:	6003      	str	r3, [r0, #0]
 8006d84:	f04f 30ff 	mov.w	r0, #4294967295
 8006d88:	b01b      	add	sp, #108	@ 0x6c
 8006d8a:	bd30      	pop	{r4, r5, pc}
 8006d8c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006d90:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006d94:	bf14      	ite	ne
 8006d96:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006d9a:	4623      	moveq	r3, r4
 8006d9c:	9302      	str	r3, [sp, #8]
 8006d9e:	9305      	str	r3, [sp, #20]
 8006da0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006da4:	9100      	str	r1, [sp, #0]
 8006da6:	9104      	str	r1, [sp, #16]
 8006da8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006dac:	4669      	mov	r1, sp
 8006dae:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006db0:	f000 fa22 	bl	80071f8 <_svfprintf_r>
 8006db4:	1c43      	adds	r3, r0, #1
 8006db6:	bfbc      	itt	lt
 8006db8:	238b      	movlt	r3, #139	@ 0x8b
 8006dba:	602b      	strlt	r3, [r5, #0]
 8006dbc:	2c00      	cmp	r4, #0
 8006dbe:	d0e3      	beq.n	8006d88 <_vsnprintf_r+0x16>
 8006dc0:	9b00      	ldr	r3, [sp, #0]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	e7df      	b.n	8006d88 <_vsnprintf_r+0x16>

08006dc8 <vsnprintf>:
 8006dc8:	b507      	push	{r0, r1, r2, lr}
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	460a      	mov	r2, r1
 8006dd0:	4601      	mov	r1, r0
 8006dd2:	4803      	ldr	r0, [pc, #12]	@ (8006de0 <vsnprintf+0x18>)
 8006dd4:	6800      	ldr	r0, [r0, #0]
 8006dd6:	f7ff ffcc 	bl	8006d72 <_vsnprintf_r>
 8006dda:	b003      	add	sp, #12
 8006ddc:	f85d fb04 	ldr.w	pc, [sp], #4
 8006de0:	2000046c 	.word	0x2000046c

08006de4 <memmove>:
 8006de4:	4288      	cmp	r0, r1
 8006de6:	b510      	push	{r4, lr}
 8006de8:	eb01 0402 	add.w	r4, r1, r2
 8006dec:	d902      	bls.n	8006df4 <memmove+0x10>
 8006dee:	4284      	cmp	r4, r0
 8006df0:	4623      	mov	r3, r4
 8006df2:	d807      	bhi.n	8006e04 <memmove+0x20>
 8006df4:	1e43      	subs	r3, r0, #1
 8006df6:	42a1      	cmp	r1, r4
 8006df8:	d008      	beq.n	8006e0c <memmove+0x28>
 8006dfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e02:	e7f8      	b.n	8006df6 <memmove+0x12>
 8006e04:	4402      	add	r2, r0
 8006e06:	4601      	mov	r1, r0
 8006e08:	428a      	cmp	r2, r1
 8006e0a:	d100      	bne.n	8006e0e <memmove+0x2a>
 8006e0c:	bd10      	pop	{r4, pc}
 8006e0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e16:	e7f7      	b.n	8006e08 <memmove+0x24>

08006e18 <memset>:
 8006e18:	4402      	add	r2, r0
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d100      	bne.n	8006e22 <memset+0xa>
 8006e20:	4770      	bx	lr
 8006e22:	f803 1b01 	strb.w	r1, [r3], #1
 8006e26:	e7f9      	b.n	8006e1c <memset+0x4>

08006e28 <strchr>:
 8006e28:	b2c9      	uxtb	r1, r1
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e32:	b112      	cbz	r2, 8006e3a <strchr+0x12>
 8006e34:	428a      	cmp	r2, r1
 8006e36:	d1f9      	bne.n	8006e2c <strchr+0x4>
 8006e38:	4770      	bx	lr
 8006e3a:	2900      	cmp	r1, #0
 8006e3c:	bf18      	it	ne
 8006e3e:	2000      	movne	r0, #0
 8006e40:	4770      	bx	lr

08006e42 <strstr>:
 8006e42:	780a      	ldrb	r2, [r1, #0]
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	b96a      	cbnz	r2, 8006e64 <strstr+0x22>
 8006e48:	bd70      	pop	{r4, r5, r6, pc}
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d109      	bne.n	8006e62 <strstr+0x20>
 8006e4e:	460c      	mov	r4, r1
 8006e50:	4605      	mov	r5, r0
 8006e52:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0f6      	beq.n	8006e48 <strstr+0x6>
 8006e5a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006e5e:	429e      	cmp	r6, r3
 8006e60:	d0f7      	beq.n	8006e52 <strstr+0x10>
 8006e62:	3001      	adds	r0, #1
 8006e64:	7803      	ldrb	r3, [r0, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1ef      	bne.n	8006e4a <strstr+0x8>
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	e7ec      	b.n	8006e48 <strstr+0x6>
	...

08006e70 <_close_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	4d06      	ldr	r5, [pc, #24]	@ (8006e8c <_close_r+0x1c>)
 8006e74:	2300      	movs	r3, #0
 8006e76:	4604      	mov	r4, r0
 8006e78:	4608      	mov	r0, r1
 8006e7a:	602b      	str	r3, [r5, #0]
 8006e7c:	f7fa fd1a 	bl	80018b4 <_close>
 8006e80:	1c43      	adds	r3, r0, #1
 8006e82:	d102      	bne.n	8006e8a <_close_r+0x1a>
 8006e84:	682b      	ldr	r3, [r5, #0]
 8006e86:	b103      	cbz	r3, 8006e8a <_close_r+0x1a>
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	bd38      	pop	{r3, r4, r5, pc}
 8006e8c:	20001370 	.word	0x20001370

08006e90 <_lseek_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	4d07      	ldr	r5, [pc, #28]	@ (8006eb0 <_lseek_r+0x20>)
 8006e94:	4604      	mov	r4, r0
 8006e96:	4608      	mov	r0, r1
 8006e98:	4611      	mov	r1, r2
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	602a      	str	r2, [r5, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f7fa fd2f 	bl	8001902 <_lseek>
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d102      	bne.n	8006eae <_lseek_r+0x1e>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	b103      	cbz	r3, 8006eae <_lseek_r+0x1e>
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	20001370 	.word	0x20001370

08006eb4 <_read_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4d07      	ldr	r5, [pc, #28]	@ (8006ed4 <_read_r+0x20>)
 8006eb8:	4604      	mov	r4, r0
 8006eba:	4608      	mov	r0, r1
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	602a      	str	r2, [r5, #0]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f7fa fcbd 	bl	8001842 <_read>
 8006ec8:	1c43      	adds	r3, r0, #1
 8006eca:	d102      	bne.n	8006ed2 <_read_r+0x1e>
 8006ecc:	682b      	ldr	r3, [r5, #0]
 8006ece:	b103      	cbz	r3, 8006ed2 <_read_r+0x1e>
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	bd38      	pop	{r3, r4, r5, pc}
 8006ed4:	20001370 	.word	0x20001370

08006ed8 <_sbrk_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4d06      	ldr	r5, [pc, #24]	@ (8006ef4 <_sbrk_r+0x1c>)
 8006edc:	2300      	movs	r3, #0
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	602b      	str	r3, [r5, #0]
 8006ee4:	f7fa fd1a 	bl	800191c <_sbrk>
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	d102      	bne.n	8006ef2 <_sbrk_r+0x1a>
 8006eec:	682b      	ldr	r3, [r5, #0]
 8006eee:	b103      	cbz	r3, 8006ef2 <_sbrk_r+0x1a>
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
 8006ef4:	20001370 	.word	0x20001370

08006ef8 <_write_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	4d07      	ldr	r5, [pc, #28]	@ (8006f18 <_write_r+0x20>)
 8006efc:	4604      	mov	r4, r0
 8006efe:	4608      	mov	r0, r1
 8006f00:	4611      	mov	r1, r2
 8006f02:	2200      	movs	r2, #0
 8006f04:	602a      	str	r2, [r5, #0]
 8006f06:	461a      	mov	r2, r3
 8006f08:	f7fa fcb8 	bl	800187c <_write>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d102      	bne.n	8006f16 <_write_r+0x1e>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	b103      	cbz	r3, 8006f16 <_write_r+0x1e>
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	20001370 	.word	0x20001370

08006f1c <__errno>:
 8006f1c:	4b01      	ldr	r3, [pc, #4]	@ (8006f24 <__errno+0x8>)
 8006f1e:	6818      	ldr	r0, [r3, #0]
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	2000046c 	.word	0x2000046c

08006f28 <__libc_init_array>:
 8006f28:	b570      	push	{r4, r5, r6, lr}
 8006f2a:	4d0d      	ldr	r5, [pc, #52]	@ (8006f60 <__libc_init_array+0x38>)
 8006f2c:	4c0d      	ldr	r4, [pc, #52]	@ (8006f64 <__libc_init_array+0x3c>)
 8006f2e:	1b64      	subs	r4, r4, r5
 8006f30:	10a4      	asrs	r4, r4, #2
 8006f32:	2600      	movs	r6, #0
 8006f34:	42a6      	cmp	r6, r4
 8006f36:	d109      	bne.n	8006f4c <__libc_init_array+0x24>
 8006f38:	4d0b      	ldr	r5, [pc, #44]	@ (8006f68 <__libc_init_array+0x40>)
 8006f3a:	4c0c      	ldr	r4, [pc, #48]	@ (8006f6c <__libc_init_array+0x44>)
 8006f3c:	f005 fba0 	bl	800c680 <_init>
 8006f40:	1b64      	subs	r4, r4, r5
 8006f42:	10a4      	asrs	r4, r4, #2
 8006f44:	2600      	movs	r6, #0
 8006f46:	42a6      	cmp	r6, r4
 8006f48:	d105      	bne.n	8006f56 <__libc_init_array+0x2e>
 8006f4a:	bd70      	pop	{r4, r5, r6, pc}
 8006f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f50:	4798      	blx	r3
 8006f52:	3601      	adds	r6, #1
 8006f54:	e7ee      	b.n	8006f34 <__libc_init_array+0xc>
 8006f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f5a:	4798      	blx	r3
 8006f5c:	3601      	adds	r6, #1
 8006f5e:	e7f2      	b.n	8006f46 <__libc_init_array+0x1e>
 8006f60:	0800d684 	.word	0x0800d684
 8006f64:	0800d684 	.word	0x0800d684
 8006f68:	0800d684 	.word	0x0800d684
 8006f6c:	0800d68c 	.word	0x0800d68c

08006f70 <__retarget_lock_init_recursive>:
 8006f70:	4770      	bx	lr

08006f72 <__retarget_lock_close_recursive>:
 8006f72:	4770      	bx	lr

08006f74 <__retarget_lock_acquire_recursive>:
 8006f74:	4770      	bx	lr

08006f76 <__retarget_lock_release_recursive>:
 8006f76:	4770      	bx	lr

08006f78 <sysconf>:
 8006f78:	2808      	cmp	r0, #8
 8006f7a:	b508      	push	{r3, lr}
 8006f7c:	d006      	beq.n	8006f8c <sysconf+0x14>
 8006f7e:	f7ff ffcd 	bl	8006f1c <__errno>
 8006f82:	2316      	movs	r3, #22
 8006f84:	6003      	str	r3, [r0, #0]
 8006f86:	f04f 30ff 	mov.w	r0, #4294967295
 8006f8a:	bd08      	pop	{r3, pc}
 8006f8c:	2080      	movs	r0, #128	@ 0x80
 8006f8e:	e7fc      	b.n	8006f8a <sysconf+0x12>

08006f90 <memcpy>:
 8006f90:	440a      	add	r2, r1
 8006f92:	4291      	cmp	r1, r2
 8006f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f98:	d100      	bne.n	8006f9c <memcpy+0xc>
 8006f9a:	4770      	bx	lr
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fa6:	4291      	cmp	r1, r2
 8006fa8:	d1f9      	bne.n	8006f9e <memcpy+0xe>
 8006faa:	bd10      	pop	{r4, pc}

08006fac <register_fini>:
 8006fac:	4b02      	ldr	r3, [pc, #8]	@ (8006fb8 <register_fini+0xc>)
 8006fae:	b113      	cbz	r3, 8006fb6 <register_fini+0xa>
 8006fb0:	4802      	ldr	r0, [pc, #8]	@ (8006fbc <register_fini+0x10>)
 8006fb2:	f000 b805 	b.w	8006fc0 <atexit>
 8006fb6:	4770      	bx	lr
 8006fb8:	00000000 	.word	0x00000000
 8006fbc:	0800aae1 	.word	0x0800aae1

08006fc0 <atexit>:
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	4601      	mov	r1, r0
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f003 bdd4 	b.w	800ab74 <__register_exitproc>

08006fcc <_malloc_trim_r>:
 8006fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd0:	4606      	mov	r6, r0
 8006fd2:	2008      	movs	r0, #8
 8006fd4:	4689      	mov	r9, r1
 8006fd6:	f7ff ffcf 	bl	8006f78 <sysconf>
 8006fda:	4f24      	ldr	r7, [pc, #144]	@ (800706c <_malloc_trim_r+0xa0>)
 8006fdc:	4680      	mov	r8, r0
 8006fde:	4630      	mov	r0, r6
 8006fe0:	f7ff fc7e 	bl	80068e0 <__malloc_lock>
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	685d      	ldr	r5, [r3, #4]
 8006fe8:	f025 0503 	bic.w	r5, r5, #3
 8006fec:	f1a5 0411 	sub.w	r4, r5, #17
 8006ff0:	eba4 0409 	sub.w	r4, r4, r9
 8006ff4:	4444      	add	r4, r8
 8006ff6:	fbb4 f4f8 	udiv	r4, r4, r8
 8006ffa:	3c01      	subs	r4, #1
 8006ffc:	fb08 f404 	mul.w	r4, r8, r4
 8007000:	45a0      	cmp	r8, r4
 8007002:	dd05      	ble.n	8007010 <_malloc_trim_r+0x44>
 8007004:	4630      	mov	r0, r6
 8007006:	f7ff fc71 	bl	80068ec <__malloc_unlock>
 800700a:	2000      	movs	r0, #0
 800700c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007010:	2100      	movs	r1, #0
 8007012:	4630      	mov	r0, r6
 8007014:	f7ff ff60 	bl	8006ed8 <_sbrk_r>
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	442b      	add	r3, r5
 800701c:	4298      	cmp	r0, r3
 800701e:	d1f1      	bne.n	8007004 <_malloc_trim_r+0x38>
 8007020:	4261      	negs	r1, r4
 8007022:	4630      	mov	r0, r6
 8007024:	f7ff ff58 	bl	8006ed8 <_sbrk_r>
 8007028:	3001      	adds	r0, #1
 800702a:	d110      	bne.n	800704e <_malloc_trim_r+0x82>
 800702c:	2100      	movs	r1, #0
 800702e:	4630      	mov	r0, r6
 8007030:	f7ff ff52 	bl	8006ed8 <_sbrk_r>
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	1a83      	subs	r3, r0, r2
 8007038:	2b0f      	cmp	r3, #15
 800703a:	dde3      	ble.n	8007004 <_malloc_trim_r+0x38>
 800703c:	490c      	ldr	r1, [pc, #48]	@ (8007070 <_malloc_trim_r+0xa4>)
 800703e:	6809      	ldr	r1, [r1, #0]
 8007040:	1a40      	subs	r0, r0, r1
 8007042:	490c      	ldr	r1, [pc, #48]	@ (8007074 <_malloc_trim_r+0xa8>)
 8007044:	f043 0301 	orr.w	r3, r3, #1
 8007048:	6008      	str	r0, [r1, #0]
 800704a:	6053      	str	r3, [r2, #4]
 800704c:	e7da      	b.n	8007004 <_malloc_trim_r+0x38>
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	4a08      	ldr	r2, [pc, #32]	@ (8007074 <_malloc_trim_r+0xa8>)
 8007052:	1b2d      	subs	r5, r5, r4
 8007054:	f045 0501 	orr.w	r5, r5, #1
 8007058:	605d      	str	r5, [r3, #4]
 800705a:	6813      	ldr	r3, [r2, #0]
 800705c:	4630      	mov	r0, r6
 800705e:	1b1b      	subs	r3, r3, r4
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	f7ff fc43 	bl	80068ec <__malloc_unlock>
 8007066:	2001      	movs	r0, #1
 8007068:	e7d0      	b.n	800700c <_malloc_trim_r+0x40>
 800706a:	bf00      	nop
 800706c:	20000058 	.word	0x20000058
 8007070:	20000050 	.word	0x20000050
 8007074:	20001200 	.word	0x20001200

08007078 <_free_r>:
 8007078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707a:	4604      	mov	r4, r0
 800707c:	460f      	mov	r7, r1
 800707e:	2900      	cmp	r1, #0
 8007080:	f000 80b1 	beq.w	80071e6 <_free_r+0x16e>
 8007084:	f7ff fc2c 	bl	80068e0 <__malloc_lock>
 8007088:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800708c:	4d56      	ldr	r5, [pc, #344]	@ (80071e8 <_free_r+0x170>)
 800708e:	f022 0001 	bic.w	r0, r2, #1
 8007092:	f1a7 0308 	sub.w	r3, r7, #8
 8007096:	eb03 0c00 	add.w	ip, r3, r0
 800709a:	68a9      	ldr	r1, [r5, #8]
 800709c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80070a0:	4561      	cmp	r1, ip
 80070a2:	f026 0603 	bic.w	r6, r6, #3
 80070a6:	f002 0201 	and.w	r2, r2, #1
 80070aa:	d11b      	bne.n	80070e4 <_free_r+0x6c>
 80070ac:	4406      	add	r6, r0
 80070ae:	b93a      	cbnz	r2, 80070c0 <_free_r+0x48>
 80070b0:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80070b4:	1a9b      	subs	r3, r3, r2
 80070b6:	4416      	add	r6, r2
 80070b8:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80070bc:	60ca      	str	r2, [r1, #12]
 80070be:	6091      	str	r1, [r2, #8]
 80070c0:	f046 0201 	orr.w	r2, r6, #1
 80070c4:	605a      	str	r2, [r3, #4]
 80070c6:	60ab      	str	r3, [r5, #8]
 80070c8:	4b48      	ldr	r3, [pc, #288]	@ (80071ec <_free_r+0x174>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	42b3      	cmp	r3, r6
 80070ce:	d804      	bhi.n	80070da <_free_r+0x62>
 80070d0:	4b47      	ldr	r3, [pc, #284]	@ (80071f0 <_free_r+0x178>)
 80070d2:	4620      	mov	r0, r4
 80070d4:	6819      	ldr	r1, [r3, #0]
 80070d6:	f7ff ff79 	bl	8006fcc <_malloc_trim_r>
 80070da:	4620      	mov	r0, r4
 80070dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070e0:	f7ff bc04 	b.w	80068ec <__malloc_unlock>
 80070e4:	f8cc 6004 	str.w	r6, [ip, #4]
 80070e8:	2a00      	cmp	r2, #0
 80070ea:	d138      	bne.n	800715e <_free_r+0xe6>
 80070ec:	f857 1c08 	ldr.w	r1, [r7, #-8]
 80070f0:	1a5b      	subs	r3, r3, r1
 80070f2:	4408      	add	r0, r1
 80070f4:	6899      	ldr	r1, [r3, #8]
 80070f6:	f105 0708 	add.w	r7, r5, #8
 80070fa:	42b9      	cmp	r1, r7
 80070fc:	d031      	beq.n	8007162 <_free_r+0xea>
 80070fe:	68df      	ldr	r7, [r3, #12]
 8007100:	60cf      	str	r7, [r1, #12]
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	eb0c 0106 	add.w	r1, ip, r6
 8007108:	6849      	ldr	r1, [r1, #4]
 800710a:	07c9      	lsls	r1, r1, #31
 800710c:	d40b      	bmi.n	8007126 <_free_r+0xae>
 800710e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8007112:	4430      	add	r0, r6
 8007114:	bb3a      	cbnz	r2, 8007166 <_free_r+0xee>
 8007116:	4e37      	ldr	r6, [pc, #220]	@ (80071f4 <_free_r+0x17c>)
 8007118:	42b1      	cmp	r1, r6
 800711a:	d124      	bne.n	8007166 <_free_r+0xee>
 800711c:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8007120:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8007124:	2201      	movs	r2, #1
 8007126:	f040 0101 	orr.w	r1, r0, #1
 800712a:	6059      	str	r1, [r3, #4]
 800712c:	5018      	str	r0, [r3, r0]
 800712e:	2a00      	cmp	r2, #0
 8007130:	d1d3      	bne.n	80070da <_free_r+0x62>
 8007132:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8007136:	d21b      	bcs.n	8007170 <_free_r+0xf8>
 8007138:	08c2      	lsrs	r2, r0, #3
 800713a:	2101      	movs	r1, #1
 800713c:	0940      	lsrs	r0, r0, #5
 800713e:	4081      	lsls	r1, r0
 8007140:	6868      	ldr	r0, [r5, #4]
 8007142:	3201      	adds	r2, #1
 8007144:	4301      	orrs	r1, r0
 8007146:	6069      	str	r1, [r5, #4]
 8007148:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 800714c:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 8007150:	3908      	subs	r1, #8
 8007152:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007156:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 800715a:	60c3      	str	r3, [r0, #12]
 800715c:	e7bd      	b.n	80070da <_free_r+0x62>
 800715e:	2200      	movs	r2, #0
 8007160:	e7d0      	b.n	8007104 <_free_r+0x8c>
 8007162:	2201      	movs	r2, #1
 8007164:	e7ce      	b.n	8007104 <_free_r+0x8c>
 8007166:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800716a:	60ce      	str	r6, [r1, #12]
 800716c:	60b1      	str	r1, [r6, #8]
 800716e:	e7da      	b.n	8007126 <_free_r+0xae>
 8007170:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 8007174:	ea4f 2250 	mov.w	r2, r0, lsr #9
 8007178:	d214      	bcs.n	80071a4 <_free_r+0x12c>
 800717a:	0982      	lsrs	r2, r0, #6
 800717c:	3238      	adds	r2, #56	@ 0x38
 800717e:	1c51      	adds	r1, r2, #1
 8007180:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8007184:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8007188:	428e      	cmp	r6, r1
 800718a:	d125      	bne.n	80071d8 <_free_r+0x160>
 800718c:	2001      	movs	r0, #1
 800718e:	1092      	asrs	r2, r2, #2
 8007190:	fa00 f202 	lsl.w	r2, r0, r2
 8007194:	6868      	ldr	r0, [r5, #4]
 8007196:	4302      	orrs	r2, r0
 8007198:	606a      	str	r2, [r5, #4]
 800719a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800719e:	60b3      	str	r3, [r6, #8]
 80071a0:	60cb      	str	r3, [r1, #12]
 80071a2:	e79a      	b.n	80070da <_free_r+0x62>
 80071a4:	2a14      	cmp	r2, #20
 80071a6:	d801      	bhi.n	80071ac <_free_r+0x134>
 80071a8:	325b      	adds	r2, #91	@ 0x5b
 80071aa:	e7e8      	b.n	800717e <_free_r+0x106>
 80071ac:	2a54      	cmp	r2, #84	@ 0x54
 80071ae:	d802      	bhi.n	80071b6 <_free_r+0x13e>
 80071b0:	0b02      	lsrs	r2, r0, #12
 80071b2:	326e      	adds	r2, #110	@ 0x6e
 80071b4:	e7e3      	b.n	800717e <_free_r+0x106>
 80071b6:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 80071ba:	d802      	bhi.n	80071c2 <_free_r+0x14a>
 80071bc:	0bc2      	lsrs	r2, r0, #15
 80071be:	3277      	adds	r2, #119	@ 0x77
 80071c0:	e7dd      	b.n	800717e <_free_r+0x106>
 80071c2:	f240 5154 	movw	r1, #1364	@ 0x554
 80071c6:	428a      	cmp	r2, r1
 80071c8:	bf9a      	itte	ls
 80071ca:	0c82      	lsrls	r2, r0, #18
 80071cc:	327c      	addls	r2, #124	@ 0x7c
 80071ce:	227e      	movhi	r2, #126	@ 0x7e
 80071d0:	e7d5      	b.n	800717e <_free_r+0x106>
 80071d2:	6889      	ldr	r1, [r1, #8]
 80071d4:	428e      	cmp	r6, r1
 80071d6:	d004      	beq.n	80071e2 <_free_r+0x16a>
 80071d8:	684a      	ldr	r2, [r1, #4]
 80071da:	f022 0203 	bic.w	r2, r2, #3
 80071de:	4282      	cmp	r2, r0
 80071e0:	d8f7      	bhi.n	80071d2 <_free_r+0x15a>
 80071e2:	68ce      	ldr	r6, [r1, #12]
 80071e4:	e7d9      	b.n	800719a <_free_r+0x122>
 80071e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071e8:	20000058 	.word	0x20000058
 80071ec:	20000054 	.word	0x20000054
 80071f0:	20001230 	.word	0x20001230
 80071f4:	20000060 	.word	0x20000060

080071f8 <_svfprintf_r>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	b0d3      	sub	sp, #332	@ 0x14c
 80071fe:	468b      	mov	fp, r1
 8007200:	4691      	mov	r9, r2
 8007202:	461e      	mov	r6, r3
 8007204:	9003      	str	r0, [sp, #12]
 8007206:	f003 fc67 	bl	800aad8 <_localeconv_r>
 800720a:	6803      	ldr	r3, [r0, #0]
 800720c:	9316      	str	r3, [sp, #88]	@ 0x58
 800720e:	4618      	mov	r0, r3
 8007210:	f7f8 ffe8 	bl	80001e4 <strlen>
 8007214:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8007218:	900d      	str	r0, [sp, #52]	@ 0x34
 800721a:	061b      	lsls	r3, r3, #24
 800721c:	d515      	bpl.n	800724a <_svfprintf_r+0x52>
 800721e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007222:	b993      	cbnz	r3, 800724a <_svfprintf_r+0x52>
 8007224:	9803      	ldr	r0, [sp, #12]
 8007226:	2140      	movs	r1, #64	@ 0x40
 8007228:	f7ff f920 	bl	800646c <_malloc_r>
 800722c:	f8cb 0000 	str.w	r0, [fp]
 8007230:	f8cb 0010 	str.w	r0, [fp, #16]
 8007234:	b930      	cbnz	r0, 8007244 <_svfprintf_r+0x4c>
 8007236:	9a03      	ldr	r2, [sp, #12]
 8007238:	230c      	movs	r3, #12
 800723a:	6013      	str	r3, [r2, #0]
 800723c:	f04f 33ff 	mov.w	r3, #4294967295
 8007240:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007242:	e1f7      	b.n	8007634 <_svfprintf_r+0x43c>
 8007244:	2340      	movs	r3, #64	@ 0x40
 8007246:	f8cb 3014 	str.w	r3, [fp, #20]
 800724a:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8007498 <_svfprintf_r+0x2a0>
 800724e:	2300      	movs	r3, #0
 8007250:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 8007254:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007258:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 800725c:	ac29      	add	r4, sp, #164	@ 0xa4
 800725e:	9426      	str	r4, [sp, #152]	@ 0x98
 8007260:	9304      	str	r3, [sp, #16]
 8007262:	9309      	str	r3, [sp, #36]	@ 0x24
 8007264:	9312      	str	r3, [sp, #72]	@ 0x48
 8007266:	9317      	str	r3, [sp, #92]	@ 0x5c
 8007268:	930f      	str	r3, [sp, #60]	@ 0x3c
 800726a:	464b      	mov	r3, r9
 800726c:	461d      	mov	r5, r3
 800726e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007272:	b10a      	cbz	r2, 8007278 <_svfprintf_r+0x80>
 8007274:	2a25      	cmp	r2, #37	@ 0x25
 8007276:	d1f9      	bne.n	800726c <_svfprintf_r+0x74>
 8007278:	ebb5 0709 	subs.w	r7, r5, r9
 800727c:	d00d      	beq.n	800729a <_svfprintf_r+0xa2>
 800727e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8007280:	443b      	add	r3, r7
 8007282:	9328      	str	r3, [sp, #160]	@ 0xa0
 8007284:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8007286:	3301      	adds	r3, #1
 8007288:	2b07      	cmp	r3, #7
 800728a:	e9c4 9700 	strd	r9, r7, [r4]
 800728e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8007290:	dc75      	bgt.n	800737e <_svfprintf_r+0x186>
 8007292:	3408      	adds	r4, #8
 8007294:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007296:	443b      	add	r3, r7
 8007298:	930f      	str	r3, [sp, #60]	@ 0x3c
 800729a:	782b      	ldrb	r3, [r5, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	f001 8148 	beq.w	8008532 <_svfprintf_r+0x133a>
 80072a2:	2200      	movs	r2, #0
 80072a4:	1c6b      	adds	r3, r5, #1
 80072a6:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 80072aa:	f04f 38ff 	mov.w	r8, #4294967295
 80072ae:	920e      	str	r2, [sp, #56]	@ 0x38
 80072b0:	4615      	mov	r5, r2
 80072b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072b6:	9206      	str	r2, [sp, #24]
 80072b8:	930c      	str	r3, [sp, #48]	@ 0x30
 80072ba:	9b06      	ldr	r3, [sp, #24]
 80072bc:	3b20      	subs	r3, #32
 80072be:	2b5a      	cmp	r3, #90	@ 0x5a
 80072c0:	f200 85a4 	bhi.w	8007e0c <_svfprintf_r+0xc14>
 80072c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80072c8:	05a2009d 	.word	0x05a2009d
 80072cc:	00a505a2 	.word	0x00a505a2
 80072d0:	05a205a2 	.word	0x05a205a2
 80072d4:	008505a2 	.word	0x008505a2
 80072d8:	05a205a2 	.word	0x05a205a2
 80072dc:	00b200a8 	.word	0x00b200a8
 80072e0:	00af05a2 	.word	0x00af05a2
 80072e4:	05a200b4 	.word	0x05a200b4
 80072e8:	00d100ce 	.word	0x00d100ce
 80072ec:	00d100d1 	.word	0x00d100d1
 80072f0:	00d100d1 	.word	0x00d100d1
 80072f4:	00d100d1 	.word	0x00d100d1
 80072f8:	00d100d1 	.word	0x00d100d1
 80072fc:	05a205a2 	.word	0x05a205a2
 8007300:	05a205a2 	.word	0x05a205a2
 8007304:	05a205a2 	.word	0x05a205a2
 8007308:	014705a2 	.word	0x014705a2
 800730c:	010805a2 	.word	0x010805a2
 8007310:	0147011b 	.word	0x0147011b
 8007314:	01470147 	.word	0x01470147
 8007318:	05a205a2 	.word	0x05a205a2
 800731c:	05a205a2 	.word	0x05a205a2
 8007320:	05a200e2 	.word	0x05a200e2
 8007324:	049d05a2 	.word	0x049d05a2
 8007328:	05a205a2 	.word	0x05a205a2
 800732c:	04e705a2 	.word	0x04e705a2
 8007330:	050805a2 	.word	0x050805a2
 8007334:	05a205a2 	.word	0x05a205a2
 8007338:	05a2052a 	.word	0x05a2052a
 800733c:	05a205a2 	.word	0x05a205a2
 8007340:	05a205a2 	.word	0x05a205a2
 8007344:	05a205a2 	.word	0x05a205a2
 8007348:	014705a2 	.word	0x014705a2
 800734c:	010805a2 	.word	0x010805a2
 8007350:	0147011d 	.word	0x0147011d
 8007354:	01470147 	.word	0x01470147
 8007358:	011d00ee 	.word	0x011d00ee
 800735c:	05a20102 	.word	0x05a20102
 8007360:	05a200fb 	.word	0x05a200fb
 8007364:	049f047e 	.word	0x049f047e
 8007368:	010204d6 	.word	0x010204d6
 800736c:	04e705a2 	.word	0x04e705a2
 8007370:	050a009b 	.word	0x050a009b
 8007374:	05a205a2 	.word	0x05a205a2
 8007378:	05a20065 	.word	0x05a20065
 800737c:	009b      	.short	0x009b
 800737e:	9803      	ldr	r0, [sp, #12]
 8007380:	aa26      	add	r2, sp, #152	@ 0x98
 8007382:	4659      	mov	r1, fp
 8007384:	f004 ff7e 	bl	800c284 <__ssprint_r>
 8007388:	2800      	cmp	r0, #0
 800738a:	f040 814e 	bne.w	800762a <_svfprintf_r+0x432>
 800738e:	ac29      	add	r4, sp, #164	@ 0xa4
 8007390:	e780      	b.n	8007294 <_svfprintf_r+0x9c>
 8007392:	4b43      	ldr	r3, [pc, #268]	@ (80074a0 <_svfprintf_r+0x2a8>)
 8007394:	9319      	str	r3, [sp, #100]	@ 0x64
 8007396:	f015 0320 	ands.w	r3, r5, #32
 800739a:	f000 84c2 	beq.w	8007d22 <_svfprintf_r+0xb2a>
 800739e:	3607      	adds	r6, #7
 80073a0:	f026 0307 	bic.w	r3, r6, #7
 80073a4:	461a      	mov	r2, r3
 80073a6:	685f      	ldr	r7, [r3, #4]
 80073a8:	f852 6b08 	ldr.w	r6, [r2], #8
 80073ac:	9207      	str	r2, [sp, #28]
 80073ae:	07eb      	lsls	r3, r5, #31
 80073b0:	d50a      	bpl.n	80073c8 <_svfprintf_r+0x1d0>
 80073b2:	ea56 0307 	orrs.w	r3, r6, r7
 80073b6:	d007      	beq.n	80073c8 <_svfprintf_r+0x1d0>
 80073b8:	2330      	movs	r3, #48	@ 0x30
 80073ba:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 80073be:	9b06      	ldr	r3, [sp, #24]
 80073c0:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80073c4:	f045 0502 	orr.w	r5, r5, #2
 80073c8:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80073cc:	2302      	movs	r3, #2
 80073ce:	f000 bc28 	b.w	8007c22 <_svfprintf_r+0xa2a>
 80073d2:	9803      	ldr	r0, [sp, #12]
 80073d4:	f003 fb80 	bl	800aad8 <_localeconv_r>
 80073d8:	6843      	ldr	r3, [r0, #4]
 80073da:	9317      	str	r3, [sp, #92]	@ 0x5c
 80073dc:	4618      	mov	r0, r3
 80073de:	f7f8 ff01 	bl	80001e4 <strlen>
 80073e2:	9012      	str	r0, [sp, #72]	@ 0x48
 80073e4:	9803      	ldr	r0, [sp, #12]
 80073e6:	f003 fb77 	bl	800aad8 <_localeconv_r>
 80073ea:	6883      	ldr	r3, [r0, #8]
 80073ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80073ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80073f0:	b12b      	cbz	r3, 80073fe <_svfprintf_r+0x206>
 80073f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f4:	b11b      	cbz	r3, 80073fe <_svfprintf_r+0x206>
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	b10b      	cbz	r3, 80073fe <_svfprintf_r+0x206>
 80073fa:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 80073fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007400:	e757      	b.n	80072b2 <_svfprintf_r+0xba>
 8007402:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1f9      	bne.n	80073fe <_svfprintf_r+0x206>
 800740a:	2320      	movs	r3, #32
 800740c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8007410:	e7f5      	b.n	80073fe <_svfprintf_r+0x206>
 8007412:	f045 0501 	orr.w	r5, r5, #1
 8007416:	e7f2      	b.n	80073fe <_svfprintf_r+0x206>
 8007418:	f856 3b04 	ldr.w	r3, [r6], #4
 800741c:	930e      	str	r3, [sp, #56]	@ 0x38
 800741e:	2b00      	cmp	r3, #0
 8007420:	daed      	bge.n	80073fe <_svfprintf_r+0x206>
 8007422:	425b      	negs	r3, r3
 8007424:	930e      	str	r3, [sp, #56]	@ 0x38
 8007426:	f045 0504 	orr.w	r5, r5, #4
 800742a:	e7e8      	b.n	80073fe <_svfprintf_r+0x206>
 800742c:	232b      	movs	r3, #43	@ 0x2b
 800742e:	e7ed      	b.n	800740c <_svfprintf_r+0x214>
 8007430:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007432:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007436:	9206      	str	r2, [sp, #24]
 8007438:	2a2a      	cmp	r2, #42	@ 0x2a
 800743a:	d10f      	bne.n	800745c <_svfprintf_r+0x264>
 800743c:	f856 2b04 	ldr.w	r2, [r6], #4
 8007440:	930c      	str	r3, [sp, #48]	@ 0x30
 8007442:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 8007446:	e7da      	b.n	80073fe <_svfprintf_r+0x206>
 8007448:	fb01 2808 	mla	r8, r1, r8, r2
 800744c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007450:	9206      	str	r2, [sp, #24]
 8007452:	9a06      	ldr	r2, [sp, #24]
 8007454:	3a30      	subs	r2, #48	@ 0x30
 8007456:	2a09      	cmp	r2, #9
 8007458:	d9f6      	bls.n	8007448 <_svfprintf_r+0x250>
 800745a:	e72d      	b.n	80072b8 <_svfprintf_r+0xc0>
 800745c:	f04f 0800 	mov.w	r8, #0
 8007460:	210a      	movs	r1, #10
 8007462:	e7f6      	b.n	8007452 <_svfprintf_r+0x25a>
 8007464:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8007468:	e7c9      	b.n	80073fe <_svfprintf_r+0x206>
 800746a:	2200      	movs	r2, #0
 800746c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800746e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007470:	210a      	movs	r1, #10
 8007472:	9a06      	ldr	r2, [sp, #24]
 8007474:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8007476:	3a30      	subs	r2, #48	@ 0x30
 8007478:	fb01 2200 	mla	r2, r1, r0, r2
 800747c:	920e      	str	r2, [sp, #56]	@ 0x38
 800747e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007482:	9206      	str	r2, [sp, #24]
 8007484:	3a30      	subs	r2, #48	@ 0x30
 8007486:	2a09      	cmp	r2, #9
 8007488:	d9f3      	bls.n	8007472 <_svfprintf_r+0x27a>
 800748a:	e715      	b.n	80072b8 <_svfprintf_r+0xc0>
 800748c:	f045 0508 	orr.w	r5, r5, #8
 8007490:	e7b5      	b.n	80073fe <_svfprintf_r+0x206>
 8007492:	bf00      	nop
 8007494:	f3af 8000 	nop.w
	...
 80074a0:	0800d3e6 	.word	0x0800d3e6
 80074a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	2b68      	cmp	r3, #104	@ 0x68
 80074aa:	bf01      	itttt	eq
 80074ac:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 80074ae:	3301      	addeq	r3, #1
 80074b0:	930c      	streq	r3, [sp, #48]	@ 0x30
 80074b2:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 80074b6:	bf18      	it	ne
 80074b8:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 80074bc:	e79f      	b.n	80073fe <_svfprintf_r+0x206>
 80074be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	2b6c      	cmp	r3, #108	@ 0x6c
 80074c4:	d105      	bne.n	80074d2 <_svfprintf_r+0x2da>
 80074c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074c8:	3301      	adds	r3, #1
 80074ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80074cc:	f045 0520 	orr.w	r5, r5, #32
 80074d0:	e795      	b.n	80073fe <_svfprintf_r+0x206>
 80074d2:	f045 0510 	orr.w	r5, r5, #16
 80074d6:	e792      	b.n	80073fe <_svfprintf_r+0x206>
 80074d8:	4632      	mov	r2, r6
 80074da:	f852 3b04 	ldr.w	r3, [r2], #4
 80074de:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 80074e2:	2300      	movs	r3, #0
 80074e4:	9207      	str	r2, [sp, #28]
 80074e6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80074ea:	469a      	mov	sl, r3
 80074ec:	f04f 0801 	mov.w	r8, #1
 80074f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80074f2:	461f      	mov	r7, r3
 80074f4:	9308      	str	r3, [sp, #32]
 80074f6:	461e      	mov	r6, r3
 80074f8:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 80074fc:	e1d2      	b.n	80078a4 <_svfprintf_r+0x6ac>
 80074fe:	f045 0510 	orr.w	r5, r5, #16
 8007502:	06af      	lsls	r7, r5, #26
 8007504:	d512      	bpl.n	800752c <_svfprintf_r+0x334>
 8007506:	3607      	adds	r6, #7
 8007508:	f026 0307 	bic.w	r3, r6, #7
 800750c:	461a      	mov	r2, r3
 800750e:	685f      	ldr	r7, [r3, #4]
 8007510:	f852 6b08 	ldr.w	r6, [r2], #8
 8007514:	9207      	str	r2, [sp, #28]
 8007516:	2f00      	cmp	r7, #0
 8007518:	da06      	bge.n	8007528 <_svfprintf_r+0x330>
 800751a:	4276      	negs	r6, r6
 800751c:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8007520:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8007524:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8007528:	2301      	movs	r3, #1
 800752a:	e37d      	b.n	8007c28 <_svfprintf_r+0xa30>
 800752c:	4633      	mov	r3, r6
 800752e:	06ee      	lsls	r6, r5, #27
 8007530:	f853 7b04 	ldr.w	r7, [r3], #4
 8007534:	9307      	str	r3, [sp, #28]
 8007536:	d502      	bpl.n	800753e <_svfprintf_r+0x346>
 8007538:	463e      	mov	r6, r7
 800753a:	17ff      	asrs	r7, r7, #31
 800753c:	e7eb      	b.n	8007516 <_svfprintf_r+0x31e>
 800753e:	0668      	lsls	r0, r5, #25
 8007540:	d503      	bpl.n	800754a <_svfprintf_r+0x352>
 8007542:	b23e      	sxth	r6, r7
 8007544:	f347 37c0 	sbfx	r7, r7, #15, #1
 8007548:	e7e5      	b.n	8007516 <_svfprintf_r+0x31e>
 800754a:	05a9      	lsls	r1, r5, #22
 800754c:	d5f4      	bpl.n	8007538 <_svfprintf_r+0x340>
 800754e:	b27e      	sxtb	r6, r7
 8007550:	f347 17c0 	sbfx	r7, r7, #7, #1
 8007554:	e7df      	b.n	8007516 <_svfprintf_r+0x31e>
 8007556:	3607      	adds	r6, #7
 8007558:	f026 0307 	bic.w	r3, r6, #7
 800755c:	ecb3 7b02 	vldmia	r3!, {d7}
 8007560:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007564:	9307      	str	r3, [sp, #28]
 8007566:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007568:	931a      	str	r3, [sp, #104]	@ 0x68
 800756a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800756c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007570:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007572:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8007576:	4b81      	ldr	r3, [pc, #516]	@ (800777c <_svfprintf_r+0x584>)
 8007578:	f04f 32ff 	mov.w	r2, #4294967295
 800757c:	f7f9 fae6 	bl	8000b4c <__aeabi_dcmpun>
 8007580:	bb10      	cbnz	r0, 80075c8 <_svfprintf_r+0x3d0>
 8007582:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8007586:	4b7d      	ldr	r3, [pc, #500]	@ (800777c <_svfprintf_r+0x584>)
 8007588:	f04f 32ff 	mov.w	r2, #4294967295
 800758c:	f7f9 fac0 	bl	8000b10 <__aeabi_dcmple>
 8007590:	b9d0      	cbnz	r0, 80075c8 <_svfprintf_r+0x3d0>
 8007592:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007596:	2200      	movs	r2, #0
 8007598:	2300      	movs	r3, #0
 800759a:	f7f9 faaf 	bl	8000afc <__aeabi_dcmplt>
 800759e:	b110      	cbz	r0, 80075a6 <_svfprintf_r+0x3ae>
 80075a0:	232d      	movs	r3, #45	@ 0x2d
 80075a2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80075a6:	4a76      	ldr	r2, [pc, #472]	@ (8007780 <_svfprintf_r+0x588>)
 80075a8:	4b76      	ldr	r3, [pc, #472]	@ (8007784 <_svfprintf_r+0x58c>)
 80075aa:	9906      	ldr	r1, [sp, #24]
 80075ac:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 80075b0:	2947      	cmp	r1, #71	@ 0x47
 80075b2:	bfd4      	ite	le
 80075b4:	4691      	movle	r9, r2
 80075b6:	4699      	movgt	r9, r3
 80075b8:	f04f 0a00 	mov.w	sl, #0
 80075bc:	f04f 0803 	mov.w	r8, #3
 80075c0:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 80075c4:	f000 bfec 	b.w	80085a0 <_svfprintf_r+0x13a8>
 80075c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80075cc:	4610      	mov	r0, r2
 80075ce:	4619      	mov	r1, r3
 80075d0:	f7f9 fabc 	bl	8000b4c <__aeabi_dcmpun>
 80075d4:	4682      	mov	sl, r0
 80075d6:	b140      	cbz	r0, 80075ea <_svfprintf_r+0x3f2>
 80075d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075da:	4a6b      	ldr	r2, [pc, #428]	@ (8007788 <_svfprintf_r+0x590>)
 80075dc:	2b00      	cmp	r3, #0
 80075de:	bfbc      	itt	lt
 80075e0:	232d      	movlt	r3, #45	@ 0x2d
 80075e2:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 80075e6:	4b69      	ldr	r3, [pc, #420]	@ (800778c <_svfprintf_r+0x594>)
 80075e8:	e7df      	b.n	80075aa <_svfprintf_r+0x3b2>
 80075ea:	9b06      	ldr	r3, [sp, #24]
 80075ec:	2b61      	cmp	r3, #97	@ 0x61
 80075ee:	d025      	beq.n	800763c <_svfprintf_r+0x444>
 80075f0:	2b41      	cmp	r3, #65	@ 0x41
 80075f2:	d125      	bne.n	8007640 <_svfprintf_r+0x448>
 80075f4:	2358      	movs	r3, #88	@ 0x58
 80075f6:	2230      	movs	r2, #48	@ 0x30
 80075f8:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 80075fc:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8007600:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8007604:	f045 0502 	orr.w	r5, r5, #2
 8007608:	f340 80a5 	ble.w	8007756 <_svfprintf_r+0x55e>
 800760c:	9803      	ldr	r0, [sp, #12]
 800760e:	f108 0101 	add.w	r1, r8, #1
 8007612:	f7fe ff2b 	bl	800646c <_malloc_r>
 8007616:	4681      	mov	r9, r0
 8007618:	2800      	cmp	r0, #0
 800761a:	f040 80a1 	bne.w	8007760 <_svfprintf_r+0x568>
 800761e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8007622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007626:	f8ab 300c 	strh.w	r3, [fp, #12]
 800762a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800762e:	065b      	lsls	r3, r3, #25
 8007630:	f53f ae04 	bmi.w	800723c <_svfprintf_r+0x44>
 8007634:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8007636:	b053      	add	sp, #332	@ 0x14c
 8007638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800763c:	2378      	movs	r3, #120	@ 0x78
 800763e:	e7da      	b.n	80075f6 <_svfprintf_r+0x3fe>
 8007640:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007644:	f000 808e 	beq.w	8007764 <_svfprintf_r+0x56c>
 8007648:	9b06      	ldr	r3, [sp, #24]
 800764a:	f023 0320 	bic.w	r3, r3, #32
 800764e:	2b47      	cmp	r3, #71	@ 0x47
 8007650:	d105      	bne.n	800765e <_svfprintf_r+0x466>
 8007652:	f1b8 0f00 	cmp.w	r8, #0
 8007656:	d102      	bne.n	800765e <_svfprintf_r+0x466>
 8007658:	46c2      	mov	sl, r8
 800765a:	f04f 0801 	mov.w	r8, #1
 800765e:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8007662:	9311      	str	r3, [sp, #68]	@ 0x44
 8007664:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007666:	2b00      	cmp	r3, #0
 8007668:	da7f      	bge.n	800776a <_svfprintf_r+0x572>
 800766a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800766c:	9314      	str	r3, [sp, #80]	@ 0x50
 800766e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007670:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007674:	9315      	str	r3, [sp, #84]	@ 0x54
 8007676:	232d      	movs	r3, #45	@ 0x2d
 8007678:	931c      	str	r3, [sp, #112]	@ 0x70
 800767a:	9b06      	ldr	r3, [sp, #24]
 800767c:	f023 0320 	bic.w	r3, r3, #32
 8007680:	2b41      	cmp	r3, #65	@ 0x41
 8007682:	9308      	str	r3, [sp, #32]
 8007684:	f040 81e6 	bne.w	8007a54 <_svfprintf_r+0x85c>
 8007688:	a820      	add	r0, sp, #128	@ 0x80
 800768a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800768e:	f003 fa3b 	bl	800ab08 <frexp>
 8007692:	2200      	movs	r2, #0
 8007694:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8007698:	ec51 0b10 	vmov	r0, r1, d0
 800769c:	f7f8 ffbc 	bl	8000618 <__aeabi_dmul>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076a8:	2200      	movs	r2, #0
 80076aa:	2300      	movs	r3, #0
 80076ac:	f7f9 fa1c 	bl	8000ae8 <__aeabi_dcmpeq>
 80076b0:	b108      	cbz	r0, 80076b6 <_svfprintf_r+0x4be>
 80076b2:	2301      	movs	r3, #1
 80076b4:	9320      	str	r3, [sp, #128]	@ 0x80
 80076b6:	4a36      	ldr	r2, [pc, #216]	@ (8007790 <_svfprintf_r+0x598>)
 80076b8:	4b36      	ldr	r3, [pc, #216]	@ (8007794 <_svfprintf_r+0x59c>)
 80076ba:	9906      	ldr	r1, [sp, #24]
 80076bc:	2961      	cmp	r1, #97	@ 0x61
 80076be:	bf18      	it	ne
 80076c0:	461a      	movne	r2, r3
 80076c2:	9210      	str	r2, [sp, #64]	@ 0x40
 80076c4:	f108 37ff 	add.w	r7, r8, #4294967295
 80076c8:	464e      	mov	r6, r9
 80076ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076ce:	4b32      	ldr	r3, [pc, #200]	@ (8007798 <_svfprintf_r+0x5a0>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	f7f8 ffa1 	bl	8000618 <__aeabi_dmul>
 80076d6:	4602      	mov	r2, r0
 80076d8:	460b      	mov	r3, r1
 80076da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076de:	f7f9 fa4b 	bl	8000b78 <__aeabi_d2iz>
 80076e2:	9013      	str	r0, [sp, #76]	@ 0x4c
 80076e4:	f7f8 ff2e 	bl	8000544 <__aeabi_i2d>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076f0:	f7f8 fdda 	bl	80002a8 <__aeabi_dsub>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076fc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80076fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007700:	5c9b      	ldrb	r3, [r3, r2]
 8007702:	f806 3b01 	strb.w	r3, [r6], #1
 8007706:	1c7a      	adds	r2, r7, #1
 8007708:	d006      	beq.n	8007718 <_svfprintf_r+0x520>
 800770a:	1e7b      	subs	r3, r7, #1
 800770c:	931d      	str	r3, [sp, #116]	@ 0x74
 800770e:	2200      	movs	r2, #0
 8007710:	2300      	movs	r3, #0
 8007712:	f7f9 f9e9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007716:	b370      	cbz	r0, 8007776 <_svfprintf_r+0x57e>
 8007718:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800771c:	4b1f      	ldr	r3, [pc, #124]	@ (800779c <_svfprintf_r+0x5a4>)
 800771e:	2200      	movs	r2, #0
 8007720:	f7f9 fa0a 	bl	8000b38 <__aeabi_dcmpgt>
 8007724:	2800      	cmp	r0, #0
 8007726:	d13b      	bne.n	80077a0 <_svfprintf_r+0x5a8>
 8007728:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800772c:	4b1b      	ldr	r3, [pc, #108]	@ (800779c <_svfprintf_r+0x5a4>)
 800772e:	2200      	movs	r2, #0
 8007730:	f7f9 f9da 	bl	8000ae8 <__aeabi_dcmpeq>
 8007734:	b110      	cbz	r0, 800773c <_svfprintf_r+0x544>
 8007736:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007738:	07db      	lsls	r3, r3, #31
 800773a:	d431      	bmi.n	80077a0 <_svfprintf_r+0x5a8>
 800773c:	4633      	mov	r3, r6
 800773e:	19f1      	adds	r1, r6, r7
 8007740:	2030      	movs	r0, #48	@ 0x30
 8007742:	1aca      	subs	r2, r1, r3
 8007744:	2a00      	cmp	r2, #0
 8007746:	f280 8182 	bge.w	8007a4e <_svfprintf_r+0x856>
 800774a:	1c7b      	adds	r3, r7, #1
 800774c:	3701      	adds	r7, #1
 800774e:	bfb8      	it	lt
 8007750:	2300      	movlt	r3, #0
 8007752:	441e      	add	r6, r3
 8007754:	e038      	b.n	80077c8 <_svfprintf_r+0x5d0>
 8007756:	f04f 0a00 	mov.w	sl, #0
 800775a:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 800775e:	e77e      	b.n	800765e <_svfprintf_r+0x466>
 8007760:	4682      	mov	sl, r0
 8007762:	e77c      	b.n	800765e <_svfprintf_r+0x466>
 8007764:	f04f 0806 	mov.w	r8, #6
 8007768:	e779      	b.n	800765e <_svfprintf_r+0x466>
 800776a:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 800776e:	2300      	movs	r3, #0
 8007770:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8007774:	e780      	b.n	8007678 <_svfprintf_r+0x480>
 8007776:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8007778:	e7a7      	b.n	80076ca <_svfprintf_r+0x4d2>
 800777a:	bf00      	nop
 800777c:	7fefffff 	.word	0x7fefffff
 8007780:	0800d3d6 	.word	0x0800d3d6
 8007784:	0800d3da 	.word	0x0800d3da
 8007788:	0800d3de 	.word	0x0800d3de
 800778c:	0800d3e2 	.word	0x0800d3e2
 8007790:	0800d3e6 	.word	0x0800d3e6
 8007794:	0800d3f7 	.word	0x0800d3f7
 8007798:	40300000 	.word	0x40300000
 800779c:	3fe00000 	.word	0x3fe00000
 80077a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80077a2:	9624      	str	r6, [sp, #144]	@ 0x90
 80077a4:	7bd9      	ldrb	r1, [r3, #15]
 80077a6:	2030      	movs	r0, #48	@ 0x30
 80077a8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80077aa:	1e53      	subs	r3, r2, #1
 80077ac:	9324      	str	r3, [sp, #144]	@ 0x90
 80077ae:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80077b2:	428b      	cmp	r3, r1
 80077b4:	f000 8148 	beq.w	8007a48 <_svfprintf_r+0x850>
 80077b8:	2b39      	cmp	r3, #57	@ 0x39
 80077ba:	bf0b      	itete	eq
 80077bc:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 80077be:	3301      	addne	r3, #1
 80077c0:	7a9b      	ldrbeq	r3, [r3, #10]
 80077c2:	b2db      	uxtbne	r3, r3
 80077c4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80077c8:	eba6 0309 	sub.w	r3, r6, r9
 80077cc:	9304      	str	r3, [sp, #16]
 80077ce:	9b08      	ldr	r3, [sp, #32]
 80077d0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80077d2:	2b47      	cmp	r3, #71	@ 0x47
 80077d4:	f040 8187 	bne.w	8007ae6 <_svfprintf_r+0x8ee>
 80077d8:	1cf1      	adds	r1, r6, #3
 80077da:	db02      	blt.n	80077e2 <_svfprintf_r+0x5ea>
 80077dc:	4546      	cmp	r6, r8
 80077de:	f340 81a5 	ble.w	8007b2c <_svfprintf_r+0x934>
 80077e2:	9b06      	ldr	r3, [sp, #24]
 80077e4:	3b02      	subs	r3, #2
 80077e6:	9306      	str	r3, [sp, #24]
 80077e8:	9906      	ldr	r1, [sp, #24]
 80077ea:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80077ee:	f021 0120 	bic.w	r1, r1, #32
 80077f2:	2941      	cmp	r1, #65	@ 0x41
 80077f4:	bf08      	it	eq
 80077f6:	320f      	addeq	r2, #15
 80077f8:	f106 33ff 	add.w	r3, r6, #4294967295
 80077fc:	bf06      	itte	eq
 80077fe:	b2d2      	uxtbeq	r2, r2
 8007800:	2101      	moveq	r1, #1
 8007802:	2100      	movne	r1, #0
 8007804:	2b00      	cmp	r3, #0
 8007806:	9320      	str	r3, [sp, #128]	@ 0x80
 8007808:	bfb8      	it	lt
 800780a:	f1c6 0301 	rsblt	r3, r6, #1
 800780e:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 8007812:	bfb4      	ite	lt
 8007814:	222d      	movlt	r2, #45	@ 0x2d
 8007816:	222b      	movge	r2, #43	@ 0x2b
 8007818:	2b09      	cmp	r3, #9
 800781a:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 800781e:	f340 8178 	ble.w	8007b12 <_svfprintf_r+0x91a>
 8007822:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8007826:	270a      	movs	r7, #10
 8007828:	4602      	mov	r2, r0
 800782a:	fbb3 f6f7 	udiv	r6, r3, r7
 800782e:	fb07 3116 	mls	r1, r7, r6, r3
 8007832:	3130      	adds	r1, #48	@ 0x30
 8007834:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007838:	4619      	mov	r1, r3
 800783a:	2963      	cmp	r1, #99	@ 0x63
 800783c:	f100 30ff 	add.w	r0, r0, #4294967295
 8007840:	4633      	mov	r3, r6
 8007842:	dcf1      	bgt.n	8007828 <_svfprintf_r+0x630>
 8007844:	3330      	adds	r3, #48	@ 0x30
 8007846:	1e91      	subs	r1, r2, #2
 8007848:	f800 3c01 	strb.w	r3, [r0, #-1]
 800784c:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8007850:	460b      	mov	r3, r1
 8007852:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8007856:	4283      	cmp	r3, r0
 8007858:	f0c0 8156 	bcc.w	8007b08 <_svfprintf_r+0x910>
 800785c:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8007860:	1a9b      	subs	r3, r3, r2
 8007862:	4281      	cmp	r1, r0
 8007864:	bf88      	it	hi
 8007866:	2300      	movhi	r3, #0
 8007868:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800786c:	441a      	add	r2, r3
 800786e:	ab22      	add	r3, sp, #136	@ 0x88
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	9a04      	ldr	r2, [sp, #16]
 8007874:	9318      	str	r3, [sp, #96]	@ 0x60
 8007876:	2a01      	cmp	r2, #1
 8007878:	eb03 0802 	add.w	r8, r3, r2
 800787c:	dc01      	bgt.n	8007882 <_svfprintf_r+0x68a>
 800787e:	07ea      	lsls	r2, r5, #31
 8007880:	d501      	bpl.n	8007886 <_svfprintf_r+0x68e>
 8007882:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007884:	4498      	add	r8, r3
 8007886:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800788a:	2700      	movs	r7, #0
 800788c:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8007890:	9311      	str	r3, [sp, #68]	@ 0x44
 8007892:	9708      	str	r7, [sp, #32]
 8007894:	463e      	mov	r6, r7
 8007896:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8007898:	2b00      	cmp	r3, #0
 800789a:	f040 818f 	bne.w	8007bbc <_svfprintf_r+0x9c4>
 800789e:	2300      	movs	r3, #0
 80078a0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80078a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80078a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80078a6:	4543      	cmp	r3, r8
 80078a8:	bfb8      	it	lt
 80078aa:	4643      	movlt	r3, r8
 80078ac:	9311      	str	r3, [sp, #68]	@ 0x44
 80078ae:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 80078b2:	b113      	cbz	r3, 80078ba <_svfprintf_r+0x6c2>
 80078b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80078b6:	3301      	adds	r3, #1
 80078b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80078ba:	f015 0302 	ands.w	r3, r5, #2
 80078be:	931c      	str	r3, [sp, #112]	@ 0x70
 80078c0:	bf1e      	ittt	ne
 80078c2:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 80078c4:	3302      	addne	r3, #2
 80078c6:	9311      	strne	r3, [sp, #68]	@ 0x44
 80078c8:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 80078cc:	931d      	str	r3, [sp, #116]	@ 0x74
 80078ce:	d122      	bne.n	8007916 <_svfprintf_r+0x71e>
 80078d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078d2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80078d4:	1a9b      	subs	r3, r3, r2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80078da:	dd1c      	ble.n	8007916 <_svfprintf_r+0x71e>
 80078dc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80078de:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80078e2:	2810      	cmp	r0, #16
 80078e4:	489e      	ldr	r0, [pc, #632]	@ (8007b60 <_svfprintf_r+0x968>)
 80078e6:	6020      	str	r0, [r4, #0]
 80078e8:	f102 0201 	add.w	r2, r2, #1
 80078ec:	f104 0108 	add.w	r1, r4, #8
 80078f0:	f300 8298 	bgt.w	8007e24 <_svfprintf_r+0xc2c>
 80078f4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80078f6:	6060      	str	r0, [r4, #4]
 80078f8:	4403      	add	r3, r0
 80078fa:	2a07      	cmp	r2, #7
 80078fc:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8007900:	f340 82a5 	ble.w	8007e4e <_svfprintf_r+0xc56>
 8007904:	9803      	ldr	r0, [sp, #12]
 8007906:	aa26      	add	r2, sp, #152	@ 0x98
 8007908:	4659      	mov	r1, fp
 800790a:	f004 fcbb 	bl	800c284 <__ssprint_r>
 800790e:	2800      	cmp	r0, #0
 8007910:	f040 85ed 	bne.w	80084ee <_svfprintf_r+0x12f6>
 8007914:	ac29      	add	r4, sp, #164	@ 0xa4
 8007916:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 800791a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800791c:	b16a      	cbz	r2, 800793a <_svfprintf_r+0x742>
 800791e:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8007922:	6022      	str	r2, [r4, #0]
 8007924:	2201      	movs	r2, #1
 8007926:	4413      	add	r3, r2
 8007928:	9328      	str	r3, [sp, #160]	@ 0xa0
 800792a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800792c:	6062      	str	r2, [r4, #4]
 800792e:	4413      	add	r3, r2
 8007930:	2b07      	cmp	r3, #7
 8007932:	9327      	str	r3, [sp, #156]	@ 0x9c
 8007934:	f300 828d 	bgt.w	8007e52 <_svfprintf_r+0xc5a>
 8007938:	3408      	adds	r4, #8
 800793a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800793c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800793e:	b162      	cbz	r2, 800795a <_svfprintf_r+0x762>
 8007940:	aa1f      	add	r2, sp, #124	@ 0x7c
 8007942:	6022      	str	r2, [r4, #0]
 8007944:	2202      	movs	r2, #2
 8007946:	4413      	add	r3, r2
 8007948:	9328      	str	r3, [sp, #160]	@ 0xa0
 800794a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800794c:	6062      	str	r2, [r4, #4]
 800794e:	3301      	adds	r3, #1
 8007950:	2b07      	cmp	r3, #7
 8007952:	9327      	str	r3, [sp, #156]	@ 0x9c
 8007954:	f300 8287 	bgt.w	8007e66 <_svfprintf_r+0xc6e>
 8007958:	3408      	adds	r4, #8
 800795a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800795c:	2b80      	cmp	r3, #128	@ 0x80
 800795e:	d122      	bne.n	80079a6 <_svfprintf_r+0x7ae>
 8007960:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007962:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007964:	1a9b      	subs	r3, r3, r2
 8007966:	2b00      	cmp	r3, #0
 8007968:	9313      	str	r3, [sp, #76]	@ 0x4c
 800796a:	dd1c      	ble.n	80079a6 <_svfprintf_r+0x7ae>
 800796c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800796e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8007972:	2810      	cmp	r0, #16
 8007974:	487b      	ldr	r0, [pc, #492]	@ (8007b64 <_svfprintf_r+0x96c>)
 8007976:	6020      	str	r0, [r4, #0]
 8007978:	f102 0201 	add.w	r2, r2, #1
 800797c:	f104 0108 	add.w	r1, r4, #8
 8007980:	f300 827b 	bgt.w	8007e7a <_svfprintf_r+0xc82>
 8007984:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8007986:	6060      	str	r0, [r4, #4]
 8007988:	4403      	add	r3, r0
 800798a:	2a07      	cmp	r2, #7
 800798c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8007990:	f340 8288 	ble.w	8007ea4 <_svfprintf_r+0xcac>
 8007994:	9803      	ldr	r0, [sp, #12]
 8007996:	aa26      	add	r2, sp, #152	@ 0x98
 8007998:	4659      	mov	r1, fp
 800799a:	f004 fc73 	bl	800c284 <__ssprint_r>
 800799e:	2800      	cmp	r0, #0
 80079a0:	f040 85a5 	bne.w	80084ee <_svfprintf_r+0x12f6>
 80079a4:	ac29      	add	r4, sp, #164	@ 0xa4
 80079a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80079a8:	eba3 0308 	sub.w	r3, r3, r8
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80079b0:	dd1c      	ble.n	80079ec <_svfprintf_r+0x7f4>
 80079b2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80079b4:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80079b8:	2810      	cmp	r0, #16
 80079ba:	486a      	ldr	r0, [pc, #424]	@ (8007b64 <_svfprintf_r+0x96c>)
 80079bc:	6020      	str	r0, [r4, #0]
 80079be:	f102 0201 	add.w	r2, r2, #1
 80079c2:	f104 0108 	add.w	r1, r4, #8
 80079c6:	f300 826f 	bgt.w	8007ea8 <_svfprintf_r+0xcb0>
 80079ca:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80079cc:	6060      	str	r0, [r4, #4]
 80079ce:	4403      	add	r3, r0
 80079d0:	2a07      	cmp	r2, #7
 80079d2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80079d6:	f340 827c 	ble.w	8007ed2 <_svfprintf_r+0xcda>
 80079da:	9803      	ldr	r0, [sp, #12]
 80079dc:	aa26      	add	r2, sp, #152	@ 0x98
 80079de:	4659      	mov	r1, fp
 80079e0:	f004 fc50 	bl	800c284 <__ssprint_r>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	f040 8582 	bne.w	80084ee <_svfprintf_r+0x12f6>
 80079ea:	ac29      	add	r4, sp, #164	@ 0xa4
 80079ec:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80079ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80079f0:	05ea      	lsls	r2, r5, #23
 80079f2:	f100 8275 	bmi.w	8007ee0 <_svfprintf_r+0xce8>
 80079f6:	4443      	add	r3, r8
 80079f8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80079fa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80079fc:	3301      	adds	r3, #1
 80079fe:	2b07      	cmp	r3, #7
 8007a00:	e9c4 9800 	strd	r9, r8, [r4]
 8007a04:	9327      	str	r3, [sp, #156]	@ 0x9c
 8007a06:	f300 82b1 	bgt.w	8007f6c <_svfprintf_r+0xd74>
 8007a0a:	3408      	adds	r4, #8
 8007a0c:	076a      	lsls	r2, r5, #29
 8007a0e:	f100 8550 	bmi.w	80084b2 <_svfprintf_r+0x12ba>
 8007a12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007a16:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007a18:	428a      	cmp	r2, r1
 8007a1a:	bfac      	ite	ge
 8007a1c:	189b      	addge	r3, r3, r2
 8007a1e:	185b      	addlt	r3, r3, r1
 8007a20:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a22:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8007a24:	b13b      	cbz	r3, 8007a36 <_svfprintf_r+0x83e>
 8007a26:	9803      	ldr	r0, [sp, #12]
 8007a28:	aa26      	add	r2, sp, #152	@ 0x98
 8007a2a:	4659      	mov	r1, fp
 8007a2c:	f004 fc2a 	bl	800c284 <__ssprint_r>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	f040 855c 	bne.w	80084ee <_svfprintf_r+0x12f6>
 8007a36:	2300      	movs	r3, #0
 8007a38:	9327      	str	r3, [sp, #156]	@ 0x9c
 8007a3a:	f1ba 0f00 	cmp.w	sl, #0
 8007a3e:	f040 8572 	bne.w	8008526 <_svfprintf_r+0x132e>
 8007a42:	9e07      	ldr	r6, [sp, #28]
 8007a44:	ac29      	add	r4, sp, #164	@ 0xa4
 8007a46:	e0c6      	b.n	8007bd6 <_svfprintf_r+0x9de>
 8007a48:	f802 0c01 	strb.w	r0, [r2, #-1]
 8007a4c:	e6ac      	b.n	80077a8 <_svfprintf_r+0x5b0>
 8007a4e:	f803 0b01 	strb.w	r0, [r3], #1
 8007a52:	e676      	b.n	8007742 <_svfprintf_r+0x54a>
 8007a54:	9b08      	ldr	r3, [sp, #32]
 8007a56:	2b46      	cmp	r3, #70	@ 0x46
 8007a58:	d005      	beq.n	8007a66 <_svfprintf_r+0x86e>
 8007a5a:	2b45      	cmp	r3, #69	@ 0x45
 8007a5c:	d11a      	bne.n	8007a94 <_svfprintf_r+0x89c>
 8007a5e:	f108 0601 	add.w	r6, r8, #1
 8007a62:	2102      	movs	r1, #2
 8007a64:	e001      	b.n	8007a6a <_svfprintf_r+0x872>
 8007a66:	4646      	mov	r6, r8
 8007a68:	2103      	movs	r1, #3
 8007a6a:	ab24      	add	r3, sp, #144	@ 0x90
 8007a6c:	9301      	str	r3, [sp, #4]
 8007a6e:	ab21      	add	r3, sp, #132	@ 0x84
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8007a76:	ab20      	add	r3, sp, #128	@ 0x80
 8007a78:	9803      	ldr	r0, [sp, #12]
 8007a7a:	4632      	mov	r2, r6
 8007a7c:	f003 f944 	bl	800ad08 <_dtoa_r>
 8007a80:	9b08      	ldr	r3, [sp, #32]
 8007a82:	2b47      	cmp	r3, #71	@ 0x47
 8007a84:	4681      	mov	r9, r0
 8007a86:	d119      	bne.n	8007abc <_svfprintf_r+0x8c4>
 8007a88:	07e8      	lsls	r0, r5, #31
 8007a8a:	d405      	bmi.n	8007a98 <_svfprintf_r+0x8a0>
 8007a8c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007a8e:	eba3 0309 	sub.w	r3, r3, r9
 8007a92:	e69b      	b.n	80077cc <_svfprintf_r+0x5d4>
 8007a94:	4646      	mov	r6, r8
 8007a96:	e7e4      	b.n	8007a62 <_svfprintf_r+0x86a>
 8007a98:	eb09 0706 	add.w	r7, r9, r6
 8007a9c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	f7f9 f820 	bl	8000ae8 <__aeabi_dcmpeq>
 8007aa8:	b100      	cbz	r0, 8007aac <_svfprintf_r+0x8b4>
 8007aaa:	9724      	str	r7, [sp, #144]	@ 0x90
 8007aac:	2230      	movs	r2, #48	@ 0x30
 8007aae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007ab0:	429f      	cmp	r7, r3
 8007ab2:	d9eb      	bls.n	8007a8c <_svfprintf_r+0x894>
 8007ab4:	1c59      	adds	r1, r3, #1
 8007ab6:	9124      	str	r1, [sp, #144]	@ 0x90
 8007ab8:	701a      	strb	r2, [r3, #0]
 8007aba:	e7f8      	b.n	8007aae <_svfprintf_r+0x8b6>
 8007abc:	9b08      	ldr	r3, [sp, #32]
 8007abe:	2b46      	cmp	r3, #70	@ 0x46
 8007ac0:	eb00 0706 	add.w	r7, r0, r6
 8007ac4:	d1ea      	bne.n	8007a9c <_svfprintf_r+0x8a4>
 8007ac6:	7803      	ldrb	r3, [r0, #0]
 8007ac8:	2b30      	cmp	r3, #48	@ 0x30
 8007aca:	d109      	bne.n	8007ae0 <_svfprintf_r+0x8e8>
 8007acc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f7f9 f808 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ad8:	b910      	cbnz	r0, 8007ae0 <_svfprintf_r+0x8e8>
 8007ada:	f1c6 0601 	rsb	r6, r6, #1
 8007ade:	9620      	str	r6, [sp, #128]	@ 0x80
 8007ae0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007ae2:	441f      	add	r7, r3
 8007ae4:	e7da      	b.n	8007a9c <_svfprintf_r+0x8a4>
 8007ae6:	9b08      	ldr	r3, [sp, #32]
 8007ae8:	2b46      	cmp	r3, #70	@ 0x46
 8007aea:	f47f ae7d 	bne.w	80077e8 <_svfprintf_r+0x5f0>
 8007aee:	f005 0301 	and.w	r3, r5, #1
 8007af2:	2e00      	cmp	r6, #0
 8007af4:	ea43 0308 	orr.w	r3, r3, r8
 8007af8:	dd25      	ble.n	8007b46 <_svfprintf_r+0x94e>
 8007afa:	b37b      	cbz	r3, 8007b5c <_svfprintf_r+0x964>
 8007afc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007afe:	18f3      	adds	r3, r6, r3
 8007b00:	4498      	add	r8, r3
 8007b02:	2366      	movs	r3, #102	@ 0x66
 8007b04:	9306      	str	r3, [sp, #24]
 8007b06:	e033      	b.n	8007b70 <_svfprintf_r+0x978>
 8007b08:	f813 7b01 	ldrb.w	r7, [r3], #1
 8007b0c:	f806 7f01 	strb.w	r7, [r6, #1]!
 8007b10:	e6a1      	b.n	8007856 <_svfprintf_r+0x65e>
 8007b12:	b941      	cbnz	r1, 8007b26 <_svfprintf_r+0x92e>
 8007b14:	2230      	movs	r2, #48	@ 0x30
 8007b16:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8007b1a:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8007b1e:	3330      	adds	r3, #48	@ 0x30
 8007b20:	f802 3b01 	strb.w	r3, [r2], #1
 8007b24:	e6a3      	b.n	800786e <_svfprintf_r+0x676>
 8007b26:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8007b2a:	e7f8      	b.n	8007b1e <_svfprintf_r+0x926>
 8007b2c:	9b04      	ldr	r3, [sp, #16]
 8007b2e:	429e      	cmp	r6, r3
 8007b30:	da0d      	bge.n	8007b4e <_svfprintf_r+0x956>
 8007b32:	9b04      	ldr	r3, [sp, #16]
 8007b34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b36:	2e00      	cmp	r6, #0
 8007b38:	eb03 0802 	add.w	r8, r3, r2
 8007b3c:	dc0c      	bgt.n	8007b58 <_svfprintf_r+0x960>
 8007b3e:	f1c6 0301 	rsb	r3, r6, #1
 8007b42:	4498      	add	r8, r3
 8007b44:	e008      	b.n	8007b58 <_svfprintf_r+0x960>
 8007b46:	b17b      	cbz	r3, 8007b68 <_svfprintf_r+0x970>
 8007b48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	e7d8      	b.n	8007b00 <_svfprintf_r+0x908>
 8007b4e:	07eb      	lsls	r3, r5, #31
 8007b50:	d521      	bpl.n	8007b96 <_svfprintf_r+0x99e>
 8007b52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b54:	eb06 0803 	add.w	r8, r6, r3
 8007b58:	2367      	movs	r3, #103	@ 0x67
 8007b5a:	e7d3      	b.n	8007b04 <_svfprintf_r+0x90c>
 8007b5c:	46b0      	mov	r8, r6
 8007b5e:	e7d0      	b.n	8007b02 <_svfprintf_r+0x90a>
 8007b60:	0800d41a 	.word	0x0800d41a
 8007b64:	0800d40a 	.word	0x0800d40a
 8007b68:	2366      	movs	r3, #102	@ 0x66
 8007b6a:	9306      	str	r3, [sp, #24]
 8007b6c:	f04f 0801 	mov.w	r8, #1
 8007b70:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8007b74:	9308      	str	r3, [sp, #32]
 8007b76:	d01f      	beq.n	8007bb8 <_svfprintf_r+0x9c0>
 8007b78:	2700      	movs	r7, #0
 8007b7a:	2e00      	cmp	r6, #0
 8007b7c:	9708      	str	r7, [sp, #32]
 8007b7e:	f77f ae8a 	ble.w	8007896 <_svfprintf_r+0x69e>
 8007b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	2bff      	cmp	r3, #255	@ 0xff
 8007b88:	d107      	bne.n	8007b9a <_svfprintf_r+0x9a2>
 8007b8a:	9b08      	ldr	r3, [sp, #32]
 8007b8c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007b8e:	443b      	add	r3, r7
 8007b90:	fb02 8803 	mla	r8, r2, r3, r8
 8007b94:	e67f      	b.n	8007896 <_svfprintf_r+0x69e>
 8007b96:	46b0      	mov	r8, r6
 8007b98:	e7de      	b.n	8007b58 <_svfprintf_r+0x960>
 8007b9a:	42b3      	cmp	r3, r6
 8007b9c:	daf5      	bge.n	8007b8a <_svfprintf_r+0x992>
 8007b9e:	1af6      	subs	r6, r6, r3
 8007ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ba2:	785b      	ldrb	r3, [r3, #1]
 8007ba4:	b133      	cbz	r3, 8007bb4 <_svfprintf_r+0x9bc>
 8007ba6:	9b08      	ldr	r3, [sp, #32]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	9308      	str	r3, [sp, #32]
 8007bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bae:	3301      	adds	r3, #1
 8007bb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bb2:	e7e6      	b.n	8007b82 <_svfprintf_r+0x98a>
 8007bb4:	3701      	adds	r7, #1
 8007bb6:	e7e4      	b.n	8007b82 <_svfprintf_r+0x98a>
 8007bb8:	9f08      	ldr	r7, [sp, #32]
 8007bba:	e66c      	b.n	8007896 <_svfprintf_r+0x69e>
 8007bbc:	232d      	movs	r3, #45	@ 0x2d
 8007bbe:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8007bc2:	e66c      	b.n	800789e <_svfprintf_r+0x6a6>
 8007bc4:	06af      	lsls	r7, r5, #26
 8007bc6:	d50a      	bpl.n	8007bde <_svfprintf_r+0x9e6>
 8007bc8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007bca:	6833      	ldr	r3, [r6, #0]
 8007bcc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007bce:	17d2      	asrs	r2, r2, #31
 8007bd0:	e9c3 1200 	strd	r1, r2, [r3]
 8007bd4:	3604      	adds	r6, #4
 8007bd6:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8007bda:	f7ff bb46 	b.w	800726a <_svfprintf_r+0x72>
 8007bde:	06e8      	lsls	r0, r5, #27
 8007be0:	d503      	bpl.n	8007bea <_svfprintf_r+0x9f2>
 8007be2:	6833      	ldr	r3, [r6, #0]
 8007be4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	e7f4      	b.n	8007bd4 <_svfprintf_r+0x9dc>
 8007bea:	0669      	lsls	r1, r5, #25
 8007bec:	d503      	bpl.n	8007bf6 <_svfprintf_r+0x9fe>
 8007bee:	6833      	ldr	r3, [r6, #0]
 8007bf0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007bf2:	801a      	strh	r2, [r3, #0]
 8007bf4:	e7ee      	b.n	8007bd4 <_svfprintf_r+0x9dc>
 8007bf6:	05aa      	lsls	r2, r5, #22
 8007bf8:	d5f3      	bpl.n	8007be2 <_svfprintf_r+0x9ea>
 8007bfa:	6833      	ldr	r3, [r6, #0]
 8007bfc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007bfe:	701a      	strb	r2, [r3, #0]
 8007c00:	e7e8      	b.n	8007bd4 <_svfprintf_r+0x9dc>
 8007c02:	f045 0510 	orr.w	r5, r5, #16
 8007c06:	f015 0320 	ands.w	r3, r5, #32
 8007c0a:	d020      	beq.n	8007c4e <_svfprintf_r+0xa56>
 8007c0c:	3607      	adds	r6, #7
 8007c0e:	f026 0307 	bic.w	r3, r6, #7
 8007c12:	461a      	mov	r2, r3
 8007c14:	685f      	ldr	r7, [r3, #4]
 8007c16:	f852 6b08 	ldr.w	r6, [r2], #8
 8007c1a:	9207      	str	r2, [sp, #28]
 8007c1c:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8007c20:	2300      	movs	r3, #0
 8007c22:	2200      	movs	r2, #0
 8007c24:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8007c28:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007c2c:	f000 848c 	beq.w	8008548 <_svfprintf_r+0x1350>
 8007c30:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8007c34:	9208      	str	r2, [sp, #32]
 8007c36:	ea56 0207 	orrs.w	r2, r6, r7
 8007c3a:	f040 848a 	bne.w	8008552 <_svfprintf_r+0x135a>
 8007c3e:	f1b8 0f00 	cmp.w	r8, #0
 8007c42:	f000 80db 	beq.w	8007dfc <_svfprintf_r+0xc04>
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	f040 8486 	bne.w	8008558 <_svfprintf_r+0x1360>
 8007c4c:	e083      	b.n	8007d56 <_svfprintf_r+0xb5e>
 8007c4e:	4632      	mov	r2, r6
 8007c50:	f015 0710 	ands.w	r7, r5, #16
 8007c54:	f852 6b04 	ldr.w	r6, [r2], #4
 8007c58:	9207      	str	r2, [sp, #28]
 8007c5a:	d001      	beq.n	8007c60 <_svfprintf_r+0xa68>
 8007c5c:	461f      	mov	r7, r3
 8007c5e:	e7dd      	b.n	8007c1c <_svfprintf_r+0xa24>
 8007c60:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8007c64:	d001      	beq.n	8007c6a <_svfprintf_r+0xa72>
 8007c66:	b2b6      	uxth	r6, r6
 8007c68:	e7d8      	b.n	8007c1c <_svfprintf_r+0xa24>
 8007c6a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8007c6e:	d0d5      	beq.n	8007c1c <_svfprintf_r+0xa24>
 8007c70:	b2f6      	uxtb	r6, r6
 8007c72:	e7f3      	b.n	8007c5c <_svfprintf_r+0xa64>
 8007c74:	4633      	mov	r3, r6
 8007c76:	2278      	movs	r2, #120	@ 0x78
 8007c78:	f853 6b04 	ldr.w	r6, [r3], #4
 8007c7c:	9307      	str	r3, [sp, #28]
 8007c7e:	f647 0330 	movw	r3, #30768	@ 0x7830
 8007c82:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8007c86:	4b94      	ldr	r3, [pc, #592]	@ (8007ed8 <_svfprintf_r+0xce0>)
 8007c88:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c8a:	2700      	movs	r7, #0
 8007c8c:	f045 0502 	orr.w	r5, r5, #2
 8007c90:	2302      	movs	r3, #2
 8007c92:	9206      	str	r2, [sp, #24]
 8007c94:	e7c5      	b.n	8007c22 <_svfprintf_r+0xa2a>
 8007c96:	4633      	mov	r3, r6
 8007c98:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007c9c:	f853 9b04 	ldr.w	r9, [r3], #4
 8007ca0:	9307      	str	r3, [sp, #28]
 8007ca2:	f04f 0600 	mov.w	r6, #0
 8007ca6:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8007caa:	d00f      	beq.n	8007ccc <_svfprintf_r+0xad4>
 8007cac:	4642      	mov	r2, r8
 8007cae:	4631      	mov	r1, r6
 8007cb0:	4648      	mov	r0, r9
 8007cb2:	f7f8 faa5 	bl	8000200 <memchr>
 8007cb6:	4682      	mov	sl, r0
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	f43f ac81 	beq.w	80075c0 <_svfprintf_r+0x3c8>
 8007cbe:	eba0 0809 	sub.w	r8, r0, r9
 8007cc2:	46b2      	mov	sl, r6
 8007cc4:	9610      	str	r6, [sp, #64]	@ 0x40
 8007cc6:	4637      	mov	r7, r6
 8007cc8:	9608      	str	r6, [sp, #32]
 8007cca:	e5eb      	b.n	80078a4 <_svfprintf_r+0x6ac>
 8007ccc:	4648      	mov	r0, r9
 8007cce:	f7f8 fa89 	bl	80001e4 <strlen>
 8007cd2:	46b2      	mov	sl, r6
 8007cd4:	4680      	mov	r8, r0
 8007cd6:	e473      	b.n	80075c0 <_svfprintf_r+0x3c8>
 8007cd8:	f045 0510 	orr.w	r5, r5, #16
 8007cdc:	f015 0320 	ands.w	r3, r5, #32
 8007ce0:	d009      	beq.n	8007cf6 <_svfprintf_r+0xafe>
 8007ce2:	3607      	adds	r6, #7
 8007ce4:	f026 0307 	bic.w	r3, r6, #7
 8007ce8:	461a      	mov	r2, r3
 8007cea:	685f      	ldr	r7, [r3, #4]
 8007cec:	f852 6b08 	ldr.w	r6, [r2], #8
 8007cf0:	9207      	str	r2, [sp, #28]
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e795      	b.n	8007c22 <_svfprintf_r+0xa2a>
 8007cf6:	4632      	mov	r2, r6
 8007cf8:	f015 0710 	ands.w	r7, r5, #16
 8007cfc:	f852 6b04 	ldr.w	r6, [r2], #4
 8007d00:	9207      	str	r2, [sp, #28]
 8007d02:	d001      	beq.n	8007d08 <_svfprintf_r+0xb10>
 8007d04:	461f      	mov	r7, r3
 8007d06:	e7f4      	b.n	8007cf2 <_svfprintf_r+0xafa>
 8007d08:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8007d0c:	d001      	beq.n	8007d12 <_svfprintf_r+0xb1a>
 8007d0e:	b2b6      	uxth	r6, r6
 8007d10:	e7ef      	b.n	8007cf2 <_svfprintf_r+0xafa>
 8007d12:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8007d16:	d0ec      	beq.n	8007cf2 <_svfprintf_r+0xafa>
 8007d18:	b2f6      	uxtb	r6, r6
 8007d1a:	e7f3      	b.n	8007d04 <_svfprintf_r+0xb0c>
 8007d1c:	4b6f      	ldr	r3, [pc, #444]	@ (8007edc <_svfprintf_r+0xce4>)
 8007d1e:	f7ff bb39 	b.w	8007394 <_svfprintf_r+0x19c>
 8007d22:	4632      	mov	r2, r6
 8007d24:	f015 0710 	ands.w	r7, r5, #16
 8007d28:	f852 6b04 	ldr.w	r6, [r2], #4
 8007d2c:	9207      	str	r2, [sp, #28]
 8007d2e:	d002      	beq.n	8007d36 <_svfprintf_r+0xb3e>
 8007d30:	461f      	mov	r7, r3
 8007d32:	f7ff bb3c 	b.w	80073ae <_svfprintf_r+0x1b6>
 8007d36:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8007d3a:	d002      	beq.n	8007d42 <_svfprintf_r+0xb4a>
 8007d3c:	b2b6      	uxth	r6, r6
 8007d3e:	f7ff bb36 	b.w	80073ae <_svfprintf_r+0x1b6>
 8007d42:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8007d46:	f43f ab32 	beq.w	80073ae <_svfprintf_r+0x1b6>
 8007d4a:	b2f6      	uxtb	r6, r6
 8007d4c:	e7f0      	b.n	8007d30 <_svfprintf_r+0xb38>
 8007d4e:	2e0a      	cmp	r6, #10
 8007d50:	f177 0300 	sbcs.w	r3, r7, #0
 8007d54:	d207      	bcs.n	8007d66 <_svfprintf_r+0xb6e>
 8007d56:	3630      	adds	r6, #48	@ 0x30
 8007d58:	b2f6      	uxtb	r6, r6
 8007d5a:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8007d5e:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 8007d62:	f000 bc15 	b.w	8008590 <_svfprintf_r+0x1398>
 8007d66:	2300      	movs	r3, #0
 8007d68:	9304      	str	r3, [sp, #16]
 8007d6a:	9b08      	ldr	r3, [sp, #32]
 8007d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d70:	ad52      	add	r5, sp, #328	@ 0x148
 8007d72:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d74:	220a      	movs	r2, #10
 8007d76:	2300      	movs	r3, #0
 8007d78:	4630      	mov	r0, r6
 8007d7a:	4639      	mov	r1, r7
 8007d7c:	f7f8 ff24 	bl	8000bc8 <__aeabi_uldivmod>
 8007d80:	9b04      	ldr	r3, [sp, #16]
 8007d82:	9011      	str	r0, [sp, #68]	@ 0x44
 8007d84:	3301      	adds	r3, #1
 8007d86:	9304      	str	r3, [sp, #16]
 8007d88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d8a:	3230      	adds	r2, #48	@ 0x30
 8007d8c:	468a      	mov	sl, r1
 8007d8e:	f105 39ff 	add.w	r9, r5, #4294967295
 8007d92:	f805 2c01 	strb.w	r2, [r5, #-1]
 8007d96:	b1d3      	cbz	r3, 8007dce <_svfprintf_r+0xbd6>
 8007d98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d9a:	9a04      	ldr	r2, [sp, #16]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d115      	bne.n	8007dce <_svfprintf_r+0xbd6>
 8007da2:	2aff      	cmp	r2, #255	@ 0xff
 8007da4:	d013      	beq.n	8007dce <_svfprintf_r+0xbd6>
 8007da6:	2e0a      	cmp	r6, #10
 8007da8:	f177 0300 	sbcs.w	r3, r7, #0
 8007dac:	d30f      	bcc.n	8007dce <_svfprintf_r+0xbd6>
 8007dae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007db0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8007db2:	eba9 0903 	sub.w	r9, r9, r3
 8007db6:	461a      	mov	r2, r3
 8007db8:	4648      	mov	r0, r9
 8007dba:	f002 fe73 	bl	800aaa4 <strncpy>
 8007dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dc0:	785b      	ldrb	r3, [r3, #1]
 8007dc2:	b11b      	cbz	r3, 8007dcc <_svfprintf_r+0xbd4>
 8007dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9304      	str	r3, [sp, #16]
 8007dce:	2e0a      	cmp	r6, #10
 8007dd0:	f177 0700 	sbcs.w	r7, r7, #0
 8007dd4:	f0c0 83dc 	bcc.w	8008590 <_svfprintf_r+0x1398>
 8007dd8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8007dda:	4657      	mov	r7, sl
 8007ddc:	464d      	mov	r5, r9
 8007dde:	e7c9      	b.n	8007d74 <_svfprintf_r+0xb7c>
 8007de0:	f006 030f 	and.w	r3, r6, #15
 8007de4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007de6:	0936      	lsrs	r6, r6, #4
 8007de8:	5cd3      	ldrb	r3, [r2, r3]
 8007dea:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8007dee:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8007df2:	093f      	lsrs	r7, r7, #4
 8007df4:	ea56 0307 	orrs.w	r3, r6, r7
 8007df8:	d1f2      	bne.n	8007de0 <_svfprintf_r+0xbe8>
 8007dfa:	e3c9      	b.n	8008590 <_svfprintf_r+0x1398>
 8007dfc:	b91b      	cbnz	r3, 8007e06 <_svfprintf_r+0xc0e>
 8007dfe:	07e9      	lsls	r1, r5, #31
 8007e00:	d501      	bpl.n	8007e06 <_svfprintf_r+0xc0e>
 8007e02:	2630      	movs	r6, #48	@ 0x30
 8007e04:	e7a9      	b.n	8007d5a <_svfprintf_r+0xb62>
 8007e06:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8007e0a:	e3c1      	b.n	8008590 <_svfprintf_r+0x1398>
 8007e0c:	9b06      	ldr	r3, [sp, #24]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 838f 	beq.w	8008532 <_svfprintf_r+0x133a>
 8007e14:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8007e18:	2300      	movs	r3, #0
 8007e1a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8007e1e:	9607      	str	r6, [sp, #28]
 8007e20:	f7ff bb63 	b.w	80074ea <_svfprintf_r+0x2f2>
 8007e24:	2010      	movs	r0, #16
 8007e26:	4403      	add	r3, r0
 8007e28:	2a07      	cmp	r2, #7
 8007e2a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8007e2e:	6060      	str	r0, [r4, #4]
 8007e30:	dd08      	ble.n	8007e44 <_svfprintf_r+0xc4c>
 8007e32:	9803      	ldr	r0, [sp, #12]
 8007e34:	aa26      	add	r2, sp, #152	@ 0x98
 8007e36:	4659      	mov	r1, fp
 8007e38:	f004 fa24 	bl	800c284 <__ssprint_r>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	f040 8356 	bne.w	80084ee <_svfprintf_r+0x12f6>
 8007e42:	a929      	add	r1, sp, #164	@ 0xa4
 8007e44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007e46:	3b10      	subs	r3, #16
 8007e48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	e546      	b.n	80078dc <_svfprintf_r+0x6e4>
 8007e4e:	460c      	mov	r4, r1
 8007e50:	e561      	b.n	8007916 <_svfprintf_r+0x71e>
 8007e52:	9803      	ldr	r0, [sp, #12]
 8007e54:	aa26      	add	r2, sp, #152	@ 0x98
 8007e56:	4659      	mov	r1, fp
 8007e58:	f004 fa14 	bl	800c284 <__ssprint_r>
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	f040 8346 	bne.w	80084ee <_svfprintf_r+0x12f6>
 8007e62:	ac29      	add	r4, sp, #164	@ 0xa4
 8007e64:	e569      	b.n	800793a <_svfprintf_r+0x742>
 8007e66:	9803      	ldr	r0, [sp, #12]
 8007e68:	aa26      	add	r2, sp, #152	@ 0x98
 8007e6a:	4659      	mov	r1, fp
 8007e6c:	f004 fa0a 	bl	800c284 <__ssprint_r>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	f040 833c 	bne.w	80084ee <_svfprintf_r+0x12f6>
 8007e76:	ac29      	add	r4, sp, #164	@ 0xa4
 8007e78:	e56f      	b.n	800795a <_svfprintf_r+0x762>
 8007e7a:	2010      	movs	r0, #16
 8007e7c:	4403      	add	r3, r0
 8007e7e:	2a07      	cmp	r2, #7
 8007e80:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8007e84:	6060      	str	r0, [r4, #4]
 8007e86:	dd08      	ble.n	8007e9a <_svfprintf_r+0xca2>
 8007e88:	9803      	ldr	r0, [sp, #12]
 8007e8a:	aa26      	add	r2, sp, #152	@ 0x98
 8007e8c:	4659      	mov	r1, fp
 8007e8e:	f004 f9f9 	bl	800c284 <__ssprint_r>
 8007e92:	2800      	cmp	r0, #0
 8007e94:	f040 832b 	bne.w	80084ee <_svfprintf_r+0x12f6>
 8007e98:	a929      	add	r1, sp, #164	@ 0xa4
 8007e9a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007e9c:	3b10      	subs	r3, #16
 8007e9e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ea0:	460c      	mov	r4, r1
 8007ea2:	e563      	b.n	800796c <_svfprintf_r+0x774>
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	e57e      	b.n	80079a6 <_svfprintf_r+0x7ae>
 8007ea8:	2010      	movs	r0, #16
 8007eaa:	4403      	add	r3, r0
 8007eac:	2a07      	cmp	r2, #7
 8007eae:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8007eb2:	6060      	str	r0, [r4, #4]
 8007eb4:	dd08      	ble.n	8007ec8 <_svfprintf_r+0xcd0>
 8007eb6:	9803      	ldr	r0, [sp, #12]
 8007eb8:	aa26      	add	r2, sp, #152	@ 0x98
 8007eba:	4659      	mov	r1, fp
 8007ebc:	f004 f9e2 	bl	800c284 <__ssprint_r>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	f040 8314 	bne.w	80084ee <_svfprintf_r+0x12f6>
 8007ec6:	a929      	add	r1, sp, #164	@ 0xa4
 8007ec8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007eca:	3b10      	subs	r3, #16
 8007ecc:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ece:	460c      	mov	r4, r1
 8007ed0:	e56f      	b.n	80079b2 <_svfprintf_r+0x7ba>
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	e58a      	b.n	80079ec <_svfprintf_r+0x7f4>
 8007ed6:	bf00      	nop
 8007ed8:	0800d3e6 	.word	0x0800d3e6
 8007edc:	0800d3f7 	.word	0x0800d3f7
 8007ee0:	9b06      	ldr	r3, [sp, #24]
 8007ee2:	2b65      	cmp	r3, #101	@ 0x65
 8007ee4:	f340 8246 	ble.w	8008374 <_svfprintf_r+0x117c>
 8007ee8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007eec:	2200      	movs	r2, #0
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f7f8 fdfa 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	d06a      	beq.n	8007fce <_svfprintf_r+0xdd6>
 8007ef8:	4b73      	ldr	r3, [pc, #460]	@ (80080c8 <_svfprintf_r+0xed0>)
 8007efa:	6023      	str	r3, [r4, #0]
 8007efc:	2301      	movs	r3, #1
 8007efe:	6063      	str	r3, [r4, #4]
 8007f00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f02:	3301      	adds	r3, #1
 8007f04:	9328      	str	r3, [sp, #160]	@ 0xa0
 8007f06:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8007f08:	3301      	adds	r3, #1
 8007f0a:	2b07      	cmp	r3, #7
 8007f0c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8007f0e:	dc37      	bgt.n	8007f80 <_svfprintf_r+0xd88>
 8007f10:	3408      	adds	r4, #8
 8007f12:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f14:	9a04      	ldr	r2, [sp, #16]
 8007f16:	4293      	cmp	r3, r2
 8007f18:	db02      	blt.n	8007f20 <_svfprintf_r+0xd28>
 8007f1a:	07ef      	lsls	r7, r5, #31
 8007f1c:	f57f ad76 	bpl.w	8007a0c <_svfprintf_r+0x814>
 8007f20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007f22:	6023      	str	r3, [r4, #0]
 8007f24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f26:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007f28:	6063      	str	r3, [r4, #4]
 8007f2a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8007f2c:	4413      	add	r3, r2
 8007f2e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8007f30:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8007f32:	3301      	adds	r3, #1
 8007f34:	2b07      	cmp	r3, #7
 8007f36:	9327      	str	r3, [sp, #156]	@ 0x9c
 8007f38:	dc2c      	bgt.n	8007f94 <_svfprintf_r+0xd9c>
 8007f3a:	3408      	adds	r4, #8
 8007f3c:	9b04      	ldr	r3, [sp, #16]
 8007f3e:	1e5e      	subs	r6, r3, #1
 8007f40:	2e00      	cmp	r6, #0
 8007f42:	f77f ad63 	ble.w	8007a0c <_svfprintf_r+0x814>
 8007f46:	4f61      	ldr	r7, [pc, #388]	@ (80080cc <_svfprintf_r+0xed4>)
 8007f48:	f04f 0810 	mov.w	r8, #16
 8007f4c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8007f50:	2e10      	cmp	r6, #16
 8007f52:	f103 0301 	add.w	r3, r3, #1
 8007f56:	f104 0108 	add.w	r1, r4, #8
 8007f5a:	6027      	str	r7, [r4, #0]
 8007f5c:	dc24      	bgt.n	8007fa8 <_svfprintf_r+0xdb0>
 8007f5e:	6066      	str	r6, [r4, #4]
 8007f60:	2b07      	cmp	r3, #7
 8007f62:	4416      	add	r6, r2
 8007f64:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8007f68:	f340 82a0 	ble.w	80084ac <_svfprintf_r+0x12b4>
 8007f6c:	9803      	ldr	r0, [sp, #12]
 8007f6e:	aa26      	add	r2, sp, #152	@ 0x98
 8007f70:	4659      	mov	r1, fp
 8007f72:	f004 f987 	bl	800c284 <__ssprint_r>
 8007f76:	2800      	cmp	r0, #0
 8007f78:	f040 82b9 	bne.w	80084ee <_svfprintf_r+0x12f6>
 8007f7c:	ac29      	add	r4, sp, #164	@ 0xa4
 8007f7e:	e545      	b.n	8007a0c <_svfprintf_r+0x814>
 8007f80:	9803      	ldr	r0, [sp, #12]
 8007f82:	aa26      	add	r2, sp, #152	@ 0x98
 8007f84:	4659      	mov	r1, fp
 8007f86:	f004 f97d 	bl	800c284 <__ssprint_r>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	f040 82af 	bne.w	80084ee <_svfprintf_r+0x12f6>
 8007f90:	ac29      	add	r4, sp, #164	@ 0xa4
 8007f92:	e7be      	b.n	8007f12 <_svfprintf_r+0xd1a>
 8007f94:	9803      	ldr	r0, [sp, #12]
 8007f96:	aa26      	add	r2, sp, #152	@ 0x98
 8007f98:	4659      	mov	r1, fp
 8007f9a:	f004 f973 	bl	800c284 <__ssprint_r>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	f040 82a5 	bne.w	80084ee <_svfprintf_r+0x12f6>
 8007fa4:	ac29      	add	r4, sp, #164	@ 0xa4
 8007fa6:	e7c9      	b.n	8007f3c <_svfprintf_r+0xd44>
 8007fa8:	3210      	adds	r2, #16
 8007faa:	2b07      	cmp	r3, #7
 8007fac:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8007fb0:	f8c4 8004 	str.w	r8, [r4, #4]
 8007fb4:	dd08      	ble.n	8007fc8 <_svfprintf_r+0xdd0>
 8007fb6:	9803      	ldr	r0, [sp, #12]
 8007fb8:	aa26      	add	r2, sp, #152	@ 0x98
 8007fba:	4659      	mov	r1, fp
 8007fbc:	f004 f962 	bl	800c284 <__ssprint_r>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	f040 8294 	bne.w	80084ee <_svfprintf_r+0x12f6>
 8007fc6:	a929      	add	r1, sp, #164	@ 0xa4
 8007fc8:	3e10      	subs	r6, #16
 8007fca:	460c      	mov	r4, r1
 8007fcc:	e7be      	b.n	8007f4c <_svfprintf_r+0xd54>
 8007fce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	dc7d      	bgt.n	80080d0 <_svfprintf_r+0xed8>
 8007fd4:	4b3c      	ldr	r3, [pc, #240]	@ (80080c8 <_svfprintf_r+0xed0>)
 8007fd6:	6023      	str	r3, [r4, #0]
 8007fd8:	2301      	movs	r3, #1
 8007fda:	6063      	str	r3, [r4, #4]
 8007fdc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007fde:	3301      	adds	r3, #1
 8007fe0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8007fe2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	2b07      	cmp	r3, #7
 8007fe8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8007fea:	dc46      	bgt.n	800807a <_svfprintf_r+0xe82>
 8007fec:	3408      	adds	r4, #8
 8007fee:	9904      	ldr	r1, [sp, #16]
 8007ff0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007ff2:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8007ff4:	430b      	orrs	r3, r1
 8007ff6:	f005 0101 	and.w	r1, r5, #1
 8007ffa:	430b      	orrs	r3, r1
 8007ffc:	f43f ad06 	beq.w	8007a0c <_svfprintf_r+0x814>
 8008000:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008002:	6023      	str	r3, [r4, #0]
 8008004:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008006:	6063      	str	r3, [r4, #4]
 8008008:	441a      	add	r2, r3
 800800a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800800c:	9228      	str	r2, [sp, #160]	@ 0xa0
 800800e:	3301      	adds	r3, #1
 8008010:	2b07      	cmp	r3, #7
 8008012:	9327      	str	r3, [sp, #156]	@ 0x9c
 8008014:	dc3b      	bgt.n	800808e <_svfprintf_r+0xe96>
 8008016:	f104 0308 	add.w	r3, r4, #8
 800801a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800801c:	2e00      	cmp	r6, #0
 800801e:	da1b      	bge.n	8008058 <_svfprintf_r+0xe60>
 8008020:	4f2a      	ldr	r7, [pc, #168]	@ (80080cc <_svfprintf_r+0xed4>)
 8008022:	4276      	negs	r6, r6
 8008024:	461a      	mov	r2, r3
 8008026:	2410      	movs	r4, #16
 8008028:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 800802c:	2e10      	cmp	r6, #16
 800802e:	f101 0101 	add.w	r1, r1, #1
 8008032:	f103 0308 	add.w	r3, r3, #8
 8008036:	6017      	str	r7, [r2, #0]
 8008038:	dc33      	bgt.n	80080a2 <_svfprintf_r+0xeaa>
 800803a:	6056      	str	r6, [r2, #4]
 800803c:	2907      	cmp	r1, #7
 800803e:	4406      	add	r6, r0
 8008040:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8008044:	dd08      	ble.n	8008058 <_svfprintf_r+0xe60>
 8008046:	9803      	ldr	r0, [sp, #12]
 8008048:	aa26      	add	r2, sp, #152	@ 0x98
 800804a:	4659      	mov	r1, fp
 800804c:	f004 f91a 	bl	800c284 <__ssprint_r>
 8008050:	2800      	cmp	r0, #0
 8008052:	f040 824c 	bne.w	80084ee <_svfprintf_r+0x12f6>
 8008056:	ab29      	add	r3, sp, #164	@ 0xa4
 8008058:	9a04      	ldr	r2, [sp, #16]
 800805a:	9904      	ldr	r1, [sp, #16]
 800805c:	605a      	str	r2, [r3, #4]
 800805e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8008060:	f8c3 9000 	str.w	r9, [r3]
 8008064:	440a      	add	r2, r1
 8008066:	9228      	str	r2, [sp, #160]	@ 0xa0
 8008068:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800806a:	3201      	adds	r2, #1
 800806c:	2a07      	cmp	r2, #7
 800806e:	9227      	str	r2, [sp, #156]	@ 0x9c
 8008070:	f73f af7c 	bgt.w	8007f6c <_svfprintf_r+0xd74>
 8008074:	f103 0408 	add.w	r4, r3, #8
 8008078:	e4c8      	b.n	8007a0c <_svfprintf_r+0x814>
 800807a:	9803      	ldr	r0, [sp, #12]
 800807c:	aa26      	add	r2, sp, #152	@ 0x98
 800807e:	4659      	mov	r1, fp
 8008080:	f004 f900 	bl	800c284 <__ssprint_r>
 8008084:	2800      	cmp	r0, #0
 8008086:	f040 8232 	bne.w	80084ee <_svfprintf_r+0x12f6>
 800808a:	ac29      	add	r4, sp, #164	@ 0xa4
 800808c:	e7af      	b.n	8007fee <_svfprintf_r+0xdf6>
 800808e:	9803      	ldr	r0, [sp, #12]
 8008090:	aa26      	add	r2, sp, #152	@ 0x98
 8008092:	4659      	mov	r1, fp
 8008094:	f004 f8f6 	bl	800c284 <__ssprint_r>
 8008098:	2800      	cmp	r0, #0
 800809a:	f040 8228 	bne.w	80084ee <_svfprintf_r+0x12f6>
 800809e:	ab29      	add	r3, sp, #164	@ 0xa4
 80080a0:	e7bb      	b.n	800801a <_svfprintf_r+0xe22>
 80080a2:	3010      	adds	r0, #16
 80080a4:	2907      	cmp	r1, #7
 80080a6:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 80080aa:	6054      	str	r4, [r2, #4]
 80080ac:	dd08      	ble.n	80080c0 <_svfprintf_r+0xec8>
 80080ae:	9803      	ldr	r0, [sp, #12]
 80080b0:	aa26      	add	r2, sp, #152	@ 0x98
 80080b2:	4659      	mov	r1, fp
 80080b4:	f004 f8e6 	bl	800c284 <__ssprint_r>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	f040 8218 	bne.w	80084ee <_svfprintf_r+0x12f6>
 80080be:	ab29      	add	r3, sp, #164	@ 0xa4
 80080c0:	3e10      	subs	r6, #16
 80080c2:	461a      	mov	r2, r3
 80080c4:	e7b0      	b.n	8008028 <_svfprintf_r+0xe30>
 80080c6:	bf00      	nop
 80080c8:	0800d408 	.word	0x0800d408
 80080cc:	0800d40a 	.word	0x0800d40a
 80080d0:	9b04      	ldr	r3, [sp, #16]
 80080d2:	444b      	add	r3, r9
 80080d4:	9306      	str	r3, [sp, #24]
 80080d6:	9b04      	ldr	r3, [sp, #16]
 80080d8:	42b3      	cmp	r3, r6
 80080da:	bfa8      	it	ge
 80080dc:	4633      	movge	r3, r6
 80080de:	2b00      	cmp	r3, #0
 80080e0:	4698      	mov	r8, r3
 80080e2:	dd0b      	ble.n	80080fc <_svfprintf_r+0xf04>
 80080e4:	e9c4 9300 	strd	r9, r3, [r4]
 80080e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80080ea:	4443      	add	r3, r8
 80080ec:	9328      	str	r3, [sp, #160]	@ 0xa0
 80080ee:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80080f0:	3301      	adds	r3, #1
 80080f2:	2b07      	cmp	r3, #7
 80080f4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80080f6:	f300 8089 	bgt.w	800820c <_svfprintf_r+0x1014>
 80080fa:	3408      	adds	r4, #8
 80080fc:	4643      	mov	r3, r8
 80080fe:	2b00      	cmp	r3, #0
 8008100:	bfac      	ite	ge
 8008102:	eba6 0808 	subge.w	r8, r6, r8
 8008106:	46b0      	movlt	r8, r6
 8008108:	f1b8 0f00 	cmp.w	r8, #0
 800810c:	dd1b      	ble.n	8008146 <_svfprintf_r+0xf4e>
 800810e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8008112:	4897      	ldr	r0, [pc, #604]	@ (8008370 <_svfprintf_r+0x1178>)
 8008114:	6020      	str	r0, [r4, #0]
 8008116:	f1b8 0f10 	cmp.w	r8, #16
 800811a:	f102 0201 	add.w	r2, r2, #1
 800811e:	f104 0108 	add.w	r1, r4, #8
 8008122:	dc7d      	bgt.n	8008220 <_svfprintf_r+0x1028>
 8008124:	4443      	add	r3, r8
 8008126:	2a07      	cmp	r2, #7
 8008128:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800812c:	f8c4 8004 	str.w	r8, [r4, #4]
 8008130:	f340 808a 	ble.w	8008248 <_svfprintf_r+0x1050>
 8008134:	9803      	ldr	r0, [sp, #12]
 8008136:	aa26      	add	r2, sp, #152	@ 0x98
 8008138:	4659      	mov	r1, fp
 800813a:	f004 f8a3 	bl	800c284 <__ssprint_r>
 800813e:	2800      	cmp	r0, #0
 8008140:	f040 81d5 	bne.w	80084ee <_svfprintf_r+0x12f6>
 8008144:	ac29      	add	r4, sp, #164	@ 0xa4
 8008146:	eb09 0806 	add.w	r8, r9, r6
 800814a:	056e      	lsls	r6, r5, #21
 800814c:	d508      	bpl.n	8008160 <_svfprintf_r+0xf68>
 800814e:	9b08      	ldr	r3, [sp, #32]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d17b      	bne.n	800824c <_svfprintf_r+0x1054>
 8008154:	2f00      	cmp	r7, #0
 8008156:	d17b      	bne.n	8008250 <_svfprintf_r+0x1058>
 8008158:	9b06      	ldr	r3, [sp, #24]
 800815a:	4598      	cmp	r8, r3
 800815c:	bf28      	it	cs
 800815e:	4698      	movcs	r8, r3
 8008160:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008162:	9a04      	ldr	r2, [sp, #16]
 8008164:	4293      	cmp	r3, r2
 8008166:	db01      	blt.n	800816c <_svfprintf_r+0xf74>
 8008168:	07e8      	lsls	r0, r5, #31
 800816a:	d50e      	bpl.n	800818a <_svfprintf_r+0xf92>
 800816c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800816e:	6023      	str	r3, [r4, #0]
 8008170:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008172:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008174:	6063      	str	r3, [r4, #4]
 8008176:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8008178:	4413      	add	r3, r2
 800817a:	9328      	str	r3, [sp, #160]	@ 0xa0
 800817c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800817e:	3301      	adds	r3, #1
 8008180:	2b07      	cmp	r3, #7
 8008182:	9327      	str	r3, [sp, #156]	@ 0x9c
 8008184:	f300 80df 	bgt.w	8008346 <_svfprintf_r+0x114e>
 8008188:	3408      	adds	r4, #8
 800818a:	9b04      	ldr	r3, [sp, #16]
 800818c:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 800818e:	1bdf      	subs	r7, r3, r7
 8008190:	9b06      	ldr	r3, [sp, #24]
 8008192:	eba3 0308 	sub.w	r3, r3, r8
 8008196:	429f      	cmp	r7, r3
 8008198:	bfa8      	it	ge
 800819a:	461f      	movge	r7, r3
 800819c:	2f00      	cmp	r7, #0
 800819e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80081a0:	dd0a      	ble.n	80081b8 <_svfprintf_r+0xfc0>
 80081a2:	443b      	add	r3, r7
 80081a4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80081a6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80081a8:	3301      	adds	r3, #1
 80081aa:	2b07      	cmp	r3, #7
 80081ac:	e9c4 8700 	strd	r8, r7, [r4]
 80081b0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80081b2:	f300 80d2 	bgt.w	800835a <_svfprintf_r+0x1162>
 80081b6:	3408      	adds	r4, #8
 80081b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80081ba:	9b04      	ldr	r3, [sp, #16]
 80081bc:	2f00      	cmp	r7, #0
 80081be:	eba3 0606 	sub.w	r6, r3, r6
 80081c2:	bfa8      	it	ge
 80081c4:	1bf6      	subge	r6, r6, r7
 80081c6:	2e00      	cmp	r6, #0
 80081c8:	f77f ac20 	ble.w	8007a0c <_svfprintf_r+0x814>
 80081cc:	4f68      	ldr	r7, [pc, #416]	@ (8008370 <_svfprintf_r+0x1178>)
 80081ce:	f04f 0810 	mov.w	r8, #16
 80081d2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80081d6:	2e10      	cmp	r6, #16
 80081d8:	f103 0301 	add.w	r3, r3, #1
 80081dc:	f104 0108 	add.w	r1, r4, #8
 80081e0:	6027      	str	r7, [r4, #0]
 80081e2:	f77f aebc 	ble.w	8007f5e <_svfprintf_r+0xd66>
 80081e6:	3210      	adds	r2, #16
 80081e8:	2b07      	cmp	r3, #7
 80081ea:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80081ee:	f8c4 8004 	str.w	r8, [r4, #4]
 80081f2:	dd08      	ble.n	8008206 <_svfprintf_r+0x100e>
 80081f4:	9803      	ldr	r0, [sp, #12]
 80081f6:	aa26      	add	r2, sp, #152	@ 0x98
 80081f8:	4659      	mov	r1, fp
 80081fa:	f004 f843 	bl	800c284 <__ssprint_r>
 80081fe:	2800      	cmp	r0, #0
 8008200:	f040 8175 	bne.w	80084ee <_svfprintf_r+0x12f6>
 8008204:	a929      	add	r1, sp, #164	@ 0xa4
 8008206:	3e10      	subs	r6, #16
 8008208:	460c      	mov	r4, r1
 800820a:	e7e2      	b.n	80081d2 <_svfprintf_r+0xfda>
 800820c:	9803      	ldr	r0, [sp, #12]
 800820e:	aa26      	add	r2, sp, #152	@ 0x98
 8008210:	4659      	mov	r1, fp
 8008212:	f004 f837 	bl	800c284 <__ssprint_r>
 8008216:	2800      	cmp	r0, #0
 8008218:	f040 8169 	bne.w	80084ee <_svfprintf_r+0x12f6>
 800821c:	ac29      	add	r4, sp, #164	@ 0xa4
 800821e:	e76d      	b.n	80080fc <_svfprintf_r+0xf04>
 8008220:	2010      	movs	r0, #16
 8008222:	4403      	add	r3, r0
 8008224:	2a07      	cmp	r2, #7
 8008226:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800822a:	6060      	str	r0, [r4, #4]
 800822c:	dd08      	ble.n	8008240 <_svfprintf_r+0x1048>
 800822e:	9803      	ldr	r0, [sp, #12]
 8008230:	aa26      	add	r2, sp, #152	@ 0x98
 8008232:	4659      	mov	r1, fp
 8008234:	f004 f826 	bl	800c284 <__ssprint_r>
 8008238:	2800      	cmp	r0, #0
 800823a:	f040 8158 	bne.w	80084ee <_svfprintf_r+0x12f6>
 800823e:	a929      	add	r1, sp, #164	@ 0xa4
 8008240:	f1a8 0810 	sub.w	r8, r8, #16
 8008244:	460c      	mov	r4, r1
 8008246:	e762      	b.n	800810e <_svfprintf_r+0xf16>
 8008248:	460c      	mov	r4, r1
 800824a:	e77c      	b.n	8008146 <_svfprintf_r+0xf4e>
 800824c:	2f00      	cmp	r7, #0
 800824e:	d04a      	beq.n	80082e6 <_svfprintf_r+0x10ee>
 8008250:	3f01      	subs	r7, #1
 8008252:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008254:	6023      	str	r3, [r4, #0]
 8008256:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008258:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800825a:	6063      	str	r3, [r4, #4]
 800825c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800825e:	4413      	add	r3, r2
 8008260:	9328      	str	r3, [sp, #160]	@ 0xa0
 8008262:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8008264:	3301      	adds	r3, #1
 8008266:	2b07      	cmp	r3, #7
 8008268:	9327      	str	r3, [sp, #156]	@ 0x9c
 800826a:	dc43      	bgt.n	80082f4 <_svfprintf_r+0x10fc>
 800826c:	3408      	adds	r4, #8
 800826e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008270:	781a      	ldrb	r2, [r3, #0]
 8008272:	9b06      	ldr	r3, [sp, #24]
 8008274:	eba3 0308 	sub.w	r3, r3, r8
 8008278:	429a      	cmp	r2, r3
 800827a:	bfa8      	it	ge
 800827c:	461a      	movge	r2, r3
 800827e:	2a00      	cmp	r2, #0
 8008280:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8008282:	4691      	mov	r9, r2
 8008284:	dd09      	ble.n	800829a <_svfprintf_r+0x10a2>
 8008286:	4413      	add	r3, r2
 8008288:	9328      	str	r3, [sp, #160]	@ 0xa0
 800828a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800828c:	3301      	adds	r3, #1
 800828e:	2b07      	cmp	r3, #7
 8008290:	e9c4 8200 	strd	r8, r2, [r4]
 8008294:	9327      	str	r3, [sp, #156]	@ 0x9c
 8008296:	dc37      	bgt.n	8008308 <_svfprintf_r+0x1110>
 8008298:	3408      	adds	r4, #8
 800829a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800829c:	781e      	ldrb	r6, [r3, #0]
 800829e:	f1b9 0f00 	cmp.w	r9, #0
 80082a2:	bfa8      	it	ge
 80082a4:	eba6 0609 	subge.w	r6, r6, r9
 80082a8:	2e00      	cmp	r6, #0
 80082aa:	dd18      	ble.n	80082de <_svfprintf_r+0x10e6>
 80082ac:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80082b0:	482f      	ldr	r0, [pc, #188]	@ (8008370 <_svfprintf_r+0x1178>)
 80082b2:	6020      	str	r0, [r4, #0]
 80082b4:	2e10      	cmp	r6, #16
 80082b6:	f103 0301 	add.w	r3, r3, #1
 80082ba:	f104 0108 	add.w	r1, r4, #8
 80082be:	dc2d      	bgt.n	800831c <_svfprintf_r+0x1124>
 80082c0:	6066      	str	r6, [r4, #4]
 80082c2:	2b07      	cmp	r3, #7
 80082c4:	4416      	add	r6, r2
 80082c6:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80082ca:	dd3a      	ble.n	8008342 <_svfprintf_r+0x114a>
 80082cc:	9803      	ldr	r0, [sp, #12]
 80082ce:	aa26      	add	r2, sp, #152	@ 0x98
 80082d0:	4659      	mov	r1, fp
 80082d2:	f003 ffd7 	bl	800c284 <__ssprint_r>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	f040 8109 	bne.w	80084ee <_svfprintf_r+0x12f6>
 80082dc:	ac29      	add	r4, sp, #164	@ 0xa4
 80082de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	4498      	add	r8, r3
 80082e4:	e733      	b.n	800814e <_svfprintf_r+0xf56>
 80082e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e8:	3b01      	subs	r3, #1
 80082ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80082ec:	9b08      	ldr	r3, [sp, #32]
 80082ee:	3b01      	subs	r3, #1
 80082f0:	9308      	str	r3, [sp, #32]
 80082f2:	e7ae      	b.n	8008252 <_svfprintf_r+0x105a>
 80082f4:	9803      	ldr	r0, [sp, #12]
 80082f6:	aa26      	add	r2, sp, #152	@ 0x98
 80082f8:	4659      	mov	r1, fp
 80082fa:	f003 ffc3 	bl	800c284 <__ssprint_r>
 80082fe:	2800      	cmp	r0, #0
 8008300:	f040 80f5 	bne.w	80084ee <_svfprintf_r+0x12f6>
 8008304:	ac29      	add	r4, sp, #164	@ 0xa4
 8008306:	e7b2      	b.n	800826e <_svfprintf_r+0x1076>
 8008308:	9803      	ldr	r0, [sp, #12]
 800830a:	aa26      	add	r2, sp, #152	@ 0x98
 800830c:	4659      	mov	r1, fp
 800830e:	f003 ffb9 	bl	800c284 <__ssprint_r>
 8008312:	2800      	cmp	r0, #0
 8008314:	f040 80eb 	bne.w	80084ee <_svfprintf_r+0x12f6>
 8008318:	ac29      	add	r4, sp, #164	@ 0xa4
 800831a:	e7be      	b.n	800829a <_svfprintf_r+0x10a2>
 800831c:	2010      	movs	r0, #16
 800831e:	4402      	add	r2, r0
 8008320:	2b07      	cmp	r3, #7
 8008322:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8008326:	6060      	str	r0, [r4, #4]
 8008328:	dd08      	ble.n	800833c <_svfprintf_r+0x1144>
 800832a:	9803      	ldr	r0, [sp, #12]
 800832c:	aa26      	add	r2, sp, #152	@ 0x98
 800832e:	4659      	mov	r1, fp
 8008330:	f003 ffa8 	bl	800c284 <__ssprint_r>
 8008334:	2800      	cmp	r0, #0
 8008336:	f040 80da 	bne.w	80084ee <_svfprintf_r+0x12f6>
 800833a:	a929      	add	r1, sp, #164	@ 0xa4
 800833c:	3e10      	subs	r6, #16
 800833e:	460c      	mov	r4, r1
 8008340:	e7b4      	b.n	80082ac <_svfprintf_r+0x10b4>
 8008342:	460c      	mov	r4, r1
 8008344:	e7cb      	b.n	80082de <_svfprintf_r+0x10e6>
 8008346:	9803      	ldr	r0, [sp, #12]
 8008348:	aa26      	add	r2, sp, #152	@ 0x98
 800834a:	4659      	mov	r1, fp
 800834c:	f003 ff9a 	bl	800c284 <__ssprint_r>
 8008350:	2800      	cmp	r0, #0
 8008352:	f040 80cc 	bne.w	80084ee <_svfprintf_r+0x12f6>
 8008356:	ac29      	add	r4, sp, #164	@ 0xa4
 8008358:	e717      	b.n	800818a <_svfprintf_r+0xf92>
 800835a:	9803      	ldr	r0, [sp, #12]
 800835c:	aa26      	add	r2, sp, #152	@ 0x98
 800835e:	4659      	mov	r1, fp
 8008360:	f003 ff90 	bl	800c284 <__ssprint_r>
 8008364:	2800      	cmp	r0, #0
 8008366:	f040 80c2 	bne.w	80084ee <_svfprintf_r+0x12f6>
 800836a:	ac29      	add	r4, sp, #164	@ 0xa4
 800836c:	e724      	b.n	80081b8 <_svfprintf_r+0xfc0>
 800836e:	bf00      	nop
 8008370:	0800d40a 	.word	0x0800d40a
 8008374:	9904      	ldr	r1, [sp, #16]
 8008376:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008378:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800837a:	2901      	cmp	r1, #1
 800837c:	f103 0301 	add.w	r3, r3, #1
 8008380:	f102 0201 	add.w	r2, r2, #1
 8008384:	f104 0608 	add.w	r6, r4, #8
 8008388:	dc02      	bgt.n	8008390 <_svfprintf_r+0x1198>
 800838a:	07e9      	lsls	r1, r5, #31
 800838c:	f140 8083 	bpl.w	8008496 <_svfprintf_r+0x129e>
 8008390:	2101      	movs	r1, #1
 8008392:	2a07      	cmp	r2, #7
 8008394:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8008398:	f8c4 9000 	str.w	r9, [r4]
 800839c:	6061      	str	r1, [r4, #4]
 800839e:	dd08      	ble.n	80083b2 <_svfprintf_r+0x11ba>
 80083a0:	9803      	ldr	r0, [sp, #12]
 80083a2:	aa26      	add	r2, sp, #152	@ 0x98
 80083a4:	4659      	mov	r1, fp
 80083a6:	f003 ff6d 	bl	800c284 <__ssprint_r>
 80083aa:	2800      	cmp	r0, #0
 80083ac:	f040 809f 	bne.w	80084ee <_svfprintf_r+0x12f6>
 80083b0:	ae29      	add	r6, sp, #164	@ 0xa4
 80083b2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80083b4:	6033      	str	r3, [r6, #0]
 80083b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80083ba:	6073      	str	r3, [r6, #4]
 80083bc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80083be:	4413      	add	r3, r2
 80083c0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80083c2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80083c4:	3301      	adds	r3, #1
 80083c6:	2b07      	cmp	r3, #7
 80083c8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80083ca:	dc33      	bgt.n	8008434 <_svfprintf_r+0x123c>
 80083cc:	3608      	adds	r6, #8
 80083ce:	9b04      	ldr	r3, [sp, #16]
 80083d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80083d4:	1e5c      	subs	r4, r3, #1
 80083d6:	2200      	movs	r2, #0
 80083d8:	2300      	movs	r3, #0
 80083da:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 80083de:	f7f8 fb83 	bl	8000ae8 <__aeabi_dcmpeq>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	d12f      	bne.n	8008446 <_svfprintf_r+0x124e>
 80083e6:	f109 0201 	add.w	r2, r9, #1
 80083ea:	e9c6 2400 	strd	r2, r4, [r6]
 80083ee:	9a04      	ldr	r2, [sp, #16]
 80083f0:	f108 0301 	add.w	r3, r8, #1
 80083f4:	3f01      	subs	r7, #1
 80083f6:	4417      	add	r7, r2
 80083f8:	2b07      	cmp	r3, #7
 80083fa:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 80083fe:	dd53      	ble.n	80084a8 <_svfprintf_r+0x12b0>
 8008400:	9803      	ldr	r0, [sp, #12]
 8008402:	aa26      	add	r2, sp, #152	@ 0x98
 8008404:	4659      	mov	r1, fp
 8008406:	f003 ff3d 	bl	800c284 <__ssprint_r>
 800840a:	2800      	cmp	r0, #0
 800840c:	d16f      	bne.n	80084ee <_svfprintf_r+0x12f6>
 800840e:	ae29      	add	r6, sp, #164	@ 0xa4
 8008410:	ab22      	add	r3, sp, #136	@ 0x88
 8008412:	6033      	str	r3, [r6, #0]
 8008414:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8008416:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008418:	6073      	str	r3, [r6, #4]
 800841a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800841c:	4413      	add	r3, r2
 800841e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8008420:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8008422:	3301      	adds	r3, #1
 8008424:	2b07      	cmp	r3, #7
 8008426:	9327      	str	r3, [sp, #156]	@ 0x9c
 8008428:	f73f ada0 	bgt.w	8007f6c <_svfprintf_r+0xd74>
 800842c:	f106 0408 	add.w	r4, r6, #8
 8008430:	f7ff baec 	b.w	8007a0c <_svfprintf_r+0x814>
 8008434:	9803      	ldr	r0, [sp, #12]
 8008436:	aa26      	add	r2, sp, #152	@ 0x98
 8008438:	4659      	mov	r1, fp
 800843a:	f003 ff23 	bl	800c284 <__ssprint_r>
 800843e:	2800      	cmp	r0, #0
 8008440:	d155      	bne.n	80084ee <_svfprintf_r+0x12f6>
 8008442:	ae29      	add	r6, sp, #164	@ 0xa4
 8008444:	e7c3      	b.n	80083ce <_svfprintf_r+0x11d6>
 8008446:	9b04      	ldr	r3, [sp, #16]
 8008448:	2b01      	cmp	r3, #1
 800844a:	dde1      	ble.n	8008410 <_svfprintf_r+0x1218>
 800844c:	4f57      	ldr	r7, [pc, #348]	@ (80085ac <_svfprintf_r+0x13b4>)
 800844e:	f04f 0810 	mov.w	r8, #16
 8008452:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8008456:	2c10      	cmp	r4, #16
 8008458:	f103 0301 	add.w	r3, r3, #1
 800845c:	f106 0108 	add.w	r1, r6, #8
 8008460:	6037      	str	r7, [r6, #0]
 8008462:	dc07      	bgt.n	8008474 <_svfprintf_r+0x127c>
 8008464:	6074      	str	r4, [r6, #4]
 8008466:	2b07      	cmp	r3, #7
 8008468:	4414      	add	r4, r2
 800846a:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 800846e:	dcc7      	bgt.n	8008400 <_svfprintf_r+0x1208>
 8008470:	460e      	mov	r6, r1
 8008472:	e7cd      	b.n	8008410 <_svfprintf_r+0x1218>
 8008474:	3210      	adds	r2, #16
 8008476:	2b07      	cmp	r3, #7
 8008478:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800847c:	f8c6 8004 	str.w	r8, [r6, #4]
 8008480:	dd06      	ble.n	8008490 <_svfprintf_r+0x1298>
 8008482:	9803      	ldr	r0, [sp, #12]
 8008484:	aa26      	add	r2, sp, #152	@ 0x98
 8008486:	4659      	mov	r1, fp
 8008488:	f003 fefc 	bl	800c284 <__ssprint_r>
 800848c:	bb78      	cbnz	r0, 80084ee <_svfprintf_r+0x12f6>
 800848e:	a929      	add	r1, sp, #164	@ 0xa4
 8008490:	3c10      	subs	r4, #16
 8008492:	460e      	mov	r6, r1
 8008494:	e7dd      	b.n	8008452 <_svfprintf_r+0x125a>
 8008496:	2101      	movs	r1, #1
 8008498:	2a07      	cmp	r2, #7
 800849a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800849e:	f8c4 9000 	str.w	r9, [r4]
 80084a2:	6061      	str	r1, [r4, #4]
 80084a4:	ddb4      	ble.n	8008410 <_svfprintf_r+0x1218>
 80084a6:	e7ab      	b.n	8008400 <_svfprintf_r+0x1208>
 80084a8:	3608      	adds	r6, #8
 80084aa:	e7b1      	b.n	8008410 <_svfprintf_r+0x1218>
 80084ac:	460c      	mov	r4, r1
 80084ae:	f7ff baad 	b.w	8007a0c <_svfprintf_r+0x814>
 80084b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084b4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80084b6:	1a9d      	subs	r5, r3, r2
 80084b8:	2d00      	cmp	r5, #0
 80084ba:	f77f aaaa 	ble.w	8007a12 <_svfprintf_r+0x81a>
 80084be:	4e3c      	ldr	r6, [pc, #240]	@ (80085b0 <_svfprintf_r+0x13b8>)
 80084c0:	2710      	movs	r7, #16
 80084c2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80084c6:	2d10      	cmp	r5, #16
 80084c8:	f103 0301 	add.w	r3, r3, #1
 80084cc:	6026      	str	r6, [r4, #0]
 80084ce:	dc18      	bgt.n	8008502 <_svfprintf_r+0x130a>
 80084d0:	442a      	add	r2, r5
 80084d2:	2b07      	cmp	r3, #7
 80084d4:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80084d8:	6065      	str	r5, [r4, #4]
 80084da:	f77f aa9a 	ble.w	8007a12 <_svfprintf_r+0x81a>
 80084de:	9803      	ldr	r0, [sp, #12]
 80084e0:	aa26      	add	r2, sp, #152	@ 0x98
 80084e2:	4659      	mov	r1, fp
 80084e4:	f003 fece 	bl	800c284 <__ssprint_r>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	f43f aa92 	beq.w	8007a12 <_svfprintf_r+0x81a>
 80084ee:	f1ba 0f00 	cmp.w	sl, #0
 80084f2:	f43f a89a 	beq.w	800762a <_svfprintf_r+0x432>
 80084f6:	9803      	ldr	r0, [sp, #12]
 80084f8:	4651      	mov	r1, sl
 80084fa:	f7fe fdbd 	bl	8007078 <_free_r>
 80084fe:	f7ff b894 	b.w	800762a <_svfprintf_r+0x432>
 8008502:	3210      	adds	r2, #16
 8008504:	2b07      	cmp	r3, #7
 8008506:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800850a:	6067      	str	r7, [r4, #4]
 800850c:	dc02      	bgt.n	8008514 <_svfprintf_r+0x131c>
 800850e:	3408      	adds	r4, #8
 8008510:	3d10      	subs	r5, #16
 8008512:	e7d6      	b.n	80084c2 <_svfprintf_r+0x12ca>
 8008514:	9803      	ldr	r0, [sp, #12]
 8008516:	aa26      	add	r2, sp, #152	@ 0x98
 8008518:	4659      	mov	r1, fp
 800851a:	f003 feb3 	bl	800c284 <__ssprint_r>
 800851e:	2800      	cmp	r0, #0
 8008520:	d1e5      	bne.n	80084ee <_svfprintf_r+0x12f6>
 8008522:	ac29      	add	r4, sp, #164	@ 0xa4
 8008524:	e7f4      	b.n	8008510 <_svfprintf_r+0x1318>
 8008526:	9803      	ldr	r0, [sp, #12]
 8008528:	4651      	mov	r1, sl
 800852a:	f7fe fda5 	bl	8007078 <_free_r>
 800852e:	f7ff ba88 	b.w	8007a42 <_svfprintf_r+0x84a>
 8008532:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8008534:	2b00      	cmp	r3, #0
 8008536:	f43f a878 	beq.w	800762a <_svfprintf_r+0x432>
 800853a:	9803      	ldr	r0, [sp, #12]
 800853c:	aa26      	add	r2, sp, #152	@ 0x98
 800853e:	4659      	mov	r1, fp
 8008540:	f003 fea0 	bl	800c284 <__ssprint_r>
 8008544:	f7ff b871 	b.w	800762a <_svfprintf_r+0x432>
 8008548:	ea56 0207 	orrs.w	r2, r6, r7
 800854c:	9508      	str	r5, [sp, #32]
 800854e:	f43f ab7a 	beq.w	8007c46 <_svfprintf_r+0xa4e>
 8008552:	2b01      	cmp	r3, #1
 8008554:	f43f abfb 	beq.w	8007d4e <_svfprintf_r+0xb56>
 8008558:	2b02      	cmp	r3, #2
 800855a:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800855e:	f43f ac3f 	beq.w	8007de0 <_svfprintf_r+0xbe8>
 8008562:	f006 0307 	and.w	r3, r6, #7
 8008566:	08f6      	lsrs	r6, r6, #3
 8008568:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800856c:	08ff      	lsrs	r7, r7, #3
 800856e:	3330      	adds	r3, #48	@ 0x30
 8008570:	ea56 0107 	orrs.w	r1, r6, r7
 8008574:	464a      	mov	r2, r9
 8008576:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800857a:	d1f2      	bne.n	8008562 <_svfprintf_r+0x136a>
 800857c:	9908      	ldr	r1, [sp, #32]
 800857e:	07c8      	lsls	r0, r1, #31
 8008580:	d506      	bpl.n	8008590 <_svfprintf_r+0x1398>
 8008582:	2b30      	cmp	r3, #48	@ 0x30
 8008584:	d004      	beq.n	8008590 <_svfprintf_r+0x1398>
 8008586:	2330      	movs	r3, #48	@ 0x30
 8008588:	f809 3c01 	strb.w	r3, [r9, #-1]
 800858c:	f1a2 0902 	sub.w	r9, r2, #2
 8008590:	ab52      	add	r3, sp, #328	@ 0x148
 8008592:	9d08      	ldr	r5, [sp, #32]
 8008594:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8008598:	f04f 0a00 	mov.w	sl, #0
 800859c:	eba3 0809 	sub.w	r8, r3, r9
 80085a0:	4657      	mov	r7, sl
 80085a2:	f8cd a020 	str.w	sl, [sp, #32]
 80085a6:	4656      	mov	r6, sl
 80085a8:	f7ff b97c 	b.w	80078a4 <_svfprintf_r+0x6ac>
 80085ac:	0800d40a 	.word	0x0800d40a
 80085b0:	0800d41a 	.word	0x0800d41a
 80085b4:	00000000 	.word	0x00000000

080085b8 <_vfprintf_r>:
 80085b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	b0d3      	sub	sp, #332	@ 0x14c
 80085be:	468b      	mov	fp, r1
 80085c0:	4690      	mov	r8, r2
 80085c2:	461c      	mov	r4, r3
 80085c4:	461e      	mov	r6, r3
 80085c6:	9003      	str	r0, [sp, #12]
 80085c8:	f002 fa86 	bl	800aad8 <_localeconv_r>
 80085cc:	6803      	ldr	r3, [r0, #0]
 80085ce:	9316      	str	r3, [sp, #88]	@ 0x58
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7f7 fe07 	bl	80001e4 <strlen>
 80085d6:	9b03      	ldr	r3, [sp, #12]
 80085d8:	900d      	str	r0, [sp, #52]	@ 0x34
 80085da:	b123      	cbz	r3, 80085e6 <_vfprintf_r+0x2e>
 80085dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085de:	b913      	cbnz	r3, 80085e6 <_vfprintf_r+0x2e>
 80085e0:	9803      	ldr	r0, [sp, #12]
 80085e2:	f7fe fa99 	bl	8006b18 <__sinit>
 80085e6:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80085ea:	07da      	lsls	r2, r3, #31
 80085ec:	d407      	bmi.n	80085fe <_vfprintf_r+0x46>
 80085ee:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80085f2:	059b      	lsls	r3, r3, #22
 80085f4:	d403      	bmi.n	80085fe <_vfprintf_r+0x46>
 80085f6:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 80085fa:	f7fe fcbb 	bl	8006f74 <__retarget_lock_acquire_recursive>
 80085fe:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8008602:	049f      	lsls	r7, r3, #18
 8008604:	d409      	bmi.n	800861a <_vfprintf_r+0x62>
 8008606:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800860a:	f8ab 300c 	strh.w	r3, [fp, #12]
 800860e:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8008612:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008616:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 800861a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800861e:	071d      	lsls	r5, r3, #28
 8008620:	d502      	bpl.n	8008628 <_vfprintf_r+0x70>
 8008622:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008626:	b9c3      	cbnz	r3, 800865a <_vfprintf_r+0xa2>
 8008628:	9803      	ldr	r0, [sp, #12]
 800862a:	4659      	mov	r1, fp
 800862c:	f002 f97a 	bl	800a924 <__swsetup_r>
 8008630:	b198      	cbz	r0, 800865a <_vfprintf_r+0xa2>
 8008632:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8008636:	07d8      	lsls	r0, r3, #31
 8008638:	d506      	bpl.n	8008648 <_vfprintf_r+0x90>
 800863a:	f04f 33ff 	mov.w	r3, #4294967295
 800863e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008640:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8008642:	b053      	add	sp, #332	@ 0x14c
 8008644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008648:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800864c:	0599      	lsls	r1, r3, #22
 800864e:	d4f4      	bmi.n	800863a <_vfprintf_r+0x82>
 8008650:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8008654:	f7fe fc8f 	bl	8006f76 <__retarget_lock_release_recursive>
 8008658:	e7ef      	b.n	800863a <_vfprintf_r+0x82>
 800865a:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 800865e:	f003 021a 	and.w	r2, r3, #26
 8008662:	2a0a      	cmp	r2, #10
 8008664:	d116      	bne.n	8008694 <_vfprintf_r+0xdc>
 8008666:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 800866a:	2a00      	cmp	r2, #0
 800866c:	db12      	blt.n	8008694 <_vfprintf_r+0xdc>
 800866e:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 8008672:	07d2      	lsls	r2, r2, #31
 8008674:	d405      	bmi.n	8008682 <_vfprintf_r+0xca>
 8008676:	059b      	lsls	r3, r3, #22
 8008678:	d403      	bmi.n	8008682 <_vfprintf_r+0xca>
 800867a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800867e:	f7fe fc7a 	bl	8006f76 <__retarget_lock_release_recursive>
 8008682:	9803      	ldr	r0, [sp, #12]
 8008684:	4623      	mov	r3, r4
 8008686:	4642      	mov	r2, r8
 8008688:	4659      	mov	r1, fp
 800868a:	b053      	add	sp, #332	@ 0x14c
 800868c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008690:	f001 b9be 	b.w	8009a10 <__sbprintf>
 8008694:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 80088e0 <_vfprintf_r+0x328>
 8008698:	2300      	movs	r3, #0
 800869a:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 800869e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80086a2:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 80086a6:	ac29      	add	r4, sp, #164	@ 0xa4
 80086a8:	9426      	str	r4, [sp, #152]	@ 0x98
 80086aa:	9304      	str	r3, [sp, #16]
 80086ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80086b0:	9317      	str	r3, [sp, #92]	@ 0x5c
 80086b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80086b4:	4643      	mov	r3, r8
 80086b6:	461d      	mov	r5, r3
 80086b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086bc:	b10a      	cbz	r2, 80086c2 <_vfprintf_r+0x10a>
 80086be:	2a25      	cmp	r2, #37	@ 0x25
 80086c0:	d1f9      	bne.n	80086b6 <_vfprintf_r+0xfe>
 80086c2:	ebb5 0708 	subs.w	r7, r5, r8
 80086c6:	d00d      	beq.n	80086e4 <_vfprintf_r+0x12c>
 80086c8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80086ca:	443b      	add	r3, r7
 80086cc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80086ce:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80086d0:	3301      	adds	r3, #1
 80086d2:	2b07      	cmp	r3, #7
 80086d4:	e9c4 8700 	strd	r8, r7, [r4]
 80086d8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80086da:	dc75      	bgt.n	80087c8 <_vfprintf_r+0x210>
 80086dc:	3408      	adds	r4, #8
 80086de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086e0:	443b      	add	r3, r7
 80086e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80086e4:	782b      	ldrb	r3, [r5, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f001 814f 	beq.w	800998a <_vfprintf_r+0x13d2>
 80086ec:	2200      	movs	r2, #0
 80086ee:	1c6b      	adds	r3, r5, #1
 80086f0:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 80086f4:	f04f 39ff 	mov.w	r9, #4294967295
 80086f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80086fa:	4615      	mov	r5, r2
 80086fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008700:	9206      	str	r2, [sp, #24]
 8008702:	930c      	str	r3, [sp, #48]	@ 0x30
 8008704:	9b06      	ldr	r3, [sp, #24]
 8008706:	3b20      	subs	r3, #32
 8008708:	2b5a      	cmp	r3, #90	@ 0x5a
 800870a:	f200 85aa 	bhi.w	8009262 <_vfprintf_r+0xcaa>
 800870e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008712:	009d      	.short	0x009d
 8008714:	05a805a8 	.word	0x05a805a8
 8008718:	05a800a5 	.word	0x05a800a5
 800871c:	05a805a8 	.word	0x05a805a8
 8008720:	05a80085 	.word	0x05a80085
 8008724:	00a805a8 	.word	0x00a805a8
 8008728:	05a800b2 	.word	0x05a800b2
 800872c:	00b400af 	.word	0x00b400af
 8008730:	00ce05a8 	.word	0x00ce05a8
 8008734:	00d100d1 	.word	0x00d100d1
 8008738:	00d100d1 	.word	0x00d100d1
 800873c:	00d100d1 	.word	0x00d100d1
 8008740:	00d100d1 	.word	0x00d100d1
 8008744:	05a800d1 	.word	0x05a800d1
 8008748:	05a805a8 	.word	0x05a805a8
 800874c:	05a805a8 	.word	0x05a805a8
 8008750:	05a805a8 	.word	0x05a805a8
 8008754:	05a80146 	.word	0x05a80146
 8008758:	011a0107 	.word	0x011a0107
 800875c:	01460146 	.word	0x01460146
 8008760:	05a80146 	.word	0x05a80146
 8008764:	05a805a8 	.word	0x05a805a8
 8008768:	00e205a8 	.word	0x00e205a8
 800876c:	05a805a8 	.word	0x05a805a8
 8008770:	05a804a3 	.word	0x05a804a3
 8008774:	05a805a8 	.word	0x05a805a8
 8008778:	05a804ed 	.word	0x05a804ed
 800877c:	05a8050e 	.word	0x05a8050e
 8008780:	053005a8 	.word	0x053005a8
 8008784:	05a805a8 	.word	0x05a805a8
 8008788:	05a805a8 	.word	0x05a805a8
 800878c:	05a805a8 	.word	0x05a805a8
 8008790:	05a805a8 	.word	0x05a805a8
 8008794:	05a80146 	.word	0x05a80146
 8008798:	011c0107 	.word	0x011c0107
 800879c:	01460146 	.word	0x01460146
 80087a0:	00ed0146 	.word	0x00ed0146
 80087a4:	0101011c 	.word	0x0101011c
 80087a8:	00fa05a8 	.word	0x00fa05a8
 80087ac:	048705a8 	.word	0x048705a8
 80087b0:	04dc04a5 	.word	0x04dc04a5
 80087b4:	05a80101 	.word	0x05a80101
 80087b8:	009b04ed 	.word	0x009b04ed
 80087bc:	05a80510 	.word	0x05a80510
 80087c0:	006505a8 	.word	0x006505a8
 80087c4:	009b05a8 	.word	0x009b05a8
 80087c8:	9803      	ldr	r0, [sp, #12]
 80087ca:	aa26      	add	r2, sp, #152	@ 0x98
 80087cc:	4659      	mov	r1, fp
 80087ce:	f001 f95f 	bl	8009a90 <__sprint_r>
 80087d2:	2800      	cmp	r0, #0
 80087d4:	f040 814d 	bne.w	8008a72 <_vfprintf_r+0x4ba>
 80087d8:	ac29      	add	r4, sp, #164	@ 0xa4
 80087da:	e780      	b.n	80086de <_vfprintf_r+0x126>
 80087dc:	4b42      	ldr	r3, [pc, #264]	@ (80088e8 <_vfprintf_r+0x330>)
 80087de:	9319      	str	r3, [sp, #100]	@ 0x64
 80087e0:	f015 0320 	ands.w	r3, r5, #32
 80087e4:	f000 84c8 	beq.w	8009178 <_vfprintf_r+0xbc0>
 80087e8:	3607      	adds	r6, #7
 80087ea:	f026 0307 	bic.w	r3, r6, #7
 80087ee:	461a      	mov	r2, r3
 80087f0:	685f      	ldr	r7, [r3, #4]
 80087f2:	f852 6b08 	ldr.w	r6, [r2], #8
 80087f6:	9207      	str	r2, [sp, #28]
 80087f8:	07eb      	lsls	r3, r5, #31
 80087fa:	d50a      	bpl.n	8008812 <_vfprintf_r+0x25a>
 80087fc:	ea56 0307 	orrs.w	r3, r6, r7
 8008800:	d007      	beq.n	8008812 <_vfprintf_r+0x25a>
 8008802:	2330      	movs	r3, #48	@ 0x30
 8008804:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8008808:	9b06      	ldr	r3, [sp, #24]
 800880a:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800880e:	f045 0502 	orr.w	r5, r5, #2
 8008812:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8008816:	2302      	movs	r3, #2
 8008818:	f000 bc2e 	b.w	8009078 <_vfprintf_r+0xac0>
 800881c:	9803      	ldr	r0, [sp, #12]
 800881e:	f002 f95b 	bl	800aad8 <_localeconv_r>
 8008822:	6843      	ldr	r3, [r0, #4]
 8008824:	9317      	str	r3, [sp, #92]	@ 0x5c
 8008826:	4618      	mov	r0, r3
 8008828:	f7f7 fcdc 	bl	80001e4 <strlen>
 800882c:	9012      	str	r0, [sp, #72]	@ 0x48
 800882e:	9803      	ldr	r0, [sp, #12]
 8008830:	f002 f952 	bl	800aad8 <_localeconv_r>
 8008834:	6883      	ldr	r3, [r0, #8]
 8008836:	9309      	str	r3, [sp, #36]	@ 0x24
 8008838:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800883a:	b12b      	cbz	r3, 8008848 <_vfprintf_r+0x290>
 800883c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800883e:	b11b      	cbz	r3, 8008848 <_vfprintf_r+0x290>
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	b10b      	cbz	r3, 8008848 <_vfprintf_r+0x290>
 8008844:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8008848:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800884a:	e757      	b.n	80086fc <_vfprintf_r+0x144>
 800884c:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1f9      	bne.n	8008848 <_vfprintf_r+0x290>
 8008854:	2320      	movs	r3, #32
 8008856:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800885a:	e7f5      	b.n	8008848 <_vfprintf_r+0x290>
 800885c:	f045 0501 	orr.w	r5, r5, #1
 8008860:	e7f2      	b.n	8008848 <_vfprintf_r+0x290>
 8008862:	f856 3b04 	ldr.w	r3, [r6], #4
 8008866:	930e      	str	r3, [sp, #56]	@ 0x38
 8008868:	2b00      	cmp	r3, #0
 800886a:	daed      	bge.n	8008848 <_vfprintf_r+0x290>
 800886c:	425b      	negs	r3, r3
 800886e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008870:	f045 0504 	orr.w	r5, r5, #4
 8008874:	e7e8      	b.n	8008848 <_vfprintf_r+0x290>
 8008876:	232b      	movs	r3, #43	@ 0x2b
 8008878:	e7ed      	b.n	8008856 <_vfprintf_r+0x29e>
 800887a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800887c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008880:	9206      	str	r2, [sp, #24]
 8008882:	2a2a      	cmp	r2, #42	@ 0x2a
 8008884:	d10f      	bne.n	80088a6 <_vfprintf_r+0x2ee>
 8008886:	f856 2b04 	ldr.w	r2, [r6], #4
 800888a:	930c      	str	r3, [sp, #48]	@ 0x30
 800888c:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 8008890:	e7da      	b.n	8008848 <_vfprintf_r+0x290>
 8008892:	fb01 2909 	mla	r9, r1, r9, r2
 8008896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800889a:	9206      	str	r2, [sp, #24]
 800889c:	9a06      	ldr	r2, [sp, #24]
 800889e:	3a30      	subs	r2, #48	@ 0x30
 80088a0:	2a09      	cmp	r2, #9
 80088a2:	d9f6      	bls.n	8008892 <_vfprintf_r+0x2da>
 80088a4:	e72d      	b.n	8008702 <_vfprintf_r+0x14a>
 80088a6:	f04f 0900 	mov.w	r9, #0
 80088aa:	210a      	movs	r1, #10
 80088ac:	e7f6      	b.n	800889c <_vfprintf_r+0x2e4>
 80088ae:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 80088b2:	e7c9      	b.n	8008848 <_vfprintf_r+0x290>
 80088b4:	2200      	movs	r2, #0
 80088b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80088ba:	210a      	movs	r1, #10
 80088bc:	9a06      	ldr	r2, [sp, #24]
 80088be:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80088c0:	3a30      	subs	r2, #48	@ 0x30
 80088c2:	fb01 2200 	mla	r2, r1, r0, r2
 80088c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80088c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088cc:	9206      	str	r2, [sp, #24]
 80088ce:	3a30      	subs	r2, #48	@ 0x30
 80088d0:	2a09      	cmp	r2, #9
 80088d2:	d9f3      	bls.n	80088bc <_vfprintf_r+0x304>
 80088d4:	e715      	b.n	8008702 <_vfprintf_r+0x14a>
 80088d6:	f045 0508 	orr.w	r5, r5, #8
 80088da:	e7b5      	b.n	8008848 <_vfprintf_r+0x290>
 80088dc:	f3af 8000 	nop.w
	...
 80088e8:	0800d3e6 	.word	0x0800d3e6
 80088ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b68      	cmp	r3, #104	@ 0x68
 80088f2:	bf01      	itttt	eq
 80088f4:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 80088f6:	3301      	addeq	r3, #1
 80088f8:	930c      	streq	r3, [sp, #48]	@ 0x30
 80088fa:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 80088fe:	bf18      	it	ne
 8008900:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8008904:	e7a0      	b.n	8008848 <_vfprintf_r+0x290>
 8008906:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	2b6c      	cmp	r3, #108	@ 0x6c
 800890c:	d105      	bne.n	800891a <_vfprintf_r+0x362>
 800890e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008910:	3301      	adds	r3, #1
 8008912:	930c      	str	r3, [sp, #48]	@ 0x30
 8008914:	f045 0520 	orr.w	r5, r5, #32
 8008918:	e796      	b.n	8008848 <_vfprintf_r+0x290>
 800891a:	f045 0510 	orr.w	r5, r5, #16
 800891e:	e793      	b.n	8008848 <_vfprintf_r+0x290>
 8008920:	4632      	mov	r2, r6
 8008922:	f852 3b04 	ldr.w	r3, [r2], #4
 8008926:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800892a:	2300      	movs	r3, #0
 800892c:	9207      	str	r2, [sp, #28]
 800892e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8008932:	469a      	mov	sl, r3
 8008934:	f04f 0901 	mov.w	r9, #1
 8008938:	9310      	str	r3, [sp, #64]	@ 0x40
 800893a:	461f      	mov	r7, r3
 800893c:	9308      	str	r3, [sp, #32]
 800893e:	461e      	mov	r6, r3
 8008940:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8008944:	e1da      	b.n	8008cfc <_vfprintf_r+0x744>
 8008946:	f045 0510 	orr.w	r5, r5, #16
 800894a:	06af      	lsls	r7, r5, #26
 800894c:	d512      	bpl.n	8008974 <_vfprintf_r+0x3bc>
 800894e:	3607      	adds	r6, #7
 8008950:	f026 0307 	bic.w	r3, r6, #7
 8008954:	461a      	mov	r2, r3
 8008956:	685f      	ldr	r7, [r3, #4]
 8008958:	f852 6b08 	ldr.w	r6, [r2], #8
 800895c:	9207      	str	r2, [sp, #28]
 800895e:	2f00      	cmp	r7, #0
 8008960:	da06      	bge.n	8008970 <_vfprintf_r+0x3b8>
 8008962:	4276      	negs	r6, r6
 8008964:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8008968:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800896c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8008970:	2301      	movs	r3, #1
 8008972:	e384      	b.n	800907e <_vfprintf_r+0xac6>
 8008974:	4633      	mov	r3, r6
 8008976:	06ee      	lsls	r6, r5, #27
 8008978:	f853 7b04 	ldr.w	r7, [r3], #4
 800897c:	9307      	str	r3, [sp, #28]
 800897e:	d502      	bpl.n	8008986 <_vfprintf_r+0x3ce>
 8008980:	463e      	mov	r6, r7
 8008982:	17ff      	asrs	r7, r7, #31
 8008984:	e7eb      	b.n	800895e <_vfprintf_r+0x3a6>
 8008986:	0668      	lsls	r0, r5, #25
 8008988:	d503      	bpl.n	8008992 <_vfprintf_r+0x3da>
 800898a:	b23e      	sxth	r6, r7
 800898c:	f347 37c0 	sbfx	r7, r7, #15, #1
 8008990:	e7e5      	b.n	800895e <_vfprintf_r+0x3a6>
 8008992:	05a9      	lsls	r1, r5, #22
 8008994:	d5f4      	bpl.n	8008980 <_vfprintf_r+0x3c8>
 8008996:	b27e      	sxtb	r6, r7
 8008998:	f347 17c0 	sbfx	r7, r7, #7, #1
 800899c:	e7df      	b.n	800895e <_vfprintf_r+0x3a6>
 800899e:	3607      	adds	r6, #7
 80089a0:	f026 0307 	bic.w	r3, r6, #7
 80089a4:	ecb3 7b02 	vldmia	r3!, {d7}
 80089a8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80089ac:	9307      	str	r3, [sp, #28]
 80089ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80089b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089b8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80089ba:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80089be:	4b85      	ldr	r3, [pc, #532]	@ (8008bd4 <_vfprintf_r+0x61c>)
 80089c0:	f04f 32ff 	mov.w	r2, #4294967295
 80089c4:	f7f8 f8c2 	bl	8000b4c <__aeabi_dcmpun>
 80089c8:	bb10      	cbnz	r0, 8008a10 <_vfprintf_r+0x458>
 80089ca:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80089ce:	4b81      	ldr	r3, [pc, #516]	@ (8008bd4 <_vfprintf_r+0x61c>)
 80089d0:	f04f 32ff 	mov.w	r2, #4294967295
 80089d4:	f7f8 f89c 	bl	8000b10 <__aeabi_dcmple>
 80089d8:	b9d0      	cbnz	r0, 8008a10 <_vfprintf_r+0x458>
 80089da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80089de:	2200      	movs	r2, #0
 80089e0:	2300      	movs	r3, #0
 80089e2:	f7f8 f88b 	bl	8000afc <__aeabi_dcmplt>
 80089e6:	b110      	cbz	r0, 80089ee <_vfprintf_r+0x436>
 80089e8:	232d      	movs	r3, #45	@ 0x2d
 80089ea:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80089ee:	4a7a      	ldr	r2, [pc, #488]	@ (8008bd8 <_vfprintf_r+0x620>)
 80089f0:	4b7a      	ldr	r3, [pc, #488]	@ (8008bdc <_vfprintf_r+0x624>)
 80089f2:	9906      	ldr	r1, [sp, #24]
 80089f4:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 80089f8:	2947      	cmp	r1, #71	@ 0x47
 80089fa:	bfd4      	ite	le
 80089fc:	4690      	movle	r8, r2
 80089fe:	4698      	movgt	r8, r3
 8008a00:	f04f 0a00 	mov.w	sl, #0
 8008a04:	f04f 0903 	mov.w	r9, #3
 8008a08:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 8008a0c:	f000 bff8 	b.w	8009a00 <_vfprintf_r+0x1448>
 8008a10:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8008a14:	4610      	mov	r0, r2
 8008a16:	4619      	mov	r1, r3
 8008a18:	f7f8 f898 	bl	8000b4c <__aeabi_dcmpun>
 8008a1c:	4682      	mov	sl, r0
 8008a1e:	b140      	cbz	r0, 8008a32 <_vfprintf_r+0x47a>
 8008a20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a22:	4a6f      	ldr	r2, [pc, #444]	@ (8008be0 <_vfprintf_r+0x628>)
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	bfbc      	itt	lt
 8008a28:	232d      	movlt	r3, #45	@ 0x2d
 8008a2a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 8008a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8008be4 <_vfprintf_r+0x62c>)
 8008a30:	e7df      	b.n	80089f2 <_vfprintf_r+0x43a>
 8008a32:	9b06      	ldr	r3, [sp, #24]
 8008a34:	2b61      	cmp	r3, #97	@ 0x61
 8008a36:	d02e      	beq.n	8008a96 <_vfprintf_r+0x4de>
 8008a38:	2b41      	cmp	r3, #65	@ 0x41
 8008a3a:	d12e      	bne.n	8008a9a <_vfprintf_r+0x4e2>
 8008a3c:	2358      	movs	r3, #88	@ 0x58
 8008a3e:	2230      	movs	r2, #48	@ 0x30
 8008a40:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 8008a44:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8008a48:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8008a4c:	f045 0502 	orr.w	r5, r5, #2
 8008a50:	f340 80ae 	ble.w	8008bb0 <_vfprintf_r+0x5f8>
 8008a54:	9803      	ldr	r0, [sp, #12]
 8008a56:	f109 0101 	add.w	r1, r9, #1
 8008a5a:	f7fd fd07 	bl	800646c <_malloc_r>
 8008a5e:	4680      	mov	r8, r0
 8008a60:	2800      	cmp	r0, #0
 8008a62:	f040 80aa 	bne.w	8008bba <_vfprintf_r+0x602>
 8008a66:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8008a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a6e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8008a72:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8008a76:	07d9      	lsls	r1, r3, #31
 8008a78:	d407      	bmi.n	8008a8a <_vfprintf_r+0x4d2>
 8008a7a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8008a7e:	059a      	lsls	r2, r3, #22
 8008a80:	d403      	bmi.n	8008a8a <_vfprintf_r+0x4d2>
 8008a82:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8008a86:	f7fe fa76 	bl	8006f76 <__retarget_lock_release_recursive>
 8008a8a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8008a8e:	065b      	lsls	r3, r3, #25
 8008a90:	f57f add6 	bpl.w	8008640 <_vfprintf_r+0x88>
 8008a94:	e5d1      	b.n	800863a <_vfprintf_r+0x82>
 8008a96:	2378      	movs	r3, #120	@ 0x78
 8008a98:	e7d1      	b.n	8008a3e <_vfprintf_r+0x486>
 8008a9a:	f1b9 3fff 	cmp.w	r9, #4294967295
 8008a9e:	f000 808e 	beq.w	8008bbe <_vfprintf_r+0x606>
 8008aa2:	9b06      	ldr	r3, [sp, #24]
 8008aa4:	f023 0320 	bic.w	r3, r3, #32
 8008aa8:	2b47      	cmp	r3, #71	@ 0x47
 8008aaa:	d105      	bne.n	8008ab8 <_vfprintf_r+0x500>
 8008aac:	f1b9 0f00 	cmp.w	r9, #0
 8008ab0:	d102      	bne.n	8008ab8 <_vfprintf_r+0x500>
 8008ab2:	46ca      	mov	sl, r9
 8008ab4:	f04f 0901 	mov.w	r9, #1
 8008ab8:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8008abc:	9311      	str	r3, [sp, #68]	@ 0x44
 8008abe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	da7f      	bge.n	8008bc4 <_vfprintf_r+0x60c>
 8008ac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ac6:	9314      	str	r3, [sp, #80]	@ 0x50
 8008ac8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008aca:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008ace:	9315      	str	r3, [sp, #84]	@ 0x54
 8008ad0:	232d      	movs	r3, #45	@ 0x2d
 8008ad2:	931c      	str	r3, [sp, #112]	@ 0x70
 8008ad4:	9b06      	ldr	r3, [sp, #24]
 8008ad6:	f023 0320 	bic.w	r3, r3, #32
 8008ada:	2b41      	cmp	r3, #65	@ 0x41
 8008adc:	9308      	str	r3, [sp, #32]
 8008ade:	f040 81e7 	bne.w	8008eb0 <_vfprintf_r+0x8f8>
 8008ae2:	a820      	add	r0, sp, #128	@ 0x80
 8008ae4:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8008ae8:	f002 f80e 	bl	800ab08 <frexp>
 8008aec:	2200      	movs	r2, #0
 8008aee:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8008af2:	ec51 0b10 	vmov	r0, r1, d0
 8008af6:	f7f7 fd8f 	bl	8000618 <__aeabi_dmul>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b02:	2200      	movs	r2, #0
 8008b04:	2300      	movs	r3, #0
 8008b06:	f7f7 ffef 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b0a:	b108      	cbz	r0, 8008b10 <_vfprintf_r+0x558>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	9320      	str	r3, [sp, #128]	@ 0x80
 8008b10:	4a35      	ldr	r2, [pc, #212]	@ (8008be8 <_vfprintf_r+0x630>)
 8008b12:	4b36      	ldr	r3, [pc, #216]	@ (8008bec <_vfprintf_r+0x634>)
 8008b14:	9906      	ldr	r1, [sp, #24]
 8008b16:	2961      	cmp	r1, #97	@ 0x61
 8008b18:	bf18      	it	ne
 8008b1a:	461a      	movne	r2, r3
 8008b1c:	9210      	str	r2, [sp, #64]	@ 0x40
 8008b1e:	f109 37ff 	add.w	r7, r9, #4294967295
 8008b22:	4646      	mov	r6, r8
 8008b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b28:	4b31      	ldr	r3, [pc, #196]	@ (8008bf0 <_vfprintf_r+0x638>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f7f7 fd74 	bl	8000618 <__aeabi_dmul>
 8008b30:	4602      	mov	r2, r0
 8008b32:	460b      	mov	r3, r1
 8008b34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b38:	f7f8 f81e 	bl	8000b78 <__aeabi_d2iz>
 8008b3c:	9013      	str	r0, [sp, #76]	@ 0x4c
 8008b3e:	f7f7 fd01 	bl	8000544 <__aeabi_i2d>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b4a:	f7f7 fbad 	bl	80002a8 <__aeabi_dsub>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008b58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008b5a:	5c9b      	ldrb	r3, [r3, r2]
 8008b5c:	f806 3b01 	strb.w	r3, [r6], #1
 8008b60:	1c7a      	adds	r2, r7, #1
 8008b62:	d006      	beq.n	8008b72 <_vfprintf_r+0x5ba>
 8008b64:	1e7b      	subs	r3, r7, #1
 8008b66:	931d      	str	r3, [sp, #116]	@ 0x74
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	f7f7 ffbc 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b70:	b370      	cbz	r0, 8008bd0 <_vfprintf_r+0x618>
 8008b72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b76:	4b1f      	ldr	r3, [pc, #124]	@ (8008bf4 <_vfprintf_r+0x63c>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f7f7 ffdd 	bl	8000b38 <__aeabi_dcmpgt>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	d13a      	bne.n	8008bf8 <_vfprintf_r+0x640>
 8008b82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b86:	4b1b      	ldr	r3, [pc, #108]	@ (8008bf4 <_vfprintf_r+0x63c>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f7f7 ffad 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b8e:	b110      	cbz	r0, 8008b96 <_vfprintf_r+0x5de>
 8008b90:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b92:	07db      	lsls	r3, r3, #31
 8008b94:	d430      	bmi.n	8008bf8 <_vfprintf_r+0x640>
 8008b96:	4633      	mov	r3, r6
 8008b98:	19f1      	adds	r1, r6, r7
 8008b9a:	2030      	movs	r0, #48	@ 0x30
 8008b9c:	1aca      	subs	r2, r1, r3
 8008b9e:	2a00      	cmp	r2, #0
 8008ba0:	f280 8183 	bge.w	8008eaa <_vfprintf_r+0x8f2>
 8008ba4:	1c7b      	adds	r3, r7, #1
 8008ba6:	3701      	adds	r7, #1
 8008ba8:	bfb8      	it	lt
 8008baa:	2300      	movlt	r3, #0
 8008bac:	441e      	add	r6, r3
 8008bae:	e037      	b.n	8008c20 <_vfprintf_r+0x668>
 8008bb0:	f04f 0a00 	mov.w	sl, #0
 8008bb4:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8008bb8:	e77e      	b.n	8008ab8 <_vfprintf_r+0x500>
 8008bba:	4682      	mov	sl, r0
 8008bbc:	e77c      	b.n	8008ab8 <_vfprintf_r+0x500>
 8008bbe:	f04f 0906 	mov.w	r9, #6
 8008bc2:	e779      	b.n	8008ab8 <_vfprintf_r+0x500>
 8008bc4:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8008bc8:	2300      	movs	r3, #0
 8008bca:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8008bce:	e780      	b.n	8008ad2 <_vfprintf_r+0x51a>
 8008bd0:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8008bd2:	e7a7      	b.n	8008b24 <_vfprintf_r+0x56c>
 8008bd4:	7fefffff 	.word	0x7fefffff
 8008bd8:	0800d3d6 	.word	0x0800d3d6
 8008bdc:	0800d3da 	.word	0x0800d3da
 8008be0:	0800d3de 	.word	0x0800d3de
 8008be4:	0800d3e2 	.word	0x0800d3e2
 8008be8:	0800d3e6 	.word	0x0800d3e6
 8008bec:	0800d3f7 	.word	0x0800d3f7
 8008bf0:	40300000 	.word	0x40300000
 8008bf4:	3fe00000 	.word	0x3fe00000
 8008bf8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008bfa:	9624      	str	r6, [sp, #144]	@ 0x90
 8008bfc:	7bd9      	ldrb	r1, [r3, #15]
 8008bfe:	2030      	movs	r0, #48	@ 0x30
 8008c00:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008c02:	1e53      	subs	r3, r2, #1
 8008c04:	9324      	str	r3, [sp, #144]	@ 0x90
 8008c06:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8008c0a:	428b      	cmp	r3, r1
 8008c0c:	f000 814a 	beq.w	8008ea4 <_vfprintf_r+0x8ec>
 8008c10:	2b39      	cmp	r3, #57	@ 0x39
 8008c12:	bf0b      	itete	eq
 8008c14:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8008c16:	3301      	addne	r3, #1
 8008c18:	7a9b      	ldrbeq	r3, [r3, #10]
 8008c1a:	b2db      	uxtbne	r3, r3
 8008c1c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c20:	eba6 0308 	sub.w	r3, r6, r8
 8008c24:	9304      	str	r3, [sp, #16]
 8008c26:	9b08      	ldr	r3, [sp, #32]
 8008c28:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008c2a:	2b47      	cmp	r3, #71	@ 0x47
 8008c2c:	f040 8189 	bne.w	8008f42 <_vfprintf_r+0x98a>
 8008c30:	1cf1      	adds	r1, r6, #3
 8008c32:	db02      	blt.n	8008c3a <_vfprintf_r+0x682>
 8008c34:	45b1      	cmp	r9, r6
 8008c36:	f280 81a7 	bge.w	8008f88 <_vfprintf_r+0x9d0>
 8008c3a:	9b06      	ldr	r3, [sp, #24]
 8008c3c:	3b02      	subs	r3, #2
 8008c3e:	9306      	str	r3, [sp, #24]
 8008c40:	9906      	ldr	r1, [sp, #24]
 8008c42:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8008c46:	f021 0120 	bic.w	r1, r1, #32
 8008c4a:	2941      	cmp	r1, #65	@ 0x41
 8008c4c:	bf08      	it	eq
 8008c4e:	320f      	addeq	r2, #15
 8008c50:	f106 33ff 	add.w	r3, r6, #4294967295
 8008c54:	bf06      	itte	eq
 8008c56:	b2d2      	uxtbeq	r2, r2
 8008c58:	2101      	moveq	r1, #1
 8008c5a:	2100      	movne	r1, #0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	9320      	str	r3, [sp, #128]	@ 0x80
 8008c60:	bfb8      	it	lt
 8008c62:	f1c6 0301 	rsblt	r3, r6, #1
 8008c66:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 8008c6a:	bfb4      	ite	lt
 8008c6c:	222d      	movlt	r2, #45	@ 0x2d
 8008c6e:	222b      	movge	r2, #43	@ 0x2b
 8008c70:	2b09      	cmp	r3, #9
 8008c72:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8008c76:	f340 817a 	ble.w	8008f6e <_vfprintf_r+0x9b6>
 8008c7a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8008c7e:	270a      	movs	r7, #10
 8008c80:	4602      	mov	r2, r0
 8008c82:	fbb3 f6f7 	udiv	r6, r3, r7
 8008c86:	fb07 3116 	mls	r1, r7, r6, r3
 8008c8a:	3130      	adds	r1, #48	@ 0x30
 8008c8c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008c90:	4619      	mov	r1, r3
 8008c92:	2963      	cmp	r1, #99	@ 0x63
 8008c94:	f100 30ff 	add.w	r0, r0, #4294967295
 8008c98:	4633      	mov	r3, r6
 8008c9a:	dcf1      	bgt.n	8008c80 <_vfprintf_r+0x6c8>
 8008c9c:	3330      	adds	r3, #48	@ 0x30
 8008c9e:	1e91      	subs	r1, r2, #2
 8008ca0:	f800 3c01 	strb.w	r3, [r0, #-1]
 8008ca4:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8008ca8:	460b      	mov	r3, r1
 8008caa:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8008cae:	4283      	cmp	r3, r0
 8008cb0:	f0c0 8158 	bcc.w	8008f64 <_vfprintf_r+0x9ac>
 8008cb4:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8008cb8:	1a9b      	subs	r3, r3, r2
 8008cba:	4281      	cmp	r1, r0
 8008cbc:	bf88      	it	hi
 8008cbe:	2300      	movhi	r3, #0
 8008cc0:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8008cc4:	441a      	add	r2, r3
 8008cc6:	ab22      	add	r3, sp, #136	@ 0x88
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	9a04      	ldr	r2, [sp, #16]
 8008ccc:	9318      	str	r3, [sp, #96]	@ 0x60
 8008cce:	2a01      	cmp	r2, #1
 8008cd0:	eb03 0902 	add.w	r9, r3, r2
 8008cd4:	dc01      	bgt.n	8008cda <_vfprintf_r+0x722>
 8008cd6:	07ea      	lsls	r2, r5, #31
 8008cd8:	d501      	bpl.n	8008cde <_vfprintf_r+0x726>
 8008cda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cdc:	4499      	add	r9, r3
 8008cde:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8008ce2:	2700      	movs	r7, #0
 8008ce4:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8008ce8:	9311      	str	r3, [sp, #68]	@ 0x44
 8008cea:	9708      	str	r7, [sp, #32]
 8008cec:	463e      	mov	r6, r7
 8008cee:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f040 8191 	bne.w	8009018 <_vfprintf_r+0xa60>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8008cfa:	9310      	str	r3, [sp, #64]	@ 0x40
 8008cfc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008cfe:	454b      	cmp	r3, r9
 8008d00:	bfb8      	it	lt
 8008d02:	464b      	movlt	r3, r9
 8008d04:	9311      	str	r3, [sp, #68]	@ 0x44
 8008d06:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8008d0a:	b113      	cbz	r3, 8008d12 <_vfprintf_r+0x75a>
 8008d0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d0e:	3301      	adds	r3, #1
 8008d10:	9311      	str	r3, [sp, #68]	@ 0x44
 8008d12:	f015 0302 	ands.w	r3, r5, #2
 8008d16:	931c      	str	r3, [sp, #112]	@ 0x70
 8008d18:	bf1e      	ittt	ne
 8008d1a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 8008d1c:	3302      	addne	r3, #2
 8008d1e:	9311      	strne	r3, [sp, #68]	@ 0x44
 8008d20:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8008d24:	931d      	str	r3, [sp, #116]	@ 0x74
 8008d26:	d122      	bne.n	8008d6e <_vfprintf_r+0x7b6>
 8008d28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d2a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008d2c:	1a9b      	subs	r3, r3, r2
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d32:	dd1c      	ble.n	8008d6e <_vfprintf_r+0x7b6>
 8008d34:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8008d36:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8008d3a:	2810      	cmp	r0, #16
 8008d3c:	489f      	ldr	r0, [pc, #636]	@ (8008fbc <_vfprintf_r+0xa04>)
 8008d3e:	6020      	str	r0, [r4, #0]
 8008d40:	f102 0201 	add.w	r2, r2, #1
 8008d44:	f104 0108 	add.w	r1, r4, #8
 8008d48:	f300 8297 	bgt.w	800927a <_vfprintf_r+0xcc2>
 8008d4c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8008d4e:	6060      	str	r0, [r4, #4]
 8008d50:	4403      	add	r3, r0
 8008d52:	2a07      	cmp	r2, #7
 8008d54:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8008d58:	f340 82a4 	ble.w	80092a4 <_vfprintf_r+0xcec>
 8008d5c:	9803      	ldr	r0, [sp, #12]
 8008d5e:	aa26      	add	r2, sp, #152	@ 0x98
 8008d60:	4659      	mov	r1, fp
 8008d62:	f000 fe95 	bl	8009a90 <__sprint_r>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	f040 85ed 	bne.w	8009946 <_vfprintf_r+0x138e>
 8008d6c:	ac29      	add	r4, sp, #164	@ 0xa4
 8008d6e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8008d72:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8008d74:	b16a      	cbz	r2, 8008d92 <_vfprintf_r+0x7da>
 8008d76:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8008d7a:	6022      	str	r2, [r4, #0]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	4413      	add	r3, r2
 8008d80:	9328      	str	r3, [sp, #160]	@ 0xa0
 8008d82:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8008d84:	6062      	str	r2, [r4, #4]
 8008d86:	4413      	add	r3, r2
 8008d88:	2b07      	cmp	r3, #7
 8008d8a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8008d8c:	f300 828c 	bgt.w	80092a8 <_vfprintf_r+0xcf0>
 8008d90:	3408      	adds	r4, #8
 8008d92:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008d94:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8008d96:	b162      	cbz	r2, 8008db2 <_vfprintf_r+0x7fa>
 8008d98:	aa1f      	add	r2, sp, #124	@ 0x7c
 8008d9a:	6022      	str	r2, [r4, #0]
 8008d9c:	2202      	movs	r2, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8008da2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8008da4:	6062      	str	r2, [r4, #4]
 8008da6:	3301      	adds	r3, #1
 8008da8:	2b07      	cmp	r3, #7
 8008daa:	9327      	str	r3, [sp, #156]	@ 0x9c
 8008dac:	f300 8286 	bgt.w	80092bc <_vfprintf_r+0xd04>
 8008db0:	3408      	adds	r4, #8
 8008db2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008db4:	2b80      	cmp	r3, #128	@ 0x80
 8008db6:	d122      	bne.n	8008dfe <_vfprintf_r+0x846>
 8008db8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008dbc:	1a9b      	subs	r3, r3, r2
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008dc2:	dd1c      	ble.n	8008dfe <_vfprintf_r+0x846>
 8008dc4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8008dc6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8008dca:	2810      	cmp	r0, #16
 8008dcc:	487c      	ldr	r0, [pc, #496]	@ (8008fc0 <_vfprintf_r+0xa08>)
 8008dce:	6020      	str	r0, [r4, #0]
 8008dd0:	f102 0201 	add.w	r2, r2, #1
 8008dd4:	f104 0108 	add.w	r1, r4, #8
 8008dd8:	f300 827a 	bgt.w	80092d0 <_vfprintf_r+0xd18>
 8008ddc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8008dde:	6060      	str	r0, [r4, #4]
 8008de0:	4403      	add	r3, r0
 8008de2:	2a07      	cmp	r2, #7
 8008de4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8008de8:	f340 8287 	ble.w	80092fa <_vfprintf_r+0xd42>
 8008dec:	9803      	ldr	r0, [sp, #12]
 8008dee:	aa26      	add	r2, sp, #152	@ 0x98
 8008df0:	4659      	mov	r1, fp
 8008df2:	f000 fe4d 	bl	8009a90 <__sprint_r>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	f040 85a5 	bne.w	8009946 <_vfprintf_r+0x138e>
 8008dfc:	ac29      	add	r4, sp, #164	@ 0xa4
 8008dfe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e00:	eba3 0309 	sub.w	r3, r3, r9
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e08:	dd1c      	ble.n	8008e44 <_vfprintf_r+0x88c>
 8008e0a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008e0c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8008e10:	2810      	cmp	r0, #16
 8008e12:	486b      	ldr	r0, [pc, #428]	@ (8008fc0 <_vfprintf_r+0xa08>)
 8008e14:	6020      	str	r0, [r4, #0]
 8008e16:	f102 0201 	add.w	r2, r2, #1
 8008e1a:	f104 0108 	add.w	r1, r4, #8
 8008e1e:	f300 826e 	bgt.w	80092fe <_vfprintf_r+0xd46>
 8008e22:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008e24:	6060      	str	r0, [r4, #4]
 8008e26:	4403      	add	r3, r0
 8008e28:	2a07      	cmp	r2, #7
 8008e2a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8008e2e:	f340 827b 	ble.w	8009328 <_vfprintf_r+0xd70>
 8008e32:	9803      	ldr	r0, [sp, #12]
 8008e34:	aa26      	add	r2, sp, #152	@ 0x98
 8008e36:	4659      	mov	r1, fp
 8008e38:	f000 fe2a 	bl	8009a90 <__sprint_r>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	f040 8582 	bne.w	8009946 <_vfprintf_r+0x138e>
 8008e42:	ac29      	add	r4, sp, #164	@ 0xa4
 8008e44:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8008e46:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e48:	05e8      	lsls	r0, r5, #23
 8008e4a:	f100 8273 	bmi.w	8009334 <_vfprintf_r+0xd7c>
 8008e4e:	444b      	add	r3, r9
 8008e50:	9328      	str	r3, [sp, #160]	@ 0xa0
 8008e52:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8008e54:	3301      	adds	r3, #1
 8008e56:	2b07      	cmp	r3, #7
 8008e58:	e9c4 8900 	strd	r8, r9, [r4]
 8008e5c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8008e5e:	f300 82af 	bgt.w	80093c0 <_vfprintf_r+0xe08>
 8008e62:	3408      	adds	r4, #8
 8008e64:	0768      	lsls	r0, r5, #29
 8008e66:	f100 8550 	bmi.w	800990a <_vfprintf_r+0x1352>
 8008e6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008e6e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008e70:	428a      	cmp	r2, r1
 8008e72:	bfac      	ite	ge
 8008e74:	189b      	addge	r3, r3, r2
 8008e76:	185b      	addlt	r3, r3, r1
 8008e78:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e7a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8008e7c:	b13b      	cbz	r3, 8008e8e <_vfprintf_r+0x8d6>
 8008e7e:	9803      	ldr	r0, [sp, #12]
 8008e80:	aa26      	add	r2, sp, #152	@ 0x98
 8008e82:	4659      	mov	r1, fp
 8008e84:	f000 fe04 	bl	8009a90 <__sprint_r>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	f040 855c 	bne.w	8009946 <_vfprintf_r+0x138e>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	9327      	str	r3, [sp, #156]	@ 0x9c
 8008e92:	f1ba 0f00 	cmp.w	sl, #0
 8008e96:	f040 8572 	bne.w	800997e <_vfprintf_r+0x13c6>
 8008e9a:	9e07      	ldr	r6, [sp, #28]
 8008e9c:	ac29      	add	r4, sp, #164	@ 0xa4
 8008e9e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8008ea2:	e407      	b.n	80086b4 <_vfprintf_r+0xfc>
 8008ea4:	f802 0c01 	strb.w	r0, [r2, #-1]
 8008ea8:	e6aa      	b.n	8008c00 <_vfprintf_r+0x648>
 8008eaa:	f803 0b01 	strb.w	r0, [r3], #1
 8008eae:	e675      	b.n	8008b9c <_vfprintf_r+0x5e4>
 8008eb0:	9b08      	ldr	r3, [sp, #32]
 8008eb2:	2b46      	cmp	r3, #70	@ 0x46
 8008eb4:	d005      	beq.n	8008ec2 <_vfprintf_r+0x90a>
 8008eb6:	2b45      	cmp	r3, #69	@ 0x45
 8008eb8:	d11a      	bne.n	8008ef0 <_vfprintf_r+0x938>
 8008eba:	f109 0601 	add.w	r6, r9, #1
 8008ebe:	2102      	movs	r1, #2
 8008ec0:	e001      	b.n	8008ec6 <_vfprintf_r+0x90e>
 8008ec2:	464e      	mov	r6, r9
 8008ec4:	2103      	movs	r1, #3
 8008ec6:	ab24      	add	r3, sp, #144	@ 0x90
 8008ec8:	9301      	str	r3, [sp, #4]
 8008eca:	ab21      	add	r3, sp, #132	@ 0x84
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8008ed2:	ab20      	add	r3, sp, #128	@ 0x80
 8008ed4:	9803      	ldr	r0, [sp, #12]
 8008ed6:	4632      	mov	r2, r6
 8008ed8:	f001 ff16 	bl	800ad08 <_dtoa_r>
 8008edc:	9b08      	ldr	r3, [sp, #32]
 8008ede:	2b47      	cmp	r3, #71	@ 0x47
 8008ee0:	4680      	mov	r8, r0
 8008ee2:	d119      	bne.n	8008f18 <_vfprintf_r+0x960>
 8008ee4:	07e8      	lsls	r0, r5, #31
 8008ee6:	d405      	bmi.n	8008ef4 <_vfprintf_r+0x93c>
 8008ee8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008eea:	eba3 0308 	sub.w	r3, r3, r8
 8008eee:	e699      	b.n	8008c24 <_vfprintf_r+0x66c>
 8008ef0:	464e      	mov	r6, r9
 8008ef2:	e7e4      	b.n	8008ebe <_vfprintf_r+0x906>
 8008ef4:	eb08 0706 	add.w	r7, r8, r6
 8008ef8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8008efc:	2200      	movs	r2, #0
 8008efe:	2300      	movs	r3, #0
 8008f00:	f7f7 fdf2 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f04:	b100      	cbz	r0, 8008f08 <_vfprintf_r+0x950>
 8008f06:	9724      	str	r7, [sp, #144]	@ 0x90
 8008f08:	2230      	movs	r2, #48	@ 0x30
 8008f0a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008f0c:	429f      	cmp	r7, r3
 8008f0e:	d9eb      	bls.n	8008ee8 <_vfprintf_r+0x930>
 8008f10:	1c59      	adds	r1, r3, #1
 8008f12:	9124      	str	r1, [sp, #144]	@ 0x90
 8008f14:	701a      	strb	r2, [r3, #0]
 8008f16:	e7f8      	b.n	8008f0a <_vfprintf_r+0x952>
 8008f18:	9b08      	ldr	r3, [sp, #32]
 8008f1a:	2b46      	cmp	r3, #70	@ 0x46
 8008f1c:	eb00 0706 	add.w	r7, r0, r6
 8008f20:	d1ea      	bne.n	8008ef8 <_vfprintf_r+0x940>
 8008f22:	7803      	ldrb	r3, [r0, #0]
 8008f24:	2b30      	cmp	r3, #48	@ 0x30
 8008f26:	d109      	bne.n	8008f3c <_vfprintf_r+0x984>
 8008f28:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	2300      	movs	r3, #0
 8008f30:	f7f7 fdda 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f34:	b910      	cbnz	r0, 8008f3c <_vfprintf_r+0x984>
 8008f36:	f1c6 0601 	rsb	r6, r6, #1
 8008f3a:	9620      	str	r6, [sp, #128]	@ 0x80
 8008f3c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008f3e:	441f      	add	r7, r3
 8008f40:	e7da      	b.n	8008ef8 <_vfprintf_r+0x940>
 8008f42:	9b08      	ldr	r3, [sp, #32]
 8008f44:	2b46      	cmp	r3, #70	@ 0x46
 8008f46:	f47f ae7b 	bne.w	8008c40 <_vfprintf_r+0x688>
 8008f4a:	f005 0301 	and.w	r3, r5, #1
 8008f4e:	2e00      	cmp	r6, #0
 8008f50:	ea43 0309 	orr.w	r3, r3, r9
 8008f54:	dd25      	ble.n	8008fa2 <_vfprintf_r+0x9ea>
 8008f56:	b37b      	cbz	r3, 8008fb8 <_vfprintf_r+0xa00>
 8008f58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f5a:	18f3      	adds	r3, r6, r3
 8008f5c:	4499      	add	r9, r3
 8008f5e:	2366      	movs	r3, #102	@ 0x66
 8008f60:	9306      	str	r3, [sp, #24]
 8008f62:	e033      	b.n	8008fcc <_vfprintf_r+0xa14>
 8008f64:	f813 7b01 	ldrb.w	r7, [r3], #1
 8008f68:	f806 7f01 	strb.w	r7, [r6, #1]!
 8008f6c:	e69f      	b.n	8008cae <_vfprintf_r+0x6f6>
 8008f6e:	b941      	cbnz	r1, 8008f82 <_vfprintf_r+0x9ca>
 8008f70:	2230      	movs	r2, #48	@ 0x30
 8008f72:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8008f76:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8008f7a:	3330      	adds	r3, #48	@ 0x30
 8008f7c:	f802 3b01 	strb.w	r3, [r2], #1
 8008f80:	e6a1      	b.n	8008cc6 <_vfprintf_r+0x70e>
 8008f82:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8008f86:	e7f8      	b.n	8008f7a <_vfprintf_r+0x9c2>
 8008f88:	9b04      	ldr	r3, [sp, #16]
 8008f8a:	42b3      	cmp	r3, r6
 8008f8c:	dd0d      	ble.n	8008faa <_vfprintf_r+0x9f2>
 8008f8e:	9b04      	ldr	r3, [sp, #16]
 8008f90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008f92:	2e00      	cmp	r6, #0
 8008f94:	eb03 0902 	add.w	r9, r3, r2
 8008f98:	dc0c      	bgt.n	8008fb4 <_vfprintf_r+0x9fc>
 8008f9a:	f1c6 0301 	rsb	r3, r6, #1
 8008f9e:	4499      	add	r9, r3
 8008fa0:	e008      	b.n	8008fb4 <_vfprintf_r+0x9fc>
 8008fa2:	b17b      	cbz	r3, 8008fc4 <_vfprintf_r+0xa0c>
 8008fa4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	e7d8      	b.n	8008f5c <_vfprintf_r+0x9a4>
 8008faa:	07eb      	lsls	r3, r5, #31
 8008fac:	d521      	bpl.n	8008ff2 <_vfprintf_r+0xa3a>
 8008fae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fb0:	eb06 0903 	add.w	r9, r6, r3
 8008fb4:	2367      	movs	r3, #103	@ 0x67
 8008fb6:	e7d3      	b.n	8008f60 <_vfprintf_r+0x9a8>
 8008fb8:	46b1      	mov	r9, r6
 8008fba:	e7d0      	b.n	8008f5e <_vfprintf_r+0x9a6>
 8008fbc:	0800d43a 	.word	0x0800d43a
 8008fc0:	0800d42a 	.word	0x0800d42a
 8008fc4:	2366      	movs	r3, #102	@ 0x66
 8008fc6:	9306      	str	r3, [sp, #24]
 8008fc8:	f04f 0901 	mov.w	r9, #1
 8008fcc:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8008fd0:	9308      	str	r3, [sp, #32]
 8008fd2:	d01f      	beq.n	8009014 <_vfprintf_r+0xa5c>
 8008fd4:	2700      	movs	r7, #0
 8008fd6:	2e00      	cmp	r6, #0
 8008fd8:	9708      	str	r7, [sp, #32]
 8008fda:	f77f ae88 	ble.w	8008cee <_vfprintf_r+0x736>
 8008fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	2bff      	cmp	r3, #255	@ 0xff
 8008fe4:	d107      	bne.n	8008ff6 <_vfprintf_r+0xa3e>
 8008fe6:	9b08      	ldr	r3, [sp, #32]
 8008fe8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008fea:	443b      	add	r3, r7
 8008fec:	fb02 9903 	mla	r9, r2, r3, r9
 8008ff0:	e67d      	b.n	8008cee <_vfprintf_r+0x736>
 8008ff2:	46b1      	mov	r9, r6
 8008ff4:	e7de      	b.n	8008fb4 <_vfprintf_r+0x9fc>
 8008ff6:	42b3      	cmp	r3, r6
 8008ff8:	daf5      	bge.n	8008fe6 <_vfprintf_r+0xa2e>
 8008ffa:	1af6      	subs	r6, r6, r3
 8008ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ffe:	785b      	ldrb	r3, [r3, #1]
 8009000:	b133      	cbz	r3, 8009010 <_vfprintf_r+0xa58>
 8009002:	9b08      	ldr	r3, [sp, #32]
 8009004:	3301      	adds	r3, #1
 8009006:	9308      	str	r3, [sp, #32]
 8009008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800900a:	3301      	adds	r3, #1
 800900c:	9309      	str	r3, [sp, #36]	@ 0x24
 800900e:	e7e6      	b.n	8008fde <_vfprintf_r+0xa26>
 8009010:	3701      	adds	r7, #1
 8009012:	e7e4      	b.n	8008fde <_vfprintf_r+0xa26>
 8009014:	9f08      	ldr	r7, [sp, #32]
 8009016:	e66a      	b.n	8008cee <_vfprintf_r+0x736>
 8009018:	232d      	movs	r3, #45	@ 0x2d
 800901a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800901e:	e66a      	b.n	8008cf6 <_vfprintf_r+0x73e>
 8009020:	06af      	lsls	r7, r5, #26
 8009022:	d507      	bpl.n	8009034 <_vfprintf_r+0xa7c>
 8009024:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009026:	6833      	ldr	r3, [r6, #0]
 8009028:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800902a:	17d2      	asrs	r2, r2, #31
 800902c:	e9c3 1200 	strd	r1, r2, [r3]
 8009030:	3604      	adds	r6, #4
 8009032:	e734      	b.n	8008e9e <_vfprintf_r+0x8e6>
 8009034:	06e8      	lsls	r0, r5, #27
 8009036:	d503      	bpl.n	8009040 <_vfprintf_r+0xa88>
 8009038:	6833      	ldr	r3, [r6, #0]
 800903a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800903c:	601a      	str	r2, [r3, #0]
 800903e:	e7f7      	b.n	8009030 <_vfprintf_r+0xa78>
 8009040:	0669      	lsls	r1, r5, #25
 8009042:	d503      	bpl.n	800904c <_vfprintf_r+0xa94>
 8009044:	6833      	ldr	r3, [r6, #0]
 8009046:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009048:	801a      	strh	r2, [r3, #0]
 800904a:	e7f1      	b.n	8009030 <_vfprintf_r+0xa78>
 800904c:	05aa      	lsls	r2, r5, #22
 800904e:	d5f3      	bpl.n	8009038 <_vfprintf_r+0xa80>
 8009050:	6833      	ldr	r3, [r6, #0]
 8009052:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009054:	701a      	strb	r2, [r3, #0]
 8009056:	e7eb      	b.n	8009030 <_vfprintf_r+0xa78>
 8009058:	f045 0510 	orr.w	r5, r5, #16
 800905c:	f015 0320 	ands.w	r3, r5, #32
 8009060:	d020      	beq.n	80090a4 <_vfprintf_r+0xaec>
 8009062:	3607      	adds	r6, #7
 8009064:	f026 0307 	bic.w	r3, r6, #7
 8009068:	461a      	mov	r2, r3
 800906a:	685f      	ldr	r7, [r3, #4]
 800906c:	f852 6b08 	ldr.w	r6, [r2], #8
 8009070:	9207      	str	r2, [sp, #28]
 8009072:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8009076:	2300      	movs	r3, #0
 8009078:	2200      	movs	r2, #0
 800907a:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800907e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8009082:	f000 8491 	beq.w	80099a8 <_vfprintf_r+0x13f0>
 8009086:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 800908a:	9208      	str	r2, [sp, #32]
 800908c:	ea56 0207 	orrs.w	r2, r6, r7
 8009090:	f040 848f 	bne.w	80099b2 <_vfprintf_r+0x13fa>
 8009094:	f1b9 0f00 	cmp.w	r9, #0
 8009098:	f000 80db 	beq.w	8009252 <_vfprintf_r+0xc9a>
 800909c:	2b01      	cmp	r3, #1
 800909e:	f040 848b 	bne.w	80099b8 <_vfprintf_r+0x1400>
 80090a2:	e083      	b.n	80091ac <_vfprintf_r+0xbf4>
 80090a4:	4632      	mov	r2, r6
 80090a6:	f015 0710 	ands.w	r7, r5, #16
 80090aa:	f852 6b04 	ldr.w	r6, [r2], #4
 80090ae:	9207      	str	r2, [sp, #28]
 80090b0:	d001      	beq.n	80090b6 <_vfprintf_r+0xafe>
 80090b2:	461f      	mov	r7, r3
 80090b4:	e7dd      	b.n	8009072 <_vfprintf_r+0xaba>
 80090b6:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80090ba:	d001      	beq.n	80090c0 <_vfprintf_r+0xb08>
 80090bc:	b2b6      	uxth	r6, r6
 80090be:	e7d8      	b.n	8009072 <_vfprintf_r+0xaba>
 80090c0:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80090c4:	d0d5      	beq.n	8009072 <_vfprintf_r+0xaba>
 80090c6:	b2f6      	uxtb	r6, r6
 80090c8:	e7f3      	b.n	80090b2 <_vfprintf_r+0xafa>
 80090ca:	4633      	mov	r3, r6
 80090cc:	2278      	movs	r2, #120	@ 0x78
 80090ce:	f853 6b04 	ldr.w	r6, [r3], #4
 80090d2:	9307      	str	r3, [sp, #28]
 80090d4:	f647 0330 	movw	r3, #30768	@ 0x7830
 80090d8:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 80090dc:	4b93      	ldr	r3, [pc, #588]	@ (800932c <_vfprintf_r+0xd74>)
 80090de:	9319      	str	r3, [sp, #100]	@ 0x64
 80090e0:	2700      	movs	r7, #0
 80090e2:	f045 0502 	orr.w	r5, r5, #2
 80090e6:	2302      	movs	r3, #2
 80090e8:	9206      	str	r2, [sp, #24]
 80090ea:	e7c5      	b.n	8009078 <_vfprintf_r+0xac0>
 80090ec:	4633      	mov	r3, r6
 80090ee:	f1b9 3fff 	cmp.w	r9, #4294967295
 80090f2:	f853 8b04 	ldr.w	r8, [r3], #4
 80090f6:	9307      	str	r3, [sp, #28]
 80090f8:	f04f 0600 	mov.w	r6, #0
 80090fc:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8009100:	d00f      	beq.n	8009122 <_vfprintf_r+0xb6a>
 8009102:	464a      	mov	r2, r9
 8009104:	4631      	mov	r1, r6
 8009106:	4640      	mov	r0, r8
 8009108:	f7f7 f87a 	bl	8000200 <memchr>
 800910c:	4682      	mov	sl, r0
 800910e:	2800      	cmp	r0, #0
 8009110:	f43f ac7a 	beq.w	8008a08 <_vfprintf_r+0x450>
 8009114:	eba0 0908 	sub.w	r9, r0, r8
 8009118:	46b2      	mov	sl, r6
 800911a:	9610      	str	r6, [sp, #64]	@ 0x40
 800911c:	4637      	mov	r7, r6
 800911e:	9608      	str	r6, [sp, #32]
 8009120:	e5ec      	b.n	8008cfc <_vfprintf_r+0x744>
 8009122:	4640      	mov	r0, r8
 8009124:	f7f7 f85e 	bl	80001e4 <strlen>
 8009128:	46b2      	mov	sl, r6
 800912a:	4681      	mov	r9, r0
 800912c:	e46c      	b.n	8008a08 <_vfprintf_r+0x450>
 800912e:	f045 0510 	orr.w	r5, r5, #16
 8009132:	f015 0320 	ands.w	r3, r5, #32
 8009136:	d009      	beq.n	800914c <_vfprintf_r+0xb94>
 8009138:	3607      	adds	r6, #7
 800913a:	f026 0307 	bic.w	r3, r6, #7
 800913e:	461a      	mov	r2, r3
 8009140:	685f      	ldr	r7, [r3, #4]
 8009142:	f852 6b08 	ldr.w	r6, [r2], #8
 8009146:	9207      	str	r2, [sp, #28]
 8009148:	2301      	movs	r3, #1
 800914a:	e795      	b.n	8009078 <_vfprintf_r+0xac0>
 800914c:	4632      	mov	r2, r6
 800914e:	f015 0710 	ands.w	r7, r5, #16
 8009152:	f852 6b04 	ldr.w	r6, [r2], #4
 8009156:	9207      	str	r2, [sp, #28]
 8009158:	d001      	beq.n	800915e <_vfprintf_r+0xba6>
 800915a:	461f      	mov	r7, r3
 800915c:	e7f4      	b.n	8009148 <_vfprintf_r+0xb90>
 800915e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8009162:	d001      	beq.n	8009168 <_vfprintf_r+0xbb0>
 8009164:	b2b6      	uxth	r6, r6
 8009166:	e7ef      	b.n	8009148 <_vfprintf_r+0xb90>
 8009168:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800916c:	d0ec      	beq.n	8009148 <_vfprintf_r+0xb90>
 800916e:	b2f6      	uxtb	r6, r6
 8009170:	e7f3      	b.n	800915a <_vfprintf_r+0xba2>
 8009172:	4b6f      	ldr	r3, [pc, #444]	@ (8009330 <_vfprintf_r+0xd78>)
 8009174:	f7ff bb33 	b.w	80087de <_vfprintf_r+0x226>
 8009178:	4632      	mov	r2, r6
 800917a:	f015 0710 	ands.w	r7, r5, #16
 800917e:	f852 6b04 	ldr.w	r6, [r2], #4
 8009182:	9207      	str	r2, [sp, #28]
 8009184:	d002      	beq.n	800918c <_vfprintf_r+0xbd4>
 8009186:	461f      	mov	r7, r3
 8009188:	f7ff bb36 	b.w	80087f8 <_vfprintf_r+0x240>
 800918c:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8009190:	d002      	beq.n	8009198 <_vfprintf_r+0xbe0>
 8009192:	b2b6      	uxth	r6, r6
 8009194:	f7ff bb30 	b.w	80087f8 <_vfprintf_r+0x240>
 8009198:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800919c:	f43f ab2c 	beq.w	80087f8 <_vfprintf_r+0x240>
 80091a0:	b2f6      	uxtb	r6, r6
 80091a2:	e7f0      	b.n	8009186 <_vfprintf_r+0xbce>
 80091a4:	2e0a      	cmp	r6, #10
 80091a6:	f177 0300 	sbcs.w	r3, r7, #0
 80091aa:	d207      	bcs.n	80091bc <_vfprintf_r+0xc04>
 80091ac:	3630      	adds	r6, #48	@ 0x30
 80091ae:	b2f6      	uxtb	r6, r6
 80091b0:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 80091b4:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 80091b8:	f000 bc1a 	b.w	80099f0 <_vfprintf_r+0x1438>
 80091bc:	2300      	movs	r3, #0
 80091be:	9304      	str	r3, [sp, #16]
 80091c0:	9b08      	ldr	r3, [sp, #32]
 80091c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091c6:	ad52      	add	r5, sp, #328	@ 0x148
 80091c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80091ca:	220a      	movs	r2, #10
 80091cc:	2300      	movs	r3, #0
 80091ce:	4630      	mov	r0, r6
 80091d0:	4639      	mov	r1, r7
 80091d2:	f7f7 fcf9 	bl	8000bc8 <__aeabi_uldivmod>
 80091d6:	9b04      	ldr	r3, [sp, #16]
 80091d8:	9011      	str	r0, [sp, #68]	@ 0x44
 80091da:	3301      	adds	r3, #1
 80091dc:	9304      	str	r3, [sp, #16]
 80091de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80091e0:	3230      	adds	r2, #48	@ 0x30
 80091e2:	468a      	mov	sl, r1
 80091e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80091e8:	f805 2c01 	strb.w	r2, [r5, #-1]
 80091ec:	b1d3      	cbz	r3, 8009224 <_vfprintf_r+0xc6c>
 80091ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091f0:	9a04      	ldr	r2, [sp, #16]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d115      	bne.n	8009224 <_vfprintf_r+0xc6c>
 80091f8:	2aff      	cmp	r2, #255	@ 0xff
 80091fa:	d013      	beq.n	8009224 <_vfprintf_r+0xc6c>
 80091fc:	2e0a      	cmp	r6, #10
 80091fe:	f177 0300 	sbcs.w	r3, r7, #0
 8009202:	d30f      	bcc.n	8009224 <_vfprintf_r+0xc6c>
 8009204:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009206:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8009208:	eba8 0803 	sub.w	r8, r8, r3
 800920c:	461a      	mov	r2, r3
 800920e:	4640      	mov	r0, r8
 8009210:	f001 fc48 	bl	800aaa4 <strncpy>
 8009214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009216:	785b      	ldrb	r3, [r3, #1]
 8009218:	b11b      	cbz	r3, 8009222 <_vfprintf_r+0xc6a>
 800921a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800921c:	3301      	adds	r3, #1
 800921e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009220:	2300      	movs	r3, #0
 8009222:	9304      	str	r3, [sp, #16]
 8009224:	2e0a      	cmp	r6, #10
 8009226:	f177 0700 	sbcs.w	r7, r7, #0
 800922a:	f0c0 83e1 	bcc.w	80099f0 <_vfprintf_r+0x1438>
 800922e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8009230:	4657      	mov	r7, sl
 8009232:	4645      	mov	r5, r8
 8009234:	e7c9      	b.n	80091ca <_vfprintf_r+0xc12>
 8009236:	f006 030f 	and.w	r3, r6, #15
 800923a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800923c:	0936      	lsrs	r6, r6, #4
 800923e:	5cd3      	ldrb	r3, [r2, r3]
 8009240:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8009244:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8009248:	093f      	lsrs	r7, r7, #4
 800924a:	ea56 0307 	orrs.w	r3, r6, r7
 800924e:	d1f2      	bne.n	8009236 <_vfprintf_r+0xc7e>
 8009250:	e3ce      	b.n	80099f0 <_vfprintf_r+0x1438>
 8009252:	b91b      	cbnz	r3, 800925c <_vfprintf_r+0xca4>
 8009254:	07ed      	lsls	r5, r5, #31
 8009256:	d501      	bpl.n	800925c <_vfprintf_r+0xca4>
 8009258:	2630      	movs	r6, #48	@ 0x30
 800925a:	e7a9      	b.n	80091b0 <_vfprintf_r+0xbf8>
 800925c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8009260:	e3c6      	b.n	80099f0 <_vfprintf_r+0x1438>
 8009262:	9b06      	ldr	r3, [sp, #24]
 8009264:	2b00      	cmp	r3, #0
 8009266:	f000 8390 	beq.w	800998a <_vfprintf_r+0x13d2>
 800926a:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800926e:	2300      	movs	r3, #0
 8009270:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8009274:	9607      	str	r6, [sp, #28]
 8009276:	f7ff bb5c 	b.w	8008932 <_vfprintf_r+0x37a>
 800927a:	2010      	movs	r0, #16
 800927c:	4403      	add	r3, r0
 800927e:	2a07      	cmp	r2, #7
 8009280:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8009284:	6060      	str	r0, [r4, #4]
 8009286:	dd08      	ble.n	800929a <_vfprintf_r+0xce2>
 8009288:	9803      	ldr	r0, [sp, #12]
 800928a:	aa26      	add	r2, sp, #152	@ 0x98
 800928c:	4659      	mov	r1, fp
 800928e:	f000 fbff 	bl	8009a90 <__sprint_r>
 8009292:	2800      	cmp	r0, #0
 8009294:	f040 8357 	bne.w	8009946 <_vfprintf_r+0x138e>
 8009298:	a929      	add	r1, sp, #164	@ 0xa4
 800929a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800929c:	3b10      	subs	r3, #16
 800929e:	9313      	str	r3, [sp, #76]	@ 0x4c
 80092a0:	460c      	mov	r4, r1
 80092a2:	e547      	b.n	8008d34 <_vfprintf_r+0x77c>
 80092a4:	460c      	mov	r4, r1
 80092a6:	e562      	b.n	8008d6e <_vfprintf_r+0x7b6>
 80092a8:	9803      	ldr	r0, [sp, #12]
 80092aa:	aa26      	add	r2, sp, #152	@ 0x98
 80092ac:	4659      	mov	r1, fp
 80092ae:	f000 fbef 	bl	8009a90 <__sprint_r>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	f040 8347 	bne.w	8009946 <_vfprintf_r+0x138e>
 80092b8:	ac29      	add	r4, sp, #164	@ 0xa4
 80092ba:	e56a      	b.n	8008d92 <_vfprintf_r+0x7da>
 80092bc:	9803      	ldr	r0, [sp, #12]
 80092be:	aa26      	add	r2, sp, #152	@ 0x98
 80092c0:	4659      	mov	r1, fp
 80092c2:	f000 fbe5 	bl	8009a90 <__sprint_r>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	f040 833d 	bne.w	8009946 <_vfprintf_r+0x138e>
 80092cc:	ac29      	add	r4, sp, #164	@ 0xa4
 80092ce:	e570      	b.n	8008db2 <_vfprintf_r+0x7fa>
 80092d0:	2010      	movs	r0, #16
 80092d2:	4403      	add	r3, r0
 80092d4:	2a07      	cmp	r2, #7
 80092d6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80092da:	6060      	str	r0, [r4, #4]
 80092dc:	dd08      	ble.n	80092f0 <_vfprintf_r+0xd38>
 80092de:	9803      	ldr	r0, [sp, #12]
 80092e0:	aa26      	add	r2, sp, #152	@ 0x98
 80092e2:	4659      	mov	r1, fp
 80092e4:	f000 fbd4 	bl	8009a90 <__sprint_r>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	f040 832c 	bne.w	8009946 <_vfprintf_r+0x138e>
 80092ee:	a929      	add	r1, sp, #164	@ 0xa4
 80092f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80092f2:	3b10      	subs	r3, #16
 80092f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80092f6:	460c      	mov	r4, r1
 80092f8:	e564      	b.n	8008dc4 <_vfprintf_r+0x80c>
 80092fa:	460c      	mov	r4, r1
 80092fc:	e57f      	b.n	8008dfe <_vfprintf_r+0x846>
 80092fe:	2010      	movs	r0, #16
 8009300:	4403      	add	r3, r0
 8009302:	2a07      	cmp	r2, #7
 8009304:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8009308:	6060      	str	r0, [r4, #4]
 800930a:	dd08      	ble.n	800931e <_vfprintf_r+0xd66>
 800930c:	9803      	ldr	r0, [sp, #12]
 800930e:	aa26      	add	r2, sp, #152	@ 0x98
 8009310:	4659      	mov	r1, fp
 8009312:	f000 fbbd 	bl	8009a90 <__sprint_r>
 8009316:	2800      	cmp	r0, #0
 8009318:	f040 8315 	bne.w	8009946 <_vfprintf_r+0x138e>
 800931c:	a929      	add	r1, sp, #164	@ 0xa4
 800931e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009320:	3b10      	subs	r3, #16
 8009322:	9310      	str	r3, [sp, #64]	@ 0x40
 8009324:	460c      	mov	r4, r1
 8009326:	e570      	b.n	8008e0a <_vfprintf_r+0x852>
 8009328:	460c      	mov	r4, r1
 800932a:	e58b      	b.n	8008e44 <_vfprintf_r+0x88c>
 800932c:	0800d3e6 	.word	0x0800d3e6
 8009330:	0800d3f7 	.word	0x0800d3f7
 8009334:	9b06      	ldr	r3, [sp, #24]
 8009336:	2b65      	cmp	r3, #101	@ 0x65
 8009338:	f340 8245 	ble.w	80097c6 <_vfprintf_r+0x120e>
 800933c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009340:	2200      	movs	r2, #0
 8009342:	2300      	movs	r3, #0
 8009344:	f7f7 fbd0 	bl	8000ae8 <__aeabi_dcmpeq>
 8009348:	2800      	cmp	r0, #0
 800934a:	d06a      	beq.n	8009422 <_vfprintf_r+0xe6a>
 800934c:	4b73      	ldr	r3, [pc, #460]	@ (800951c <_vfprintf_r+0xf64>)
 800934e:	6023      	str	r3, [r4, #0]
 8009350:	2301      	movs	r3, #1
 8009352:	6063      	str	r3, [r4, #4]
 8009354:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009356:	3301      	adds	r3, #1
 8009358:	9328      	str	r3, [sp, #160]	@ 0xa0
 800935a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800935c:	3301      	adds	r3, #1
 800935e:	2b07      	cmp	r3, #7
 8009360:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009362:	dc37      	bgt.n	80093d4 <_vfprintf_r+0xe1c>
 8009364:	3408      	adds	r4, #8
 8009366:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009368:	9a04      	ldr	r2, [sp, #16]
 800936a:	4293      	cmp	r3, r2
 800936c:	db02      	blt.n	8009374 <_vfprintf_r+0xdbc>
 800936e:	07e9      	lsls	r1, r5, #31
 8009370:	f57f ad78 	bpl.w	8008e64 <_vfprintf_r+0x8ac>
 8009374:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009376:	6023      	str	r3, [r4, #0]
 8009378:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800937a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800937c:	6063      	str	r3, [r4, #4]
 800937e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009380:	4413      	add	r3, r2
 8009382:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009384:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009386:	3301      	adds	r3, #1
 8009388:	2b07      	cmp	r3, #7
 800938a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800938c:	dc2c      	bgt.n	80093e8 <_vfprintf_r+0xe30>
 800938e:	3408      	adds	r4, #8
 8009390:	9b04      	ldr	r3, [sp, #16]
 8009392:	1e5e      	subs	r6, r3, #1
 8009394:	2e00      	cmp	r6, #0
 8009396:	f77f ad65 	ble.w	8008e64 <_vfprintf_r+0x8ac>
 800939a:	4f61      	ldr	r7, [pc, #388]	@ (8009520 <_vfprintf_r+0xf68>)
 800939c:	f04f 0810 	mov.w	r8, #16
 80093a0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80093a4:	2e10      	cmp	r6, #16
 80093a6:	f103 0301 	add.w	r3, r3, #1
 80093aa:	f104 0108 	add.w	r1, r4, #8
 80093ae:	6027      	str	r7, [r4, #0]
 80093b0:	dc24      	bgt.n	80093fc <_vfprintf_r+0xe44>
 80093b2:	6066      	str	r6, [r4, #4]
 80093b4:	2b07      	cmp	r3, #7
 80093b6:	4416      	add	r6, r2
 80093b8:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80093bc:	f340 82a2 	ble.w	8009904 <_vfprintf_r+0x134c>
 80093c0:	9803      	ldr	r0, [sp, #12]
 80093c2:	aa26      	add	r2, sp, #152	@ 0x98
 80093c4:	4659      	mov	r1, fp
 80093c6:	f000 fb63 	bl	8009a90 <__sprint_r>
 80093ca:	2800      	cmp	r0, #0
 80093cc:	f040 82bb 	bne.w	8009946 <_vfprintf_r+0x138e>
 80093d0:	ac29      	add	r4, sp, #164	@ 0xa4
 80093d2:	e547      	b.n	8008e64 <_vfprintf_r+0x8ac>
 80093d4:	9803      	ldr	r0, [sp, #12]
 80093d6:	aa26      	add	r2, sp, #152	@ 0x98
 80093d8:	4659      	mov	r1, fp
 80093da:	f000 fb59 	bl	8009a90 <__sprint_r>
 80093de:	2800      	cmp	r0, #0
 80093e0:	f040 82b1 	bne.w	8009946 <_vfprintf_r+0x138e>
 80093e4:	ac29      	add	r4, sp, #164	@ 0xa4
 80093e6:	e7be      	b.n	8009366 <_vfprintf_r+0xdae>
 80093e8:	9803      	ldr	r0, [sp, #12]
 80093ea:	aa26      	add	r2, sp, #152	@ 0x98
 80093ec:	4659      	mov	r1, fp
 80093ee:	f000 fb4f 	bl	8009a90 <__sprint_r>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	f040 82a7 	bne.w	8009946 <_vfprintf_r+0x138e>
 80093f8:	ac29      	add	r4, sp, #164	@ 0xa4
 80093fa:	e7c9      	b.n	8009390 <_vfprintf_r+0xdd8>
 80093fc:	3210      	adds	r2, #16
 80093fe:	2b07      	cmp	r3, #7
 8009400:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8009404:	f8c4 8004 	str.w	r8, [r4, #4]
 8009408:	dd08      	ble.n	800941c <_vfprintf_r+0xe64>
 800940a:	9803      	ldr	r0, [sp, #12]
 800940c:	aa26      	add	r2, sp, #152	@ 0x98
 800940e:	4659      	mov	r1, fp
 8009410:	f000 fb3e 	bl	8009a90 <__sprint_r>
 8009414:	2800      	cmp	r0, #0
 8009416:	f040 8296 	bne.w	8009946 <_vfprintf_r+0x138e>
 800941a:	a929      	add	r1, sp, #164	@ 0xa4
 800941c:	3e10      	subs	r6, #16
 800941e:	460c      	mov	r4, r1
 8009420:	e7be      	b.n	80093a0 <_vfprintf_r+0xde8>
 8009422:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009424:	2b00      	cmp	r3, #0
 8009426:	dc7d      	bgt.n	8009524 <_vfprintf_r+0xf6c>
 8009428:	4b3c      	ldr	r3, [pc, #240]	@ (800951c <_vfprintf_r+0xf64>)
 800942a:	6023      	str	r3, [r4, #0]
 800942c:	2301      	movs	r3, #1
 800942e:	6063      	str	r3, [r4, #4]
 8009430:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009432:	3301      	adds	r3, #1
 8009434:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009436:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009438:	3301      	adds	r3, #1
 800943a:	2b07      	cmp	r3, #7
 800943c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800943e:	dc46      	bgt.n	80094ce <_vfprintf_r+0xf16>
 8009440:	3408      	adds	r4, #8
 8009442:	9904      	ldr	r1, [sp, #16]
 8009444:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009446:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8009448:	430b      	orrs	r3, r1
 800944a:	f005 0101 	and.w	r1, r5, #1
 800944e:	430b      	orrs	r3, r1
 8009450:	f43f ad08 	beq.w	8008e64 <_vfprintf_r+0x8ac>
 8009454:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009456:	6023      	str	r3, [r4, #0]
 8009458:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800945a:	6063      	str	r3, [r4, #4]
 800945c:	441a      	add	r2, r3
 800945e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009460:	9228      	str	r2, [sp, #160]	@ 0xa0
 8009462:	3301      	adds	r3, #1
 8009464:	2b07      	cmp	r3, #7
 8009466:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009468:	dc3b      	bgt.n	80094e2 <_vfprintf_r+0xf2a>
 800946a:	f104 0308 	add.w	r3, r4, #8
 800946e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009470:	2e00      	cmp	r6, #0
 8009472:	da1b      	bge.n	80094ac <_vfprintf_r+0xef4>
 8009474:	4f2a      	ldr	r7, [pc, #168]	@ (8009520 <_vfprintf_r+0xf68>)
 8009476:	4276      	negs	r6, r6
 8009478:	461a      	mov	r2, r3
 800947a:	2410      	movs	r4, #16
 800947c:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8009480:	2e10      	cmp	r6, #16
 8009482:	f101 0101 	add.w	r1, r1, #1
 8009486:	f103 0308 	add.w	r3, r3, #8
 800948a:	6017      	str	r7, [r2, #0]
 800948c:	dc33      	bgt.n	80094f6 <_vfprintf_r+0xf3e>
 800948e:	6056      	str	r6, [r2, #4]
 8009490:	2907      	cmp	r1, #7
 8009492:	4406      	add	r6, r0
 8009494:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8009498:	dd08      	ble.n	80094ac <_vfprintf_r+0xef4>
 800949a:	9803      	ldr	r0, [sp, #12]
 800949c:	aa26      	add	r2, sp, #152	@ 0x98
 800949e:	4659      	mov	r1, fp
 80094a0:	f000 faf6 	bl	8009a90 <__sprint_r>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	f040 824e 	bne.w	8009946 <_vfprintf_r+0x138e>
 80094aa:	ab29      	add	r3, sp, #164	@ 0xa4
 80094ac:	9a04      	ldr	r2, [sp, #16]
 80094ae:	9904      	ldr	r1, [sp, #16]
 80094b0:	605a      	str	r2, [r3, #4]
 80094b2:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80094b4:	f8c3 8000 	str.w	r8, [r3]
 80094b8:	440a      	add	r2, r1
 80094ba:	9228      	str	r2, [sp, #160]	@ 0xa0
 80094bc:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80094be:	3201      	adds	r2, #1
 80094c0:	2a07      	cmp	r2, #7
 80094c2:	9227      	str	r2, [sp, #156]	@ 0x9c
 80094c4:	f73f af7c 	bgt.w	80093c0 <_vfprintf_r+0xe08>
 80094c8:	f103 0408 	add.w	r4, r3, #8
 80094cc:	e4ca      	b.n	8008e64 <_vfprintf_r+0x8ac>
 80094ce:	9803      	ldr	r0, [sp, #12]
 80094d0:	aa26      	add	r2, sp, #152	@ 0x98
 80094d2:	4659      	mov	r1, fp
 80094d4:	f000 fadc 	bl	8009a90 <__sprint_r>
 80094d8:	2800      	cmp	r0, #0
 80094da:	f040 8234 	bne.w	8009946 <_vfprintf_r+0x138e>
 80094de:	ac29      	add	r4, sp, #164	@ 0xa4
 80094e0:	e7af      	b.n	8009442 <_vfprintf_r+0xe8a>
 80094e2:	9803      	ldr	r0, [sp, #12]
 80094e4:	aa26      	add	r2, sp, #152	@ 0x98
 80094e6:	4659      	mov	r1, fp
 80094e8:	f000 fad2 	bl	8009a90 <__sprint_r>
 80094ec:	2800      	cmp	r0, #0
 80094ee:	f040 822a 	bne.w	8009946 <_vfprintf_r+0x138e>
 80094f2:	ab29      	add	r3, sp, #164	@ 0xa4
 80094f4:	e7bb      	b.n	800946e <_vfprintf_r+0xeb6>
 80094f6:	3010      	adds	r0, #16
 80094f8:	2907      	cmp	r1, #7
 80094fa:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 80094fe:	6054      	str	r4, [r2, #4]
 8009500:	dd08      	ble.n	8009514 <_vfprintf_r+0xf5c>
 8009502:	9803      	ldr	r0, [sp, #12]
 8009504:	aa26      	add	r2, sp, #152	@ 0x98
 8009506:	4659      	mov	r1, fp
 8009508:	f000 fac2 	bl	8009a90 <__sprint_r>
 800950c:	2800      	cmp	r0, #0
 800950e:	f040 821a 	bne.w	8009946 <_vfprintf_r+0x138e>
 8009512:	ab29      	add	r3, sp, #164	@ 0xa4
 8009514:	3e10      	subs	r6, #16
 8009516:	461a      	mov	r2, r3
 8009518:	e7b0      	b.n	800947c <_vfprintf_r+0xec4>
 800951a:	bf00      	nop
 800951c:	0800d408 	.word	0x0800d408
 8009520:	0800d42a 	.word	0x0800d42a
 8009524:	9b04      	ldr	r3, [sp, #16]
 8009526:	4443      	add	r3, r8
 8009528:	9313      	str	r3, [sp, #76]	@ 0x4c
 800952a:	9b04      	ldr	r3, [sp, #16]
 800952c:	42b3      	cmp	r3, r6
 800952e:	bfa8      	it	ge
 8009530:	4633      	movge	r3, r6
 8009532:	2b00      	cmp	r3, #0
 8009534:	4699      	mov	r9, r3
 8009536:	dd0b      	ble.n	8009550 <_vfprintf_r+0xf98>
 8009538:	e9c4 8300 	strd	r8, r3, [r4]
 800953c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800953e:	444b      	add	r3, r9
 8009540:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009542:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009544:	3301      	adds	r3, #1
 8009546:	2b07      	cmp	r3, #7
 8009548:	9327      	str	r3, [sp, #156]	@ 0x9c
 800954a:	f300 8089 	bgt.w	8009660 <_vfprintf_r+0x10a8>
 800954e:	3408      	adds	r4, #8
 8009550:	f1b9 0f00 	cmp.w	r9, #0
 8009554:	bfac      	ite	ge
 8009556:	eba6 0309 	subge.w	r3, r6, r9
 800955a:	4633      	movlt	r3, r6
 800955c:	2b00      	cmp	r3, #0
 800955e:	9306      	str	r3, [sp, #24]
 8009560:	dd1c      	ble.n	800959c <_vfprintf_r+0xfe4>
 8009562:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 80098c8 <_vfprintf_r+0x1310>
 8009566:	9806      	ldr	r0, [sp, #24]
 8009568:	f8c4 9000 	str.w	r9, [r4]
 800956c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8009570:	2810      	cmp	r0, #16
 8009572:	f102 0201 	add.w	r2, r2, #1
 8009576:	f104 0108 	add.w	r1, r4, #8
 800957a:	dc7b      	bgt.n	8009674 <_vfprintf_r+0x10bc>
 800957c:	4403      	add	r3, r0
 800957e:	2a07      	cmp	r2, #7
 8009580:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8009584:	6060      	str	r0, [r4, #4]
 8009586:	f340 808a 	ble.w	800969e <_vfprintf_r+0x10e6>
 800958a:	9803      	ldr	r0, [sp, #12]
 800958c:	aa26      	add	r2, sp, #152	@ 0x98
 800958e:	4659      	mov	r1, fp
 8009590:	f000 fa7e 	bl	8009a90 <__sprint_r>
 8009594:	2800      	cmp	r0, #0
 8009596:	f040 81d6 	bne.w	8009946 <_vfprintf_r+0x138e>
 800959a:	ac29      	add	r4, sp, #164	@ 0xa4
 800959c:	056a      	lsls	r2, r5, #21
 800959e:	44b0      	add	r8, r6
 80095a0:	d508      	bpl.n	80095b4 <_vfprintf_r+0xffc>
 80095a2:	9b08      	ldr	r3, [sp, #32]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d17c      	bne.n	80096a2 <_vfprintf_r+0x10ea>
 80095a8:	2f00      	cmp	r7, #0
 80095aa:	d17c      	bne.n	80096a6 <_vfprintf_r+0x10ee>
 80095ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80095ae:	4598      	cmp	r8, r3
 80095b0:	bf28      	it	cs
 80095b2:	4698      	movcs	r8, r3
 80095b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80095b6:	9a04      	ldr	r2, [sp, #16]
 80095b8:	4293      	cmp	r3, r2
 80095ba:	db01      	blt.n	80095c0 <_vfprintf_r+0x1008>
 80095bc:	07eb      	lsls	r3, r5, #31
 80095be:	d50e      	bpl.n	80095de <_vfprintf_r+0x1026>
 80095c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80095c2:	6023      	str	r3, [r4, #0]
 80095c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095c6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80095c8:	6063      	str	r3, [r4, #4]
 80095ca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80095cc:	4413      	add	r3, r2
 80095ce:	9328      	str	r3, [sp, #160]	@ 0xa0
 80095d0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80095d2:	3301      	adds	r3, #1
 80095d4:	2b07      	cmp	r3, #7
 80095d6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80095d8:	f300 80e1 	bgt.w	800979e <_vfprintf_r+0x11e6>
 80095dc:	3408      	adds	r4, #8
 80095de:	9b04      	ldr	r3, [sp, #16]
 80095e0:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 80095e2:	1bdf      	subs	r7, r3, r7
 80095e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80095e6:	eba3 0308 	sub.w	r3, r3, r8
 80095ea:	429f      	cmp	r7, r3
 80095ec:	bfa8      	it	ge
 80095ee:	461f      	movge	r7, r3
 80095f0:	2f00      	cmp	r7, #0
 80095f2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80095f4:	dd0a      	ble.n	800960c <_vfprintf_r+0x1054>
 80095f6:	443b      	add	r3, r7
 80095f8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80095fa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80095fc:	3301      	adds	r3, #1
 80095fe:	2b07      	cmp	r3, #7
 8009600:	e9c4 8700 	strd	r8, r7, [r4]
 8009604:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009606:	f300 80d4 	bgt.w	80097b2 <_vfprintf_r+0x11fa>
 800960a:	3408      	adds	r4, #8
 800960c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800960e:	9b04      	ldr	r3, [sp, #16]
 8009610:	2f00      	cmp	r7, #0
 8009612:	eba3 0606 	sub.w	r6, r3, r6
 8009616:	bfa8      	it	ge
 8009618:	1bf6      	subge	r6, r6, r7
 800961a:	2e00      	cmp	r6, #0
 800961c:	f77f ac22 	ble.w	8008e64 <_vfprintf_r+0x8ac>
 8009620:	4fa9      	ldr	r7, [pc, #676]	@ (80098c8 <_vfprintf_r+0x1310>)
 8009622:	f04f 0810 	mov.w	r8, #16
 8009626:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800962a:	2e10      	cmp	r6, #16
 800962c:	f103 0301 	add.w	r3, r3, #1
 8009630:	f104 0108 	add.w	r1, r4, #8
 8009634:	6027      	str	r7, [r4, #0]
 8009636:	f77f aebc 	ble.w	80093b2 <_vfprintf_r+0xdfa>
 800963a:	3210      	adds	r2, #16
 800963c:	2b07      	cmp	r3, #7
 800963e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8009642:	f8c4 8004 	str.w	r8, [r4, #4]
 8009646:	dd08      	ble.n	800965a <_vfprintf_r+0x10a2>
 8009648:	9803      	ldr	r0, [sp, #12]
 800964a:	aa26      	add	r2, sp, #152	@ 0x98
 800964c:	4659      	mov	r1, fp
 800964e:	f000 fa1f 	bl	8009a90 <__sprint_r>
 8009652:	2800      	cmp	r0, #0
 8009654:	f040 8177 	bne.w	8009946 <_vfprintf_r+0x138e>
 8009658:	a929      	add	r1, sp, #164	@ 0xa4
 800965a:	3e10      	subs	r6, #16
 800965c:	460c      	mov	r4, r1
 800965e:	e7e2      	b.n	8009626 <_vfprintf_r+0x106e>
 8009660:	9803      	ldr	r0, [sp, #12]
 8009662:	aa26      	add	r2, sp, #152	@ 0x98
 8009664:	4659      	mov	r1, fp
 8009666:	f000 fa13 	bl	8009a90 <__sprint_r>
 800966a:	2800      	cmp	r0, #0
 800966c:	f040 816b 	bne.w	8009946 <_vfprintf_r+0x138e>
 8009670:	ac29      	add	r4, sp, #164	@ 0xa4
 8009672:	e76d      	b.n	8009550 <_vfprintf_r+0xf98>
 8009674:	2010      	movs	r0, #16
 8009676:	4403      	add	r3, r0
 8009678:	2a07      	cmp	r2, #7
 800967a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800967e:	6060      	str	r0, [r4, #4]
 8009680:	dd08      	ble.n	8009694 <_vfprintf_r+0x10dc>
 8009682:	9803      	ldr	r0, [sp, #12]
 8009684:	aa26      	add	r2, sp, #152	@ 0x98
 8009686:	4659      	mov	r1, fp
 8009688:	f000 fa02 	bl	8009a90 <__sprint_r>
 800968c:	2800      	cmp	r0, #0
 800968e:	f040 815a 	bne.w	8009946 <_vfprintf_r+0x138e>
 8009692:	a929      	add	r1, sp, #164	@ 0xa4
 8009694:	9b06      	ldr	r3, [sp, #24]
 8009696:	3b10      	subs	r3, #16
 8009698:	9306      	str	r3, [sp, #24]
 800969a:	460c      	mov	r4, r1
 800969c:	e763      	b.n	8009566 <_vfprintf_r+0xfae>
 800969e:	460c      	mov	r4, r1
 80096a0:	e77c      	b.n	800959c <_vfprintf_r+0xfe4>
 80096a2:	2f00      	cmp	r7, #0
 80096a4:	d04b      	beq.n	800973e <_vfprintf_r+0x1186>
 80096a6:	3f01      	subs	r7, #1
 80096a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80096aa:	6023      	str	r3, [r4, #0]
 80096ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80096ae:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80096b0:	6063      	str	r3, [r4, #4]
 80096b2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80096b4:	4413      	add	r3, r2
 80096b6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80096b8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80096ba:	3301      	adds	r3, #1
 80096bc:	2b07      	cmp	r3, #7
 80096be:	9327      	str	r3, [sp, #156]	@ 0x9c
 80096c0:	dc44      	bgt.n	800974c <_vfprintf_r+0x1194>
 80096c2:	3408      	adds	r4, #8
 80096c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096c6:	f893 9000 	ldrb.w	r9, [r3]
 80096ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80096cc:	eba3 0308 	sub.w	r3, r3, r8
 80096d0:	4599      	cmp	r9, r3
 80096d2:	bfa8      	it	ge
 80096d4:	4699      	movge	r9, r3
 80096d6:	f1b9 0f00 	cmp.w	r9, #0
 80096da:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80096dc:	dd09      	ble.n	80096f2 <_vfprintf_r+0x113a>
 80096de:	444b      	add	r3, r9
 80096e0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80096e2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80096e4:	3301      	adds	r3, #1
 80096e6:	2b07      	cmp	r3, #7
 80096e8:	e9c4 8900 	strd	r8, r9, [r4]
 80096ec:	9327      	str	r3, [sp, #156]	@ 0x9c
 80096ee:	dc37      	bgt.n	8009760 <_vfprintf_r+0x11a8>
 80096f0:	3408      	adds	r4, #8
 80096f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096f4:	781e      	ldrb	r6, [r3, #0]
 80096f6:	f1b9 0f00 	cmp.w	r9, #0
 80096fa:	bfa8      	it	ge
 80096fc:	eba6 0609 	subge.w	r6, r6, r9
 8009700:	2e00      	cmp	r6, #0
 8009702:	dd18      	ble.n	8009736 <_vfprintf_r+0x117e>
 8009704:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8009708:	486f      	ldr	r0, [pc, #444]	@ (80098c8 <_vfprintf_r+0x1310>)
 800970a:	6020      	str	r0, [r4, #0]
 800970c:	2e10      	cmp	r6, #16
 800970e:	f103 0301 	add.w	r3, r3, #1
 8009712:	f104 0108 	add.w	r1, r4, #8
 8009716:	dc2d      	bgt.n	8009774 <_vfprintf_r+0x11bc>
 8009718:	6066      	str	r6, [r4, #4]
 800971a:	2b07      	cmp	r3, #7
 800971c:	4416      	add	r6, r2
 800971e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8009722:	dd3a      	ble.n	800979a <_vfprintf_r+0x11e2>
 8009724:	9803      	ldr	r0, [sp, #12]
 8009726:	aa26      	add	r2, sp, #152	@ 0x98
 8009728:	4659      	mov	r1, fp
 800972a:	f000 f9b1 	bl	8009a90 <__sprint_r>
 800972e:	2800      	cmp	r0, #0
 8009730:	f040 8109 	bne.w	8009946 <_vfprintf_r+0x138e>
 8009734:	ac29      	add	r4, sp, #164	@ 0xa4
 8009736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	4498      	add	r8, r3
 800973c:	e731      	b.n	80095a2 <_vfprintf_r+0xfea>
 800973e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009740:	3b01      	subs	r3, #1
 8009742:	9309      	str	r3, [sp, #36]	@ 0x24
 8009744:	9b08      	ldr	r3, [sp, #32]
 8009746:	3b01      	subs	r3, #1
 8009748:	9308      	str	r3, [sp, #32]
 800974a:	e7ad      	b.n	80096a8 <_vfprintf_r+0x10f0>
 800974c:	9803      	ldr	r0, [sp, #12]
 800974e:	aa26      	add	r2, sp, #152	@ 0x98
 8009750:	4659      	mov	r1, fp
 8009752:	f000 f99d 	bl	8009a90 <__sprint_r>
 8009756:	2800      	cmp	r0, #0
 8009758:	f040 80f5 	bne.w	8009946 <_vfprintf_r+0x138e>
 800975c:	ac29      	add	r4, sp, #164	@ 0xa4
 800975e:	e7b1      	b.n	80096c4 <_vfprintf_r+0x110c>
 8009760:	9803      	ldr	r0, [sp, #12]
 8009762:	aa26      	add	r2, sp, #152	@ 0x98
 8009764:	4659      	mov	r1, fp
 8009766:	f000 f993 	bl	8009a90 <__sprint_r>
 800976a:	2800      	cmp	r0, #0
 800976c:	f040 80eb 	bne.w	8009946 <_vfprintf_r+0x138e>
 8009770:	ac29      	add	r4, sp, #164	@ 0xa4
 8009772:	e7be      	b.n	80096f2 <_vfprintf_r+0x113a>
 8009774:	2010      	movs	r0, #16
 8009776:	4402      	add	r2, r0
 8009778:	2b07      	cmp	r3, #7
 800977a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800977e:	6060      	str	r0, [r4, #4]
 8009780:	dd08      	ble.n	8009794 <_vfprintf_r+0x11dc>
 8009782:	9803      	ldr	r0, [sp, #12]
 8009784:	aa26      	add	r2, sp, #152	@ 0x98
 8009786:	4659      	mov	r1, fp
 8009788:	f000 f982 	bl	8009a90 <__sprint_r>
 800978c:	2800      	cmp	r0, #0
 800978e:	f040 80da 	bne.w	8009946 <_vfprintf_r+0x138e>
 8009792:	a929      	add	r1, sp, #164	@ 0xa4
 8009794:	3e10      	subs	r6, #16
 8009796:	460c      	mov	r4, r1
 8009798:	e7b4      	b.n	8009704 <_vfprintf_r+0x114c>
 800979a:	460c      	mov	r4, r1
 800979c:	e7cb      	b.n	8009736 <_vfprintf_r+0x117e>
 800979e:	9803      	ldr	r0, [sp, #12]
 80097a0:	aa26      	add	r2, sp, #152	@ 0x98
 80097a2:	4659      	mov	r1, fp
 80097a4:	f000 f974 	bl	8009a90 <__sprint_r>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	f040 80cc 	bne.w	8009946 <_vfprintf_r+0x138e>
 80097ae:	ac29      	add	r4, sp, #164	@ 0xa4
 80097b0:	e715      	b.n	80095de <_vfprintf_r+0x1026>
 80097b2:	9803      	ldr	r0, [sp, #12]
 80097b4:	aa26      	add	r2, sp, #152	@ 0x98
 80097b6:	4659      	mov	r1, fp
 80097b8:	f000 f96a 	bl	8009a90 <__sprint_r>
 80097bc:	2800      	cmp	r0, #0
 80097be:	f040 80c2 	bne.w	8009946 <_vfprintf_r+0x138e>
 80097c2:	ac29      	add	r4, sp, #164	@ 0xa4
 80097c4:	e722      	b.n	800960c <_vfprintf_r+0x1054>
 80097c6:	9904      	ldr	r1, [sp, #16]
 80097c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80097ca:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80097cc:	2901      	cmp	r1, #1
 80097ce:	f103 0301 	add.w	r3, r3, #1
 80097d2:	f102 0201 	add.w	r2, r2, #1
 80097d6:	f104 0608 	add.w	r6, r4, #8
 80097da:	dc02      	bgt.n	80097e2 <_vfprintf_r+0x122a>
 80097dc:	07ef      	lsls	r7, r5, #31
 80097de:	f140 8086 	bpl.w	80098ee <_vfprintf_r+0x1336>
 80097e2:	2101      	movs	r1, #1
 80097e4:	2a07      	cmp	r2, #7
 80097e6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80097ea:	f8c4 8000 	str.w	r8, [r4]
 80097ee:	6061      	str	r1, [r4, #4]
 80097f0:	dd08      	ble.n	8009804 <_vfprintf_r+0x124c>
 80097f2:	9803      	ldr	r0, [sp, #12]
 80097f4:	aa26      	add	r2, sp, #152	@ 0x98
 80097f6:	4659      	mov	r1, fp
 80097f8:	f000 f94a 	bl	8009a90 <__sprint_r>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	f040 80a2 	bne.w	8009946 <_vfprintf_r+0x138e>
 8009802:	ae29      	add	r6, sp, #164	@ 0xa4
 8009804:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009806:	6033      	str	r3, [r6, #0]
 8009808:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800980a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800980c:	6073      	str	r3, [r6, #4]
 800980e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009810:	4413      	add	r3, r2
 8009812:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009814:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009816:	3301      	adds	r3, #1
 8009818:	2b07      	cmp	r3, #7
 800981a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800981c:	dc33      	bgt.n	8009886 <_vfprintf_r+0x12ce>
 800981e:	3608      	adds	r6, #8
 8009820:	9b04      	ldr	r3, [sp, #16]
 8009822:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009826:	1e5c      	subs	r4, r3, #1
 8009828:	2200      	movs	r2, #0
 800982a:	2300      	movs	r3, #0
 800982c:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 8009830:	f7f7 f95a 	bl	8000ae8 <__aeabi_dcmpeq>
 8009834:	2800      	cmp	r0, #0
 8009836:	d12f      	bne.n	8009898 <_vfprintf_r+0x12e0>
 8009838:	f108 0201 	add.w	r2, r8, #1
 800983c:	e9c6 2400 	strd	r2, r4, [r6]
 8009840:	9a04      	ldr	r2, [sp, #16]
 8009842:	f109 0301 	add.w	r3, r9, #1
 8009846:	3f01      	subs	r7, #1
 8009848:	4417      	add	r7, r2
 800984a:	2b07      	cmp	r3, #7
 800984c:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8009850:	dd56      	ble.n	8009900 <_vfprintf_r+0x1348>
 8009852:	9803      	ldr	r0, [sp, #12]
 8009854:	aa26      	add	r2, sp, #152	@ 0x98
 8009856:	4659      	mov	r1, fp
 8009858:	f000 f91a 	bl	8009a90 <__sprint_r>
 800985c:	2800      	cmp	r0, #0
 800985e:	d172      	bne.n	8009946 <_vfprintf_r+0x138e>
 8009860:	ae29      	add	r6, sp, #164	@ 0xa4
 8009862:	ab22      	add	r3, sp, #136	@ 0x88
 8009864:	6033      	str	r3, [r6, #0]
 8009866:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8009868:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800986a:	6073      	str	r3, [r6, #4]
 800986c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800986e:	4413      	add	r3, r2
 8009870:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009872:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009874:	3301      	adds	r3, #1
 8009876:	2b07      	cmp	r3, #7
 8009878:	9327      	str	r3, [sp, #156]	@ 0x9c
 800987a:	f73f ada1 	bgt.w	80093c0 <_vfprintf_r+0xe08>
 800987e:	f106 0408 	add.w	r4, r6, #8
 8009882:	f7ff baef 	b.w	8008e64 <_vfprintf_r+0x8ac>
 8009886:	9803      	ldr	r0, [sp, #12]
 8009888:	aa26      	add	r2, sp, #152	@ 0x98
 800988a:	4659      	mov	r1, fp
 800988c:	f000 f900 	bl	8009a90 <__sprint_r>
 8009890:	2800      	cmp	r0, #0
 8009892:	d158      	bne.n	8009946 <_vfprintf_r+0x138e>
 8009894:	ae29      	add	r6, sp, #164	@ 0xa4
 8009896:	e7c3      	b.n	8009820 <_vfprintf_r+0x1268>
 8009898:	9b04      	ldr	r3, [sp, #16]
 800989a:	2b01      	cmp	r3, #1
 800989c:	dde1      	ble.n	8009862 <_vfprintf_r+0x12aa>
 800989e:	4f0a      	ldr	r7, [pc, #40]	@ (80098c8 <_vfprintf_r+0x1310>)
 80098a0:	f04f 0810 	mov.w	r8, #16
 80098a4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80098a8:	2c10      	cmp	r4, #16
 80098aa:	f103 0301 	add.w	r3, r3, #1
 80098ae:	f106 0108 	add.w	r1, r6, #8
 80098b2:	6037      	str	r7, [r6, #0]
 80098b4:	dc0a      	bgt.n	80098cc <_vfprintf_r+0x1314>
 80098b6:	6074      	str	r4, [r6, #4]
 80098b8:	2b07      	cmp	r3, #7
 80098ba:	4414      	add	r4, r2
 80098bc:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 80098c0:	dcc7      	bgt.n	8009852 <_vfprintf_r+0x129a>
 80098c2:	460e      	mov	r6, r1
 80098c4:	e7cd      	b.n	8009862 <_vfprintf_r+0x12aa>
 80098c6:	bf00      	nop
 80098c8:	0800d42a 	.word	0x0800d42a
 80098cc:	3210      	adds	r2, #16
 80098ce:	2b07      	cmp	r3, #7
 80098d0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80098d4:	f8c6 8004 	str.w	r8, [r6, #4]
 80098d8:	dd06      	ble.n	80098e8 <_vfprintf_r+0x1330>
 80098da:	9803      	ldr	r0, [sp, #12]
 80098dc:	aa26      	add	r2, sp, #152	@ 0x98
 80098de:	4659      	mov	r1, fp
 80098e0:	f000 f8d6 	bl	8009a90 <__sprint_r>
 80098e4:	bb78      	cbnz	r0, 8009946 <_vfprintf_r+0x138e>
 80098e6:	a929      	add	r1, sp, #164	@ 0xa4
 80098e8:	3c10      	subs	r4, #16
 80098ea:	460e      	mov	r6, r1
 80098ec:	e7da      	b.n	80098a4 <_vfprintf_r+0x12ec>
 80098ee:	2101      	movs	r1, #1
 80098f0:	2a07      	cmp	r2, #7
 80098f2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80098f6:	f8c4 8000 	str.w	r8, [r4]
 80098fa:	6061      	str	r1, [r4, #4]
 80098fc:	ddb1      	ble.n	8009862 <_vfprintf_r+0x12aa>
 80098fe:	e7a8      	b.n	8009852 <_vfprintf_r+0x129a>
 8009900:	3608      	adds	r6, #8
 8009902:	e7ae      	b.n	8009862 <_vfprintf_r+0x12aa>
 8009904:	460c      	mov	r4, r1
 8009906:	f7ff baad 	b.w	8008e64 <_vfprintf_r+0x8ac>
 800990a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800990c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800990e:	1a9d      	subs	r5, r3, r2
 8009910:	2d00      	cmp	r5, #0
 8009912:	f77f aaaa 	ble.w	8008e6a <_vfprintf_r+0x8b2>
 8009916:	4e3d      	ldr	r6, [pc, #244]	@ (8009a0c <_vfprintf_r+0x1454>)
 8009918:	2710      	movs	r7, #16
 800991a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800991e:	2d10      	cmp	r5, #16
 8009920:	f103 0301 	add.w	r3, r3, #1
 8009924:	6026      	str	r6, [r4, #0]
 8009926:	dc18      	bgt.n	800995a <_vfprintf_r+0x13a2>
 8009928:	6065      	str	r5, [r4, #4]
 800992a:	2b07      	cmp	r3, #7
 800992c:	4415      	add	r5, r2
 800992e:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 8009932:	f77f aa9a 	ble.w	8008e6a <_vfprintf_r+0x8b2>
 8009936:	9803      	ldr	r0, [sp, #12]
 8009938:	aa26      	add	r2, sp, #152	@ 0x98
 800993a:	4659      	mov	r1, fp
 800993c:	f000 f8a8 	bl	8009a90 <__sprint_r>
 8009940:	2800      	cmp	r0, #0
 8009942:	f43f aa92 	beq.w	8008e6a <_vfprintf_r+0x8b2>
 8009946:	f1ba 0f00 	cmp.w	sl, #0
 800994a:	f43f a892 	beq.w	8008a72 <_vfprintf_r+0x4ba>
 800994e:	9803      	ldr	r0, [sp, #12]
 8009950:	4651      	mov	r1, sl
 8009952:	f7fd fb91 	bl	8007078 <_free_r>
 8009956:	f7ff b88c 	b.w	8008a72 <_vfprintf_r+0x4ba>
 800995a:	3210      	adds	r2, #16
 800995c:	2b07      	cmp	r3, #7
 800995e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8009962:	6067      	str	r7, [r4, #4]
 8009964:	dc02      	bgt.n	800996c <_vfprintf_r+0x13b4>
 8009966:	3408      	adds	r4, #8
 8009968:	3d10      	subs	r5, #16
 800996a:	e7d6      	b.n	800991a <_vfprintf_r+0x1362>
 800996c:	9803      	ldr	r0, [sp, #12]
 800996e:	aa26      	add	r2, sp, #152	@ 0x98
 8009970:	4659      	mov	r1, fp
 8009972:	f000 f88d 	bl	8009a90 <__sprint_r>
 8009976:	2800      	cmp	r0, #0
 8009978:	d1e5      	bne.n	8009946 <_vfprintf_r+0x138e>
 800997a:	ac29      	add	r4, sp, #164	@ 0xa4
 800997c:	e7f4      	b.n	8009968 <_vfprintf_r+0x13b0>
 800997e:	9803      	ldr	r0, [sp, #12]
 8009980:	4651      	mov	r1, sl
 8009982:	f7fd fb79 	bl	8007078 <_free_r>
 8009986:	f7ff ba88 	b.w	8008e9a <_vfprintf_r+0x8e2>
 800998a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800998c:	b91b      	cbnz	r3, 8009996 <_vfprintf_r+0x13de>
 800998e:	2300      	movs	r3, #0
 8009990:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009992:	f7ff b86e 	b.w	8008a72 <_vfprintf_r+0x4ba>
 8009996:	9803      	ldr	r0, [sp, #12]
 8009998:	aa26      	add	r2, sp, #152	@ 0x98
 800999a:	4659      	mov	r1, fp
 800999c:	f000 f878 	bl	8009a90 <__sprint_r>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d0f4      	beq.n	800998e <_vfprintf_r+0x13d6>
 80099a4:	f7ff b865 	b.w	8008a72 <_vfprintf_r+0x4ba>
 80099a8:	ea56 0207 	orrs.w	r2, r6, r7
 80099ac:	9508      	str	r5, [sp, #32]
 80099ae:	f43f ab75 	beq.w	800909c <_vfprintf_r+0xae4>
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	f43f abf6 	beq.w	80091a4 <_vfprintf_r+0xbec>
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 80099be:	f43f ac3a 	beq.w	8009236 <_vfprintf_r+0xc7e>
 80099c2:	f006 0307 	and.w	r3, r6, #7
 80099c6:	08f6      	lsrs	r6, r6, #3
 80099c8:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 80099cc:	08ff      	lsrs	r7, r7, #3
 80099ce:	3330      	adds	r3, #48	@ 0x30
 80099d0:	ea56 0107 	orrs.w	r1, r6, r7
 80099d4:	4642      	mov	r2, r8
 80099d6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80099da:	d1f2      	bne.n	80099c2 <_vfprintf_r+0x140a>
 80099dc:	9908      	ldr	r1, [sp, #32]
 80099de:	07ce      	lsls	r6, r1, #31
 80099e0:	d506      	bpl.n	80099f0 <_vfprintf_r+0x1438>
 80099e2:	2b30      	cmp	r3, #48	@ 0x30
 80099e4:	d004      	beq.n	80099f0 <_vfprintf_r+0x1438>
 80099e6:	2330      	movs	r3, #48	@ 0x30
 80099e8:	f808 3c01 	strb.w	r3, [r8, #-1]
 80099ec:	f1a2 0802 	sub.w	r8, r2, #2
 80099f0:	ab52      	add	r3, sp, #328	@ 0x148
 80099f2:	9d08      	ldr	r5, [sp, #32]
 80099f4:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 80099f8:	f04f 0a00 	mov.w	sl, #0
 80099fc:	eba3 0908 	sub.w	r9, r3, r8
 8009a00:	4657      	mov	r7, sl
 8009a02:	f8cd a020 	str.w	sl, [sp, #32]
 8009a06:	4656      	mov	r6, sl
 8009a08:	f7ff b978 	b.w	8008cfc <_vfprintf_r+0x744>
 8009a0c:	0800d43a 	.word	0x0800d43a

08009a10 <__sbprintf>:
 8009a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a12:	461f      	mov	r7, r3
 8009a14:	898b      	ldrh	r3, [r1, #12]
 8009a16:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8009a1a:	f023 0302 	bic.w	r3, r3, #2
 8009a1e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009a22:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8009a24:	9319      	str	r3, [sp, #100]	@ 0x64
 8009a26:	89cb      	ldrh	r3, [r1, #14]
 8009a28:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009a2c:	69cb      	ldr	r3, [r1, #28]
 8009a2e:	9307      	str	r3, [sp, #28]
 8009a30:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8009a32:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a34:	ab1a      	add	r3, sp, #104	@ 0x68
 8009a36:	9300      	str	r3, [sp, #0]
 8009a38:	9304      	str	r3, [sp, #16]
 8009a3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a3e:	4615      	mov	r5, r2
 8009a40:	4606      	mov	r6, r0
 8009a42:	9302      	str	r3, [sp, #8]
 8009a44:	9305      	str	r3, [sp, #20]
 8009a46:	a816      	add	r0, sp, #88	@ 0x58
 8009a48:	2300      	movs	r3, #0
 8009a4a:	460c      	mov	r4, r1
 8009a4c:	9306      	str	r3, [sp, #24]
 8009a4e:	f7fd fa8f 	bl	8006f70 <__retarget_lock_init_recursive>
 8009a52:	462a      	mov	r2, r5
 8009a54:	463b      	mov	r3, r7
 8009a56:	4669      	mov	r1, sp
 8009a58:	4630      	mov	r0, r6
 8009a5a:	f7fe fdad 	bl	80085b8 <_vfprintf_r>
 8009a5e:	1e05      	subs	r5, r0, #0
 8009a60:	db07      	blt.n	8009a72 <__sbprintf+0x62>
 8009a62:	4669      	mov	r1, sp
 8009a64:	4630      	mov	r0, r6
 8009a66:	f000 fdeb 	bl	800a640 <_fflush_r>
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	bf18      	it	ne
 8009a6e:	f04f 35ff 	movne.w	r5, #4294967295
 8009a72:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009a76:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8009a78:	065b      	lsls	r3, r3, #25
 8009a7a:	bf42      	ittt	mi
 8009a7c:	89a3      	ldrhmi	r3, [r4, #12]
 8009a7e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8009a82:	81a3      	strhmi	r3, [r4, #12]
 8009a84:	f7fd fa75 	bl	8006f72 <__retarget_lock_close_recursive>
 8009a88:	4628      	mov	r0, r5
 8009a8a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8009a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a90 <__sprint_r>:
 8009a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a94:	6893      	ldr	r3, [r2, #8]
 8009a96:	4680      	mov	r8, r0
 8009a98:	460e      	mov	r6, r1
 8009a9a:	4614      	mov	r4, r2
 8009a9c:	b343      	cbz	r3, 8009af0 <__sprint_r+0x60>
 8009a9e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8009aa0:	049d      	lsls	r5, r3, #18
 8009aa2:	d522      	bpl.n	8009aea <__sprint_r+0x5a>
 8009aa4:	6815      	ldr	r5, [r2, #0]
 8009aa6:	68a0      	ldr	r0, [r4, #8]
 8009aa8:	3508      	adds	r5, #8
 8009aaa:	b928      	cbnz	r0, 8009ab8 <__sprint_r+0x28>
 8009aac:	2300      	movs	r3, #0
 8009aae:	60a3      	str	r3, [r4, #8]
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	6063      	str	r3, [r4, #4]
 8009ab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab8:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 8009abc:	f04f 0900 	mov.w	r9, #0
 8009ac0:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 8009ac4:	45ca      	cmp	sl, r9
 8009ac6:	dc05      	bgt.n	8009ad4 <__sprint_r+0x44>
 8009ac8:	68a3      	ldr	r3, [r4, #8]
 8009aca:	f027 0703 	bic.w	r7, r7, #3
 8009ace:	1bdb      	subs	r3, r3, r7
 8009ad0:	60a3      	str	r3, [r4, #8]
 8009ad2:	e7e8      	b.n	8009aa6 <__sprint_r+0x16>
 8009ad4:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8009ad8:	4632      	mov	r2, r6
 8009ada:	4640      	mov	r0, r8
 8009adc:	f000 ffb9 	bl	800aa52 <_fputwc_r>
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	d0e3      	beq.n	8009aac <__sprint_r+0x1c>
 8009ae4:	f109 0901 	add.w	r9, r9, #1
 8009ae8:	e7ec      	b.n	8009ac4 <__sprint_r+0x34>
 8009aea:	f000 fdcf 	bl	800a68c <__sfvwrite_r>
 8009aee:	e7dd      	b.n	8009aac <__sprint_r+0x1c>
 8009af0:	4618      	mov	r0, r3
 8009af2:	e7dd      	b.n	8009ab0 <__sprint_r+0x20>

08009af4 <_vfiprintf_r>:
 8009af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af8:	b0bb      	sub	sp, #236	@ 0xec
 8009afa:	460f      	mov	r7, r1
 8009afc:	4693      	mov	fp, r2
 8009afe:	461c      	mov	r4, r3
 8009b00:	461d      	mov	r5, r3
 8009b02:	9000      	str	r0, [sp, #0]
 8009b04:	b118      	cbz	r0, 8009b0e <_vfiprintf_r+0x1a>
 8009b06:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009b08:	b90b      	cbnz	r3, 8009b0e <_vfiprintf_r+0x1a>
 8009b0a:	f7fd f805 	bl	8006b18 <__sinit>
 8009b0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b10:	07db      	lsls	r3, r3, #31
 8009b12:	d405      	bmi.n	8009b20 <_vfiprintf_r+0x2c>
 8009b14:	89bb      	ldrh	r3, [r7, #12]
 8009b16:	059e      	lsls	r6, r3, #22
 8009b18:	d402      	bmi.n	8009b20 <_vfiprintf_r+0x2c>
 8009b1a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009b1c:	f7fd fa2a 	bl	8006f74 <__retarget_lock_acquire_recursive>
 8009b20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009b24:	0498      	lsls	r0, r3, #18
 8009b26:	d406      	bmi.n	8009b36 <_vfiprintf_r+0x42>
 8009b28:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009b2c:	81bb      	strh	r3, [r7, #12]
 8009b2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009b34:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b36:	89bb      	ldrh	r3, [r7, #12]
 8009b38:	0719      	lsls	r1, r3, #28
 8009b3a:	d501      	bpl.n	8009b40 <_vfiprintf_r+0x4c>
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	b9ab      	cbnz	r3, 8009b6c <_vfiprintf_r+0x78>
 8009b40:	9800      	ldr	r0, [sp, #0]
 8009b42:	4639      	mov	r1, r7
 8009b44:	f000 feee 	bl	800a924 <__swsetup_r>
 8009b48:	b180      	cbz	r0, 8009b6c <_vfiprintf_r+0x78>
 8009b4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b4c:	07da      	lsls	r2, r3, #31
 8009b4e:	d506      	bpl.n	8009b5e <_vfiprintf_r+0x6a>
 8009b50:	f04f 33ff 	mov.w	r3, #4294967295
 8009b54:	9303      	str	r3, [sp, #12]
 8009b56:	9803      	ldr	r0, [sp, #12]
 8009b58:	b03b      	add	sp, #236	@ 0xec
 8009b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b5e:	89bb      	ldrh	r3, [r7, #12]
 8009b60:	059b      	lsls	r3, r3, #22
 8009b62:	d4f5      	bmi.n	8009b50 <_vfiprintf_r+0x5c>
 8009b64:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009b66:	f7fd fa06 	bl	8006f76 <__retarget_lock_release_recursive>
 8009b6a:	e7f1      	b.n	8009b50 <_vfiprintf_r+0x5c>
 8009b6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009b70:	f003 021a 	and.w	r2, r3, #26
 8009b74:	2a0a      	cmp	r2, #10
 8009b76:	d114      	bne.n	8009ba2 <_vfiprintf_r+0xae>
 8009b78:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009b7c:	2a00      	cmp	r2, #0
 8009b7e:	db10      	blt.n	8009ba2 <_vfiprintf_r+0xae>
 8009b80:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009b82:	07d6      	lsls	r6, r2, #31
 8009b84:	d404      	bmi.n	8009b90 <_vfiprintf_r+0x9c>
 8009b86:	059d      	lsls	r5, r3, #22
 8009b88:	d402      	bmi.n	8009b90 <_vfiprintf_r+0x9c>
 8009b8a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009b8c:	f7fd f9f3 	bl	8006f76 <__retarget_lock_release_recursive>
 8009b90:	9800      	ldr	r0, [sp, #0]
 8009b92:	4623      	mov	r3, r4
 8009b94:	465a      	mov	r2, fp
 8009b96:	4639      	mov	r1, r7
 8009b98:	b03b      	add	sp, #236	@ 0xec
 8009b9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b9e:	f000 bc31 	b.w	800a404 <__sbprintf>
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8009ba8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009bac:	ae11      	add	r6, sp, #68	@ 0x44
 8009bae:	960e      	str	r6, [sp, #56]	@ 0x38
 8009bb0:	9307      	str	r3, [sp, #28]
 8009bb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bb4:	9303      	str	r3, [sp, #12]
 8009bb6:	465b      	mov	r3, fp
 8009bb8:	461c      	mov	r4, r3
 8009bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bbe:	b10a      	cbz	r2, 8009bc4 <_vfiprintf_r+0xd0>
 8009bc0:	2a25      	cmp	r2, #37	@ 0x25
 8009bc2:	d1f9      	bne.n	8009bb8 <_vfiprintf_r+0xc4>
 8009bc4:	ebb4 080b 	subs.w	r8, r4, fp
 8009bc8:	d00d      	beq.n	8009be6 <_vfiprintf_r+0xf2>
 8009bca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009bcc:	4443      	add	r3, r8
 8009bce:	9310      	str	r3, [sp, #64]	@ 0x40
 8009bd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	2b07      	cmp	r3, #7
 8009bd6:	e9c6 b800 	strd	fp, r8, [r6]
 8009bda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009bdc:	dc75      	bgt.n	8009cca <_vfiprintf_r+0x1d6>
 8009bde:	3608      	adds	r6, #8
 8009be0:	9b03      	ldr	r3, [sp, #12]
 8009be2:	4443      	add	r3, r8
 8009be4:	9303      	str	r3, [sp, #12]
 8009be6:	7823      	ldrb	r3, [r4, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 83cd 	beq.w	800a388 <_vfiprintf_r+0x894>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8009bf8:	3401      	adds	r4, #1
 8009bfa:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8009bfe:	469a      	mov	sl, r3
 8009c00:	46a3      	mov	fp, r4
 8009c02:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8009c06:	f1a3 0220 	sub.w	r2, r3, #32
 8009c0a:	2a5a      	cmp	r2, #90	@ 0x5a
 8009c0c:	f200 8316 	bhi.w	800a23c <_vfiprintf_r+0x748>
 8009c10:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009c14:	0314009a 	.word	0x0314009a
 8009c18:	00a20314 	.word	0x00a20314
 8009c1c:	03140314 	.word	0x03140314
 8009c20:	00820314 	.word	0x00820314
 8009c24:	03140314 	.word	0x03140314
 8009c28:	00af00a5 	.word	0x00af00a5
 8009c2c:	00ac0314 	.word	0x00ac0314
 8009c30:	031400b1 	.word	0x031400b1
 8009c34:	00d000cd 	.word	0x00d000cd
 8009c38:	00d000d0 	.word	0x00d000d0
 8009c3c:	00d000d0 	.word	0x00d000d0
 8009c40:	00d000d0 	.word	0x00d000d0
 8009c44:	00d000d0 	.word	0x00d000d0
 8009c48:	03140314 	.word	0x03140314
 8009c4c:	03140314 	.word	0x03140314
 8009c50:	03140314 	.word	0x03140314
 8009c54:	03140314 	.word	0x03140314
 8009c58:	00f70314 	.word	0x00f70314
 8009c5c:	03140104 	.word	0x03140104
 8009c60:	03140314 	.word	0x03140314
 8009c64:	03140314 	.word	0x03140314
 8009c68:	03140314 	.word	0x03140314
 8009c6c:	03140314 	.word	0x03140314
 8009c70:	01520314 	.word	0x01520314
 8009c74:	03140314 	.word	0x03140314
 8009c78:	019a0314 	.word	0x019a0314
 8009c7c:	027a0314 	.word	0x027a0314
 8009c80:	03140314 	.word	0x03140314
 8009c84:	0314029a 	.word	0x0314029a
 8009c88:	03140314 	.word	0x03140314
 8009c8c:	03140314 	.word	0x03140314
 8009c90:	03140314 	.word	0x03140314
 8009c94:	03140314 	.word	0x03140314
 8009c98:	00f70314 	.word	0x00f70314
 8009c9c:	03140106 	.word	0x03140106
 8009ca0:	03140314 	.word	0x03140314
 8009ca4:	010600e0 	.word	0x010600e0
 8009ca8:	031400f1 	.word	0x031400f1
 8009cac:	031400eb 	.word	0x031400eb
 8009cb0:	01540132 	.word	0x01540132
 8009cb4:	00f10189 	.word	0x00f10189
 8009cb8:	019a0314 	.word	0x019a0314
 8009cbc:	027c0098 	.word	0x027c0098
 8009cc0:	03140314 	.word	0x03140314
 8009cc4:	03140065 	.word	0x03140065
 8009cc8:	0098      	.short	0x0098
 8009cca:	9800      	ldr	r0, [sp, #0]
 8009ccc:	aa0e      	add	r2, sp, #56	@ 0x38
 8009cce:	4639      	mov	r1, r7
 8009cd0:	f7ff fede 	bl	8009a90 <__sprint_r>
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	f040 8336 	bne.w	800a346 <_vfiprintf_r+0x852>
 8009cda:	ae11      	add	r6, sp, #68	@ 0x44
 8009cdc:	e780      	b.n	8009be0 <_vfiprintf_r+0xec>
 8009cde:	4a99      	ldr	r2, [pc, #612]	@ (8009f44 <_vfiprintf_r+0x450>)
 8009ce0:	9205      	str	r2, [sp, #20]
 8009ce2:	f01a 0220 	ands.w	r2, sl, #32
 8009ce6:	f000 8231 	beq.w	800a14c <_vfiprintf_r+0x658>
 8009cea:	3507      	adds	r5, #7
 8009cec:	f025 0507 	bic.w	r5, r5, #7
 8009cf0:	46a8      	mov	r8, r5
 8009cf2:	686d      	ldr	r5, [r5, #4]
 8009cf4:	f858 4b08 	ldr.w	r4, [r8], #8
 8009cf8:	f01a 0f01 	tst.w	sl, #1
 8009cfc:	d009      	beq.n	8009d12 <_vfiprintf_r+0x21e>
 8009cfe:	ea54 0205 	orrs.w	r2, r4, r5
 8009d02:	bf1f      	itttt	ne
 8009d04:	2230      	movne	r2, #48	@ 0x30
 8009d06:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 8009d0a:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 8009d0e:	f04a 0a02 	orrne.w	sl, sl, #2
 8009d12:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8009d16:	e112      	b.n	8009f3e <_vfiprintf_r+0x44a>
 8009d18:	9800      	ldr	r0, [sp, #0]
 8009d1a:	f000 fedd 	bl	800aad8 <_localeconv_r>
 8009d1e:	6843      	ldr	r3, [r0, #4]
 8009d20:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7f6 fa5e 	bl	80001e4 <strlen>
 8009d28:	9007      	str	r0, [sp, #28]
 8009d2a:	9800      	ldr	r0, [sp, #0]
 8009d2c:	f000 fed4 	bl	800aad8 <_localeconv_r>
 8009d30:	6883      	ldr	r3, [r0, #8]
 8009d32:	9306      	str	r3, [sp, #24]
 8009d34:	9b07      	ldr	r3, [sp, #28]
 8009d36:	b12b      	cbz	r3, 8009d44 <_vfiprintf_r+0x250>
 8009d38:	9b06      	ldr	r3, [sp, #24]
 8009d3a:	b11b      	cbz	r3, 8009d44 <_vfiprintf_r+0x250>
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	b10b      	cbz	r3, 8009d44 <_vfiprintf_r+0x250>
 8009d40:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8009d44:	465c      	mov	r4, fp
 8009d46:	e75b      	b.n	8009c00 <_vfiprintf_r+0x10c>
 8009d48:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1f9      	bne.n	8009d44 <_vfiprintf_r+0x250>
 8009d50:	2320      	movs	r3, #32
 8009d52:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8009d56:	e7f5      	b.n	8009d44 <_vfiprintf_r+0x250>
 8009d58:	f04a 0a01 	orr.w	sl, sl, #1
 8009d5c:	e7f2      	b.n	8009d44 <_vfiprintf_r+0x250>
 8009d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d62:	9302      	str	r3, [sp, #8]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	daed      	bge.n	8009d44 <_vfiprintf_r+0x250>
 8009d68:	425b      	negs	r3, r3
 8009d6a:	9302      	str	r3, [sp, #8]
 8009d6c:	f04a 0a04 	orr.w	sl, sl, #4
 8009d70:	e7e8      	b.n	8009d44 <_vfiprintf_r+0x250>
 8009d72:	232b      	movs	r3, #43	@ 0x2b
 8009d74:	e7ed      	b.n	8009d52 <_vfiprintf_r+0x25e>
 8009d76:	465a      	mov	r2, fp
 8009d78:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009d7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d7e:	d112      	bne.n	8009da6 <_vfiprintf_r+0x2b2>
 8009d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d88:	9301      	str	r3, [sp, #4]
 8009d8a:	4693      	mov	fp, r2
 8009d8c:	e7da      	b.n	8009d44 <_vfiprintf_r+0x250>
 8009d8e:	9b01      	ldr	r3, [sp, #4]
 8009d90:	fb00 1303 	mla	r3, r0, r3, r1
 8009d94:	9301      	str	r3, [sp, #4]
 8009d96:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009d9a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8009d9e:	2909      	cmp	r1, #9
 8009da0:	d9f5      	bls.n	8009d8e <_vfiprintf_r+0x29a>
 8009da2:	4693      	mov	fp, r2
 8009da4:	e72f      	b.n	8009c06 <_vfiprintf_r+0x112>
 8009da6:	2100      	movs	r1, #0
 8009da8:	9101      	str	r1, [sp, #4]
 8009daa:	200a      	movs	r0, #10
 8009dac:	e7f5      	b.n	8009d9a <_vfiprintf_r+0x2a6>
 8009dae:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 8009db2:	e7c7      	b.n	8009d44 <_vfiprintf_r+0x250>
 8009db4:	2100      	movs	r1, #0
 8009db6:	465a      	mov	r2, fp
 8009db8:	9102      	str	r1, [sp, #8]
 8009dba:	200a      	movs	r0, #10
 8009dbc:	9902      	ldr	r1, [sp, #8]
 8009dbe:	3b30      	subs	r3, #48	@ 0x30
 8009dc0:	fb00 3301 	mla	r3, r0, r1, r3
 8009dc4:	9302      	str	r3, [sp, #8]
 8009dc6:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009dca:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8009dce:	2909      	cmp	r1, #9
 8009dd0:	d9f4      	bls.n	8009dbc <_vfiprintf_r+0x2c8>
 8009dd2:	e7e6      	b.n	8009da2 <_vfiprintf_r+0x2ae>
 8009dd4:	f89b 3000 	ldrb.w	r3, [fp]
 8009dd8:	2b68      	cmp	r3, #104	@ 0x68
 8009dda:	bf06      	itte	eq
 8009ddc:	f10b 0b01 	addeq.w	fp, fp, #1
 8009de0:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8009de4:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8009de8:	e7ac      	b.n	8009d44 <_vfiprintf_r+0x250>
 8009dea:	f89b 3000 	ldrb.w	r3, [fp]
 8009dee:	2b6c      	cmp	r3, #108	@ 0x6c
 8009df0:	d104      	bne.n	8009dfc <_vfiprintf_r+0x308>
 8009df2:	f10b 0b01 	add.w	fp, fp, #1
 8009df6:	f04a 0a20 	orr.w	sl, sl, #32
 8009dfa:	e7a3      	b.n	8009d44 <_vfiprintf_r+0x250>
 8009dfc:	f04a 0a10 	orr.w	sl, sl, #16
 8009e00:	e7a0      	b.n	8009d44 <_vfiprintf_r+0x250>
 8009e02:	46a8      	mov	r8, r5
 8009e04:	2400      	movs	r4, #0
 8009e06:	f858 3b04 	ldr.w	r3, [r8], #4
 8009e0a:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8009e0e:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8009e12:	2301      	movs	r3, #1
 8009e14:	9301      	str	r3, [sp, #4]
 8009e16:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 8009e1a:	e0ab      	b.n	8009f74 <_vfiprintf_r+0x480>
 8009e1c:	f04a 0a10 	orr.w	sl, sl, #16
 8009e20:	f01a 0f20 	tst.w	sl, #32
 8009e24:	d011      	beq.n	8009e4a <_vfiprintf_r+0x356>
 8009e26:	3507      	adds	r5, #7
 8009e28:	f025 0507 	bic.w	r5, r5, #7
 8009e2c:	46a8      	mov	r8, r5
 8009e2e:	686d      	ldr	r5, [r5, #4]
 8009e30:	f858 4b08 	ldr.w	r4, [r8], #8
 8009e34:	2d00      	cmp	r5, #0
 8009e36:	da06      	bge.n	8009e46 <_vfiprintf_r+0x352>
 8009e38:	4264      	negs	r4, r4
 8009e3a:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8009e3e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8009e42:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8009e46:	2301      	movs	r3, #1
 8009e48:	e048      	b.n	8009edc <_vfiprintf_r+0x3e8>
 8009e4a:	46a8      	mov	r8, r5
 8009e4c:	f01a 0f10 	tst.w	sl, #16
 8009e50:	f858 5b04 	ldr.w	r5, [r8], #4
 8009e54:	d002      	beq.n	8009e5c <_vfiprintf_r+0x368>
 8009e56:	462c      	mov	r4, r5
 8009e58:	17ed      	asrs	r5, r5, #31
 8009e5a:	e7eb      	b.n	8009e34 <_vfiprintf_r+0x340>
 8009e5c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8009e60:	d003      	beq.n	8009e6a <_vfiprintf_r+0x376>
 8009e62:	b22c      	sxth	r4, r5
 8009e64:	f345 35c0 	sbfx	r5, r5, #15, #1
 8009e68:	e7e4      	b.n	8009e34 <_vfiprintf_r+0x340>
 8009e6a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8009e6e:	d0f2      	beq.n	8009e56 <_vfiprintf_r+0x362>
 8009e70:	b26c      	sxtb	r4, r5
 8009e72:	f345 15c0 	sbfx	r5, r5, #7, #1
 8009e76:	e7dd      	b.n	8009e34 <_vfiprintf_r+0x340>
 8009e78:	f01a 0f20 	tst.w	sl, #32
 8009e7c:	d007      	beq.n	8009e8e <_vfiprintf_r+0x39a>
 8009e7e:	9a03      	ldr	r2, [sp, #12]
 8009e80:	682b      	ldr	r3, [r5, #0]
 8009e82:	9903      	ldr	r1, [sp, #12]
 8009e84:	17d2      	asrs	r2, r2, #31
 8009e86:	e9c3 1200 	strd	r1, r2, [r3]
 8009e8a:	3504      	adds	r5, #4
 8009e8c:	e693      	b.n	8009bb6 <_vfiprintf_r+0xc2>
 8009e8e:	f01a 0f10 	tst.w	sl, #16
 8009e92:	d003      	beq.n	8009e9c <_vfiprintf_r+0x3a8>
 8009e94:	682b      	ldr	r3, [r5, #0]
 8009e96:	9a03      	ldr	r2, [sp, #12]
 8009e98:	601a      	str	r2, [r3, #0]
 8009e9a:	e7f6      	b.n	8009e8a <_vfiprintf_r+0x396>
 8009e9c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8009ea0:	d003      	beq.n	8009eaa <_vfiprintf_r+0x3b6>
 8009ea2:	682b      	ldr	r3, [r5, #0]
 8009ea4:	9a03      	ldr	r2, [sp, #12]
 8009ea6:	801a      	strh	r2, [r3, #0]
 8009ea8:	e7ef      	b.n	8009e8a <_vfiprintf_r+0x396>
 8009eaa:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8009eae:	d0f1      	beq.n	8009e94 <_vfiprintf_r+0x3a0>
 8009eb0:	682b      	ldr	r3, [r5, #0]
 8009eb2:	9a03      	ldr	r2, [sp, #12]
 8009eb4:	701a      	strb	r2, [r3, #0]
 8009eb6:	e7e8      	b.n	8009e8a <_vfiprintf_r+0x396>
 8009eb8:	f04a 0a10 	orr.w	sl, sl, #16
 8009ebc:	f01a 0320 	ands.w	r3, sl, #32
 8009ec0:	d01f      	beq.n	8009f02 <_vfiprintf_r+0x40e>
 8009ec2:	3507      	adds	r5, #7
 8009ec4:	f025 0507 	bic.w	r5, r5, #7
 8009ec8:	46a8      	mov	r8, r5
 8009eca:	686d      	ldr	r5, [r5, #4]
 8009ecc:	f858 4b08 	ldr.w	r4, [r8], #8
 8009ed0:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8009edc:	9a01      	ldr	r2, [sp, #4]
 8009ede:	3201      	adds	r2, #1
 8009ee0:	f000 825f 	beq.w	800a3a2 <_vfiprintf_r+0x8ae>
 8009ee4:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8009ee8:	9204      	str	r2, [sp, #16]
 8009eea:	ea54 0205 	orrs.w	r2, r4, r5
 8009eee:	f040 825e 	bne.w	800a3ae <_vfiprintf_r+0x8ba>
 8009ef2:	9a01      	ldr	r2, [sp, #4]
 8009ef4:	2a00      	cmp	r2, #0
 8009ef6:	f000 8198 	beq.w	800a22a <_vfiprintf_r+0x736>
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	f040 825a 	bne.w	800a3b4 <_vfiprintf_r+0x8c0>
 8009f00:	e13b      	b.n	800a17a <_vfiprintf_r+0x686>
 8009f02:	46a8      	mov	r8, r5
 8009f04:	f01a 0510 	ands.w	r5, sl, #16
 8009f08:	f858 4b04 	ldr.w	r4, [r8], #4
 8009f0c:	d001      	beq.n	8009f12 <_vfiprintf_r+0x41e>
 8009f0e:	461d      	mov	r5, r3
 8009f10:	e7de      	b.n	8009ed0 <_vfiprintf_r+0x3dc>
 8009f12:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8009f16:	d001      	beq.n	8009f1c <_vfiprintf_r+0x428>
 8009f18:	b2a4      	uxth	r4, r4
 8009f1a:	e7d9      	b.n	8009ed0 <_vfiprintf_r+0x3dc>
 8009f1c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8009f20:	d0d6      	beq.n	8009ed0 <_vfiprintf_r+0x3dc>
 8009f22:	b2e4      	uxtb	r4, r4
 8009f24:	e7f3      	b.n	8009f0e <_vfiprintf_r+0x41a>
 8009f26:	46a8      	mov	r8, r5
 8009f28:	f647 0330 	movw	r3, #30768	@ 0x7830
 8009f2c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8009f30:	f858 4b04 	ldr.w	r4, [r8], #4
 8009f34:	4b03      	ldr	r3, [pc, #12]	@ (8009f44 <_vfiprintf_r+0x450>)
 8009f36:	9305      	str	r3, [sp, #20]
 8009f38:	2500      	movs	r5, #0
 8009f3a:	f04a 0a02 	orr.w	sl, sl, #2
 8009f3e:	2302      	movs	r3, #2
 8009f40:	e7c9      	b.n	8009ed6 <_vfiprintf_r+0x3e2>
 8009f42:	bf00      	nop
 8009f44:	0800d3e6 	.word	0x0800d3e6
 8009f48:	9b01      	ldr	r3, [sp, #4]
 8009f4a:	46a8      	mov	r8, r5
 8009f4c:	1c5c      	adds	r4, r3, #1
 8009f4e:	f04f 0500 	mov.w	r5, #0
 8009f52:	f858 9b04 	ldr.w	r9, [r8], #4
 8009f56:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8009f5a:	f000 80d0 	beq.w	800a0fe <_vfiprintf_r+0x60a>
 8009f5e:	461a      	mov	r2, r3
 8009f60:	4629      	mov	r1, r5
 8009f62:	4648      	mov	r0, r9
 8009f64:	f7f6 f94c 	bl	8000200 <memchr>
 8009f68:	4604      	mov	r4, r0
 8009f6a:	b118      	cbz	r0, 8009f74 <_vfiprintf_r+0x480>
 8009f6c:	eba0 0309 	sub.w	r3, r0, r9
 8009f70:	9301      	str	r3, [sp, #4]
 8009f72:	462c      	mov	r4, r5
 8009f74:	9b01      	ldr	r3, [sp, #4]
 8009f76:	42a3      	cmp	r3, r4
 8009f78:	bfb8      	it	lt
 8009f7a:	4623      	movlt	r3, r4
 8009f7c:	9304      	str	r3, [sp, #16]
 8009f7e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009f82:	b113      	cbz	r3, 8009f8a <_vfiprintf_r+0x496>
 8009f84:	9b04      	ldr	r3, [sp, #16]
 8009f86:	3301      	adds	r3, #1
 8009f88:	9304      	str	r3, [sp, #16]
 8009f8a:	f01a 0302 	ands.w	r3, sl, #2
 8009f8e:	9308      	str	r3, [sp, #32]
 8009f90:	bf1e      	ittt	ne
 8009f92:	9b04      	ldrne	r3, [sp, #16]
 8009f94:	3302      	addne	r3, #2
 8009f96:	9304      	strne	r3, [sp, #16]
 8009f98:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8009f9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f9e:	d11f      	bne.n	8009fe0 <_vfiprintf_r+0x4ec>
 8009fa0:	9b02      	ldr	r3, [sp, #8]
 8009fa2:	9a04      	ldr	r2, [sp, #16]
 8009fa4:	1a9d      	subs	r5, r3, r2
 8009fa6:	2d00      	cmp	r5, #0
 8009fa8:	dd1a      	ble.n	8009fe0 <_vfiprintf_r+0x4ec>
 8009faa:	4ba9      	ldr	r3, [pc, #676]	@ (800a250 <_vfiprintf_r+0x75c>)
 8009fac:	6033      	str	r3, [r6, #0]
 8009fae:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8009fb2:	2d10      	cmp	r5, #16
 8009fb4:	f102 0201 	add.w	r2, r2, #1
 8009fb8:	f106 0008 	add.w	r0, r6, #8
 8009fbc:	f300 814e 	bgt.w	800a25c <_vfiprintf_r+0x768>
 8009fc0:	6075      	str	r5, [r6, #4]
 8009fc2:	2a07      	cmp	r2, #7
 8009fc4:	4465      	add	r5, ip
 8009fc6:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8009fca:	f340 815a 	ble.w	800a282 <_vfiprintf_r+0x78e>
 8009fce:	9800      	ldr	r0, [sp, #0]
 8009fd0:	aa0e      	add	r2, sp, #56	@ 0x38
 8009fd2:	4639      	mov	r1, r7
 8009fd4:	f7ff fd5c 	bl	8009a90 <__sprint_r>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	f040 81b4 	bne.w	800a346 <_vfiprintf_r+0x852>
 8009fde:	ae11      	add	r6, sp, #68	@ 0x44
 8009fe0:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8009fe4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8009fe8:	b161      	cbz	r1, 800a004 <_vfiprintf_r+0x510>
 8009fea:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8009fee:	3301      	adds	r3, #1
 8009ff0:	6031      	str	r1, [r6, #0]
 8009ff2:	2101      	movs	r1, #1
 8009ff4:	440a      	add	r2, r1
 8009ff6:	2b07      	cmp	r3, #7
 8009ff8:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8009ffc:	6071      	str	r1, [r6, #4]
 8009ffe:	f300 8142 	bgt.w	800a286 <_vfiprintf_r+0x792>
 800a002:	3608      	adds	r6, #8
 800a004:	9908      	ldr	r1, [sp, #32]
 800a006:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800a00a:	b159      	cbz	r1, 800a024 <_vfiprintf_r+0x530>
 800a00c:	a90d      	add	r1, sp, #52	@ 0x34
 800a00e:	3301      	adds	r3, #1
 800a010:	6031      	str	r1, [r6, #0]
 800a012:	2102      	movs	r1, #2
 800a014:	440a      	add	r2, r1
 800a016:	2b07      	cmp	r3, #7
 800a018:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800a01c:	6071      	str	r1, [r6, #4]
 800a01e:	f300 813b 	bgt.w	800a298 <_vfiprintf_r+0x7a4>
 800a022:	3608      	adds	r6, #8
 800a024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a026:	2b80      	cmp	r3, #128	@ 0x80
 800a028:	d11f      	bne.n	800a06a <_vfiprintf_r+0x576>
 800a02a:	9b02      	ldr	r3, [sp, #8]
 800a02c:	9a04      	ldr	r2, [sp, #16]
 800a02e:	1a9d      	subs	r5, r3, r2
 800a030:	2d00      	cmp	r5, #0
 800a032:	dd1a      	ble.n	800a06a <_vfiprintf_r+0x576>
 800a034:	4b87      	ldr	r3, [pc, #540]	@ (800a254 <_vfiprintf_r+0x760>)
 800a036:	6033      	str	r3, [r6, #0]
 800a038:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800a03c:	2d10      	cmp	r5, #16
 800a03e:	f102 0201 	add.w	r2, r2, #1
 800a042:	f106 0008 	add.w	r0, r6, #8
 800a046:	f300 8130 	bgt.w	800a2aa <_vfiprintf_r+0x7b6>
 800a04a:	6075      	str	r5, [r6, #4]
 800a04c:	2a07      	cmp	r2, #7
 800a04e:	4465      	add	r5, ip
 800a050:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800a054:	f340 813c 	ble.w	800a2d0 <_vfiprintf_r+0x7dc>
 800a058:	9800      	ldr	r0, [sp, #0]
 800a05a:	aa0e      	add	r2, sp, #56	@ 0x38
 800a05c:	4639      	mov	r1, r7
 800a05e:	f7ff fd17 	bl	8009a90 <__sprint_r>
 800a062:	2800      	cmp	r0, #0
 800a064:	f040 816f 	bne.w	800a346 <_vfiprintf_r+0x852>
 800a068:	ae11      	add	r6, sp, #68	@ 0x44
 800a06a:	9b01      	ldr	r3, [sp, #4]
 800a06c:	1ae4      	subs	r4, r4, r3
 800a06e:	2c00      	cmp	r4, #0
 800a070:	dd1a      	ble.n	800a0a8 <_vfiprintf_r+0x5b4>
 800a072:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800a076:	4877      	ldr	r0, [pc, #476]	@ (800a254 <_vfiprintf_r+0x760>)
 800a078:	6030      	str	r0, [r6, #0]
 800a07a:	2c10      	cmp	r4, #16
 800a07c:	f103 0301 	add.w	r3, r3, #1
 800a080:	f106 0108 	add.w	r1, r6, #8
 800a084:	f300 8126 	bgt.w	800a2d4 <_vfiprintf_r+0x7e0>
 800a088:	6074      	str	r4, [r6, #4]
 800a08a:	2b07      	cmp	r3, #7
 800a08c:	4414      	add	r4, r2
 800a08e:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 800a092:	f340 8130 	ble.w	800a2f6 <_vfiprintf_r+0x802>
 800a096:	9800      	ldr	r0, [sp, #0]
 800a098:	aa0e      	add	r2, sp, #56	@ 0x38
 800a09a:	4639      	mov	r1, r7
 800a09c:	f7ff fcf8 	bl	8009a90 <__sprint_r>
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	f040 8150 	bne.w	800a346 <_vfiprintf_r+0x852>
 800a0a6:	ae11      	add	r6, sp, #68	@ 0x44
 800a0a8:	9b01      	ldr	r3, [sp, #4]
 800a0aa:	9a01      	ldr	r2, [sp, #4]
 800a0ac:	6073      	str	r3, [r6, #4]
 800a0ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a0b0:	f8c6 9000 	str.w	r9, [r6]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a0b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	2b07      	cmp	r3, #7
 800a0be:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a0c0:	f300 811b 	bgt.w	800a2fa <_vfiprintf_r+0x806>
 800a0c4:	f106 0308 	add.w	r3, r6, #8
 800a0c8:	f01a 0f04 	tst.w	sl, #4
 800a0cc:	f040 811d 	bne.w	800a30a <_vfiprintf_r+0x816>
 800a0d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0d4:	9904      	ldr	r1, [sp, #16]
 800a0d6:	428a      	cmp	r2, r1
 800a0d8:	bfac      	ite	ge
 800a0da:	189b      	addge	r3, r3, r2
 800a0dc:	185b      	addlt	r3, r3, r1
 800a0de:	9303      	str	r3, [sp, #12]
 800a0e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a0e2:	b13b      	cbz	r3, 800a0f4 <_vfiprintf_r+0x600>
 800a0e4:	9800      	ldr	r0, [sp, #0]
 800a0e6:	aa0e      	add	r2, sp, #56	@ 0x38
 800a0e8:	4639      	mov	r1, r7
 800a0ea:	f7ff fcd1 	bl	8009a90 <__sprint_r>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	f040 8129 	bne.w	800a346 <_vfiprintf_r+0x852>
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a0f8:	4645      	mov	r5, r8
 800a0fa:	ae11      	add	r6, sp, #68	@ 0x44
 800a0fc:	e55b      	b.n	8009bb6 <_vfiprintf_r+0xc2>
 800a0fe:	4648      	mov	r0, r9
 800a100:	f7f6 f870 	bl	80001e4 <strlen>
 800a104:	9001      	str	r0, [sp, #4]
 800a106:	e734      	b.n	8009f72 <_vfiprintf_r+0x47e>
 800a108:	f04a 0a10 	orr.w	sl, sl, #16
 800a10c:	f01a 0320 	ands.w	r3, sl, #32
 800a110:	d008      	beq.n	800a124 <_vfiprintf_r+0x630>
 800a112:	3507      	adds	r5, #7
 800a114:	f025 0507 	bic.w	r5, r5, #7
 800a118:	46a8      	mov	r8, r5
 800a11a:	686d      	ldr	r5, [r5, #4]
 800a11c:	f858 4b08 	ldr.w	r4, [r8], #8
 800a120:	2301      	movs	r3, #1
 800a122:	e6d8      	b.n	8009ed6 <_vfiprintf_r+0x3e2>
 800a124:	46a8      	mov	r8, r5
 800a126:	f01a 0510 	ands.w	r5, sl, #16
 800a12a:	f858 4b04 	ldr.w	r4, [r8], #4
 800a12e:	d001      	beq.n	800a134 <_vfiprintf_r+0x640>
 800a130:	461d      	mov	r5, r3
 800a132:	e7f5      	b.n	800a120 <_vfiprintf_r+0x62c>
 800a134:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800a138:	d001      	beq.n	800a13e <_vfiprintf_r+0x64a>
 800a13a:	b2a4      	uxth	r4, r4
 800a13c:	e7f0      	b.n	800a120 <_vfiprintf_r+0x62c>
 800a13e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800a142:	d0ed      	beq.n	800a120 <_vfiprintf_r+0x62c>
 800a144:	b2e4      	uxtb	r4, r4
 800a146:	e7f3      	b.n	800a130 <_vfiprintf_r+0x63c>
 800a148:	4a43      	ldr	r2, [pc, #268]	@ (800a258 <_vfiprintf_r+0x764>)
 800a14a:	e5c9      	b.n	8009ce0 <_vfiprintf_r+0x1ec>
 800a14c:	46a8      	mov	r8, r5
 800a14e:	f01a 0510 	ands.w	r5, sl, #16
 800a152:	f858 4b04 	ldr.w	r4, [r8], #4
 800a156:	d001      	beq.n	800a15c <_vfiprintf_r+0x668>
 800a158:	4615      	mov	r5, r2
 800a15a:	e5cd      	b.n	8009cf8 <_vfiprintf_r+0x204>
 800a15c:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 800a160:	d001      	beq.n	800a166 <_vfiprintf_r+0x672>
 800a162:	b2a4      	uxth	r4, r4
 800a164:	e5c8      	b.n	8009cf8 <_vfiprintf_r+0x204>
 800a166:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800a16a:	f43f adc5 	beq.w	8009cf8 <_vfiprintf_r+0x204>
 800a16e:	b2e4      	uxtb	r4, r4
 800a170:	e7f2      	b.n	800a158 <_vfiprintf_r+0x664>
 800a172:	2c0a      	cmp	r4, #10
 800a174:	f175 0300 	sbcs.w	r3, r5, #0
 800a178:	d206      	bcs.n	800a188 <_vfiprintf_r+0x694>
 800a17a:	3430      	adds	r4, #48	@ 0x30
 800a17c:	b2e4      	uxtb	r4, r4
 800a17e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 800a182:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 800a186:	e131      	b.n	800a3ec <_vfiprintf_r+0x8f8>
 800a188:	ab3a      	add	r3, sp, #232	@ 0xe8
 800a18a:	9308      	str	r3, [sp, #32]
 800a18c:	9b04      	ldr	r3, [sp, #16]
 800a18e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a192:	f04f 0a00 	mov.w	sl, #0
 800a196:	930a      	str	r3, [sp, #40]	@ 0x28
 800a198:	220a      	movs	r2, #10
 800a19a:	2300      	movs	r3, #0
 800a19c:	4620      	mov	r0, r4
 800a19e:	4629      	mov	r1, r5
 800a1a0:	f7f6 fd12 	bl	8000bc8 <__aeabi_uldivmod>
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	9908      	ldr	r1, [sp, #32]
 800a1a8:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a1aa:	3230      	adds	r2, #48	@ 0x30
 800a1ac:	f801 2c01 	strb.w	r2, [r1, #-1]
 800a1b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a1b2:	f101 39ff 	add.w	r9, r1, #4294967295
 800a1b6:	f10a 0a01 	add.w	sl, sl, #1
 800a1ba:	b1e2      	cbz	r2, 800a1f6 <_vfiprintf_r+0x702>
 800a1bc:	9a06      	ldr	r2, [sp, #24]
 800a1be:	7812      	ldrb	r2, [r2, #0]
 800a1c0:	4552      	cmp	r2, sl
 800a1c2:	d118      	bne.n	800a1f6 <_vfiprintf_r+0x702>
 800a1c4:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800a1c8:	d015      	beq.n	800a1f6 <_vfiprintf_r+0x702>
 800a1ca:	2c0a      	cmp	r4, #10
 800a1cc:	f175 0200 	sbcs.w	r2, r5, #0
 800a1d0:	d311      	bcc.n	800a1f6 <_vfiprintf_r+0x702>
 800a1d2:	9308      	str	r3, [sp, #32]
 800a1d4:	9b07      	ldr	r3, [sp, #28]
 800a1d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a1d8:	eba9 0903 	sub.w	r9, r9, r3
 800a1dc:	461a      	mov	r2, r3
 800a1de:	4648      	mov	r0, r9
 800a1e0:	f000 fc60 	bl	800aaa4 <strncpy>
 800a1e4:	9b06      	ldr	r3, [sp, #24]
 800a1e6:	785a      	ldrb	r2, [r3, #1]
 800a1e8:	9b08      	ldr	r3, [sp, #32]
 800a1ea:	b172      	cbz	r2, 800a20a <_vfiprintf_r+0x716>
 800a1ec:	9a06      	ldr	r2, [sp, #24]
 800a1ee:	3201      	adds	r2, #1
 800a1f0:	9206      	str	r2, [sp, #24]
 800a1f2:	f04f 0a00 	mov.w	sl, #0
 800a1f6:	2c0a      	cmp	r4, #10
 800a1f8:	f175 0500 	sbcs.w	r5, r5, #0
 800a1fc:	f0c0 80f6 	bcc.w	800a3ec <_vfiprintf_r+0x8f8>
 800a200:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a202:	f8cd 9020 	str.w	r9, [sp, #32]
 800a206:	461d      	mov	r5, r3
 800a208:	e7c6      	b.n	800a198 <_vfiprintf_r+0x6a4>
 800a20a:	4692      	mov	sl, r2
 800a20c:	e7f3      	b.n	800a1f6 <_vfiprintf_r+0x702>
 800a20e:	f004 030f 	and.w	r3, r4, #15
 800a212:	9a05      	ldr	r2, [sp, #20]
 800a214:	0924      	lsrs	r4, r4, #4
 800a216:	5cd3      	ldrb	r3, [r2, r3]
 800a218:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800a21c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800a220:	092d      	lsrs	r5, r5, #4
 800a222:	ea54 0305 	orrs.w	r3, r4, r5
 800a226:	d1f2      	bne.n	800a20e <_vfiprintf_r+0x71a>
 800a228:	e0e0      	b.n	800a3ec <_vfiprintf_r+0x8f8>
 800a22a:	b923      	cbnz	r3, 800a236 <_vfiprintf_r+0x742>
 800a22c:	f01a 0f01 	tst.w	sl, #1
 800a230:	d001      	beq.n	800a236 <_vfiprintf_r+0x742>
 800a232:	2430      	movs	r4, #48	@ 0x30
 800a234:	e7a3      	b.n	800a17e <_vfiprintf_r+0x68a>
 800a236:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800a23a:	e0d7      	b.n	800a3ec <_vfiprintf_r+0x8f8>
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f000 80a3 	beq.w	800a388 <_vfiprintf_r+0x894>
 800a242:	2400      	movs	r4, #0
 800a244:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800a248:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800a24c:	46a8      	mov	r8, r5
 800a24e:	e5e0      	b.n	8009e12 <_vfiprintf_r+0x31e>
 800a250:	0800d45a 	.word	0x0800d45a
 800a254:	0800d44a 	.word	0x0800d44a
 800a258:	0800d3f7 	.word	0x0800d3f7
 800a25c:	2110      	movs	r1, #16
 800a25e:	6071      	str	r1, [r6, #4]
 800a260:	2a07      	cmp	r2, #7
 800a262:	4461      	add	r1, ip
 800a264:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800a268:	dd08      	ble.n	800a27c <_vfiprintf_r+0x788>
 800a26a:	9800      	ldr	r0, [sp, #0]
 800a26c:	aa0e      	add	r2, sp, #56	@ 0x38
 800a26e:	4639      	mov	r1, r7
 800a270:	f7ff fc0e 	bl	8009a90 <__sprint_r>
 800a274:	2800      	cmp	r0, #0
 800a276:	d166      	bne.n	800a346 <_vfiprintf_r+0x852>
 800a278:	4b60      	ldr	r3, [pc, #384]	@ (800a3fc <_vfiprintf_r+0x908>)
 800a27a:	a811      	add	r0, sp, #68	@ 0x44
 800a27c:	3d10      	subs	r5, #16
 800a27e:	4606      	mov	r6, r0
 800a280:	e694      	b.n	8009fac <_vfiprintf_r+0x4b8>
 800a282:	4606      	mov	r6, r0
 800a284:	e6ac      	b.n	8009fe0 <_vfiprintf_r+0x4ec>
 800a286:	9800      	ldr	r0, [sp, #0]
 800a288:	aa0e      	add	r2, sp, #56	@ 0x38
 800a28a:	4639      	mov	r1, r7
 800a28c:	f7ff fc00 	bl	8009a90 <__sprint_r>
 800a290:	2800      	cmp	r0, #0
 800a292:	d158      	bne.n	800a346 <_vfiprintf_r+0x852>
 800a294:	ae11      	add	r6, sp, #68	@ 0x44
 800a296:	e6b5      	b.n	800a004 <_vfiprintf_r+0x510>
 800a298:	9800      	ldr	r0, [sp, #0]
 800a29a:	aa0e      	add	r2, sp, #56	@ 0x38
 800a29c:	4639      	mov	r1, r7
 800a29e:	f7ff fbf7 	bl	8009a90 <__sprint_r>
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d14f      	bne.n	800a346 <_vfiprintf_r+0x852>
 800a2a6:	ae11      	add	r6, sp, #68	@ 0x44
 800a2a8:	e6bc      	b.n	800a024 <_vfiprintf_r+0x530>
 800a2aa:	2110      	movs	r1, #16
 800a2ac:	6071      	str	r1, [r6, #4]
 800a2ae:	2a07      	cmp	r2, #7
 800a2b0:	4461      	add	r1, ip
 800a2b2:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800a2b6:	dd08      	ble.n	800a2ca <_vfiprintf_r+0x7d6>
 800a2b8:	9800      	ldr	r0, [sp, #0]
 800a2ba:	aa0e      	add	r2, sp, #56	@ 0x38
 800a2bc:	4639      	mov	r1, r7
 800a2be:	f7ff fbe7 	bl	8009a90 <__sprint_r>
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	d13f      	bne.n	800a346 <_vfiprintf_r+0x852>
 800a2c6:	4b4e      	ldr	r3, [pc, #312]	@ (800a400 <_vfiprintf_r+0x90c>)
 800a2c8:	a811      	add	r0, sp, #68	@ 0x44
 800a2ca:	3d10      	subs	r5, #16
 800a2cc:	4606      	mov	r6, r0
 800a2ce:	e6b2      	b.n	800a036 <_vfiprintf_r+0x542>
 800a2d0:	4606      	mov	r6, r0
 800a2d2:	e6ca      	b.n	800a06a <_vfiprintf_r+0x576>
 800a2d4:	2010      	movs	r0, #16
 800a2d6:	4402      	add	r2, r0
 800a2d8:	2b07      	cmp	r3, #7
 800a2da:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800a2de:	6070      	str	r0, [r6, #4]
 800a2e0:	dd06      	ble.n	800a2f0 <_vfiprintf_r+0x7fc>
 800a2e2:	9800      	ldr	r0, [sp, #0]
 800a2e4:	aa0e      	add	r2, sp, #56	@ 0x38
 800a2e6:	4639      	mov	r1, r7
 800a2e8:	f7ff fbd2 	bl	8009a90 <__sprint_r>
 800a2ec:	bb58      	cbnz	r0, 800a346 <_vfiprintf_r+0x852>
 800a2ee:	a911      	add	r1, sp, #68	@ 0x44
 800a2f0:	3c10      	subs	r4, #16
 800a2f2:	460e      	mov	r6, r1
 800a2f4:	e6bd      	b.n	800a072 <_vfiprintf_r+0x57e>
 800a2f6:	460e      	mov	r6, r1
 800a2f8:	e6d6      	b.n	800a0a8 <_vfiprintf_r+0x5b4>
 800a2fa:	9800      	ldr	r0, [sp, #0]
 800a2fc:	aa0e      	add	r2, sp, #56	@ 0x38
 800a2fe:	4639      	mov	r1, r7
 800a300:	f7ff fbc6 	bl	8009a90 <__sprint_r>
 800a304:	b9f8      	cbnz	r0, 800a346 <_vfiprintf_r+0x852>
 800a306:	ab11      	add	r3, sp, #68	@ 0x44
 800a308:	e6de      	b.n	800a0c8 <_vfiprintf_r+0x5d4>
 800a30a:	9a02      	ldr	r2, [sp, #8]
 800a30c:	9904      	ldr	r1, [sp, #16]
 800a30e:	1a54      	subs	r4, r2, r1
 800a310:	2c00      	cmp	r4, #0
 800a312:	f77f aedd 	ble.w	800a0d0 <_vfiprintf_r+0x5dc>
 800a316:	4d39      	ldr	r5, [pc, #228]	@ (800a3fc <_vfiprintf_r+0x908>)
 800a318:	2610      	movs	r6, #16
 800a31a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 800a31e:	2c10      	cmp	r4, #16
 800a320:	f102 0201 	add.w	r2, r2, #1
 800a324:	601d      	str	r5, [r3, #0]
 800a326:	dc1d      	bgt.n	800a364 <_vfiprintf_r+0x870>
 800a328:	605c      	str	r4, [r3, #4]
 800a32a:	2a07      	cmp	r2, #7
 800a32c:	440c      	add	r4, r1
 800a32e:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 800a332:	f77f aecd 	ble.w	800a0d0 <_vfiprintf_r+0x5dc>
 800a336:	9800      	ldr	r0, [sp, #0]
 800a338:	aa0e      	add	r2, sp, #56	@ 0x38
 800a33a:	4639      	mov	r1, r7
 800a33c:	f7ff fba8 	bl	8009a90 <__sprint_r>
 800a340:	2800      	cmp	r0, #0
 800a342:	f43f aec5 	beq.w	800a0d0 <_vfiprintf_r+0x5dc>
 800a346:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a348:	07d9      	lsls	r1, r3, #31
 800a34a:	d405      	bmi.n	800a358 <_vfiprintf_r+0x864>
 800a34c:	89bb      	ldrh	r3, [r7, #12]
 800a34e:	059a      	lsls	r2, r3, #22
 800a350:	d402      	bmi.n	800a358 <_vfiprintf_r+0x864>
 800a352:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a354:	f7fc fe0f 	bl	8006f76 <__retarget_lock_release_recursive>
 800a358:	89bb      	ldrh	r3, [r7, #12]
 800a35a:	065b      	lsls	r3, r3, #25
 800a35c:	f57f abfb 	bpl.w	8009b56 <_vfiprintf_r+0x62>
 800a360:	f7ff bbf6 	b.w	8009b50 <_vfiprintf_r+0x5c>
 800a364:	3110      	adds	r1, #16
 800a366:	2a07      	cmp	r2, #7
 800a368:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800a36c:	605e      	str	r6, [r3, #4]
 800a36e:	dc02      	bgt.n	800a376 <_vfiprintf_r+0x882>
 800a370:	3308      	adds	r3, #8
 800a372:	3c10      	subs	r4, #16
 800a374:	e7d1      	b.n	800a31a <_vfiprintf_r+0x826>
 800a376:	9800      	ldr	r0, [sp, #0]
 800a378:	aa0e      	add	r2, sp, #56	@ 0x38
 800a37a:	4639      	mov	r1, r7
 800a37c:	f7ff fb88 	bl	8009a90 <__sprint_r>
 800a380:	2800      	cmp	r0, #0
 800a382:	d1e0      	bne.n	800a346 <_vfiprintf_r+0x852>
 800a384:	ab11      	add	r3, sp, #68	@ 0x44
 800a386:	e7f4      	b.n	800a372 <_vfiprintf_r+0x87e>
 800a388:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a38a:	b913      	cbnz	r3, 800a392 <_vfiprintf_r+0x89e>
 800a38c:	2300      	movs	r3, #0
 800a38e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a390:	e7d9      	b.n	800a346 <_vfiprintf_r+0x852>
 800a392:	9800      	ldr	r0, [sp, #0]
 800a394:	aa0e      	add	r2, sp, #56	@ 0x38
 800a396:	4639      	mov	r1, r7
 800a398:	f7ff fb7a 	bl	8009a90 <__sprint_r>
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d0f5      	beq.n	800a38c <_vfiprintf_r+0x898>
 800a3a0:	e7d1      	b.n	800a346 <_vfiprintf_r+0x852>
 800a3a2:	ea54 0205 	orrs.w	r2, r4, r5
 800a3a6:	f8cd a010 	str.w	sl, [sp, #16]
 800a3aa:	f43f ada6 	beq.w	8009efa <_vfiprintf_r+0x406>
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	f43f aedf 	beq.w	800a172 <_vfiprintf_r+0x67e>
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800a3ba:	f43f af28 	beq.w	800a20e <_vfiprintf_r+0x71a>
 800a3be:	f004 0307 	and.w	r3, r4, #7
 800a3c2:	08e4      	lsrs	r4, r4, #3
 800a3c4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800a3c8:	08ed      	lsrs	r5, r5, #3
 800a3ca:	3330      	adds	r3, #48	@ 0x30
 800a3cc:	ea54 0105 	orrs.w	r1, r4, r5
 800a3d0:	464a      	mov	r2, r9
 800a3d2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800a3d6:	d1f2      	bne.n	800a3be <_vfiprintf_r+0x8ca>
 800a3d8:	9904      	ldr	r1, [sp, #16]
 800a3da:	07c8      	lsls	r0, r1, #31
 800a3dc:	d506      	bpl.n	800a3ec <_vfiprintf_r+0x8f8>
 800a3de:	2b30      	cmp	r3, #48	@ 0x30
 800a3e0:	d004      	beq.n	800a3ec <_vfiprintf_r+0x8f8>
 800a3e2:	2330      	movs	r3, #48	@ 0x30
 800a3e4:	f809 3c01 	strb.w	r3, [r9, #-1]
 800a3e8:	f1a2 0902 	sub.w	r9, r2, #2
 800a3ec:	ab3a      	add	r3, sp, #232	@ 0xe8
 800a3ee:	eba3 0309 	sub.w	r3, r3, r9
 800a3f2:	9c01      	ldr	r4, [sp, #4]
 800a3f4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a3f8:	9301      	str	r3, [sp, #4]
 800a3fa:	e5bb      	b.n	8009f74 <_vfiprintf_r+0x480>
 800a3fc:	0800d45a 	.word	0x0800d45a
 800a400:	0800d44a 	.word	0x0800d44a

0800a404 <__sbprintf>:
 800a404:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a406:	461f      	mov	r7, r3
 800a408:	898b      	ldrh	r3, [r1, #12]
 800a40a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 800a40e:	f023 0302 	bic.w	r3, r3, #2
 800a412:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a416:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800a418:	9319      	str	r3, [sp, #100]	@ 0x64
 800a41a:	89cb      	ldrh	r3, [r1, #14]
 800a41c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a420:	69cb      	ldr	r3, [r1, #28]
 800a422:	9307      	str	r3, [sp, #28]
 800a424:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800a426:	9309      	str	r3, [sp, #36]	@ 0x24
 800a428:	ab1a      	add	r3, sp, #104	@ 0x68
 800a42a:	9300      	str	r3, [sp, #0]
 800a42c:	9304      	str	r3, [sp, #16]
 800a42e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a432:	4615      	mov	r5, r2
 800a434:	4606      	mov	r6, r0
 800a436:	9302      	str	r3, [sp, #8]
 800a438:	9305      	str	r3, [sp, #20]
 800a43a:	a816      	add	r0, sp, #88	@ 0x58
 800a43c:	2300      	movs	r3, #0
 800a43e:	460c      	mov	r4, r1
 800a440:	9306      	str	r3, [sp, #24]
 800a442:	f7fc fd95 	bl	8006f70 <__retarget_lock_init_recursive>
 800a446:	462a      	mov	r2, r5
 800a448:	463b      	mov	r3, r7
 800a44a:	4669      	mov	r1, sp
 800a44c:	4630      	mov	r0, r6
 800a44e:	f7ff fb51 	bl	8009af4 <_vfiprintf_r>
 800a452:	1e05      	subs	r5, r0, #0
 800a454:	db07      	blt.n	800a466 <__sbprintf+0x62>
 800a456:	4669      	mov	r1, sp
 800a458:	4630      	mov	r0, r6
 800a45a:	f000 f8f1 	bl	800a640 <_fflush_r>
 800a45e:	2800      	cmp	r0, #0
 800a460:	bf18      	it	ne
 800a462:	f04f 35ff 	movne.w	r5, #4294967295
 800a466:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a46a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800a46c:	065b      	lsls	r3, r3, #25
 800a46e:	bf42      	ittt	mi
 800a470:	89a3      	ldrhmi	r3, [r4, #12]
 800a472:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 800a476:	81a3      	strhmi	r3, [r4, #12]
 800a478:	f7fc fd7b 	bl	8006f72 <__retarget_lock_close_recursive>
 800a47c:	4628      	mov	r0, r5
 800a47e:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 800a482:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a484 <_fclose_r>:
 800a484:	b570      	push	{r4, r5, r6, lr}
 800a486:	4605      	mov	r5, r0
 800a488:	460c      	mov	r4, r1
 800a48a:	b1b1      	cbz	r1, 800a4ba <_fclose_r+0x36>
 800a48c:	b118      	cbz	r0, 800a496 <_fclose_r+0x12>
 800a48e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a490:	b90b      	cbnz	r3, 800a496 <_fclose_r+0x12>
 800a492:	f7fc fb41 	bl	8006b18 <__sinit>
 800a496:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a498:	07de      	lsls	r6, r3, #31
 800a49a:	d405      	bmi.n	800a4a8 <_fclose_r+0x24>
 800a49c:	89a3      	ldrh	r3, [r4, #12]
 800a49e:	0598      	lsls	r0, r3, #22
 800a4a0:	d402      	bmi.n	800a4a8 <_fclose_r+0x24>
 800a4a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4a4:	f7fc fd66 	bl	8006f74 <__retarget_lock_acquire_recursive>
 800a4a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ac:	b943      	cbnz	r3, 800a4c0 <_fclose_r+0x3c>
 800a4ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4b0:	07d9      	lsls	r1, r3, #31
 800a4b2:	d402      	bmi.n	800a4ba <_fclose_r+0x36>
 800a4b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4b6:	f7fc fd5e 	bl	8006f76 <__retarget_lock_release_recursive>
 800a4ba:	2600      	movs	r6, #0
 800a4bc:	4630      	mov	r0, r6
 800a4be:	bd70      	pop	{r4, r5, r6, pc}
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	f000 f834 	bl	800a530 <__sflush_r>
 800a4c8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a4ca:	4606      	mov	r6, r0
 800a4cc:	b133      	cbz	r3, 800a4dc <_fclose_r+0x58>
 800a4ce:	69e1      	ldr	r1, [r4, #28]
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	4798      	blx	r3
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	bfb8      	it	lt
 800a4d8:	f04f 36ff 	movlt.w	r6, #4294967295
 800a4dc:	89a3      	ldrh	r3, [r4, #12]
 800a4de:	061a      	lsls	r2, r3, #24
 800a4e0:	d503      	bpl.n	800a4ea <_fclose_r+0x66>
 800a4e2:	6921      	ldr	r1, [r4, #16]
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	f7fc fdc7 	bl	8007078 <_free_r>
 800a4ea:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a4ec:	b141      	cbz	r1, 800a500 <_fclose_r+0x7c>
 800a4ee:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800a4f2:	4299      	cmp	r1, r3
 800a4f4:	d002      	beq.n	800a4fc <_fclose_r+0x78>
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	f7fc fdbe 	bl	8007078 <_free_r>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	6323      	str	r3, [r4, #48]	@ 0x30
 800a500:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a502:	b121      	cbz	r1, 800a50e <_fclose_r+0x8a>
 800a504:	4628      	mov	r0, r5
 800a506:	f7fc fdb7 	bl	8007078 <_free_r>
 800a50a:	2300      	movs	r3, #0
 800a50c:	6463      	str	r3, [r4, #68]	@ 0x44
 800a50e:	f7fc faf7 	bl	8006b00 <__sfp_lock_acquire>
 800a512:	2300      	movs	r3, #0
 800a514:	81a3      	strh	r3, [r4, #12]
 800a516:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a518:	07db      	lsls	r3, r3, #31
 800a51a:	d402      	bmi.n	800a522 <_fclose_r+0x9e>
 800a51c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a51e:	f7fc fd2a 	bl	8006f76 <__retarget_lock_release_recursive>
 800a522:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a524:	f7fc fd25 	bl	8006f72 <__retarget_lock_close_recursive>
 800a528:	f7fc faf0 	bl	8006b0c <__sfp_lock_release>
 800a52c:	e7c6      	b.n	800a4bc <_fclose_r+0x38>
	...

0800a530 <__sflush_r>:
 800a530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a534:	4605      	mov	r5, r0
 800a536:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800a53a:	0706      	lsls	r6, r0, #28
 800a53c:	460c      	mov	r4, r1
 800a53e:	d457      	bmi.n	800a5f0 <__sflush_r+0xc0>
 800a540:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 800a544:	818b      	strh	r3, [r1, #12]
 800a546:	684b      	ldr	r3, [r1, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	dc02      	bgt.n	800a552 <__sflush_r+0x22>
 800a54c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800a54e:	2b00      	cmp	r3, #0
 800a550:	dd4c      	ble.n	800a5ec <__sflush_r+0xbc>
 800a552:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a554:	2e00      	cmp	r6, #0
 800a556:	d049      	beq.n	800a5ec <__sflush_r+0xbc>
 800a558:	2300      	movs	r3, #0
 800a55a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 800a55e:	682f      	ldr	r7, [r5, #0]
 800a560:	69e1      	ldr	r1, [r4, #28]
 800a562:	602b      	str	r3, [r5, #0]
 800a564:	d034      	beq.n	800a5d0 <__sflush_r+0xa0>
 800a566:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800a568:	89a3      	ldrh	r3, [r4, #12]
 800a56a:	0759      	lsls	r1, r3, #29
 800a56c:	d505      	bpl.n	800a57a <__sflush_r+0x4a>
 800a56e:	6863      	ldr	r3, [r4, #4]
 800a570:	1ad2      	subs	r2, r2, r3
 800a572:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a574:	b10b      	cbz	r3, 800a57a <__sflush_r+0x4a>
 800a576:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a578:	1ad2      	subs	r2, r2, r3
 800a57a:	2300      	movs	r3, #0
 800a57c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a57e:	69e1      	ldr	r1, [r4, #28]
 800a580:	4628      	mov	r0, r5
 800a582:	47b0      	blx	r6
 800a584:	1c43      	adds	r3, r0, #1
 800a586:	d106      	bne.n	800a596 <__sflush_r+0x66>
 800a588:	682a      	ldr	r2, [r5, #0]
 800a58a:	2a1d      	cmp	r2, #29
 800a58c:	d848      	bhi.n	800a620 <__sflush_r+0xf0>
 800a58e:	4b2b      	ldr	r3, [pc, #172]	@ (800a63c <__sflush_r+0x10c>)
 800a590:	4113      	asrs	r3, r2
 800a592:	07de      	lsls	r6, r3, #31
 800a594:	d444      	bmi.n	800a620 <__sflush_r+0xf0>
 800a596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a59a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a59e:	81a2      	strh	r2, [r4, #12]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	6062      	str	r2, [r4, #4]
 800a5a4:	04d9      	lsls	r1, r3, #19
 800a5a6:	6922      	ldr	r2, [r4, #16]
 800a5a8:	6022      	str	r2, [r4, #0]
 800a5aa:	d504      	bpl.n	800a5b6 <__sflush_r+0x86>
 800a5ac:	1c42      	adds	r2, r0, #1
 800a5ae:	d101      	bne.n	800a5b4 <__sflush_r+0x84>
 800a5b0:	682b      	ldr	r3, [r5, #0]
 800a5b2:	b903      	cbnz	r3, 800a5b6 <__sflush_r+0x86>
 800a5b4:	6520      	str	r0, [r4, #80]	@ 0x50
 800a5b6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a5b8:	602f      	str	r7, [r5, #0]
 800a5ba:	b1b9      	cbz	r1, 800a5ec <__sflush_r+0xbc>
 800a5bc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800a5c0:	4299      	cmp	r1, r3
 800a5c2:	d002      	beq.n	800a5ca <__sflush_r+0x9a>
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	f7fc fd57 	bl	8007078 <_free_r>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	6323      	str	r3, [r4, #48]	@ 0x30
 800a5ce:	e00d      	b.n	800a5ec <__sflush_r+0xbc>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	47b0      	blx	r6
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	1c50      	adds	r0, r2, #1
 800a5da:	d1c5      	bne.n	800a568 <__sflush_r+0x38>
 800a5dc:	682b      	ldr	r3, [r5, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d0c2      	beq.n	800a568 <__sflush_r+0x38>
 800a5e2:	2b1d      	cmp	r3, #29
 800a5e4:	d001      	beq.n	800a5ea <__sflush_r+0xba>
 800a5e6:	2b16      	cmp	r3, #22
 800a5e8:	d11a      	bne.n	800a620 <__sflush_r+0xf0>
 800a5ea:	602f      	str	r7, [r5, #0]
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	e01e      	b.n	800a62e <__sflush_r+0xfe>
 800a5f0:	690f      	ldr	r7, [r1, #16]
 800a5f2:	2f00      	cmp	r7, #0
 800a5f4:	d0fa      	beq.n	800a5ec <__sflush_r+0xbc>
 800a5f6:	0783      	lsls	r3, r0, #30
 800a5f8:	680e      	ldr	r6, [r1, #0]
 800a5fa:	bf08      	it	eq
 800a5fc:	694b      	ldreq	r3, [r1, #20]
 800a5fe:	600f      	str	r7, [r1, #0]
 800a600:	bf18      	it	ne
 800a602:	2300      	movne	r3, #0
 800a604:	eba6 0807 	sub.w	r8, r6, r7
 800a608:	608b      	str	r3, [r1, #8]
 800a60a:	f1b8 0f00 	cmp.w	r8, #0
 800a60e:	dded      	ble.n	800a5ec <__sflush_r+0xbc>
 800a610:	69e1      	ldr	r1, [r4, #28]
 800a612:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800a614:	4643      	mov	r3, r8
 800a616:	463a      	mov	r2, r7
 800a618:	4628      	mov	r0, r5
 800a61a:	47b0      	blx	r6
 800a61c:	2800      	cmp	r0, #0
 800a61e:	dc08      	bgt.n	800a632 <__sflush_r+0x102>
 800a620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a624:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a628:	81a3      	strh	r3, [r4, #12]
 800a62a:	f04f 30ff 	mov.w	r0, #4294967295
 800a62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a632:	4407      	add	r7, r0
 800a634:	eba8 0800 	sub.w	r8, r8, r0
 800a638:	e7e7      	b.n	800a60a <__sflush_r+0xda>
 800a63a:	bf00      	nop
 800a63c:	dfbffffe 	.word	0xdfbffffe

0800a640 <_fflush_r>:
 800a640:	b538      	push	{r3, r4, r5, lr}
 800a642:	460c      	mov	r4, r1
 800a644:	4605      	mov	r5, r0
 800a646:	b118      	cbz	r0, 800a650 <_fflush_r+0x10>
 800a648:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a64a:	b90b      	cbnz	r3, 800a650 <_fflush_r+0x10>
 800a64c:	f7fc fa64 	bl	8006b18 <__sinit>
 800a650:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800a654:	b1b8      	cbz	r0, 800a686 <_fflush_r+0x46>
 800a656:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a658:	07db      	lsls	r3, r3, #31
 800a65a:	d404      	bmi.n	800a666 <_fflush_r+0x26>
 800a65c:	0581      	lsls	r1, r0, #22
 800a65e:	d402      	bmi.n	800a666 <_fflush_r+0x26>
 800a660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a662:	f7fc fc87 	bl	8006f74 <__retarget_lock_acquire_recursive>
 800a666:	4628      	mov	r0, r5
 800a668:	4621      	mov	r1, r4
 800a66a:	f7ff ff61 	bl	800a530 <__sflush_r>
 800a66e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a670:	07da      	lsls	r2, r3, #31
 800a672:	4605      	mov	r5, r0
 800a674:	d405      	bmi.n	800a682 <_fflush_r+0x42>
 800a676:	89a3      	ldrh	r3, [r4, #12]
 800a678:	059b      	lsls	r3, r3, #22
 800a67a:	d402      	bmi.n	800a682 <_fflush_r+0x42>
 800a67c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a67e:	f7fc fc7a 	bl	8006f76 <__retarget_lock_release_recursive>
 800a682:	4628      	mov	r0, r5
 800a684:	bd38      	pop	{r3, r4, r5, pc}
 800a686:	4605      	mov	r5, r0
 800a688:	e7fb      	b.n	800a682 <_fflush_r+0x42>
	...

0800a68c <__sfvwrite_r>:
 800a68c:	6893      	ldr	r3, [r2, #8]
 800a68e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a692:	4606      	mov	r6, r0
 800a694:	460c      	mov	r4, r1
 800a696:	4691      	mov	r9, r2
 800a698:	b91b      	cbnz	r3, 800a6a2 <__sfvwrite_r+0x16>
 800a69a:	2000      	movs	r0, #0
 800a69c:	b003      	add	sp, #12
 800a69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a2:	898b      	ldrh	r3, [r1, #12]
 800a6a4:	0718      	lsls	r0, r3, #28
 800a6a6:	d550      	bpl.n	800a74a <__sfvwrite_r+0xbe>
 800a6a8:	690b      	ldr	r3, [r1, #16]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d04d      	beq.n	800a74a <__sfvwrite_r+0xbe>
 800a6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6b2:	f8d9 8000 	ldr.w	r8, [r9]
 800a6b6:	f013 0702 	ands.w	r7, r3, #2
 800a6ba:	d16b      	bne.n	800a794 <__sfvwrite_r+0x108>
 800a6bc:	f013 0301 	ands.w	r3, r3, #1
 800a6c0:	f000 809c 	beq.w	800a7fc <__sfvwrite_r+0x170>
 800a6c4:	4638      	mov	r0, r7
 800a6c6:	46ba      	mov	sl, r7
 800a6c8:	46bb      	mov	fp, r7
 800a6ca:	f1bb 0f00 	cmp.w	fp, #0
 800a6ce:	f000 8103 	beq.w	800a8d8 <__sfvwrite_r+0x24c>
 800a6d2:	b950      	cbnz	r0, 800a6ea <__sfvwrite_r+0x5e>
 800a6d4:	465a      	mov	r2, fp
 800a6d6:	210a      	movs	r1, #10
 800a6d8:	4650      	mov	r0, sl
 800a6da:	f7f5 fd91 	bl	8000200 <memchr>
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	f000 8100 	beq.w	800a8e4 <__sfvwrite_r+0x258>
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	eba0 070a 	sub.w	r7, r0, sl
 800a6ea:	6820      	ldr	r0, [r4, #0]
 800a6ec:	6921      	ldr	r1, [r4, #16]
 800a6ee:	68a5      	ldr	r5, [r4, #8]
 800a6f0:	6963      	ldr	r3, [r4, #20]
 800a6f2:	455f      	cmp	r7, fp
 800a6f4:	463a      	mov	r2, r7
 800a6f6:	bf28      	it	cs
 800a6f8:	465a      	movcs	r2, fp
 800a6fa:	4288      	cmp	r0, r1
 800a6fc:	f240 80f5 	bls.w	800a8ea <__sfvwrite_r+0x25e>
 800a700:	441d      	add	r5, r3
 800a702:	42aa      	cmp	r2, r5
 800a704:	f340 80f1 	ble.w	800a8ea <__sfvwrite_r+0x25e>
 800a708:	4651      	mov	r1, sl
 800a70a:	462a      	mov	r2, r5
 800a70c:	f7fc fb6a 	bl	8006de4 <memmove>
 800a710:	6823      	ldr	r3, [r4, #0]
 800a712:	442b      	add	r3, r5
 800a714:	6023      	str	r3, [r4, #0]
 800a716:	4621      	mov	r1, r4
 800a718:	4630      	mov	r0, r6
 800a71a:	f7ff ff91 	bl	800a640 <_fflush_r>
 800a71e:	2800      	cmp	r0, #0
 800a720:	d167      	bne.n	800a7f2 <__sfvwrite_r+0x166>
 800a722:	1b7f      	subs	r7, r7, r5
 800a724:	f040 80f9 	bne.w	800a91a <__sfvwrite_r+0x28e>
 800a728:	4621      	mov	r1, r4
 800a72a:	4630      	mov	r0, r6
 800a72c:	f7ff ff88 	bl	800a640 <_fflush_r>
 800a730:	2800      	cmp	r0, #0
 800a732:	d15e      	bne.n	800a7f2 <__sfvwrite_r+0x166>
 800a734:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a738:	1b5b      	subs	r3, r3, r5
 800a73a:	44aa      	add	sl, r5
 800a73c:	ebab 0b05 	sub.w	fp, fp, r5
 800a740:	f8c9 3008 	str.w	r3, [r9, #8]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1c0      	bne.n	800a6ca <__sfvwrite_r+0x3e>
 800a748:	e7a7      	b.n	800a69a <__sfvwrite_r+0xe>
 800a74a:	4621      	mov	r1, r4
 800a74c:	4630      	mov	r0, r6
 800a74e:	f000 f8e9 	bl	800a924 <__swsetup_r>
 800a752:	2800      	cmp	r0, #0
 800a754:	d0ab      	beq.n	800a6ae <__sfvwrite_r+0x22>
 800a756:	f04f 30ff 	mov.w	r0, #4294967295
 800a75a:	e79f      	b.n	800a69c <__sfvwrite_r+0x10>
 800a75c:	e9d8 a500 	ldrd	sl, r5, [r8]
 800a760:	f108 0808 	add.w	r8, r8, #8
 800a764:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800a768:	69e1      	ldr	r1, [r4, #28]
 800a76a:	2d00      	cmp	r5, #0
 800a76c:	d0f6      	beq.n	800a75c <__sfvwrite_r+0xd0>
 800a76e:	42bd      	cmp	r5, r7
 800a770:	462b      	mov	r3, r5
 800a772:	4652      	mov	r2, sl
 800a774:	bf28      	it	cs
 800a776:	463b      	movcs	r3, r7
 800a778:	4630      	mov	r0, r6
 800a77a:	47d8      	blx	fp
 800a77c:	2800      	cmp	r0, #0
 800a77e:	dd38      	ble.n	800a7f2 <__sfvwrite_r+0x166>
 800a780:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a784:	1a1b      	subs	r3, r3, r0
 800a786:	4482      	add	sl, r0
 800a788:	1a2d      	subs	r5, r5, r0
 800a78a:	f8c9 3008 	str.w	r3, [r9, #8]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d1e8      	bne.n	800a764 <__sfvwrite_r+0xd8>
 800a792:	e782      	b.n	800a69a <__sfvwrite_r+0xe>
 800a794:	f04f 0a00 	mov.w	sl, #0
 800a798:	4f61      	ldr	r7, [pc, #388]	@ (800a920 <__sfvwrite_r+0x294>)
 800a79a:	4655      	mov	r5, sl
 800a79c:	e7e2      	b.n	800a764 <__sfvwrite_r+0xd8>
 800a79e:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800a7a2:	f108 0808 	add.w	r8, r8, #8
 800a7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7aa:	6820      	ldr	r0, [r4, #0]
 800a7ac:	68a2      	ldr	r2, [r4, #8]
 800a7ae:	f1ba 0f00 	cmp.w	sl, #0
 800a7b2:	d0f4      	beq.n	800a79e <__sfvwrite_r+0x112>
 800a7b4:	0599      	lsls	r1, r3, #22
 800a7b6:	d563      	bpl.n	800a880 <__sfvwrite_r+0x1f4>
 800a7b8:	4552      	cmp	r2, sl
 800a7ba:	d836      	bhi.n	800a82a <__sfvwrite_r+0x19e>
 800a7bc:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 800a7c0:	d033      	beq.n	800a82a <__sfvwrite_r+0x19e>
 800a7c2:	6921      	ldr	r1, [r4, #16]
 800a7c4:	6965      	ldr	r5, [r4, #20]
 800a7c6:	eba0 0b01 	sub.w	fp, r0, r1
 800a7ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7d2:	f10b 0201 	add.w	r2, fp, #1
 800a7d6:	106d      	asrs	r5, r5, #1
 800a7d8:	4452      	add	r2, sl
 800a7da:	4295      	cmp	r5, r2
 800a7dc:	bf38      	it	cc
 800a7de:	4615      	movcc	r5, r2
 800a7e0:	055b      	lsls	r3, r3, #21
 800a7e2:	d53d      	bpl.n	800a860 <__sfvwrite_r+0x1d4>
 800a7e4:	4629      	mov	r1, r5
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f7fb fe40 	bl	800646c <_malloc_r>
 800a7ec:	b948      	cbnz	r0, 800a802 <__sfvwrite_r+0x176>
 800a7ee:	230c      	movs	r3, #12
 800a7f0:	6033      	str	r3, [r6, #0]
 800a7f2:	89a3      	ldrh	r3, [r4, #12]
 800a7f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7f8:	81a3      	strh	r3, [r4, #12]
 800a7fa:	e7ac      	b.n	800a756 <__sfvwrite_r+0xca>
 800a7fc:	461f      	mov	r7, r3
 800a7fe:	469a      	mov	sl, r3
 800a800:	e7d1      	b.n	800a7a6 <__sfvwrite_r+0x11a>
 800a802:	465a      	mov	r2, fp
 800a804:	6921      	ldr	r1, [r4, #16]
 800a806:	9001      	str	r0, [sp, #4]
 800a808:	f7fc fbc2 	bl	8006f90 <memcpy>
 800a80c:	89a2      	ldrh	r2, [r4, #12]
 800a80e:	9b01      	ldr	r3, [sp, #4]
 800a810:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800a814:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a818:	81a2      	strh	r2, [r4, #12]
 800a81a:	6123      	str	r3, [r4, #16]
 800a81c:	6165      	str	r5, [r4, #20]
 800a81e:	445b      	add	r3, fp
 800a820:	eba5 050b 	sub.w	r5, r5, fp
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	4652      	mov	r2, sl
 800a828:	60a5      	str	r5, [r4, #8]
 800a82a:	4552      	cmp	r2, sl
 800a82c:	bf28      	it	cs
 800a82e:	4652      	movcs	r2, sl
 800a830:	6820      	ldr	r0, [r4, #0]
 800a832:	9201      	str	r2, [sp, #4]
 800a834:	4639      	mov	r1, r7
 800a836:	f7fc fad5 	bl	8006de4 <memmove>
 800a83a:	68a3      	ldr	r3, [r4, #8]
 800a83c:	9a01      	ldr	r2, [sp, #4]
 800a83e:	1a9b      	subs	r3, r3, r2
 800a840:	60a3      	str	r3, [r4, #8]
 800a842:	6823      	ldr	r3, [r4, #0]
 800a844:	4413      	add	r3, r2
 800a846:	4655      	mov	r5, sl
 800a848:	6023      	str	r3, [r4, #0]
 800a84a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a84e:	1b5b      	subs	r3, r3, r5
 800a850:	442f      	add	r7, r5
 800a852:	ebaa 0a05 	sub.w	sl, sl, r5
 800a856:	f8c9 3008 	str.w	r3, [r9, #8]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1a3      	bne.n	800a7a6 <__sfvwrite_r+0x11a>
 800a85e:	e71c      	b.n	800a69a <__sfvwrite_r+0xe>
 800a860:	462a      	mov	r2, r5
 800a862:	4630      	mov	r0, r6
 800a864:	f001 fb42 	bl	800beec <_realloc_r>
 800a868:	4603      	mov	r3, r0
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d1d5      	bne.n	800a81a <__sfvwrite_r+0x18e>
 800a86e:	6921      	ldr	r1, [r4, #16]
 800a870:	4630      	mov	r0, r6
 800a872:	f7fc fc01 	bl	8007078 <_free_r>
 800a876:	89a3      	ldrh	r3, [r4, #12]
 800a878:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a87c:	81a3      	strh	r3, [r4, #12]
 800a87e:	e7b6      	b.n	800a7ee <__sfvwrite_r+0x162>
 800a880:	6923      	ldr	r3, [r4, #16]
 800a882:	4283      	cmp	r3, r0
 800a884:	d302      	bcc.n	800a88c <__sfvwrite_r+0x200>
 800a886:	6961      	ldr	r1, [r4, #20]
 800a888:	4551      	cmp	r1, sl
 800a88a:	d915      	bls.n	800a8b8 <__sfvwrite_r+0x22c>
 800a88c:	4552      	cmp	r2, sl
 800a88e:	bf28      	it	cs
 800a890:	4652      	movcs	r2, sl
 800a892:	4639      	mov	r1, r7
 800a894:	4615      	mov	r5, r2
 800a896:	f7fc faa5 	bl	8006de4 <memmove>
 800a89a:	68a3      	ldr	r3, [r4, #8]
 800a89c:	6822      	ldr	r2, [r4, #0]
 800a89e:	1b5b      	subs	r3, r3, r5
 800a8a0:	442a      	add	r2, r5
 800a8a2:	60a3      	str	r3, [r4, #8]
 800a8a4:	6022      	str	r2, [r4, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d1cf      	bne.n	800a84a <__sfvwrite_r+0x1be>
 800a8aa:	4621      	mov	r1, r4
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	f7ff fec7 	bl	800a640 <_fflush_r>
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	d0c9      	beq.n	800a84a <__sfvwrite_r+0x1be>
 800a8b6:	e79c      	b.n	800a7f2 <__sfvwrite_r+0x166>
 800a8b8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a8bc:	4553      	cmp	r3, sl
 800a8be:	bf28      	it	cs
 800a8c0:	4653      	movcs	r3, sl
 800a8c2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a8c4:	fb93 f3f1 	sdiv	r3, r3, r1
 800a8c8:	463a      	mov	r2, r7
 800a8ca:	434b      	muls	r3, r1
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	69e1      	ldr	r1, [r4, #28]
 800a8d0:	47a8      	blx	r5
 800a8d2:	1e05      	subs	r5, r0, #0
 800a8d4:	dcb9      	bgt.n	800a84a <__sfvwrite_r+0x1be>
 800a8d6:	e78c      	b.n	800a7f2 <__sfvwrite_r+0x166>
 800a8d8:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800a8dc:	2000      	movs	r0, #0
 800a8de:	f108 0808 	add.w	r8, r8, #8
 800a8e2:	e6f2      	b.n	800a6ca <__sfvwrite_r+0x3e>
 800a8e4:	f10b 0701 	add.w	r7, fp, #1
 800a8e8:	e6ff      	b.n	800a6ea <__sfvwrite_r+0x5e>
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	dc08      	bgt.n	800a900 <__sfvwrite_r+0x274>
 800a8ee:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a8f0:	69e1      	ldr	r1, [r4, #28]
 800a8f2:	4652      	mov	r2, sl
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	47a8      	blx	r5
 800a8f8:	1e05      	subs	r5, r0, #0
 800a8fa:	f73f af12 	bgt.w	800a722 <__sfvwrite_r+0x96>
 800a8fe:	e778      	b.n	800a7f2 <__sfvwrite_r+0x166>
 800a900:	4651      	mov	r1, sl
 800a902:	9201      	str	r2, [sp, #4]
 800a904:	f7fc fa6e 	bl	8006de4 <memmove>
 800a908:	9a01      	ldr	r2, [sp, #4]
 800a90a:	68a3      	ldr	r3, [r4, #8]
 800a90c:	1a9b      	subs	r3, r3, r2
 800a90e:	60a3      	str	r3, [r4, #8]
 800a910:	6823      	ldr	r3, [r4, #0]
 800a912:	4413      	add	r3, r2
 800a914:	6023      	str	r3, [r4, #0]
 800a916:	4615      	mov	r5, r2
 800a918:	e703      	b.n	800a722 <__sfvwrite_r+0x96>
 800a91a:	2001      	movs	r0, #1
 800a91c:	e70a      	b.n	800a734 <__sfvwrite_r+0xa8>
 800a91e:	bf00      	nop
 800a920:	7ffffc00 	.word	0x7ffffc00

0800a924 <__swsetup_r>:
 800a924:	b538      	push	{r3, r4, r5, lr}
 800a926:	4b29      	ldr	r3, [pc, #164]	@ (800a9cc <__swsetup_r+0xa8>)
 800a928:	4605      	mov	r5, r0
 800a92a:	6818      	ldr	r0, [r3, #0]
 800a92c:	460c      	mov	r4, r1
 800a92e:	b118      	cbz	r0, 800a938 <__swsetup_r+0x14>
 800a930:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a932:	b90b      	cbnz	r3, 800a938 <__swsetup_r+0x14>
 800a934:	f7fc f8f0 	bl	8006b18 <__sinit>
 800a938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a93c:	0719      	lsls	r1, r3, #28
 800a93e:	d422      	bmi.n	800a986 <__swsetup_r+0x62>
 800a940:	06da      	lsls	r2, r3, #27
 800a942:	d407      	bmi.n	800a954 <__swsetup_r+0x30>
 800a944:	2209      	movs	r2, #9
 800a946:	602a      	str	r2, [r5, #0]
 800a948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a94c:	81a3      	strh	r3, [r4, #12]
 800a94e:	f04f 30ff 	mov.w	r0, #4294967295
 800a952:	e033      	b.n	800a9bc <__swsetup_r+0x98>
 800a954:	0758      	lsls	r0, r3, #29
 800a956:	d512      	bpl.n	800a97e <__swsetup_r+0x5a>
 800a958:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a95a:	b141      	cbz	r1, 800a96e <__swsetup_r+0x4a>
 800a95c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800a960:	4299      	cmp	r1, r3
 800a962:	d002      	beq.n	800a96a <__swsetup_r+0x46>
 800a964:	4628      	mov	r0, r5
 800a966:	f7fc fb87 	bl	8007078 <_free_r>
 800a96a:	2300      	movs	r3, #0
 800a96c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a96e:	89a3      	ldrh	r3, [r4, #12]
 800a970:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a974:	81a3      	strh	r3, [r4, #12]
 800a976:	2300      	movs	r3, #0
 800a978:	6063      	str	r3, [r4, #4]
 800a97a:	6923      	ldr	r3, [r4, #16]
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	89a3      	ldrh	r3, [r4, #12]
 800a980:	f043 0308 	orr.w	r3, r3, #8
 800a984:	81a3      	strh	r3, [r4, #12]
 800a986:	6923      	ldr	r3, [r4, #16]
 800a988:	b94b      	cbnz	r3, 800a99e <__swsetup_r+0x7a>
 800a98a:	89a3      	ldrh	r3, [r4, #12]
 800a98c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a994:	d003      	beq.n	800a99e <__swsetup_r+0x7a>
 800a996:	4621      	mov	r1, r4
 800a998:	4628      	mov	r0, r5
 800a99a:	f001 fd18 	bl	800c3ce <__smakebuf_r>
 800a99e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9a2:	f013 0201 	ands.w	r2, r3, #1
 800a9a6:	d00a      	beq.n	800a9be <__swsetup_r+0x9a>
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	60a2      	str	r2, [r4, #8]
 800a9ac:	6962      	ldr	r2, [r4, #20]
 800a9ae:	4252      	negs	r2, r2
 800a9b0:	61a2      	str	r2, [r4, #24]
 800a9b2:	6922      	ldr	r2, [r4, #16]
 800a9b4:	b942      	cbnz	r2, 800a9c8 <__swsetup_r+0xa4>
 800a9b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a9ba:	d1c5      	bne.n	800a948 <__swsetup_r+0x24>
 800a9bc:	bd38      	pop	{r3, r4, r5, pc}
 800a9be:	0799      	lsls	r1, r3, #30
 800a9c0:	bf58      	it	pl
 800a9c2:	6962      	ldrpl	r2, [r4, #20]
 800a9c4:	60a2      	str	r2, [r4, #8]
 800a9c6:	e7f4      	b.n	800a9b2 <__swsetup_r+0x8e>
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	e7f7      	b.n	800a9bc <__swsetup_r+0x98>
 800a9cc:	2000046c 	.word	0x2000046c

0800a9d0 <__fputwc>:
 800a9d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a9d4:	4680      	mov	r8, r0
 800a9d6:	460f      	mov	r7, r1
 800a9d8:	4614      	mov	r4, r2
 800a9da:	f000 f877 	bl	800aacc <__locale_mb_cur_max>
 800a9de:	2801      	cmp	r0, #1
 800a9e0:	4605      	mov	r5, r0
 800a9e2:	d11b      	bne.n	800aa1c <__fputwc+0x4c>
 800a9e4:	1e7b      	subs	r3, r7, #1
 800a9e6:	2bfe      	cmp	r3, #254	@ 0xfe
 800a9e8:	d818      	bhi.n	800aa1c <__fputwc+0x4c>
 800a9ea:	f88d 7004 	strb.w	r7, [sp, #4]
 800a9ee:	2600      	movs	r6, #0
 800a9f0:	f10d 0904 	add.w	r9, sp, #4
 800a9f4:	42ae      	cmp	r6, r5
 800a9f6:	d021      	beq.n	800aa3c <__fputwc+0x6c>
 800a9f8:	68a3      	ldr	r3, [r4, #8]
 800a9fa:	f816 1009 	ldrb.w	r1, [r6, r9]
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	60a3      	str	r3, [r4, #8]
 800aa04:	da04      	bge.n	800aa10 <__fputwc+0x40>
 800aa06:	69a2      	ldr	r2, [r4, #24]
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	db1b      	blt.n	800aa44 <__fputwc+0x74>
 800aa0c:	290a      	cmp	r1, #10
 800aa0e:	d019      	beq.n	800aa44 <__fputwc+0x74>
 800aa10:	6823      	ldr	r3, [r4, #0]
 800aa12:	1c5a      	adds	r2, r3, #1
 800aa14:	6022      	str	r2, [r4, #0]
 800aa16:	7019      	strb	r1, [r3, #0]
 800aa18:	3601      	adds	r6, #1
 800aa1a:	e7eb      	b.n	800a9f4 <__fputwc+0x24>
 800aa1c:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 800aa20:	463a      	mov	r2, r7
 800aa22:	a901      	add	r1, sp, #4
 800aa24:	4640      	mov	r0, r8
 800aa26:	f001 fc17 	bl	800c258 <_wcrtomb_r>
 800aa2a:	1c43      	adds	r3, r0, #1
 800aa2c:	4605      	mov	r5, r0
 800aa2e:	d1de      	bne.n	800a9ee <__fputwc+0x1e>
 800aa30:	89a3      	ldrh	r3, [r4, #12]
 800aa32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa36:	81a3      	strh	r3, [r4, #12]
 800aa38:	f04f 37ff 	mov.w	r7, #4294967295
 800aa3c:	4638      	mov	r0, r7
 800aa3e:	b003      	add	sp, #12
 800aa40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa44:	4622      	mov	r2, r4
 800aa46:	4640      	mov	r0, r8
 800aa48:	f001 fcfd 	bl	800c446 <__swbuf_r>
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	d1e3      	bne.n	800aa18 <__fputwc+0x48>
 800aa50:	e7f2      	b.n	800aa38 <__fputwc+0x68>

0800aa52 <_fputwc_r>:
 800aa52:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800aa54:	07db      	lsls	r3, r3, #31
 800aa56:	b570      	push	{r4, r5, r6, lr}
 800aa58:	4605      	mov	r5, r0
 800aa5a:	460e      	mov	r6, r1
 800aa5c:	4614      	mov	r4, r2
 800aa5e:	d405      	bmi.n	800aa6c <_fputwc_r+0x1a>
 800aa60:	8993      	ldrh	r3, [r2, #12]
 800aa62:	0598      	lsls	r0, r3, #22
 800aa64:	d402      	bmi.n	800aa6c <_fputwc_r+0x1a>
 800aa66:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 800aa68:	f7fc fa84 	bl	8006f74 <__retarget_lock_acquire_recursive>
 800aa6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa70:	0499      	lsls	r1, r3, #18
 800aa72:	d406      	bmi.n	800aa82 <_fputwc_r+0x30>
 800aa74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800aa78:	81a3      	strh	r3, [r4, #12]
 800aa7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800aa80:	6663      	str	r3, [r4, #100]	@ 0x64
 800aa82:	4622      	mov	r2, r4
 800aa84:	4628      	mov	r0, r5
 800aa86:	4631      	mov	r1, r6
 800aa88:	f7ff ffa2 	bl	800a9d0 <__fputwc>
 800aa8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa8e:	07da      	lsls	r2, r3, #31
 800aa90:	4605      	mov	r5, r0
 800aa92:	d405      	bmi.n	800aaa0 <_fputwc_r+0x4e>
 800aa94:	89a3      	ldrh	r3, [r4, #12]
 800aa96:	059b      	lsls	r3, r3, #22
 800aa98:	d402      	bmi.n	800aaa0 <_fputwc_r+0x4e>
 800aa9a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa9c:	f7fc fa6b 	bl	8006f76 <__retarget_lock_release_recursive>
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	bd70      	pop	{r4, r5, r6, pc}

0800aaa4 <strncpy>:
 800aaa4:	b510      	push	{r4, lr}
 800aaa6:	3901      	subs	r1, #1
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	b132      	cbz	r2, 800aaba <strncpy+0x16>
 800aaac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800aab0:	f803 4b01 	strb.w	r4, [r3], #1
 800aab4:	3a01      	subs	r2, #1
 800aab6:	2c00      	cmp	r4, #0
 800aab8:	d1f7      	bne.n	800aaaa <strncpy+0x6>
 800aaba:	441a      	add	r2, r3
 800aabc:	2100      	movs	r1, #0
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d100      	bne.n	800aac4 <strncpy+0x20>
 800aac2:	bd10      	pop	{r4, pc}
 800aac4:	f803 1b01 	strb.w	r1, [r3], #1
 800aac8:	e7f9      	b.n	800aabe <strncpy+0x1a>
	...

0800aacc <__locale_mb_cur_max>:
 800aacc:	4b01      	ldr	r3, [pc, #4]	@ (800aad4 <__locale_mb_cur_max+0x8>)
 800aace:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 800aad2:	4770      	bx	lr
 800aad4:	20000594 	.word	0x20000594

0800aad8 <_localeconv_r>:
 800aad8:	4800      	ldr	r0, [pc, #0]	@ (800aadc <_localeconv_r+0x4>)
 800aada:	4770      	bx	lr
 800aadc:	20000684 	.word	0x20000684

0800aae0 <__libc_fini_array>:
 800aae0:	b538      	push	{r3, r4, r5, lr}
 800aae2:	4d07      	ldr	r5, [pc, #28]	@ (800ab00 <__libc_fini_array+0x20>)
 800aae4:	4c07      	ldr	r4, [pc, #28]	@ (800ab04 <__libc_fini_array+0x24>)
 800aae6:	1b64      	subs	r4, r4, r5
 800aae8:	10a4      	asrs	r4, r4, #2
 800aaea:	b91c      	cbnz	r4, 800aaf4 <__libc_fini_array+0x14>
 800aaec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaf0:	f001 bdcc 	b.w	800c68c <_fini>
 800aaf4:	3c01      	subs	r4, #1
 800aaf6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800aafa:	4798      	blx	r3
 800aafc:	e7f5      	b.n	800aaea <__libc_fini_array+0xa>
 800aafe:	bf00      	nop
 800ab00:	0800d68c 	.word	0x0800d68c
 800ab04:	0800d690 	.word	0x0800d690

0800ab08 <frexp>:
 800ab08:	b570      	push	{r4, r5, r6, lr}
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	ec55 4b10 	vmov	r4, r5, d0
 800ab10:	6001      	str	r1, [r0, #0]
 800ab12:	4915      	ldr	r1, [pc, #84]	@ (800ab68 <frexp+0x60>)
 800ab14:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ab18:	428a      	cmp	r2, r1
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	462b      	mov	r3, r5
 800ab1e:	d820      	bhi.n	800ab62 <frexp+0x5a>
 800ab20:	4621      	mov	r1, r4
 800ab22:	4311      	orrs	r1, r2
 800ab24:	d01d      	beq.n	800ab62 <frexp+0x5a>
 800ab26:	4911      	ldr	r1, [pc, #68]	@ (800ab6c <frexp+0x64>)
 800ab28:	4029      	ands	r1, r5
 800ab2a:	b961      	cbnz	r1, 800ab46 <frexp+0x3e>
 800ab2c:	4b10      	ldr	r3, [pc, #64]	@ (800ab70 <frexp+0x68>)
 800ab2e:	2200      	movs	r2, #0
 800ab30:	4620      	mov	r0, r4
 800ab32:	4629      	mov	r1, r5
 800ab34:	f7f5 fd70 	bl	8000618 <__aeabi_dmul>
 800ab38:	460b      	mov	r3, r1
 800ab3a:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800ab3e:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800ab42:	4604      	mov	r4, r0
 800ab44:	6031      	str	r1, [r6, #0]
 800ab46:	6831      	ldr	r1, [r6, #0]
 800ab48:	1512      	asrs	r2, r2, #20
 800ab4a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ab4e:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 800ab52:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ab56:	4411      	add	r1, r2
 800ab58:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800ab5c:	6031      	str	r1, [r6, #0]
 800ab5e:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 800ab62:	ec45 4b10 	vmov	d0, r4, r5
 800ab66:	bd70      	pop	{r4, r5, r6, pc}
 800ab68:	7fefffff 	.word	0x7fefffff
 800ab6c:	7ff00000 	.word	0x7ff00000
 800ab70:	43500000 	.word	0x43500000

0800ab74 <__register_exitproc>:
 800ab74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab78:	f8df a074 	ldr.w	sl, [pc, #116]	@ 800abf0 <__register_exitproc+0x7c>
 800ab7c:	4606      	mov	r6, r0
 800ab7e:	f8da 0000 	ldr.w	r0, [sl]
 800ab82:	4698      	mov	r8, r3
 800ab84:	460f      	mov	r7, r1
 800ab86:	4691      	mov	r9, r2
 800ab88:	f7fc f9f4 	bl	8006f74 <__retarget_lock_acquire_recursive>
 800ab8c:	4b16      	ldr	r3, [pc, #88]	@ (800abe8 <__register_exitproc+0x74>)
 800ab8e:	681c      	ldr	r4, [r3, #0]
 800ab90:	b90c      	cbnz	r4, 800ab96 <__register_exitproc+0x22>
 800ab92:	4c16      	ldr	r4, [pc, #88]	@ (800abec <__register_exitproc+0x78>)
 800ab94:	601c      	str	r4, [r3, #0]
 800ab96:	6865      	ldr	r5, [r4, #4]
 800ab98:	f8da 0000 	ldr.w	r0, [sl]
 800ab9c:	2d1f      	cmp	r5, #31
 800ab9e:	dd05      	ble.n	800abac <__register_exitproc+0x38>
 800aba0:	f7fc f9e9 	bl	8006f76 <__retarget_lock_release_recursive>
 800aba4:	f04f 30ff 	mov.w	r0, #4294967295
 800aba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abac:	b19e      	cbz	r6, 800abd6 <__register_exitproc+0x62>
 800abae:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800abb2:	2201      	movs	r2, #1
 800abb4:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 800abb8:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 800abbc:	40aa      	lsls	r2, r5
 800abbe:	4313      	orrs	r3, r2
 800abc0:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 800abc4:	2e02      	cmp	r6, #2
 800abc6:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 800abca:	bf02      	ittt	eq
 800abcc:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 800abd0:	4313      	orreq	r3, r2
 800abd2:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 800abd6:	1c6b      	adds	r3, r5, #1
 800abd8:	3502      	adds	r5, #2
 800abda:	6063      	str	r3, [r4, #4]
 800abdc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800abe0:	f7fc f9c9 	bl	8006f76 <__retarget_lock_release_recursive>
 800abe4:	2000      	movs	r0, #0
 800abe6:	e7df      	b.n	800aba8 <__register_exitproc+0x34>
 800abe8:	20001378 	.word	0x20001378
 800abec:	2000137c 	.word	0x2000137c
 800abf0:	20000590 	.word	0x20000590

0800abf4 <quorem>:
 800abf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf8:	6903      	ldr	r3, [r0, #16]
 800abfa:	690c      	ldr	r4, [r1, #16]
 800abfc:	42a3      	cmp	r3, r4
 800abfe:	4607      	mov	r7, r0
 800ac00:	db7e      	blt.n	800ad00 <quorem+0x10c>
 800ac02:	3c01      	subs	r4, #1
 800ac04:	f101 0814 	add.w	r8, r1, #20
 800ac08:	00a3      	lsls	r3, r4, #2
 800ac0a:	f100 0514 	add.w	r5, r0, #20
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac14:	9301      	str	r3, [sp, #4]
 800ac16:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	429a      	cmp	r2, r3
 800ac22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac26:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac2a:	d32e      	bcc.n	800ac8a <quorem+0x96>
 800ac2c:	f04f 0a00 	mov.w	sl, #0
 800ac30:	46c4      	mov	ip, r8
 800ac32:	46ae      	mov	lr, r5
 800ac34:	46d3      	mov	fp, sl
 800ac36:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ac3a:	b298      	uxth	r0, r3
 800ac3c:	fb06 a000 	mla	r0, r6, r0, sl
 800ac40:	0c02      	lsrs	r2, r0, #16
 800ac42:	0c1b      	lsrs	r3, r3, #16
 800ac44:	fb06 2303 	mla	r3, r6, r3, r2
 800ac48:	f8de 2000 	ldr.w	r2, [lr]
 800ac4c:	b280      	uxth	r0, r0
 800ac4e:	b292      	uxth	r2, r2
 800ac50:	1a12      	subs	r2, r2, r0
 800ac52:	445a      	add	r2, fp
 800ac54:	f8de 0000 	ldr.w	r0, [lr]
 800ac58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ac62:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ac66:	b292      	uxth	r2, r2
 800ac68:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ac6c:	45e1      	cmp	r9, ip
 800ac6e:	f84e 2b04 	str.w	r2, [lr], #4
 800ac72:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ac76:	d2de      	bcs.n	800ac36 <quorem+0x42>
 800ac78:	9b00      	ldr	r3, [sp, #0]
 800ac7a:	58eb      	ldr	r3, [r5, r3]
 800ac7c:	b92b      	cbnz	r3, 800ac8a <quorem+0x96>
 800ac7e:	9b01      	ldr	r3, [sp, #4]
 800ac80:	3b04      	subs	r3, #4
 800ac82:	429d      	cmp	r5, r3
 800ac84:	461a      	mov	r2, r3
 800ac86:	d32f      	bcc.n	800ace8 <quorem+0xf4>
 800ac88:	613c      	str	r4, [r7, #16]
 800ac8a:	4638      	mov	r0, r7
 800ac8c:	f001 f826 	bl	800bcdc <__mcmp>
 800ac90:	2800      	cmp	r0, #0
 800ac92:	db25      	blt.n	800ace0 <quorem+0xec>
 800ac94:	4629      	mov	r1, r5
 800ac96:	2000      	movs	r0, #0
 800ac98:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac9c:	f8d1 c000 	ldr.w	ip, [r1]
 800aca0:	fa1f fe82 	uxth.w	lr, r2
 800aca4:	fa1f f38c 	uxth.w	r3, ip
 800aca8:	eba3 030e 	sub.w	r3, r3, lr
 800acac:	4403      	add	r3, r0
 800acae:	0c12      	lsrs	r2, r2, #16
 800acb0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800acb4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800acb8:	b29b      	uxth	r3, r3
 800acba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acbe:	45c1      	cmp	r9, r8
 800acc0:	f841 3b04 	str.w	r3, [r1], #4
 800acc4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800acc8:	d2e6      	bcs.n	800ac98 <quorem+0xa4>
 800acca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acd2:	b922      	cbnz	r2, 800acde <quorem+0xea>
 800acd4:	3b04      	subs	r3, #4
 800acd6:	429d      	cmp	r5, r3
 800acd8:	461a      	mov	r2, r3
 800acda:	d30b      	bcc.n	800acf4 <quorem+0x100>
 800acdc:	613c      	str	r4, [r7, #16]
 800acde:	3601      	adds	r6, #1
 800ace0:	4630      	mov	r0, r6
 800ace2:	b003      	add	sp, #12
 800ace4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace8:	6812      	ldr	r2, [r2, #0]
 800acea:	3b04      	subs	r3, #4
 800acec:	2a00      	cmp	r2, #0
 800acee:	d1cb      	bne.n	800ac88 <quorem+0x94>
 800acf0:	3c01      	subs	r4, #1
 800acf2:	e7c6      	b.n	800ac82 <quorem+0x8e>
 800acf4:	6812      	ldr	r2, [r2, #0]
 800acf6:	3b04      	subs	r3, #4
 800acf8:	2a00      	cmp	r2, #0
 800acfa:	d1ef      	bne.n	800acdc <quorem+0xe8>
 800acfc:	3c01      	subs	r4, #1
 800acfe:	e7ea      	b.n	800acd6 <quorem+0xe2>
 800ad00:	2000      	movs	r0, #0
 800ad02:	e7ee      	b.n	800ace2 <quorem+0xee>
 800ad04:	0000      	movs	r0, r0
	...

0800ad08 <_dtoa_r>:
 800ad08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad0c:	b099      	sub	sp, #100	@ 0x64
 800ad0e:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ad12:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad14:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800ad16:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ad18:	920e      	str	r2, [sp, #56]	@ 0x38
 800ad1a:	ec55 4b10 	vmov	r4, r5, d0
 800ad1e:	4683      	mov	fp, r0
 800ad20:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad22:	b149      	cbz	r1, 800ad38 <_dtoa_r+0x30>
 800ad24:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ad26:	604a      	str	r2, [r1, #4]
 800ad28:	2301      	movs	r3, #1
 800ad2a:	4093      	lsls	r3, r2
 800ad2c:	608b      	str	r3, [r1, #8]
 800ad2e:	f000 fdce 	bl	800b8ce <_Bfree>
 800ad32:	2300      	movs	r3, #0
 800ad34:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 800ad38:	1e2b      	subs	r3, r5, #0
 800ad3a:	bfb9      	ittee	lt
 800ad3c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ad40:	9303      	strlt	r3, [sp, #12]
 800ad42:	2300      	movge	r3, #0
 800ad44:	6033      	strge	r3, [r6, #0]
 800ad46:	9f03      	ldr	r7, [sp, #12]
 800ad48:	4b97      	ldr	r3, [pc, #604]	@ (800afa8 <_dtoa_r+0x2a0>)
 800ad4a:	bfbc      	itt	lt
 800ad4c:	2201      	movlt	r2, #1
 800ad4e:	6032      	strlt	r2, [r6, #0]
 800ad50:	43bb      	bics	r3, r7
 800ad52:	d114      	bne.n	800ad7e <_dtoa_r+0x76>
 800ad54:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ad56:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ad5a:	6013      	str	r3, [r2, #0]
 800ad5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad60:	4323      	orrs	r3, r4
 800ad62:	f000 854c 	beq.w	800b7fe <_dtoa_r+0xaf6>
 800ad66:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad68:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800afc0 <_dtoa_r+0x2b8>
 800ad6c:	b11b      	cbz	r3, 800ad76 <_dtoa_r+0x6e>
 800ad6e:	f10a 0303 	add.w	r3, sl, #3
 800ad72:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ad74:	6013      	str	r3, [r2, #0]
 800ad76:	4650      	mov	r0, sl
 800ad78:	b019      	add	sp, #100	@ 0x64
 800ad7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad82:	2200      	movs	r2, #0
 800ad84:	ec51 0b17 	vmov	r0, r1, d7
 800ad88:	2300      	movs	r3, #0
 800ad8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ad8e:	f7f5 feab 	bl	8000ae8 <__aeabi_dcmpeq>
 800ad92:	4680      	mov	r8, r0
 800ad94:	b150      	cbz	r0, 800adac <_dtoa_r+0xa4>
 800ad96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ad98:	2301      	movs	r3, #1
 800ad9a:	6013      	str	r3, [r2, #0]
 800ad9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad9e:	b113      	cbz	r3, 800ada6 <_dtoa_r+0x9e>
 800ada0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ada2:	4b82      	ldr	r3, [pc, #520]	@ (800afac <_dtoa_r+0x2a4>)
 800ada4:	6013      	str	r3, [r2, #0]
 800ada6:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800afc4 <_dtoa_r+0x2bc>
 800adaa:	e7e4      	b.n	800ad76 <_dtoa_r+0x6e>
 800adac:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800adb0:	aa16      	add	r2, sp, #88	@ 0x58
 800adb2:	a917      	add	r1, sp, #92	@ 0x5c
 800adb4:	4658      	mov	r0, fp
 800adb6:	f001 f841 	bl	800be3c <__d2b>
 800adba:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800adbe:	4681      	mov	r9, r0
 800adc0:	2e00      	cmp	r6, #0
 800adc2:	d077      	beq.n	800aeb4 <_dtoa_r+0x1ac>
 800adc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800adc6:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800adca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800add2:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800add6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800adda:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800adde:	4619      	mov	r1, r3
 800ade0:	2200      	movs	r2, #0
 800ade2:	4b73      	ldr	r3, [pc, #460]	@ (800afb0 <_dtoa_r+0x2a8>)
 800ade4:	f7f5 fa60 	bl	80002a8 <__aeabi_dsub>
 800ade8:	a369      	add	r3, pc, #420	@ (adr r3, 800af90 <_dtoa_r+0x288>)
 800adea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adee:	f7f5 fc13 	bl	8000618 <__aeabi_dmul>
 800adf2:	a369      	add	r3, pc, #420	@ (adr r3, 800af98 <_dtoa_r+0x290>)
 800adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf8:	f7f5 fa58 	bl	80002ac <__adddf3>
 800adfc:	4604      	mov	r4, r0
 800adfe:	4630      	mov	r0, r6
 800ae00:	460d      	mov	r5, r1
 800ae02:	f7f5 fb9f 	bl	8000544 <__aeabi_i2d>
 800ae06:	a366      	add	r3, pc, #408	@ (adr r3, 800afa0 <_dtoa_r+0x298>)
 800ae08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0c:	f7f5 fc04 	bl	8000618 <__aeabi_dmul>
 800ae10:	4602      	mov	r2, r0
 800ae12:	460b      	mov	r3, r1
 800ae14:	4620      	mov	r0, r4
 800ae16:	4629      	mov	r1, r5
 800ae18:	f7f5 fa48 	bl	80002ac <__adddf3>
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	460d      	mov	r5, r1
 800ae20:	f7f5 feaa 	bl	8000b78 <__aeabi_d2iz>
 800ae24:	2200      	movs	r2, #0
 800ae26:	4607      	mov	r7, r0
 800ae28:	2300      	movs	r3, #0
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	4629      	mov	r1, r5
 800ae2e:	f7f5 fe65 	bl	8000afc <__aeabi_dcmplt>
 800ae32:	b140      	cbz	r0, 800ae46 <_dtoa_r+0x13e>
 800ae34:	4638      	mov	r0, r7
 800ae36:	f7f5 fb85 	bl	8000544 <__aeabi_i2d>
 800ae3a:	4622      	mov	r2, r4
 800ae3c:	462b      	mov	r3, r5
 800ae3e:	f7f5 fe53 	bl	8000ae8 <__aeabi_dcmpeq>
 800ae42:	b900      	cbnz	r0, 800ae46 <_dtoa_r+0x13e>
 800ae44:	3f01      	subs	r7, #1
 800ae46:	2f16      	cmp	r7, #22
 800ae48:	d851      	bhi.n	800aeee <_dtoa_r+0x1e6>
 800ae4a:	4b5a      	ldr	r3, [pc, #360]	@ (800afb4 <_dtoa_r+0x2ac>)
 800ae4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae58:	f7f5 fe50 	bl	8000afc <__aeabi_dcmplt>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d048      	beq.n	800aef2 <_dtoa_r+0x1ea>
 800ae60:	3f01      	subs	r7, #1
 800ae62:	2300      	movs	r3, #0
 800ae64:	9312      	str	r3, [sp, #72]	@ 0x48
 800ae66:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ae68:	1b9b      	subs	r3, r3, r6
 800ae6a:	1e5a      	subs	r2, r3, #1
 800ae6c:	bf44      	itt	mi
 800ae6e:	f1c3 0801 	rsbmi	r8, r3, #1
 800ae72:	2300      	movmi	r3, #0
 800ae74:	9208      	str	r2, [sp, #32]
 800ae76:	bf54      	ite	pl
 800ae78:	f04f 0800 	movpl.w	r8, #0
 800ae7c:	9308      	strmi	r3, [sp, #32]
 800ae7e:	2f00      	cmp	r7, #0
 800ae80:	db39      	blt.n	800aef6 <_dtoa_r+0x1ee>
 800ae82:	9b08      	ldr	r3, [sp, #32]
 800ae84:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ae86:	443b      	add	r3, r7
 800ae88:	9308      	str	r3, [sp, #32]
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae90:	2b09      	cmp	r3, #9
 800ae92:	d865      	bhi.n	800af60 <_dtoa_r+0x258>
 800ae94:	2b05      	cmp	r3, #5
 800ae96:	bfc4      	itt	gt
 800ae98:	3b04      	subgt	r3, #4
 800ae9a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ae9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae9e:	f1a3 0302 	sub.w	r3, r3, #2
 800aea2:	bfcc      	ite	gt
 800aea4:	2400      	movgt	r4, #0
 800aea6:	2401      	movle	r4, #1
 800aea8:	2b03      	cmp	r3, #3
 800aeaa:	d864      	bhi.n	800af76 <_dtoa_r+0x26e>
 800aeac:	e8df f003 	tbb	[pc, r3]
 800aeb0:	5635372a 	.word	0x5635372a
 800aeb4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800aeb8:	441e      	add	r6, r3
 800aeba:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aebe:	2b20      	cmp	r3, #32
 800aec0:	bfc1      	itttt	gt
 800aec2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aec6:	409f      	lslgt	r7, r3
 800aec8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aecc:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aed0:	bfd6      	itet	le
 800aed2:	f1c3 0320 	rsble	r3, r3, #32
 800aed6:	ea47 0003 	orrgt.w	r0, r7, r3
 800aeda:	fa04 f003 	lslle.w	r0, r4, r3
 800aede:	f7f5 fb21 	bl	8000524 <__aeabi_ui2d>
 800aee2:	2201      	movs	r2, #1
 800aee4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aee8:	3e01      	subs	r6, #1
 800aeea:	9214      	str	r2, [sp, #80]	@ 0x50
 800aeec:	e777      	b.n	800adde <_dtoa_r+0xd6>
 800aeee:	2301      	movs	r3, #1
 800aef0:	e7b8      	b.n	800ae64 <_dtoa_r+0x15c>
 800aef2:	9012      	str	r0, [sp, #72]	@ 0x48
 800aef4:	e7b7      	b.n	800ae66 <_dtoa_r+0x15e>
 800aef6:	427b      	negs	r3, r7
 800aef8:	930a      	str	r3, [sp, #40]	@ 0x28
 800aefa:	2300      	movs	r3, #0
 800aefc:	eba8 0807 	sub.w	r8, r8, r7
 800af00:	930f      	str	r3, [sp, #60]	@ 0x3c
 800af02:	e7c4      	b.n	800ae8e <_dtoa_r+0x186>
 800af04:	2300      	movs	r3, #0
 800af06:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	dc36      	bgt.n	800af7c <_dtoa_r+0x274>
 800af0e:	2301      	movs	r3, #1
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	9307      	str	r3, [sp, #28]
 800af14:	461a      	mov	r2, r3
 800af16:	920e      	str	r2, [sp, #56]	@ 0x38
 800af18:	e00b      	b.n	800af32 <_dtoa_r+0x22a>
 800af1a:	2301      	movs	r3, #1
 800af1c:	e7f3      	b.n	800af06 <_dtoa_r+0x1fe>
 800af1e:	2300      	movs	r3, #0
 800af20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af24:	18fb      	adds	r3, r7, r3
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	3301      	adds	r3, #1
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	9307      	str	r3, [sp, #28]
 800af2e:	bfb8      	it	lt
 800af30:	2301      	movlt	r3, #1
 800af32:	2100      	movs	r1, #0
 800af34:	2204      	movs	r2, #4
 800af36:	f102 0014 	add.w	r0, r2, #20
 800af3a:	4298      	cmp	r0, r3
 800af3c:	d922      	bls.n	800af84 <_dtoa_r+0x27c>
 800af3e:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 800af42:	4658      	mov	r0, fp
 800af44:	f000 fc9e 	bl	800b884 <_Balloc>
 800af48:	4682      	mov	sl, r0
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d13c      	bne.n	800afc8 <_dtoa_r+0x2c0>
 800af4e:	4b1a      	ldr	r3, [pc, #104]	@ (800afb8 <_dtoa_r+0x2b0>)
 800af50:	4602      	mov	r2, r0
 800af52:	f240 11af 	movw	r1, #431	@ 0x1af
 800af56:	4819      	ldr	r0, [pc, #100]	@ (800afbc <_dtoa_r+0x2b4>)
 800af58:	f001 fae0 	bl	800c51c <__assert_func>
 800af5c:	2301      	movs	r3, #1
 800af5e:	e7df      	b.n	800af20 <_dtoa_r+0x218>
 800af60:	2401      	movs	r4, #1
 800af62:	2300      	movs	r3, #0
 800af64:	9309      	str	r3, [sp, #36]	@ 0x24
 800af66:	940b      	str	r4, [sp, #44]	@ 0x2c
 800af68:	f04f 33ff 	mov.w	r3, #4294967295
 800af6c:	9300      	str	r3, [sp, #0]
 800af6e:	9307      	str	r3, [sp, #28]
 800af70:	2200      	movs	r2, #0
 800af72:	2312      	movs	r3, #18
 800af74:	e7cf      	b.n	800af16 <_dtoa_r+0x20e>
 800af76:	2301      	movs	r3, #1
 800af78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af7a:	e7f5      	b.n	800af68 <_dtoa_r+0x260>
 800af7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af7e:	9300      	str	r3, [sp, #0]
 800af80:	9307      	str	r3, [sp, #28]
 800af82:	e7d6      	b.n	800af32 <_dtoa_r+0x22a>
 800af84:	3101      	adds	r1, #1
 800af86:	0052      	lsls	r2, r2, #1
 800af88:	e7d5      	b.n	800af36 <_dtoa_r+0x22e>
 800af8a:	bf00      	nop
 800af8c:	f3af 8000 	nop.w
 800af90:	636f4361 	.word	0x636f4361
 800af94:	3fd287a7 	.word	0x3fd287a7
 800af98:	8b60c8b3 	.word	0x8b60c8b3
 800af9c:	3fc68a28 	.word	0x3fc68a28
 800afa0:	509f79fb 	.word	0x509f79fb
 800afa4:	3fd34413 	.word	0x3fd34413
 800afa8:	7ff00000 	.word	0x7ff00000
 800afac:	0800d409 	.word	0x0800d409
 800afb0:	3ff80000 	.word	0x3ff80000
 800afb4:	0800d578 	.word	0x0800d578
 800afb8:	0800d481 	.word	0x0800d481
 800afbc:	0800d492 	.word	0x0800d492
 800afc0:	0800d47d 	.word	0x0800d47d
 800afc4:	0800d408 	.word	0x0800d408
 800afc8:	9b07      	ldr	r3, [sp, #28]
 800afca:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 800afce:	2b0e      	cmp	r3, #14
 800afd0:	f200 80a4 	bhi.w	800b11c <_dtoa_r+0x414>
 800afd4:	2c00      	cmp	r4, #0
 800afd6:	f000 80a1 	beq.w	800b11c <_dtoa_r+0x414>
 800afda:	2f00      	cmp	r7, #0
 800afdc:	dd33      	ble.n	800b046 <_dtoa_r+0x33e>
 800afde:	4bae      	ldr	r3, [pc, #696]	@ (800b298 <_dtoa_r+0x590>)
 800afe0:	f007 020f 	and.w	r2, r7, #15
 800afe4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afe8:	ed93 7b00 	vldr	d7, [r3]
 800afec:	05f8      	lsls	r0, r7, #23
 800afee:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aff2:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aff6:	d516      	bpl.n	800b026 <_dtoa_r+0x31e>
 800aff8:	4ba8      	ldr	r3, [pc, #672]	@ (800b29c <_dtoa_r+0x594>)
 800affa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800affe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b002:	f7f5 fc33 	bl	800086c <__aeabi_ddiv>
 800b006:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b00a:	f004 040f 	and.w	r4, r4, #15
 800b00e:	2603      	movs	r6, #3
 800b010:	4da2      	ldr	r5, [pc, #648]	@ (800b29c <_dtoa_r+0x594>)
 800b012:	b954      	cbnz	r4, 800b02a <_dtoa_r+0x322>
 800b014:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b018:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b01c:	f7f5 fc26 	bl	800086c <__aeabi_ddiv>
 800b020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b024:	e028      	b.n	800b078 <_dtoa_r+0x370>
 800b026:	2602      	movs	r6, #2
 800b028:	e7f2      	b.n	800b010 <_dtoa_r+0x308>
 800b02a:	07e1      	lsls	r1, r4, #31
 800b02c:	d508      	bpl.n	800b040 <_dtoa_r+0x338>
 800b02e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b032:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b036:	f7f5 faef 	bl	8000618 <__aeabi_dmul>
 800b03a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b03e:	3601      	adds	r6, #1
 800b040:	1064      	asrs	r4, r4, #1
 800b042:	3508      	adds	r5, #8
 800b044:	e7e5      	b.n	800b012 <_dtoa_r+0x30a>
 800b046:	f000 80d2 	beq.w	800b1ee <_dtoa_r+0x4e6>
 800b04a:	427c      	negs	r4, r7
 800b04c:	4b92      	ldr	r3, [pc, #584]	@ (800b298 <_dtoa_r+0x590>)
 800b04e:	4d93      	ldr	r5, [pc, #588]	@ (800b29c <_dtoa_r+0x594>)
 800b050:	f004 020f 	and.w	r2, r4, #15
 800b054:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b060:	f7f5 fada 	bl	8000618 <__aeabi_dmul>
 800b064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b068:	1124      	asrs	r4, r4, #4
 800b06a:	2300      	movs	r3, #0
 800b06c:	2602      	movs	r6, #2
 800b06e:	2c00      	cmp	r4, #0
 800b070:	f040 80b2 	bne.w	800b1d8 <_dtoa_r+0x4d0>
 800b074:	2b00      	cmp	r3, #0
 800b076:	d1d3      	bne.n	800b020 <_dtoa_r+0x318>
 800b078:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b07a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f000 80b7 	beq.w	800b1f2 <_dtoa_r+0x4ea>
 800b084:	4b86      	ldr	r3, [pc, #536]	@ (800b2a0 <_dtoa_r+0x598>)
 800b086:	2200      	movs	r2, #0
 800b088:	4620      	mov	r0, r4
 800b08a:	4629      	mov	r1, r5
 800b08c:	f7f5 fd36 	bl	8000afc <__aeabi_dcmplt>
 800b090:	2800      	cmp	r0, #0
 800b092:	f000 80ae 	beq.w	800b1f2 <_dtoa_r+0x4ea>
 800b096:	9b07      	ldr	r3, [sp, #28]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f000 80aa 	beq.w	800b1f2 <_dtoa_r+0x4ea>
 800b09e:	9b00      	ldr	r3, [sp, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	dd37      	ble.n	800b114 <_dtoa_r+0x40c>
 800b0a4:	1e7b      	subs	r3, r7, #1
 800b0a6:	9304      	str	r3, [sp, #16]
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	4b7e      	ldr	r3, [pc, #504]	@ (800b2a4 <_dtoa_r+0x59c>)
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	f7f5 fab2 	bl	8000618 <__aeabi_dmul>
 800b0b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0b8:	9c00      	ldr	r4, [sp, #0]
 800b0ba:	3601      	adds	r6, #1
 800b0bc:	4630      	mov	r0, r6
 800b0be:	f7f5 fa41 	bl	8000544 <__aeabi_i2d>
 800b0c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0c6:	f7f5 faa7 	bl	8000618 <__aeabi_dmul>
 800b0ca:	4b77      	ldr	r3, [pc, #476]	@ (800b2a8 <_dtoa_r+0x5a0>)
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f7f5 f8ed 	bl	80002ac <__adddf3>
 800b0d2:	4605      	mov	r5, r0
 800b0d4:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b0d8:	2c00      	cmp	r4, #0
 800b0da:	f040 808d 	bne.w	800b1f8 <_dtoa_r+0x4f0>
 800b0de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0e2:	4b72      	ldr	r3, [pc, #456]	@ (800b2ac <_dtoa_r+0x5a4>)
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	f7f5 f8df 	bl	80002a8 <__aeabi_dsub>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b0f2:	462a      	mov	r2, r5
 800b0f4:	4633      	mov	r3, r6
 800b0f6:	f7f5 fd1f 	bl	8000b38 <__aeabi_dcmpgt>
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	f040 828c 	bne.w	800b618 <_dtoa_r+0x910>
 800b100:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b104:	462a      	mov	r2, r5
 800b106:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b10a:	f7f5 fcf7 	bl	8000afc <__aeabi_dcmplt>
 800b10e:	2800      	cmp	r0, #0
 800b110:	f040 8129 	bne.w	800b366 <_dtoa_r+0x65e>
 800b114:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b118:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b11c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b11e:	2b00      	cmp	r3, #0
 800b120:	f2c0 815b 	blt.w	800b3da <_dtoa_r+0x6d2>
 800b124:	2f0e      	cmp	r7, #14
 800b126:	f300 8158 	bgt.w	800b3da <_dtoa_r+0x6d2>
 800b12a:	4b5b      	ldr	r3, [pc, #364]	@ (800b298 <_dtoa_r+0x590>)
 800b12c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b130:	ed93 7b00 	vldr	d7, [r3]
 800b134:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b136:	2b00      	cmp	r3, #0
 800b138:	ed8d 7b00 	vstr	d7, [sp]
 800b13c:	da03      	bge.n	800b146 <_dtoa_r+0x43e>
 800b13e:	9b07      	ldr	r3, [sp, #28]
 800b140:	2b00      	cmp	r3, #0
 800b142:	f340 8102 	ble.w	800b34a <_dtoa_r+0x642>
 800b146:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b14a:	4656      	mov	r6, sl
 800b14c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b150:	4620      	mov	r0, r4
 800b152:	4629      	mov	r1, r5
 800b154:	f7f5 fb8a 	bl	800086c <__aeabi_ddiv>
 800b158:	f7f5 fd0e 	bl	8000b78 <__aeabi_d2iz>
 800b15c:	4680      	mov	r8, r0
 800b15e:	f7f5 f9f1 	bl	8000544 <__aeabi_i2d>
 800b162:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b166:	f7f5 fa57 	bl	8000618 <__aeabi_dmul>
 800b16a:	4602      	mov	r2, r0
 800b16c:	460b      	mov	r3, r1
 800b16e:	4620      	mov	r0, r4
 800b170:	4629      	mov	r1, r5
 800b172:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b176:	f7f5 f897 	bl	80002a8 <__aeabi_dsub>
 800b17a:	f806 4b01 	strb.w	r4, [r6], #1
 800b17e:	9d07      	ldr	r5, [sp, #28]
 800b180:	eba6 040a 	sub.w	r4, r6, sl
 800b184:	42a5      	cmp	r5, r4
 800b186:	4602      	mov	r2, r0
 800b188:	460b      	mov	r3, r1
 800b18a:	f040 8118 	bne.w	800b3be <_dtoa_r+0x6b6>
 800b18e:	f7f5 f88d 	bl	80002ac <__adddf3>
 800b192:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b196:	4604      	mov	r4, r0
 800b198:	460d      	mov	r5, r1
 800b19a:	f7f5 fccd 	bl	8000b38 <__aeabi_dcmpgt>
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	f040 80fa 	bne.w	800b398 <_dtoa_r+0x690>
 800b1a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	f7f5 fc9c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b1b0:	b118      	cbz	r0, 800b1ba <_dtoa_r+0x4b2>
 800b1b2:	f018 0f01 	tst.w	r8, #1
 800b1b6:	f040 80ef 	bne.w	800b398 <_dtoa_r+0x690>
 800b1ba:	4649      	mov	r1, r9
 800b1bc:	4658      	mov	r0, fp
 800b1be:	f000 fb86 	bl	800b8ce <_Bfree>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	7033      	strb	r3, [r6, #0]
 800b1c6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b1c8:	3701      	adds	r7, #1
 800b1ca:	601f      	str	r7, [r3, #0]
 800b1cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f43f add1 	beq.w	800ad76 <_dtoa_r+0x6e>
 800b1d4:	601e      	str	r6, [r3, #0]
 800b1d6:	e5ce      	b.n	800ad76 <_dtoa_r+0x6e>
 800b1d8:	07e2      	lsls	r2, r4, #31
 800b1da:	d505      	bpl.n	800b1e8 <_dtoa_r+0x4e0>
 800b1dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b1e0:	f7f5 fa1a 	bl	8000618 <__aeabi_dmul>
 800b1e4:	3601      	adds	r6, #1
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	1064      	asrs	r4, r4, #1
 800b1ea:	3508      	adds	r5, #8
 800b1ec:	e73f      	b.n	800b06e <_dtoa_r+0x366>
 800b1ee:	2602      	movs	r6, #2
 800b1f0:	e742      	b.n	800b078 <_dtoa_r+0x370>
 800b1f2:	9c07      	ldr	r4, [sp, #28]
 800b1f4:	9704      	str	r7, [sp, #16]
 800b1f6:	e761      	b.n	800b0bc <_dtoa_r+0x3b4>
 800b1f8:	4b27      	ldr	r3, [pc, #156]	@ (800b298 <_dtoa_r+0x590>)
 800b1fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b1fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b200:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b204:	4454      	add	r4, sl
 800b206:	2900      	cmp	r1, #0
 800b208:	d054      	beq.n	800b2b4 <_dtoa_r+0x5ac>
 800b20a:	4929      	ldr	r1, [pc, #164]	@ (800b2b0 <_dtoa_r+0x5a8>)
 800b20c:	2000      	movs	r0, #0
 800b20e:	f7f5 fb2d 	bl	800086c <__aeabi_ddiv>
 800b212:	4633      	mov	r3, r6
 800b214:	462a      	mov	r2, r5
 800b216:	f7f5 f847 	bl	80002a8 <__aeabi_dsub>
 800b21a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b21e:	4656      	mov	r6, sl
 800b220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b224:	f7f5 fca8 	bl	8000b78 <__aeabi_d2iz>
 800b228:	4605      	mov	r5, r0
 800b22a:	f7f5 f98b 	bl	8000544 <__aeabi_i2d>
 800b22e:	4602      	mov	r2, r0
 800b230:	460b      	mov	r3, r1
 800b232:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b236:	f7f5 f837 	bl	80002a8 <__aeabi_dsub>
 800b23a:	3530      	adds	r5, #48	@ 0x30
 800b23c:	4602      	mov	r2, r0
 800b23e:	460b      	mov	r3, r1
 800b240:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b244:	f806 5b01 	strb.w	r5, [r6], #1
 800b248:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b24c:	f7f5 fc56 	bl	8000afc <__aeabi_dcmplt>
 800b250:	2800      	cmp	r0, #0
 800b252:	d172      	bne.n	800b33a <_dtoa_r+0x632>
 800b254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b258:	4911      	ldr	r1, [pc, #68]	@ (800b2a0 <_dtoa_r+0x598>)
 800b25a:	2000      	movs	r0, #0
 800b25c:	f7f5 f824 	bl	80002a8 <__aeabi_dsub>
 800b260:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b264:	f7f5 fc4a 	bl	8000afc <__aeabi_dcmplt>
 800b268:	2800      	cmp	r0, #0
 800b26a:	f040 8096 	bne.w	800b39a <_dtoa_r+0x692>
 800b26e:	42a6      	cmp	r6, r4
 800b270:	f43f af50 	beq.w	800b114 <_dtoa_r+0x40c>
 800b274:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b278:	4b0a      	ldr	r3, [pc, #40]	@ (800b2a4 <_dtoa_r+0x59c>)
 800b27a:	2200      	movs	r2, #0
 800b27c:	f7f5 f9cc 	bl	8000618 <__aeabi_dmul>
 800b280:	4b08      	ldr	r3, [pc, #32]	@ (800b2a4 <_dtoa_r+0x59c>)
 800b282:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b286:	2200      	movs	r2, #0
 800b288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b28c:	f7f5 f9c4 	bl	8000618 <__aeabi_dmul>
 800b290:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b294:	e7c4      	b.n	800b220 <_dtoa_r+0x518>
 800b296:	bf00      	nop
 800b298:	0800d578 	.word	0x0800d578
 800b29c:	0800d550 	.word	0x0800d550
 800b2a0:	3ff00000 	.word	0x3ff00000
 800b2a4:	40240000 	.word	0x40240000
 800b2a8:	401c0000 	.word	0x401c0000
 800b2ac:	40140000 	.word	0x40140000
 800b2b0:	3fe00000 	.word	0x3fe00000
 800b2b4:	4631      	mov	r1, r6
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	f7f5 f9ae 	bl	8000618 <__aeabi_dmul>
 800b2bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b2c0:	9415      	str	r4, [sp, #84]	@ 0x54
 800b2c2:	4656      	mov	r6, sl
 800b2c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2c8:	f7f5 fc56 	bl	8000b78 <__aeabi_d2iz>
 800b2cc:	4605      	mov	r5, r0
 800b2ce:	f7f5 f939 	bl	8000544 <__aeabi_i2d>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2da:	f7f4 ffe5 	bl	80002a8 <__aeabi_dsub>
 800b2de:	3530      	adds	r5, #48	@ 0x30
 800b2e0:	f806 5b01 	strb.w	r5, [r6], #1
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	42a6      	cmp	r6, r4
 800b2ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b2ee:	f04f 0200 	mov.w	r2, #0
 800b2f2:	d124      	bne.n	800b33e <_dtoa_r+0x636>
 800b2f4:	4bac      	ldr	r3, [pc, #688]	@ (800b5a8 <_dtoa_r+0x8a0>)
 800b2f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b2fa:	f7f4 ffd7 	bl	80002ac <__adddf3>
 800b2fe:	4602      	mov	r2, r0
 800b300:	460b      	mov	r3, r1
 800b302:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b306:	f7f5 fc17 	bl	8000b38 <__aeabi_dcmpgt>
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d145      	bne.n	800b39a <_dtoa_r+0x692>
 800b30e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b312:	49a5      	ldr	r1, [pc, #660]	@ (800b5a8 <_dtoa_r+0x8a0>)
 800b314:	2000      	movs	r0, #0
 800b316:	f7f4 ffc7 	bl	80002a8 <__aeabi_dsub>
 800b31a:	4602      	mov	r2, r0
 800b31c:	460b      	mov	r3, r1
 800b31e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b322:	f7f5 fbeb 	bl	8000afc <__aeabi_dcmplt>
 800b326:	2800      	cmp	r0, #0
 800b328:	f43f aef4 	beq.w	800b114 <_dtoa_r+0x40c>
 800b32c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b32e:	1e73      	subs	r3, r6, #1
 800b330:	9315      	str	r3, [sp, #84]	@ 0x54
 800b332:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b336:	2b30      	cmp	r3, #48	@ 0x30
 800b338:	d0f8      	beq.n	800b32c <_dtoa_r+0x624>
 800b33a:	9f04      	ldr	r7, [sp, #16]
 800b33c:	e73d      	b.n	800b1ba <_dtoa_r+0x4b2>
 800b33e:	4b9b      	ldr	r3, [pc, #620]	@ (800b5ac <_dtoa_r+0x8a4>)
 800b340:	f7f5 f96a 	bl	8000618 <__aeabi_dmul>
 800b344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b348:	e7bc      	b.n	800b2c4 <_dtoa_r+0x5bc>
 800b34a:	d10c      	bne.n	800b366 <_dtoa_r+0x65e>
 800b34c:	4b98      	ldr	r3, [pc, #608]	@ (800b5b0 <_dtoa_r+0x8a8>)
 800b34e:	2200      	movs	r2, #0
 800b350:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b354:	f7f5 f960 	bl	8000618 <__aeabi_dmul>
 800b358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b35c:	f7f5 fbe2 	bl	8000b24 <__aeabi_dcmpge>
 800b360:	2800      	cmp	r0, #0
 800b362:	f000 8157 	beq.w	800b614 <_dtoa_r+0x90c>
 800b366:	2400      	movs	r4, #0
 800b368:	4625      	mov	r5, r4
 800b36a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b36c:	43db      	mvns	r3, r3
 800b36e:	9304      	str	r3, [sp, #16]
 800b370:	4656      	mov	r6, sl
 800b372:	2700      	movs	r7, #0
 800b374:	4621      	mov	r1, r4
 800b376:	4658      	mov	r0, fp
 800b378:	f000 faa9 	bl	800b8ce <_Bfree>
 800b37c:	2d00      	cmp	r5, #0
 800b37e:	d0dc      	beq.n	800b33a <_dtoa_r+0x632>
 800b380:	b12f      	cbz	r7, 800b38e <_dtoa_r+0x686>
 800b382:	42af      	cmp	r7, r5
 800b384:	d003      	beq.n	800b38e <_dtoa_r+0x686>
 800b386:	4639      	mov	r1, r7
 800b388:	4658      	mov	r0, fp
 800b38a:	f000 faa0 	bl	800b8ce <_Bfree>
 800b38e:	4629      	mov	r1, r5
 800b390:	4658      	mov	r0, fp
 800b392:	f000 fa9c 	bl	800b8ce <_Bfree>
 800b396:	e7d0      	b.n	800b33a <_dtoa_r+0x632>
 800b398:	9704      	str	r7, [sp, #16]
 800b39a:	4633      	mov	r3, r6
 800b39c:	461e      	mov	r6, r3
 800b39e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3a2:	2a39      	cmp	r2, #57	@ 0x39
 800b3a4:	d107      	bne.n	800b3b6 <_dtoa_r+0x6ae>
 800b3a6:	459a      	cmp	sl, r3
 800b3a8:	d1f8      	bne.n	800b39c <_dtoa_r+0x694>
 800b3aa:	9a04      	ldr	r2, [sp, #16]
 800b3ac:	3201      	adds	r2, #1
 800b3ae:	9204      	str	r2, [sp, #16]
 800b3b0:	2230      	movs	r2, #48	@ 0x30
 800b3b2:	f88a 2000 	strb.w	r2, [sl]
 800b3b6:	781a      	ldrb	r2, [r3, #0]
 800b3b8:	3201      	adds	r2, #1
 800b3ba:	701a      	strb	r2, [r3, #0]
 800b3bc:	e7bd      	b.n	800b33a <_dtoa_r+0x632>
 800b3be:	4b7b      	ldr	r3, [pc, #492]	@ (800b5ac <_dtoa_r+0x8a4>)
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f7f5 f929 	bl	8000618 <__aeabi_dmul>
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	460d      	mov	r5, r1
 800b3ce:	f7f5 fb8b 	bl	8000ae8 <__aeabi_dcmpeq>
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	f43f aeba 	beq.w	800b14c <_dtoa_r+0x444>
 800b3d8:	e6ef      	b.n	800b1ba <_dtoa_r+0x4b2>
 800b3da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b3dc:	2a00      	cmp	r2, #0
 800b3de:	f000 80db 	beq.w	800b598 <_dtoa_r+0x890>
 800b3e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3e4:	2a01      	cmp	r2, #1
 800b3e6:	f300 80bf 	bgt.w	800b568 <_dtoa_r+0x860>
 800b3ea:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b3ec:	2a00      	cmp	r2, #0
 800b3ee:	f000 80b7 	beq.w	800b560 <_dtoa_r+0x858>
 800b3f2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b3f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b3f8:	4646      	mov	r6, r8
 800b3fa:	9a08      	ldr	r2, [sp, #32]
 800b3fc:	2101      	movs	r1, #1
 800b3fe:	441a      	add	r2, r3
 800b400:	4658      	mov	r0, fp
 800b402:	4498      	add	r8, r3
 800b404:	9208      	str	r2, [sp, #32]
 800b406:	f000 fafd 	bl	800ba04 <__i2b>
 800b40a:	4605      	mov	r5, r0
 800b40c:	b15e      	cbz	r6, 800b426 <_dtoa_r+0x71e>
 800b40e:	9b08      	ldr	r3, [sp, #32]
 800b410:	2b00      	cmp	r3, #0
 800b412:	dd08      	ble.n	800b426 <_dtoa_r+0x71e>
 800b414:	42b3      	cmp	r3, r6
 800b416:	9a08      	ldr	r2, [sp, #32]
 800b418:	bfa8      	it	ge
 800b41a:	4633      	movge	r3, r6
 800b41c:	eba8 0803 	sub.w	r8, r8, r3
 800b420:	1af6      	subs	r6, r6, r3
 800b422:	1ad3      	subs	r3, r2, r3
 800b424:	9308      	str	r3, [sp, #32]
 800b426:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b428:	b1f3      	cbz	r3, 800b468 <_dtoa_r+0x760>
 800b42a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f000 80b7 	beq.w	800b5a0 <_dtoa_r+0x898>
 800b432:	b18c      	cbz	r4, 800b458 <_dtoa_r+0x750>
 800b434:	4629      	mov	r1, r5
 800b436:	4622      	mov	r2, r4
 800b438:	4658      	mov	r0, fp
 800b43a:	f000 fba3 	bl	800bb84 <__pow5mult>
 800b43e:	464a      	mov	r2, r9
 800b440:	4601      	mov	r1, r0
 800b442:	4605      	mov	r5, r0
 800b444:	4658      	mov	r0, fp
 800b446:	f000 faf3 	bl	800ba30 <__multiply>
 800b44a:	4649      	mov	r1, r9
 800b44c:	9004      	str	r0, [sp, #16]
 800b44e:	4658      	mov	r0, fp
 800b450:	f000 fa3d 	bl	800b8ce <_Bfree>
 800b454:	9b04      	ldr	r3, [sp, #16]
 800b456:	4699      	mov	r9, r3
 800b458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b45a:	1b1a      	subs	r2, r3, r4
 800b45c:	d004      	beq.n	800b468 <_dtoa_r+0x760>
 800b45e:	4649      	mov	r1, r9
 800b460:	4658      	mov	r0, fp
 800b462:	f000 fb8f 	bl	800bb84 <__pow5mult>
 800b466:	4681      	mov	r9, r0
 800b468:	2101      	movs	r1, #1
 800b46a:	4658      	mov	r0, fp
 800b46c:	f000 faca 	bl	800ba04 <__i2b>
 800b470:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b472:	4604      	mov	r4, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	f000 81cc 	beq.w	800b812 <_dtoa_r+0xb0a>
 800b47a:	461a      	mov	r2, r3
 800b47c:	4601      	mov	r1, r0
 800b47e:	4658      	mov	r0, fp
 800b480:	f000 fb80 	bl	800bb84 <__pow5mult>
 800b484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b486:	2b01      	cmp	r3, #1
 800b488:	4604      	mov	r4, r0
 800b48a:	f300 8095 	bgt.w	800b5b8 <_dtoa_r+0x8b0>
 800b48e:	9b02      	ldr	r3, [sp, #8]
 800b490:	2b00      	cmp	r3, #0
 800b492:	f040 8087 	bne.w	800b5a4 <_dtoa_r+0x89c>
 800b496:	9b03      	ldr	r3, [sp, #12]
 800b498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f040 8089 	bne.w	800b5b4 <_dtoa_r+0x8ac>
 800b4a2:	9b03      	ldr	r3, [sp, #12]
 800b4a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b4a8:	0d1b      	lsrs	r3, r3, #20
 800b4aa:	051b      	lsls	r3, r3, #20
 800b4ac:	b12b      	cbz	r3, 800b4ba <_dtoa_r+0x7b2>
 800b4ae:	9b08      	ldr	r3, [sp, #32]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	9308      	str	r3, [sp, #32]
 800b4b4:	f108 0801 	add.w	r8, r8, #1
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	f000 81ad 	beq.w	800b81e <_dtoa_r+0xb16>
 800b4c4:	6923      	ldr	r3, [r4, #16]
 800b4c6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b4ca:	6918      	ldr	r0, [r3, #16]
 800b4cc:	f000 fa4e 	bl	800b96c <__hi0bits>
 800b4d0:	f1c0 0020 	rsb	r0, r0, #32
 800b4d4:	9b08      	ldr	r3, [sp, #32]
 800b4d6:	4418      	add	r0, r3
 800b4d8:	f010 001f 	ands.w	r0, r0, #31
 800b4dc:	d077      	beq.n	800b5ce <_dtoa_r+0x8c6>
 800b4de:	f1c0 0320 	rsb	r3, r0, #32
 800b4e2:	2b04      	cmp	r3, #4
 800b4e4:	dd6b      	ble.n	800b5be <_dtoa_r+0x8b6>
 800b4e6:	9b08      	ldr	r3, [sp, #32]
 800b4e8:	f1c0 001c 	rsb	r0, r0, #28
 800b4ec:	4403      	add	r3, r0
 800b4ee:	4480      	add	r8, r0
 800b4f0:	4406      	add	r6, r0
 800b4f2:	9308      	str	r3, [sp, #32]
 800b4f4:	f1b8 0f00 	cmp.w	r8, #0
 800b4f8:	dd05      	ble.n	800b506 <_dtoa_r+0x7fe>
 800b4fa:	4649      	mov	r1, r9
 800b4fc:	4642      	mov	r2, r8
 800b4fe:	4658      	mov	r0, fp
 800b500:	f000 fb80 	bl	800bc04 <__lshift>
 800b504:	4681      	mov	r9, r0
 800b506:	9b08      	ldr	r3, [sp, #32]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	dd05      	ble.n	800b518 <_dtoa_r+0x810>
 800b50c:	4621      	mov	r1, r4
 800b50e:	461a      	mov	r2, r3
 800b510:	4658      	mov	r0, fp
 800b512:	f000 fb77 	bl	800bc04 <__lshift>
 800b516:	4604      	mov	r4, r0
 800b518:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d059      	beq.n	800b5d2 <_dtoa_r+0x8ca>
 800b51e:	4621      	mov	r1, r4
 800b520:	4648      	mov	r0, r9
 800b522:	f000 fbdb 	bl	800bcdc <__mcmp>
 800b526:	2800      	cmp	r0, #0
 800b528:	da53      	bge.n	800b5d2 <_dtoa_r+0x8ca>
 800b52a:	1e7b      	subs	r3, r7, #1
 800b52c:	9304      	str	r3, [sp, #16]
 800b52e:	4649      	mov	r1, r9
 800b530:	2300      	movs	r3, #0
 800b532:	220a      	movs	r2, #10
 800b534:	4658      	mov	r0, fp
 800b536:	f000 f9d3 	bl	800b8e0 <__multadd>
 800b53a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b53c:	4681      	mov	r9, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f000 816f 	beq.w	800b822 <_dtoa_r+0xb1a>
 800b544:	2300      	movs	r3, #0
 800b546:	4629      	mov	r1, r5
 800b548:	220a      	movs	r2, #10
 800b54a:	4658      	mov	r0, fp
 800b54c:	f000 f9c8 	bl	800b8e0 <__multadd>
 800b550:	9b00      	ldr	r3, [sp, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	4605      	mov	r5, r0
 800b556:	dc67      	bgt.n	800b628 <_dtoa_r+0x920>
 800b558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	dc41      	bgt.n	800b5e2 <_dtoa_r+0x8da>
 800b55e:	e063      	b.n	800b628 <_dtoa_r+0x920>
 800b560:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b562:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b566:	e746      	b.n	800b3f6 <_dtoa_r+0x6ee>
 800b568:	9b07      	ldr	r3, [sp, #28]
 800b56a:	1e5c      	subs	r4, r3, #1
 800b56c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b56e:	42a3      	cmp	r3, r4
 800b570:	bfbf      	itttt	lt
 800b572:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b574:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b576:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b578:	1ae3      	sublt	r3, r4, r3
 800b57a:	bfb4      	ite	lt
 800b57c:	18d2      	addlt	r2, r2, r3
 800b57e:	1b1c      	subge	r4, r3, r4
 800b580:	9b07      	ldr	r3, [sp, #28]
 800b582:	bfbc      	itt	lt
 800b584:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b586:	2400      	movlt	r4, #0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	bfb5      	itete	lt
 800b58c:	eba8 0603 	sublt.w	r6, r8, r3
 800b590:	9b07      	ldrge	r3, [sp, #28]
 800b592:	2300      	movlt	r3, #0
 800b594:	4646      	movge	r6, r8
 800b596:	e730      	b.n	800b3fa <_dtoa_r+0x6f2>
 800b598:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b59a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b59c:	4646      	mov	r6, r8
 800b59e:	e735      	b.n	800b40c <_dtoa_r+0x704>
 800b5a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b5a2:	e75c      	b.n	800b45e <_dtoa_r+0x756>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	e788      	b.n	800b4ba <_dtoa_r+0x7b2>
 800b5a8:	3fe00000 	.word	0x3fe00000
 800b5ac:	40240000 	.word	0x40240000
 800b5b0:	40140000 	.word	0x40140000
 800b5b4:	9b02      	ldr	r3, [sp, #8]
 800b5b6:	e780      	b.n	800b4ba <_dtoa_r+0x7b2>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5bc:	e782      	b.n	800b4c4 <_dtoa_r+0x7bc>
 800b5be:	d099      	beq.n	800b4f4 <_dtoa_r+0x7ec>
 800b5c0:	9a08      	ldr	r2, [sp, #32]
 800b5c2:	331c      	adds	r3, #28
 800b5c4:	441a      	add	r2, r3
 800b5c6:	4498      	add	r8, r3
 800b5c8:	441e      	add	r6, r3
 800b5ca:	9208      	str	r2, [sp, #32]
 800b5cc:	e792      	b.n	800b4f4 <_dtoa_r+0x7ec>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	e7f6      	b.n	800b5c0 <_dtoa_r+0x8b8>
 800b5d2:	9b07      	ldr	r3, [sp, #28]
 800b5d4:	9704      	str	r7, [sp, #16]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	dc20      	bgt.n	800b61c <_dtoa_r+0x914>
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5de:	2b02      	cmp	r3, #2
 800b5e0:	dd1e      	ble.n	800b620 <_dtoa_r+0x918>
 800b5e2:	9b00      	ldr	r3, [sp, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f47f aec0 	bne.w	800b36a <_dtoa_r+0x662>
 800b5ea:	4621      	mov	r1, r4
 800b5ec:	2205      	movs	r2, #5
 800b5ee:	4658      	mov	r0, fp
 800b5f0:	f000 f976 	bl	800b8e0 <__multadd>
 800b5f4:	4601      	mov	r1, r0
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	4648      	mov	r0, r9
 800b5fa:	f000 fb6f 	bl	800bcdc <__mcmp>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	f77f aeb3 	ble.w	800b36a <_dtoa_r+0x662>
 800b604:	4656      	mov	r6, sl
 800b606:	2331      	movs	r3, #49	@ 0x31
 800b608:	f806 3b01 	strb.w	r3, [r6], #1
 800b60c:	9b04      	ldr	r3, [sp, #16]
 800b60e:	3301      	adds	r3, #1
 800b610:	9304      	str	r3, [sp, #16]
 800b612:	e6ae      	b.n	800b372 <_dtoa_r+0x66a>
 800b614:	9c07      	ldr	r4, [sp, #28]
 800b616:	9704      	str	r7, [sp, #16]
 800b618:	4625      	mov	r5, r4
 800b61a:	e7f3      	b.n	800b604 <_dtoa_r+0x8fc>
 800b61c:	9b07      	ldr	r3, [sp, #28]
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b622:	2b00      	cmp	r3, #0
 800b624:	f000 8101 	beq.w	800b82a <_dtoa_r+0xb22>
 800b628:	2e00      	cmp	r6, #0
 800b62a:	dd05      	ble.n	800b638 <_dtoa_r+0x930>
 800b62c:	4629      	mov	r1, r5
 800b62e:	4632      	mov	r2, r6
 800b630:	4658      	mov	r0, fp
 800b632:	f000 fae7 	bl	800bc04 <__lshift>
 800b636:	4605      	mov	r5, r0
 800b638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d059      	beq.n	800b6f2 <_dtoa_r+0x9ea>
 800b63e:	6869      	ldr	r1, [r5, #4]
 800b640:	4658      	mov	r0, fp
 800b642:	f000 f91f 	bl	800b884 <_Balloc>
 800b646:	4606      	mov	r6, r0
 800b648:	b920      	cbnz	r0, 800b654 <_dtoa_r+0x94c>
 800b64a:	4b83      	ldr	r3, [pc, #524]	@ (800b858 <_dtoa_r+0xb50>)
 800b64c:	4602      	mov	r2, r0
 800b64e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b652:	e480      	b.n	800af56 <_dtoa_r+0x24e>
 800b654:	692a      	ldr	r2, [r5, #16]
 800b656:	3202      	adds	r2, #2
 800b658:	0092      	lsls	r2, r2, #2
 800b65a:	f105 010c 	add.w	r1, r5, #12
 800b65e:	300c      	adds	r0, #12
 800b660:	f7fb fc96 	bl	8006f90 <memcpy>
 800b664:	2201      	movs	r2, #1
 800b666:	4631      	mov	r1, r6
 800b668:	4658      	mov	r0, fp
 800b66a:	f000 facb 	bl	800bc04 <__lshift>
 800b66e:	f10a 0301 	add.w	r3, sl, #1
 800b672:	9307      	str	r3, [sp, #28]
 800b674:	9b00      	ldr	r3, [sp, #0]
 800b676:	4453      	add	r3, sl
 800b678:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b67a:	9b02      	ldr	r3, [sp, #8]
 800b67c:	f003 0301 	and.w	r3, r3, #1
 800b680:	462f      	mov	r7, r5
 800b682:	930a      	str	r3, [sp, #40]	@ 0x28
 800b684:	4605      	mov	r5, r0
 800b686:	9b07      	ldr	r3, [sp, #28]
 800b688:	4621      	mov	r1, r4
 800b68a:	3b01      	subs	r3, #1
 800b68c:	4648      	mov	r0, r9
 800b68e:	9300      	str	r3, [sp, #0]
 800b690:	f7ff fab0 	bl	800abf4 <quorem>
 800b694:	4639      	mov	r1, r7
 800b696:	9002      	str	r0, [sp, #8]
 800b698:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b69c:	4648      	mov	r0, r9
 800b69e:	f000 fb1d 	bl	800bcdc <__mcmp>
 800b6a2:	462a      	mov	r2, r5
 800b6a4:	9008      	str	r0, [sp, #32]
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	4658      	mov	r0, fp
 800b6aa:	f000 fb33 	bl	800bd14 <__mdiff>
 800b6ae:	68c2      	ldr	r2, [r0, #12]
 800b6b0:	4606      	mov	r6, r0
 800b6b2:	bb02      	cbnz	r2, 800b6f6 <_dtoa_r+0x9ee>
 800b6b4:	4601      	mov	r1, r0
 800b6b6:	4648      	mov	r0, r9
 800b6b8:	f000 fb10 	bl	800bcdc <__mcmp>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	4631      	mov	r1, r6
 800b6c0:	4658      	mov	r0, fp
 800b6c2:	920e      	str	r2, [sp, #56]	@ 0x38
 800b6c4:	f000 f903 	bl	800b8ce <_Bfree>
 800b6c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6cc:	9e07      	ldr	r6, [sp, #28]
 800b6ce:	ea43 0102 	orr.w	r1, r3, r2
 800b6d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6d4:	4319      	orrs	r1, r3
 800b6d6:	d110      	bne.n	800b6fa <_dtoa_r+0x9f2>
 800b6d8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b6dc:	d029      	beq.n	800b732 <_dtoa_r+0xa2a>
 800b6de:	9b08      	ldr	r3, [sp, #32]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	dd02      	ble.n	800b6ea <_dtoa_r+0x9e2>
 800b6e4:	9b02      	ldr	r3, [sp, #8]
 800b6e6:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b6ea:	9b00      	ldr	r3, [sp, #0]
 800b6ec:	f883 8000 	strb.w	r8, [r3]
 800b6f0:	e640      	b.n	800b374 <_dtoa_r+0x66c>
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	e7bb      	b.n	800b66e <_dtoa_r+0x966>
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	e7e1      	b.n	800b6be <_dtoa_r+0x9b6>
 800b6fa:	9b08      	ldr	r3, [sp, #32]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	db04      	blt.n	800b70a <_dtoa_r+0xa02>
 800b700:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b702:	430b      	orrs	r3, r1
 800b704:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b706:	430b      	orrs	r3, r1
 800b708:	d120      	bne.n	800b74c <_dtoa_r+0xa44>
 800b70a:	2a00      	cmp	r2, #0
 800b70c:	dded      	ble.n	800b6ea <_dtoa_r+0x9e2>
 800b70e:	4649      	mov	r1, r9
 800b710:	2201      	movs	r2, #1
 800b712:	4658      	mov	r0, fp
 800b714:	f000 fa76 	bl	800bc04 <__lshift>
 800b718:	4621      	mov	r1, r4
 800b71a:	4681      	mov	r9, r0
 800b71c:	f000 fade 	bl	800bcdc <__mcmp>
 800b720:	2800      	cmp	r0, #0
 800b722:	dc03      	bgt.n	800b72c <_dtoa_r+0xa24>
 800b724:	d1e1      	bne.n	800b6ea <_dtoa_r+0x9e2>
 800b726:	f018 0f01 	tst.w	r8, #1
 800b72a:	d0de      	beq.n	800b6ea <_dtoa_r+0x9e2>
 800b72c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b730:	d1d8      	bne.n	800b6e4 <_dtoa_r+0x9dc>
 800b732:	9a00      	ldr	r2, [sp, #0]
 800b734:	2339      	movs	r3, #57	@ 0x39
 800b736:	7013      	strb	r3, [r2, #0]
 800b738:	4633      	mov	r3, r6
 800b73a:	461e      	mov	r6, r3
 800b73c:	3b01      	subs	r3, #1
 800b73e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b742:	2a39      	cmp	r2, #57	@ 0x39
 800b744:	d052      	beq.n	800b7ec <_dtoa_r+0xae4>
 800b746:	3201      	adds	r2, #1
 800b748:	701a      	strb	r2, [r3, #0]
 800b74a:	e613      	b.n	800b374 <_dtoa_r+0x66c>
 800b74c:	2a00      	cmp	r2, #0
 800b74e:	dd07      	ble.n	800b760 <_dtoa_r+0xa58>
 800b750:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b754:	d0ed      	beq.n	800b732 <_dtoa_r+0xa2a>
 800b756:	9a00      	ldr	r2, [sp, #0]
 800b758:	f108 0301 	add.w	r3, r8, #1
 800b75c:	7013      	strb	r3, [r2, #0]
 800b75e:	e609      	b.n	800b374 <_dtoa_r+0x66c>
 800b760:	9b07      	ldr	r3, [sp, #28]
 800b762:	9a07      	ldr	r2, [sp, #28]
 800b764:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b768:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d028      	beq.n	800b7c0 <_dtoa_r+0xab8>
 800b76e:	4649      	mov	r1, r9
 800b770:	2300      	movs	r3, #0
 800b772:	220a      	movs	r2, #10
 800b774:	4658      	mov	r0, fp
 800b776:	f000 f8b3 	bl	800b8e0 <__multadd>
 800b77a:	42af      	cmp	r7, r5
 800b77c:	4681      	mov	r9, r0
 800b77e:	f04f 0300 	mov.w	r3, #0
 800b782:	f04f 020a 	mov.w	r2, #10
 800b786:	4639      	mov	r1, r7
 800b788:	4658      	mov	r0, fp
 800b78a:	d107      	bne.n	800b79c <_dtoa_r+0xa94>
 800b78c:	f000 f8a8 	bl	800b8e0 <__multadd>
 800b790:	4607      	mov	r7, r0
 800b792:	4605      	mov	r5, r0
 800b794:	9b07      	ldr	r3, [sp, #28]
 800b796:	3301      	adds	r3, #1
 800b798:	9307      	str	r3, [sp, #28]
 800b79a:	e774      	b.n	800b686 <_dtoa_r+0x97e>
 800b79c:	f000 f8a0 	bl	800b8e0 <__multadd>
 800b7a0:	4629      	mov	r1, r5
 800b7a2:	4607      	mov	r7, r0
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	220a      	movs	r2, #10
 800b7a8:	4658      	mov	r0, fp
 800b7aa:	f000 f899 	bl	800b8e0 <__multadd>
 800b7ae:	4605      	mov	r5, r0
 800b7b0:	e7f0      	b.n	800b794 <_dtoa_r+0xa8c>
 800b7b2:	9b00      	ldr	r3, [sp, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	bfcc      	ite	gt
 800b7b8:	461e      	movgt	r6, r3
 800b7ba:	2601      	movle	r6, #1
 800b7bc:	4456      	add	r6, sl
 800b7be:	2700      	movs	r7, #0
 800b7c0:	4649      	mov	r1, r9
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	4658      	mov	r0, fp
 800b7c6:	f000 fa1d 	bl	800bc04 <__lshift>
 800b7ca:	4621      	mov	r1, r4
 800b7cc:	4681      	mov	r9, r0
 800b7ce:	f000 fa85 	bl	800bcdc <__mcmp>
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	dcb0      	bgt.n	800b738 <_dtoa_r+0xa30>
 800b7d6:	d102      	bne.n	800b7de <_dtoa_r+0xad6>
 800b7d8:	f018 0f01 	tst.w	r8, #1
 800b7dc:	d1ac      	bne.n	800b738 <_dtoa_r+0xa30>
 800b7de:	4633      	mov	r3, r6
 800b7e0:	461e      	mov	r6, r3
 800b7e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7e6:	2a30      	cmp	r2, #48	@ 0x30
 800b7e8:	d0fa      	beq.n	800b7e0 <_dtoa_r+0xad8>
 800b7ea:	e5c3      	b.n	800b374 <_dtoa_r+0x66c>
 800b7ec:	459a      	cmp	sl, r3
 800b7ee:	d1a4      	bne.n	800b73a <_dtoa_r+0xa32>
 800b7f0:	9b04      	ldr	r3, [sp, #16]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	9304      	str	r3, [sp, #16]
 800b7f6:	2331      	movs	r3, #49	@ 0x31
 800b7f8:	f88a 3000 	strb.w	r3, [sl]
 800b7fc:	e5ba      	b.n	800b374 <_dtoa_r+0x66c>
 800b7fe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b800:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b85c <_dtoa_r+0xb54>
 800b804:	2b00      	cmp	r3, #0
 800b806:	f43f aab6 	beq.w	800ad76 <_dtoa_r+0x6e>
 800b80a:	f10a 0308 	add.w	r3, sl, #8
 800b80e:	f7ff bab0 	b.w	800ad72 <_dtoa_r+0x6a>
 800b812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b814:	2b01      	cmp	r3, #1
 800b816:	f77f ae3a 	ble.w	800b48e <_dtoa_r+0x786>
 800b81a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b81c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b81e:	2001      	movs	r0, #1
 800b820:	e658      	b.n	800b4d4 <_dtoa_r+0x7cc>
 800b822:	9b00      	ldr	r3, [sp, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	f77f aed9 	ble.w	800b5dc <_dtoa_r+0x8d4>
 800b82a:	4656      	mov	r6, sl
 800b82c:	4621      	mov	r1, r4
 800b82e:	4648      	mov	r0, r9
 800b830:	f7ff f9e0 	bl	800abf4 <quorem>
 800b834:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b838:	f806 8b01 	strb.w	r8, [r6], #1
 800b83c:	9b00      	ldr	r3, [sp, #0]
 800b83e:	eba6 020a 	sub.w	r2, r6, sl
 800b842:	4293      	cmp	r3, r2
 800b844:	ddb5      	ble.n	800b7b2 <_dtoa_r+0xaaa>
 800b846:	4649      	mov	r1, r9
 800b848:	2300      	movs	r3, #0
 800b84a:	220a      	movs	r2, #10
 800b84c:	4658      	mov	r0, fp
 800b84e:	f000 f847 	bl	800b8e0 <__multadd>
 800b852:	4681      	mov	r9, r0
 800b854:	e7ea      	b.n	800b82c <_dtoa_r+0xb24>
 800b856:	bf00      	nop
 800b858:	0800d481 	.word	0x0800d481
 800b85c:	0800d474 	.word	0x0800d474

0800b860 <__ascii_mbtowc>:
 800b860:	b082      	sub	sp, #8
 800b862:	b901      	cbnz	r1, 800b866 <__ascii_mbtowc+0x6>
 800b864:	a901      	add	r1, sp, #4
 800b866:	b142      	cbz	r2, 800b87a <__ascii_mbtowc+0x1a>
 800b868:	b14b      	cbz	r3, 800b87e <__ascii_mbtowc+0x1e>
 800b86a:	7813      	ldrb	r3, [r2, #0]
 800b86c:	600b      	str	r3, [r1, #0]
 800b86e:	7812      	ldrb	r2, [r2, #0]
 800b870:	1e10      	subs	r0, r2, #0
 800b872:	bf18      	it	ne
 800b874:	2001      	movne	r0, #1
 800b876:	b002      	add	sp, #8
 800b878:	4770      	bx	lr
 800b87a:	4610      	mov	r0, r2
 800b87c:	e7fb      	b.n	800b876 <__ascii_mbtowc+0x16>
 800b87e:	f06f 0001 	mvn.w	r0, #1
 800b882:	e7f8      	b.n	800b876 <__ascii_mbtowc+0x16>

0800b884 <_Balloc>:
 800b884:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800b886:	b570      	push	{r4, r5, r6, lr}
 800b888:	4605      	mov	r5, r0
 800b88a:	460c      	mov	r4, r1
 800b88c:	b17b      	cbz	r3, 800b8ae <_Balloc+0x2a>
 800b88e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800b890:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b894:	b9a0      	cbnz	r0, 800b8c0 <_Balloc+0x3c>
 800b896:	2101      	movs	r1, #1
 800b898:	fa01 f604 	lsl.w	r6, r1, r4
 800b89c:	1d72      	adds	r2, r6, #5
 800b89e:	0092      	lsls	r2, r2, #2
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	f000 fe59 	bl	800c558 <_calloc_r>
 800b8a6:	b148      	cbz	r0, 800b8bc <_Balloc+0x38>
 800b8a8:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800b8ac:	e00b      	b.n	800b8c6 <_Balloc+0x42>
 800b8ae:	2221      	movs	r2, #33	@ 0x21
 800b8b0:	2104      	movs	r1, #4
 800b8b2:	f000 fe51 	bl	800c558 <_calloc_r>
 800b8b6:	6468      	str	r0, [r5, #68]	@ 0x44
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	d1e8      	bne.n	800b88e <_Balloc+0xa>
 800b8bc:	2000      	movs	r0, #0
 800b8be:	bd70      	pop	{r4, r5, r6, pc}
 800b8c0:	6802      	ldr	r2, [r0, #0]
 800b8c2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8cc:	e7f7      	b.n	800b8be <_Balloc+0x3a>

0800b8ce <_Bfree>:
 800b8ce:	b131      	cbz	r1, 800b8de <_Bfree+0x10>
 800b8d0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800b8d2:	684a      	ldr	r2, [r1, #4]
 800b8d4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b8d8:	6008      	str	r0, [r1, #0]
 800b8da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b8de:	4770      	bx	lr

0800b8e0 <__multadd>:
 800b8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e4:	690d      	ldr	r5, [r1, #16]
 800b8e6:	4607      	mov	r7, r0
 800b8e8:	460c      	mov	r4, r1
 800b8ea:	461e      	mov	r6, r3
 800b8ec:	f101 0c14 	add.w	ip, r1, #20
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	f8dc 3000 	ldr.w	r3, [ip]
 800b8f6:	b299      	uxth	r1, r3
 800b8f8:	fb02 6101 	mla	r1, r2, r1, r6
 800b8fc:	0c1e      	lsrs	r6, r3, #16
 800b8fe:	0c0b      	lsrs	r3, r1, #16
 800b900:	fb02 3306 	mla	r3, r2, r6, r3
 800b904:	b289      	uxth	r1, r1
 800b906:	3001      	adds	r0, #1
 800b908:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b90c:	4285      	cmp	r5, r0
 800b90e:	f84c 1b04 	str.w	r1, [ip], #4
 800b912:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b916:	dcec      	bgt.n	800b8f2 <__multadd+0x12>
 800b918:	b30e      	cbz	r6, 800b95e <__multadd+0x7e>
 800b91a:	68a3      	ldr	r3, [r4, #8]
 800b91c:	42ab      	cmp	r3, r5
 800b91e:	dc19      	bgt.n	800b954 <__multadd+0x74>
 800b920:	6861      	ldr	r1, [r4, #4]
 800b922:	4638      	mov	r0, r7
 800b924:	3101      	adds	r1, #1
 800b926:	f7ff ffad 	bl	800b884 <_Balloc>
 800b92a:	4680      	mov	r8, r0
 800b92c:	b928      	cbnz	r0, 800b93a <__multadd+0x5a>
 800b92e:	4602      	mov	r2, r0
 800b930:	4b0c      	ldr	r3, [pc, #48]	@ (800b964 <__multadd+0x84>)
 800b932:	480d      	ldr	r0, [pc, #52]	@ (800b968 <__multadd+0x88>)
 800b934:	21ba      	movs	r1, #186	@ 0xba
 800b936:	f000 fdf1 	bl	800c51c <__assert_func>
 800b93a:	6922      	ldr	r2, [r4, #16]
 800b93c:	3202      	adds	r2, #2
 800b93e:	f104 010c 	add.w	r1, r4, #12
 800b942:	0092      	lsls	r2, r2, #2
 800b944:	300c      	adds	r0, #12
 800b946:	f7fb fb23 	bl	8006f90 <memcpy>
 800b94a:	4621      	mov	r1, r4
 800b94c:	4638      	mov	r0, r7
 800b94e:	f7ff ffbe 	bl	800b8ce <_Bfree>
 800b952:	4644      	mov	r4, r8
 800b954:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b958:	3501      	adds	r5, #1
 800b95a:	615e      	str	r6, [r3, #20]
 800b95c:	6125      	str	r5, [r4, #16]
 800b95e:	4620      	mov	r0, r4
 800b960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b964:	0800d481 	.word	0x0800d481
 800b968:	0800d4ea 	.word	0x0800d4ea

0800b96c <__hi0bits>:
 800b96c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b970:	4603      	mov	r3, r0
 800b972:	bf36      	itet	cc
 800b974:	0403      	lslcc	r3, r0, #16
 800b976:	2000      	movcs	r0, #0
 800b978:	2010      	movcc	r0, #16
 800b97a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b97e:	bf3c      	itt	cc
 800b980:	021b      	lslcc	r3, r3, #8
 800b982:	3008      	addcc	r0, #8
 800b984:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b988:	bf3c      	itt	cc
 800b98a:	011b      	lslcc	r3, r3, #4
 800b98c:	3004      	addcc	r0, #4
 800b98e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b992:	bf3c      	itt	cc
 800b994:	009b      	lslcc	r3, r3, #2
 800b996:	3002      	addcc	r0, #2
 800b998:	2b00      	cmp	r3, #0
 800b99a:	db05      	blt.n	800b9a8 <__hi0bits+0x3c>
 800b99c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b9a0:	f100 0001 	add.w	r0, r0, #1
 800b9a4:	bf08      	it	eq
 800b9a6:	2020      	moveq	r0, #32
 800b9a8:	4770      	bx	lr

0800b9aa <__lo0bits>:
 800b9aa:	6803      	ldr	r3, [r0, #0]
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	f013 0007 	ands.w	r0, r3, #7
 800b9b2:	d00b      	beq.n	800b9cc <__lo0bits+0x22>
 800b9b4:	07d9      	lsls	r1, r3, #31
 800b9b6:	d421      	bmi.n	800b9fc <__lo0bits+0x52>
 800b9b8:	0798      	lsls	r0, r3, #30
 800b9ba:	bf49      	itett	mi
 800b9bc:	085b      	lsrmi	r3, r3, #1
 800b9be:	089b      	lsrpl	r3, r3, #2
 800b9c0:	2001      	movmi	r0, #1
 800b9c2:	6013      	strmi	r3, [r2, #0]
 800b9c4:	bf5c      	itt	pl
 800b9c6:	6013      	strpl	r3, [r2, #0]
 800b9c8:	2002      	movpl	r0, #2
 800b9ca:	4770      	bx	lr
 800b9cc:	b299      	uxth	r1, r3
 800b9ce:	b909      	cbnz	r1, 800b9d4 <__lo0bits+0x2a>
 800b9d0:	0c1b      	lsrs	r3, r3, #16
 800b9d2:	2010      	movs	r0, #16
 800b9d4:	b2d9      	uxtb	r1, r3
 800b9d6:	b909      	cbnz	r1, 800b9dc <__lo0bits+0x32>
 800b9d8:	3008      	adds	r0, #8
 800b9da:	0a1b      	lsrs	r3, r3, #8
 800b9dc:	0719      	lsls	r1, r3, #28
 800b9de:	bf04      	itt	eq
 800b9e0:	091b      	lsreq	r3, r3, #4
 800b9e2:	3004      	addeq	r0, #4
 800b9e4:	0799      	lsls	r1, r3, #30
 800b9e6:	bf04      	itt	eq
 800b9e8:	089b      	lsreq	r3, r3, #2
 800b9ea:	3002      	addeq	r0, #2
 800b9ec:	07d9      	lsls	r1, r3, #31
 800b9ee:	d403      	bmi.n	800b9f8 <__lo0bits+0x4e>
 800b9f0:	085b      	lsrs	r3, r3, #1
 800b9f2:	f100 0001 	add.w	r0, r0, #1
 800b9f6:	d003      	beq.n	800ba00 <__lo0bits+0x56>
 800b9f8:	6013      	str	r3, [r2, #0]
 800b9fa:	4770      	bx	lr
 800b9fc:	2000      	movs	r0, #0
 800b9fe:	4770      	bx	lr
 800ba00:	2020      	movs	r0, #32
 800ba02:	4770      	bx	lr

0800ba04 <__i2b>:
 800ba04:	b510      	push	{r4, lr}
 800ba06:	460c      	mov	r4, r1
 800ba08:	2101      	movs	r1, #1
 800ba0a:	f7ff ff3b 	bl	800b884 <_Balloc>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	b928      	cbnz	r0, 800ba1e <__i2b+0x1a>
 800ba12:	4b05      	ldr	r3, [pc, #20]	@ (800ba28 <__i2b+0x24>)
 800ba14:	4805      	ldr	r0, [pc, #20]	@ (800ba2c <__i2b+0x28>)
 800ba16:	f240 1145 	movw	r1, #325	@ 0x145
 800ba1a:	f000 fd7f 	bl	800c51c <__assert_func>
 800ba1e:	2301      	movs	r3, #1
 800ba20:	6144      	str	r4, [r0, #20]
 800ba22:	6103      	str	r3, [r0, #16]
 800ba24:	bd10      	pop	{r4, pc}
 800ba26:	bf00      	nop
 800ba28:	0800d481 	.word	0x0800d481
 800ba2c:	0800d4ea 	.word	0x0800d4ea

0800ba30 <__multiply>:
 800ba30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba34:	4614      	mov	r4, r2
 800ba36:	690a      	ldr	r2, [r1, #16]
 800ba38:	6923      	ldr	r3, [r4, #16]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	bfa8      	it	ge
 800ba3e:	4623      	movge	r3, r4
 800ba40:	460f      	mov	r7, r1
 800ba42:	bfa4      	itt	ge
 800ba44:	460c      	movge	r4, r1
 800ba46:	461f      	movge	r7, r3
 800ba48:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ba4c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ba50:	68a3      	ldr	r3, [r4, #8]
 800ba52:	6861      	ldr	r1, [r4, #4]
 800ba54:	eb0a 0609 	add.w	r6, sl, r9
 800ba58:	42b3      	cmp	r3, r6
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	bfb8      	it	lt
 800ba5e:	3101      	addlt	r1, #1
 800ba60:	f7ff ff10 	bl	800b884 <_Balloc>
 800ba64:	b930      	cbnz	r0, 800ba74 <__multiply+0x44>
 800ba66:	4602      	mov	r2, r0
 800ba68:	4b44      	ldr	r3, [pc, #272]	@ (800bb7c <__multiply+0x14c>)
 800ba6a:	4845      	ldr	r0, [pc, #276]	@ (800bb80 <__multiply+0x150>)
 800ba6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ba70:	f000 fd54 	bl	800c51c <__assert_func>
 800ba74:	f100 0514 	add.w	r5, r0, #20
 800ba78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba7c:	462b      	mov	r3, r5
 800ba7e:	2200      	movs	r2, #0
 800ba80:	4543      	cmp	r3, r8
 800ba82:	d321      	bcc.n	800bac8 <__multiply+0x98>
 800ba84:	f107 0114 	add.w	r1, r7, #20
 800ba88:	f104 0214 	add.w	r2, r4, #20
 800ba8c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ba90:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ba94:	9302      	str	r3, [sp, #8]
 800ba96:	1b13      	subs	r3, r2, r4
 800ba98:	3b15      	subs	r3, #21
 800ba9a:	f023 0303 	bic.w	r3, r3, #3
 800ba9e:	3304      	adds	r3, #4
 800baa0:	f104 0715 	add.w	r7, r4, #21
 800baa4:	42ba      	cmp	r2, r7
 800baa6:	bf38      	it	cc
 800baa8:	2304      	movcc	r3, #4
 800baaa:	9301      	str	r3, [sp, #4]
 800baac:	9b02      	ldr	r3, [sp, #8]
 800baae:	9103      	str	r1, [sp, #12]
 800bab0:	428b      	cmp	r3, r1
 800bab2:	d80c      	bhi.n	800bace <__multiply+0x9e>
 800bab4:	2e00      	cmp	r6, #0
 800bab6:	dd03      	ble.n	800bac0 <__multiply+0x90>
 800bab8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800babc:	2b00      	cmp	r3, #0
 800babe:	d05b      	beq.n	800bb78 <__multiply+0x148>
 800bac0:	6106      	str	r6, [r0, #16]
 800bac2:	b005      	add	sp, #20
 800bac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac8:	f843 2b04 	str.w	r2, [r3], #4
 800bacc:	e7d8      	b.n	800ba80 <__multiply+0x50>
 800bace:	f8b1 a000 	ldrh.w	sl, [r1]
 800bad2:	f1ba 0f00 	cmp.w	sl, #0
 800bad6:	d024      	beq.n	800bb22 <__multiply+0xf2>
 800bad8:	f104 0e14 	add.w	lr, r4, #20
 800badc:	46a9      	mov	r9, r5
 800bade:	f04f 0c00 	mov.w	ip, #0
 800bae2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bae6:	f8d9 3000 	ldr.w	r3, [r9]
 800baea:	fa1f fb87 	uxth.w	fp, r7
 800baee:	b29b      	uxth	r3, r3
 800baf0:	fb0a 330b 	mla	r3, sl, fp, r3
 800baf4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800baf8:	f8d9 7000 	ldr.w	r7, [r9]
 800bafc:	4463      	add	r3, ip
 800bafe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bb02:	fb0a c70b 	mla	r7, sl, fp, ip
 800bb06:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb10:	4572      	cmp	r2, lr
 800bb12:	f849 3b04 	str.w	r3, [r9], #4
 800bb16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bb1a:	d8e2      	bhi.n	800bae2 <__multiply+0xb2>
 800bb1c:	9b01      	ldr	r3, [sp, #4]
 800bb1e:	f845 c003 	str.w	ip, [r5, r3]
 800bb22:	9b03      	ldr	r3, [sp, #12]
 800bb24:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb28:	3104      	adds	r1, #4
 800bb2a:	f1b9 0f00 	cmp.w	r9, #0
 800bb2e:	d021      	beq.n	800bb74 <__multiply+0x144>
 800bb30:	682b      	ldr	r3, [r5, #0]
 800bb32:	f104 0c14 	add.w	ip, r4, #20
 800bb36:	46ae      	mov	lr, r5
 800bb38:	f04f 0a00 	mov.w	sl, #0
 800bb3c:	f8bc b000 	ldrh.w	fp, [ip]
 800bb40:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bb44:	fb09 770b 	mla	r7, r9, fp, r7
 800bb48:	4457      	add	r7, sl
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb50:	f84e 3b04 	str.w	r3, [lr], #4
 800bb54:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb5c:	f8be 3000 	ldrh.w	r3, [lr]
 800bb60:	fb09 330a 	mla	r3, r9, sl, r3
 800bb64:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bb68:	4562      	cmp	r2, ip
 800bb6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb6e:	d8e5      	bhi.n	800bb3c <__multiply+0x10c>
 800bb70:	9f01      	ldr	r7, [sp, #4]
 800bb72:	51eb      	str	r3, [r5, r7]
 800bb74:	3504      	adds	r5, #4
 800bb76:	e799      	b.n	800baac <__multiply+0x7c>
 800bb78:	3e01      	subs	r6, #1
 800bb7a:	e79b      	b.n	800bab4 <__multiply+0x84>
 800bb7c:	0800d481 	.word	0x0800d481
 800bb80:	0800d4ea 	.word	0x0800d4ea

0800bb84 <__pow5mult>:
 800bb84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb88:	4615      	mov	r5, r2
 800bb8a:	f012 0203 	ands.w	r2, r2, #3
 800bb8e:	4607      	mov	r7, r0
 800bb90:	460e      	mov	r6, r1
 800bb92:	d007      	beq.n	800bba4 <__pow5mult+0x20>
 800bb94:	4c1a      	ldr	r4, [pc, #104]	@ (800bc00 <__pow5mult+0x7c>)
 800bb96:	3a01      	subs	r2, #1
 800bb98:	2300      	movs	r3, #0
 800bb9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb9e:	f7ff fe9f 	bl	800b8e0 <__multadd>
 800bba2:	4606      	mov	r6, r0
 800bba4:	10ad      	asrs	r5, r5, #2
 800bba6:	d027      	beq.n	800bbf8 <__pow5mult+0x74>
 800bba8:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800bbaa:	b944      	cbnz	r4, 800bbbe <__pow5mult+0x3a>
 800bbac:	f240 2171 	movw	r1, #625	@ 0x271
 800bbb0:	4638      	mov	r0, r7
 800bbb2:	f7ff ff27 	bl	800ba04 <__i2b>
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	6438      	str	r0, [r7, #64]	@ 0x40
 800bbba:	4604      	mov	r4, r0
 800bbbc:	6003      	str	r3, [r0, #0]
 800bbbe:	f04f 0900 	mov.w	r9, #0
 800bbc2:	07eb      	lsls	r3, r5, #31
 800bbc4:	d50a      	bpl.n	800bbdc <__pow5mult+0x58>
 800bbc6:	4631      	mov	r1, r6
 800bbc8:	4622      	mov	r2, r4
 800bbca:	4638      	mov	r0, r7
 800bbcc:	f7ff ff30 	bl	800ba30 <__multiply>
 800bbd0:	4631      	mov	r1, r6
 800bbd2:	4680      	mov	r8, r0
 800bbd4:	4638      	mov	r0, r7
 800bbd6:	f7ff fe7a 	bl	800b8ce <_Bfree>
 800bbda:	4646      	mov	r6, r8
 800bbdc:	106d      	asrs	r5, r5, #1
 800bbde:	d00b      	beq.n	800bbf8 <__pow5mult+0x74>
 800bbe0:	6820      	ldr	r0, [r4, #0]
 800bbe2:	b938      	cbnz	r0, 800bbf4 <__pow5mult+0x70>
 800bbe4:	4622      	mov	r2, r4
 800bbe6:	4621      	mov	r1, r4
 800bbe8:	4638      	mov	r0, r7
 800bbea:	f7ff ff21 	bl	800ba30 <__multiply>
 800bbee:	6020      	str	r0, [r4, #0]
 800bbf0:	f8c0 9000 	str.w	r9, [r0]
 800bbf4:	4604      	mov	r4, r0
 800bbf6:	e7e4      	b.n	800bbc2 <__pow5mult+0x3e>
 800bbf8:	4630      	mov	r0, r6
 800bbfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbfe:	bf00      	nop
 800bc00:	0800d544 	.word	0x0800d544

0800bc04 <__lshift>:
 800bc04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc08:	460c      	mov	r4, r1
 800bc0a:	6849      	ldr	r1, [r1, #4]
 800bc0c:	6923      	ldr	r3, [r4, #16]
 800bc0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc12:	68a3      	ldr	r3, [r4, #8]
 800bc14:	4607      	mov	r7, r0
 800bc16:	4691      	mov	r9, r2
 800bc18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc1c:	f108 0601 	add.w	r6, r8, #1
 800bc20:	42b3      	cmp	r3, r6
 800bc22:	db0b      	blt.n	800bc3c <__lshift+0x38>
 800bc24:	4638      	mov	r0, r7
 800bc26:	f7ff fe2d 	bl	800b884 <_Balloc>
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	b948      	cbnz	r0, 800bc42 <__lshift+0x3e>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	4b28      	ldr	r3, [pc, #160]	@ (800bcd4 <__lshift+0xd0>)
 800bc32:	4829      	ldr	r0, [pc, #164]	@ (800bcd8 <__lshift+0xd4>)
 800bc34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bc38:	f000 fc70 	bl	800c51c <__assert_func>
 800bc3c:	3101      	adds	r1, #1
 800bc3e:	005b      	lsls	r3, r3, #1
 800bc40:	e7ee      	b.n	800bc20 <__lshift+0x1c>
 800bc42:	2300      	movs	r3, #0
 800bc44:	f100 0114 	add.w	r1, r0, #20
 800bc48:	f100 0210 	add.w	r2, r0, #16
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	4553      	cmp	r3, sl
 800bc50:	db33      	blt.n	800bcba <__lshift+0xb6>
 800bc52:	6920      	ldr	r0, [r4, #16]
 800bc54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc58:	f104 0314 	add.w	r3, r4, #20
 800bc5c:	f019 091f 	ands.w	r9, r9, #31
 800bc60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc68:	d02b      	beq.n	800bcc2 <__lshift+0xbe>
 800bc6a:	f1c9 0e20 	rsb	lr, r9, #32
 800bc6e:	468a      	mov	sl, r1
 800bc70:	2200      	movs	r2, #0
 800bc72:	6818      	ldr	r0, [r3, #0]
 800bc74:	fa00 f009 	lsl.w	r0, r0, r9
 800bc78:	4310      	orrs	r0, r2
 800bc7a:	f84a 0b04 	str.w	r0, [sl], #4
 800bc7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc82:	459c      	cmp	ip, r3
 800bc84:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc88:	d8f3      	bhi.n	800bc72 <__lshift+0x6e>
 800bc8a:	ebac 0304 	sub.w	r3, ip, r4
 800bc8e:	3b15      	subs	r3, #21
 800bc90:	f023 0303 	bic.w	r3, r3, #3
 800bc94:	3304      	adds	r3, #4
 800bc96:	f104 0015 	add.w	r0, r4, #21
 800bc9a:	4584      	cmp	ip, r0
 800bc9c:	bf38      	it	cc
 800bc9e:	2304      	movcc	r3, #4
 800bca0:	50ca      	str	r2, [r1, r3]
 800bca2:	b10a      	cbz	r2, 800bca8 <__lshift+0xa4>
 800bca4:	f108 0602 	add.w	r6, r8, #2
 800bca8:	3e01      	subs	r6, #1
 800bcaa:	4638      	mov	r0, r7
 800bcac:	612e      	str	r6, [r5, #16]
 800bcae:	4621      	mov	r1, r4
 800bcb0:	f7ff fe0d 	bl	800b8ce <_Bfree>
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcba:	f842 0f04 	str.w	r0, [r2, #4]!
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	e7c5      	b.n	800bc4e <__lshift+0x4a>
 800bcc2:	3904      	subs	r1, #4
 800bcc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcc8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bccc:	459c      	cmp	ip, r3
 800bcce:	d8f9      	bhi.n	800bcc4 <__lshift+0xc0>
 800bcd0:	e7ea      	b.n	800bca8 <__lshift+0xa4>
 800bcd2:	bf00      	nop
 800bcd4:	0800d481 	.word	0x0800d481
 800bcd8:	0800d4ea 	.word	0x0800d4ea

0800bcdc <__mcmp>:
 800bcdc:	690a      	ldr	r2, [r1, #16]
 800bcde:	4603      	mov	r3, r0
 800bce0:	6900      	ldr	r0, [r0, #16]
 800bce2:	1a80      	subs	r0, r0, r2
 800bce4:	b530      	push	{r4, r5, lr}
 800bce6:	d10e      	bne.n	800bd06 <__mcmp+0x2a>
 800bce8:	3314      	adds	r3, #20
 800bcea:	3114      	adds	r1, #20
 800bcec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bcf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bcf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bcf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bcfc:	4295      	cmp	r5, r2
 800bcfe:	d003      	beq.n	800bd08 <__mcmp+0x2c>
 800bd00:	d205      	bcs.n	800bd0e <__mcmp+0x32>
 800bd02:	f04f 30ff 	mov.w	r0, #4294967295
 800bd06:	bd30      	pop	{r4, r5, pc}
 800bd08:	42a3      	cmp	r3, r4
 800bd0a:	d3f3      	bcc.n	800bcf4 <__mcmp+0x18>
 800bd0c:	e7fb      	b.n	800bd06 <__mcmp+0x2a>
 800bd0e:	2001      	movs	r0, #1
 800bd10:	e7f9      	b.n	800bd06 <__mcmp+0x2a>
	...

0800bd14 <__mdiff>:
 800bd14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd18:	4689      	mov	r9, r1
 800bd1a:	4606      	mov	r6, r0
 800bd1c:	4611      	mov	r1, r2
 800bd1e:	4648      	mov	r0, r9
 800bd20:	4614      	mov	r4, r2
 800bd22:	f7ff ffdb 	bl	800bcdc <__mcmp>
 800bd26:	1e05      	subs	r5, r0, #0
 800bd28:	d112      	bne.n	800bd50 <__mdiff+0x3c>
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	f7ff fda9 	bl	800b884 <_Balloc>
 800bd32:	4602      	mov	r2, r0
 800bd34:	b928      	cbnz	r0, 800bd42 <__mdiff+0x2e>
 800bd36:	4b3f      	ldr	r3, [pc, #252]	@ (800be34 <__mdiff+0x120>)
 800bd38:	f240 2137 	movw	r1, #567	@ 0x237
 800bd3c:	483e      	ldr	r0, [pc, #248]	@ (800be38 <__mdiff+0x124>)
 800bd3e:	f000 fbed 	bl	800c51c <__assert_func>
 800bd42:	2301      	movs	r3, #1
 800bd44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd48:	4610      	mov	r0, r2
 800bd4a:	b003      	add	sp, #12
 800bd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd50:	bfbc      	itt	lt
 800bd52:	464b      	movlt	r3, r9
 800bd54:	46a1      	movlt	r9, r4
 800bd56:	4630      	mov	r0, r6
 800bd58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bd5c:	bfba      	itte	lt
 800bd5e:	461c      	movlt	r4, r3
 800bd60:	2501      	movlt	r5, #1
 800bd62:	2500      	movge	r5, #0
 800bd64:	f7ff fd8e 	bl	800b884 <_Balloc>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	b918      	cbnz	r0, 800bd74 <__mdiff+0x60>
 800bd6c:	4b31      	ldr	r3, [pc, #196]	@ (800be34 <__mdiff+0x120>)
 800bd6e:	f240 2145 	movw	r1, #581	@ 0x245
 800bd72:	e7e3      	b.n	800bd3c <__mdiff+0x28>
 800bd74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bd78:	6926      	ldr	r6, [r4, #16]
 800bd7a:	60c5      	str	r5, [r0, #12]
 800bd7c:	f109 0310 	add.w	r3, r9, #16
 800bd80:	f109 0514 	add.w	r5, r9, #20
 800bd84:	f104 0e14 	add.w	lr, r4, #20
 800bd88:	f100 0b14 	add.w	fp, r0, #20
 800bd8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bd90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bd94:	9301      	str	r3, [sp, #4]
 800bd96:	46d9      	mov	r9, fp
 800bd98:	f04f 0c00 	mov.w	ip, #0
 800bd9c:	9b01      	ldr	r3, [sp, #4]
 800bd9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bda2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	fa1f f38a 	uxth.w	r3, sl
 800bdac:	4619      	mov	r1, r3
 800bdae:	b283      	uxth	r3, r0
 800bdb0:	1acb      	subs	r3, r1, r3
 800bdb2:	0c00      	lsrs	r0, r0, #16
 800bdb4:	4463      	add	r3, ip
 800bdb6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bdba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bdc4:	4576      	cmp	r6, lr
 800bdc6:	f849 3b04 	str.w	r3, [r9], #4
 800bdca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bdce:	d8e5      	bhi.n	800bd9c <__mdiff+0x88>
 800bdd0:	1b33      	subs	r3, r6, r4
 800bdd2:	3b15      	subs	r3, #21
 800bdd4:	f023 0303 	bic.w	r3, r3, #3
 800bdd8:	3415      	adds	r4, #21
 800bdda:	3304      	adds	r3, #4
 800bddc:	42a6      	cmp	r6, r4
 800bdde:	bf38      	it	cc
 800bde0:	2304      	movcc	r3, #4
 800bde2:	441d      	add	r5, r3
 800bde4:	445b      	add	r3, fp
 800bde6:	461e      	mov	r6, r3
 800bde8:	462c      	mov	r4, r5
 800bdea:	4544      	cmp	r4, r8
 800bdec:	d30e      	bcc.n	800be0c <__mdiff+0xf8>
 800bdee:	f108 0103 	add.w	r1, r8, #3
 800bdf2:	1b49      	subs	r1, r1, r5
 800bdf4:	f021 0103 	bic.w	r1, r1, #3
 800bdf8:	3d03      	subs	r5, #3
 800bdfa:	45a8      	cmp	r8, r5
 800bdfc:	bf38      	it	cc
 800bdfe:	2100      	movcc	r1, #0
 800be00:	440b      	add	r3, r1
 800be02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be06:	b191      	cbz	r1, 800be2e <__mdiff+0x11a>
 800be08:	6117      	str	r7, [r2, #16]
 800be0a:	e79d      	b.n	800bd48 <__mdiff+0x34>
 800be0c:	f854 1b04 	ldr.w	r1, [r4], #4
 800be10:	46e6      	mov	lr, ip
 800be12:	0c08      	lsrs	r0, r1, #16
 800be14:	fa1c fc81 	uxtah	ip, ip, r1
 800be18:	4471      	add	r1, lr
 800be1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800be1e:	b289      	uxth	r1, r1
 800be20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be24:	f846 1b04 	str.w	r1, [r6], #4
 800be28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be2c:	e7dd      	b.n	800bdea <__mdiff+0xd6>
 800be2e:	3f01      	subs	r7, #1
 800be30:	e7e7      	b.n	800be02 <__mdiff+0xee>
 800be32:	bf00      	nop
 800be34:	0800d481 	.word	0x0800d481
 800be38:	0800d4ea 	.word	0x0800d4ea

0800be3c <__d2b>:
 800be3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be40:	460f      	mov	r7, r1
 800be42:	2101      	movs	r1, #1
 800be44:	ec59 8b10 	vmov	r8, r9, d0
 800be48:	4616      	mov	r6, r2
 800be4a:	f7ff fd1b 	bl	800b884 <_Balloc>
 800be4e:	4604      	mov	r4, r0
 800be50:	b930      	cbnz	r0, 800be60 <__d2b+0x24>
 800be52:	4602      	mov	r2, r0
 800be54:	4b23      	ldr	r3, [pc, #140]	@ (800bee4 <__d2b+0xa8>)
 800be56:	4824      	ldr	r0, [pc, #144]	@ (800bee8 <__d2b+0xac>)
 800be58:	f240 310f 	movw	r1, #783	@ 0x30f
 800be5c:	f000 fb5e 	bl	800c51c <__assert_func>
 800be60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be68:	b10d      	cbz	r5, 800be6e <__d2b+0x32>
 800be6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be6e:	9301      	str	r3, [sp, #4]
 800be70:	f1b8 0300 	subs.w	r3, r8, #0
 800be74:	d023      	beq.n	800bebe <__d2b+0x82>
 800be76:	4668      	mov	r0, sp
 800be78:	9300      	str	r3, [sp, #0]
 800be7a:	f7ff fd96 	bl	800b9aa <__lo0bits>
 800be7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800be82:	b1d0      	cbz	r0, 800beba <__d2b+0x7e>
 800be84:	f1c0 0320 	rsb	r3, r0, #32
 800be88:	fa02 f303 	lsl.w	r3, r2, r3
 800be8c:	430b      	orrs	r3, r1
 800be8e:	40c2      	lsrs	r2, r0
 800be90:	6163      	str	r3, [r4, #20]
 800be92:	9201      	str	r2, [sp, #4]
 800be94:	9b01      	ldr	r3, [sp, #4]
 800be96:	61a3      	str	r3, [r4, #24]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	bf0c      	ite	eq
 800be9c:	2201      	moveq	r2, #1
 800be9e:	2202      	movne	r2, #2
 800bea0:	6122      	str	r2, [r4, #16]
 800bea2:	b1a5      	cbz	r5, 800bece <__d2b+0x92>
 800bea4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bea8:	4405      	add	r5, r0
 800beaa:	603d      	str	r5, [r7, #0]
 800beac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800beb0:	6030      	str	r0, [r6, #0]
 800beb2:	4620      	mov	r0, r4
 800beb4:	b003      	add	sp, #12
 800beb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800beba:	6161      	str	r1, [r4, #20]
 800bebc:	e7ea      	b.n	800be94 <__d2b+0x58>
 800bebe:	a801      	add	r0, sp, #4
 800bec0:	f7ff fd73 	bl	800b9aa <__lo0bits>
 800bec4:	9b01      	ldr	r3, [sp, #4]
 800bec6:	6163      	str	r3, [r4, #20]
 800bec8:	3020      	adds	r0, #32
 800beca:	2201      	movs	r2, #1
 800becc:	e7e8      	b.n	800bea0 <__d2b+0x64>
 800bece:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bed2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bed6:	6038      	str	r0, [r7, #0]
 800bed8:	6918      	ldr	r0, [r3, #16]
 800beda:	f7ff fd47 	bl	800b96c <__hi0bits>
 800bede:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bee2:	e7e5      	b.n	800beb0 <__d2b+0x74>
 800bee4:	0800d481 	.word	0x0800d481
 800bee8:	0800d4ea 	.word	0x0800d4ea

0800beec <_realloc_r>:
 800beec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef0:	4682      	mov	sl, r0
 800bef2:	4693      	mov	fp, r2
 800bef4:	460c      	mov	r4, r1
 800bef6:	b929      	cbnz	r1, 800bf04 <_realloc_r+0x18>
 800bef8:	4611      	mov	r1, r2
 800befa:	b003      	add	sp, #12
 800befc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf00:	f7fa bab4 	b.w	800646c <_malloc_r>
 800bf04:	f7fa fcec 	bl	80068e0 <__malloc_lock>
 800bf08:	f10b 080b 	add.w	r8, fp, #11
 800bf0c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800bf10:	f1b8 0f16 	cmp.w	r8, #22
 800bf14:	f1a4 0908 	sub.w	r9, r4, #8
 800bf18:	f025 0603 	bic.w	r6, r5, #3
 800bf1c:	d908      	bls.n	800bf30 <_realloc_r+0x44>
 800bf1e:	f038 0807 	bics.w	r8, r8, #7
 800bf22:	d507      	bpl.n	800bf34 <_realloc_r+0x48>
 800bf24:	230c      	movs	r3, #12
 800bf26:	f8ca 3000 	str.w	r3, [sl]
 800bf2a:	f04f 0b00 	mov.w	fp, #0
 800bf2e:	e032      	b.n	800bf96 <_realloc_r+0xaa>
 800bf30:	f04f 0810 	mov.w	r8, #16
 800bf34:	45c3      	cmp	fp, r8
 800bf36:	d8f5      	bhi.n	800bf24 <_realloc_r+0x38>
 800bf38:	4546      	cmp	r6, r8
 800bf3a:	f280 8174 	bge.w	800c226 <_realloc_r+0x33a>
 800bf3e:	4b9e      	ldr	r3, [pc, #632]	@ (800c1b8 <_realloc_r+0x2cc>)
 800bf40:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800bf44:	eb09 0106 	add.w	r1, r9, r6
 800bf48:	458c      	cmp	ip, r1
 800bf4a:	6848      	ldr	r0, [r1, #4]
 800bf4c:	d005      	beq.n	800bf5a <_realloc_r+0x6e>
 800bf4e:	f020 0201 	bic.w	r2, r0, #1
 800bf52:	440a      	add	r2, r1
 800bf54:	6852      	ldr	r2, [r2, #4]
 800bf56:	07d7      	lsls	r7, r2, #31
 800bf58:	d449      	bmi.n	800bfee <_realloc_r+0x102>
 800bf5a:	f020 0003 	bic.w	r0, r0, #3
 800bf5e:	458c      	cmp	ip, r1
 800bf60:	eb06 0700 	add.w	r7, r6, r0
 800bf64:	d11b      	bne.n	800bf9e <_realloc_r+0xb2>
 800bf66:	f108 0210 	add.w	r2, r8, #16
 800bf6a:	42ba      	cmp	r2, r7
 800bf6c:	dc41      	bgt.n	800bff2 <_realloc_r+0x106>
 800bf6e:	eb09 0208 	add.w	r2, r9, r8
 800bf72:	eba7 0708 	sub.w	r7, r7, r8
 800bf76:	f047 0701 	orr.w	r7, r7, #1
 800bf7a:	609a      	str	r2, [r3, #8]
 800bf7c:	6057      	str	r7, [r2, #4]
 800bf7e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bf82:	f003 0301 	and.w	r3, r3, #1
 800bf86:	ea43 0308 	orr.w	r3, r3, r8
 800bf8a:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf8e:	4650      	mov	r0, sl
 800bf90:	f7fa fcac 	bl	80068ec <__malloc_unlock>
 800bf94:	46a3      	mov	fp, r4
 800bf96:	4658      	mov	r0, fp
 800bf98:	b003      	add	sp, #12
 800bf9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf9e:	45b8      	cmp	r8, r7
 800bfa0:	dc27      	bgt.n	800bff2 <_realloc_r+0x106>
 800bfa2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800bfa6:	60d3      	str	r3, [r2, #12]
 800bfa8:	609a      	str	r2, [r3, #8]
 800bfaa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bfae:	eba7 0008 	sub.w	r0, r7, r8
 800bfb2:	280f      	cmp	r0, #15
 800bfb4:	f003 0301 	and.w	r3, r3, #1
 800bfb8:	eb09 0207 	add.w	r2, r9, r7
 800bfbc:	f240 8135 	bls.w	800c22a <_realloc_r+0x33e>
 800bfc0:	eb09 0108 	add.w	r1, r9, r8
 800bfc4:	ea48 0303 	orr.w	r3, r8, r3
 800bfc8:	f040 0001 	orr.w	r0, r0, #1
 800bfcc:	f8c9 3004 	str.w	r3, [r9, #4]
 800bfd0:	6048      	str	r0, [r1, #4]
 800bfd2:	6853      	ldr	r3, [r2, #4]
 800bfd4:	f043 0301 	orr.w	r3, r3, #1
 800bfd8:	6053      	str	r3, [r2, #4]
 800bfda:	3108      	adds	r1, #8
 800bfdc:	4650      	mov	r0, sl
 800bfde:	f7fb f84b 	bl	8007078 <_free_r>
 800bfe2:	4650      	mov	r0, sl
 800bfe4:	f7fa fc82 	bl	80068ec <__malloc_unlock>
 800bfe8:	f109 0b08 	add.w	fp, r9, #8
 800bfec:	e7d3      	b.n	800bf96 <_realloc_r+0xaa>
 800bfee:	2000      	movs	r0, #0
 800bff0:	4601      	mov	r1, r0
 800bff2:	07ea      	lsls	r2, r5, #31
 800bff4:	f100 80c7 	bmi.w	800c186 <_realloc_r+0x29a>
 800bff8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800bffc:	eba9 0505 	sub.w	r5, r9, r5
 800c000:	686a      	ldr	r2, [r5, #4]
 800c002:	f022 0203 	bic.w	r2, r2, #3
 800c006:	4432      	add	r2, r6
 800c008:	9201      	str	r2, [sp, #4]
 800c00a:	2900      	cmp	r1, #0
 800c00c:	f000 8086 	beq.w	800c11c <_realloc_r+0x230>
 800c010:	458c      	cmp	ip, r1
 800c012:	eb00 0702 	add.w	r7, r0, r2
 800c016:	d149      	bne.n	800c0ac <_realloc_r+0x1c0>
 800c018:	f108 0210 	add.w	r2, r8, #16
 800c01c:	42ba      	cmp	r2, r7
 800c01e:	dc7d      	bgt.n	800c11c <_realloc_r+0x230>
 800c020:	46ab      	mov	fp, r5
 800c022:	68ea      	ldr	r2, [r5, #12]
 800c024:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 800c028:	60ca      	str	r2, [r1, #12]
 800c02a:	6091      	str	r1, [r2, #8]
 800c02c:	1f32      	subs	r2, r6, #4
 800c02e:	2a24      	cmp	r2, #36	@ 0x24
 800c030:	d836      	bhi.n	800c0a0 <_realloc_r+0x1b4>
 800c032:	2a13      	cmp	r2, #19
 800c034:	d932      	bls.n	800c09c <_realloc_r+0x1b0>
 800c036:	6821      	ldr	r1, [r4, #0]
 800c038:	60a9      	str	r1, [r5, #8]
 800c03a:	6861      	ldr	r1, [r4, #4]
 800c03c:	60e9      	str	r1, [r5, #12]
 800c03e:	2a1b      	cmp	r2, #27
 800c040:	d81a      	bhi.n	800c078 <_realloc_r+0x18c>
 800c042:	3408      	adds	r4, #8
 800c044:	f105 0210 	add.w	r2, r5, #16
 800c048:	6821      	ldr	r1, [r4, #0]
 800c04a:	6011      	str	r1, [r2, #0]
 800c04c:	6861      	ldr	r1, [r4, #4]
 800c04e:	6051      	str	r1, [r2, #4]
 800c050:	68a1      	ldr	r1, [r4, #8]
 800c052:	6091      	str	r1, [r2, #8]
 800c054:	eb05 0208 	add.w	r2, r5, r8
 800c058:	eba7 0708 	sub.w	r7, r7, r8
 800c05c:	f047 0701 	orr.w	r7, r7, #1
 800c060:	609a      	str	r2, [r3, #8]
 800c062:	6057      	str	r7, [r2, #4]
 800c064:	686b      	ldr	r3, [r5, #4]
 800c066:	f003 0301 	and.w	r3, r3, #1
 800c06a:	ea43 0308 	orr.w	r3, r3, r8
 800c06e:	606b      	str	r3, [r5, #4]
 800c070:	4650      	mov	r0, sl
 800c072:	f7fa fc3b 	bl	80068ec <__malloc_unlock>
 800c076:	e78e      	b.n	800bf96 <_realloc_r+0xaa>
 800c078:	68a1      	ldr	r1, [r4, #8]
 800c07a:	6129      	str	r1, [r5, #16]
 800c07c:	68e1      	ldr	r1, [r4, #12]
 800c07e:	6169      	str	r1, [r5, #20]
 800c080:	2a24      	cmp	r2, #36	@ 0x24
 800c082:	bf01      	itttt	eq
 800c084:	6922      	ldreq	r2, [r4, #16]
 800c086:	61aa      	streq	r2, [r5, #24]
 800c088:	6961      	ldreq	r1, [r4, #20]
 800c08a:	61e9      	streq	r1, [r5, #28]
 800c08c:	bf19      	ittee	ne
 800c08e:	3410      	addne	r4, #16
 800c090:	f105 0218 	addne.w	r2, r5, #24
 800c094:	f105 0220 	addeq.w	r2, r5, #32
 800c098:	3418      	addeq	r4, #24
 800c09a:	e7d5      	b.n	800c048 <_realloc_r+0x15c>
 800c09c:	465a      	mov	r2, fp
 800c09e:	e7d3      	b.n	800c048 <_realloc_r+0x15c>
 800c0a0:	4621      	mov	r1, r4
 800c0a2:	4658      	mov	r0, fp
 800c0a4:	f7fa fe9e 	bl	8006de4 <memmove>
 800c0a8:	4b43      	ldr	r3, [pc, #268]	@ (800c1b8 <_realloc_r+0x2cc>)
 800c0aa:	e7d3      	b.n	800c054 <_realloc_r+0x168>
 800c0ac:	45b8      	cmp	r8, r7
 800c0ae:	dc35      	bgt.n	800c11c <_realloc_r+0x230>
 800c0b0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	60d3      	str	r3, [r2, #12]
 800c0b8:	609a      	str	r2, [r3, #8]
 800c0ba:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c0be:	68eb      	ldr	r3, [r5, #12]
 800c0c0:	60d3      	str	r3, [r2, #12]
 800c0c2:	609a      	str	r2, [r3, #8]
 800c0c4:	1f32      	subs	r2, r6, #4
 800c0c6:	2a24      	cmp	r2, #36	@ 0x24
 800c0c8:	d824      	bhi.n	800c114 <_realloc_r+0x228>
 800c0ca:	2a13      	cmp	r2, #19
 800c0cc:	d908      	bls.n	800c0e0 <_realloc_r+0x1f4>
 800c0ce:	6823      	ldr	r3, [r4, #0]
 800c0d0:	60ab      	str	r3, [r5, #8]
 800c0d2:	6863      	ldr	r3, [r4, #4]
 800c0d4:	60eb      	str	r3, [r5, #12]
 800c0d6:	2a1b      	cmp	r2, #27
 800c0d8:	d80a      	bhi.n	800c0f0 <_realloc_r+0x204>
 800c0da:	3408      	adds	r4, #8
 800c0dc:	f105 0010 	add.w	r0, r5, #16
 800c0e0:	6823      	ldr	r3, [r4, #0]
 800c0e2:	6003      	str	r3, [r0, #0]
 800c0e4:	6863      	ldr	r3, [r4, #4]
 800c0e6:	6043      	str	r3, [r0, #4]
 800c0e8:	68a3      	ldr	r3, [r4, #8]
 800c0ea:	6083      	str	r3, [r0, #8]
 800c0ec:	46a9      	mov	r9, r5
 800c0ee:	e75c      	b.n	800bfaa <_realloc_r+0xbe>
 800c0f0:	68a3      	ldr	r3, [r4, #8]
 800c0f2:	612b      	str	r3, [r5, #16]
 800c0f4:	68e3      	ldr	r3, [r4, #12]
 800c0f6:	616b      	str	r3, [r5, #20]
 800c0f8:	2a24      	cmp	r2, #36	@ 0x24
 800c0fa:	bf01      	itttt	eq
 800c0fc:	6923      	ldreq	r3, [r4, #16]
 800c0fe:	61ab      	streq	r3, [r5, #24]
 800c100:	6963      	ldreq	r3, [r4, #20]
 800c102:	61eb      	streq	r3, [r5, #28]
 800c104:	bf19      	ittee	ne
 800c106:	3410      	addne	r4, #16
 800c108:	f105 0018 	addne.w	r0, r5, #24
 800c10c:	f105 0020 	addeq.w	r0, r5, #32
 800c110:	3418      	addeq	r4, #24
 800c112:	e7e5      	b.n	800c0e0 <_realloc_r+0x1f4>
 800c114:	4621      	mov	r1, r4
 800c116:	f7fa fe65 	bl	8006de4 <memmove>
 800c11a:	e7e7      	b.n	800c0ec <_realloc_r+0x200>
 800c11c:	9b01      	ldr	r3, [sp, #4]
 800c11e:	4598      	cmp	r8, r3
 800c120:	dc31      	bgt.n	800c186 <_realloc_r+0x29a>
 800c122:	4628      	mov	r0, r5
 800c124:	68eb      	ldr	r3, [r5, #12]
 800c126:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c12a:	60d3      	str	r3, [r2, #12]
 800c12c:	609a      	str	r2, [r3, #8]
 800c12e:	1f32      	subs	r2, r6, #4
 800c130:	2a24      	cmp	r2, #36	@ 0x24
 800c132:	d824      	bhi.n	800c17e <_realloc_r+0x292>
 800c134:	2a13      	cmp	r2, #19
 800c136:	d908      	bls.n	800c14a <_realloc_r+0x25e>
 800c138:	6823      	ldr	r3, [r4, #0]
 800c13a:	60ab      	str	r3, [r5, #8]
 800c13c:	6863      	ldr	r3, [r4, #4]
 800c13e:	60eb      	str	r3, [r5, #12]
 800c140:	2a1b      	cmp	r2, #27
 800c142:	d80a      	bhi.n	800c15a <_realloc_r+0x26e>
 800c144:	3408      	adds	r4, #8
 800c146:	f105 0010 	add.w	r0, r5, #16
 800c14a:	6823      	ldr	r3, [r4, #0]
 800c14c:	6003      	str	r3, [r0, #0]
 800c14e:	6863      	ldr	r3, [r4, #4]
 800c150:	6043      	str	r3, [r0, #4]
 800c152:	68a3      	ldr	r3, [r4, #8]
 800c154:	6083      	str	r3, [r0, #8]
 800c156:	9f01      	ldr	r7, [sp, #4]
 800c158:	e7c8      	b.n	800c0ec <_realloc_r+0x200>
 800c15a:	68a3      	ldr	r3, [r4, #8]
 800c15c:	612b      	str	r3, [r5, #16]
 800c15e:	68e3      	ldr	r3, [r4, #12]
 800c160:	616b      	str	r3, [r5, #20]
 800c162:	2a24      	cmp	r2, #36	@ 0x24
 800c164:	bf01      	itttt	eq
 800c166:	6923      	ldreq	r3, [r4, #16]
 800c168:	61ab      	streq	r3, [r5, #24]
 800c16a:	6963      	ldreq	r3, [r4, #20]
 800c16c:	61eb      	streq	r3, [r5, #28]
 800c16e:	bf19      	ittee	ne
 800c170:	3410      	addne	r4, #16
 800c172:	f105 0018 	addne.w	r0, r5, #24
 800c176:	f105 0020 	addeq.w	r0, r5, #32
 800c17a:	3418      	addeq	r4, #24
 800c17c:	e7e5      	b.n	800c14a <_realloc_r+0x25e>
 800c17e:	4621      	mov	r1, r4
 800c180:	f7fa fe30 	bl	8006de4 <memmove>
 800c184:	e7e7      	b.n	800c156 <_realloc_r+0x26a>
 800c186:	4659      	mov	r1, fp
 800c188:	4650      	mov	r0, sl
 800c18a:	f7fa f96f 	bl	800646c <_malloc_r>
 800c18e:	4683      	mov	fp, r0
 800c190:	b918      	cbnz	r0, 800c19a <_realloc_r+0x2ae>
 800c192:	4650      	mov	r0, sl
 800c194:	f7fa fbaa 	bl	80068ec <__malloc_unlock>
 800c198:	e6c7      	b.n	800bf2a <_realloc_r+0x3e>
 800c19a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c19e:	f023 0301 	bic.w	r3, r3, #1
 800c1a2:	444b      	add	r3, r9
 800c1a4:	f1a0 0208 	sub.w	r2, r0, #8
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d107      	bne.n	800c1bc <_realloc_r+0x2d0>
 800c1ac:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800c1b0:	f027 0703 	bic.w	r7, r7, #3
 800c1b4:	4437      	add	r7, r6
 800c1b6:	e6f8      	b.n	800bfaa <_realloc_r+0xbe>
 800c1b8:	20000058 	.word	0x20000058
 800c1bc:	1f32      	subs	r2, r6, #4
 800c1be:	2a24      	cmp	r2, #36	@ 0x24
 800c1c0:	d82d      	bhi.n	800c21e <_realloc_r+0x332>
 800c1c2:	2a13      	cmp	r2, #19
 800c1c4:	d928      	bls.n	800c218 <_realloc_r+0x32c>
 800c1c6:	6823      	ldr	r3, [r4, #0]
 800c1c8:	6003      	str	r3, [r0, #0]
 800c1ca:	6863      	ldr	r3, [r4, #4]
 800c1cc:	6043      	str	r3, [r0, #4]
 800c1ce:	2a1b      	cmp	r2, #27
 800c1d0:	d80e      	bhi.n	800c1f0 <_realloc_r+0x304>
 800c1d2:	f104 0208 	add.w	r2, r4, #8
 800c1d6:	f100 0308 	add.w	r3, r0, #8
 800c1da:	6811      	ldr	r1, [r2, #0]
 800c1dc:	6019      	str	r1, [r3, #0]
 800c1de:	6851      	ldr	r1, [r2, #4]
 800c1e0:	6059      	str	r1, [r3, #4]
 800c1e2:	6892      	ldr	r2, [r2, #8]
 800c1e4:	609a      	str	r2, [r3, #8]
 800c1e6:	4621      	mov	r1, r4
 800c1e8:	4650      	mov	r0, sl
 800c1ea:	f7fa ff45 	bl	8007078 <_free_r>
 800c1ee:	e73f      	b.n	800c070 <_realloc_r+0x184>
 800c1f0:	68a3      	ldr	r3, [r4, #8]
 800c1f2:	6083      	str	r3, [r0, #8]
 800c1f4:	68e3      	ldr	r3, [r4, #12]
 800c1f6:	60c3      	str	r3, [r0, #12]
 800c1f8:	2a24      	cmp	r2, #36	@ 0x24
 800c1fa:	bf01      	itttt	eq
 800c1fc:	6923      	ldreq	r3, [r4, #16]
 800c1fe:	6103      	streq	r3, [r0, #16]
 800c200:	6961      	ldreq	r1, [r4, #20]
 800c202:	6141      	streq	r1, [r0, #20]
 800c204:	bf19      	ittee	ne
 800c206:	f104 0210 	addne.w	r2, r4, #16
 800c20a:	f100 0310 	addne.w	r3, r0, #16
 800c20e:	f104 0218 	addeq.w	r2, r4, #24
 800c212:	f100 0318 	addeq.w	r3, r0, #24
 800c216:	e7e0      	b.n	800c1da <_realloc_r+0x2ee>
 800c218:	4603      	mov	r3, r0
 800c21a:	4622      	mov	r2, r4
 800c21c:	e7dd      	b.n	800c1da <_realloc_r+0x2ee>
 800c21e:	4621      	mov	r1, r4
 800c220:	f7fa fde0 	bl	8006de4 <memmove>
 800c224:	e7df      	b.n	800c1e6 <_realloc_r+0x2fa>
 800c226:	4637      	mov	r7, r6
 800c228:	e6bf      	b.n	800bfaa <_realloc_r+0xbe>
 800c22a:	431f      	orrs	r7, r3
 800c22c:	f8c9 7004 	str.w	r7, [r9, #4]
 800c230:	6853      	ldr	r3, [r2, #4]
 800c232:	f043 0301 	orr.w	r3, r3, #1
 800c236:	6053      	str	r3, [r2, #4]
 800c238:	e6d3      	b.n	800bfe2 <_realloc_r+0xf6>
 800c23a:	bf00      	nop

0800c23c <__ascii_wctomb>:
 800c23c:	4603      	mov	r3, r0
 800c23e:	4608      	mov	r0, r1
 800c240:	b141      	cbz	r1, 800c254 <__ascii_wctomb+0x18>
 800c242:	2aff      	cmp	r2, #255	@ 0xff
 800c244:	d904      	bls.n	800c250 <__ascii_wctomb+0x14>
 800c246:	228a      	movs	r2, #138	@ 0x8a
 800c248:	601a      	str	r2, [r3, #0]
 800c24a:	f04f 30ff 	mov.w	r0, #4294967295
 800c24e:	4770      	bx	lr
 800c250:	700a      	strb	r2, [r1, #0]
 800c252:	2001      	movs	r0, #1
 800c254:	4770      	bx	lr
	...

0800c258 <_wcrtomb_r>:
 800c258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c25a:	4c09      	ldr	r4, [pc, #36]	@ (800c280 <_wcrtomb_r+0x28>)
 800c25c:	b085      	sub	sp, #20
 800c25e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 800c262:	4605      	mov	r5, r0
 800c264:	461e      	mov	r6, r3
 800c266:	b909      	cbnz	r1, 800c26c <_wcrtomb_r+0x14>
 800c268:	460a      	mov	r2, r1
 800c26a:	a901      	add	r1, sp, #4
 800c26c:	47b8      	blx	r7
 800c26e:	1c43      	adds	r3, r0, #1
 800c270:	bf01      	itttt	eq
 800c272:	2300      	moveq	r3, #0
 800c274:	6033      	streq	r3, [r6, #0]
 800c276:	238a      	moveq	r3, #138	@ 0x8a
 800c278:	602b      	streq	r3, [r5, #0]
 800c27a:	b005      	add	sp, #20
 800c27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c27e:	bf00      	nop
 800c280:	20000594 	.word	0x20000594

0800c284 <__ssprint_r>:
 800c284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c288:	6893      	ldr	r3, [r2, #8]
 800c28a:	f8d2 b000 	ldr.w	fp, [r2]
 800c28e:	9001      	str	r0, [sp, #4]
 800c290:	460c      	mov	r4, r1
 800c292:	4617      	mov	r7, r2
 800c294:	2b00      	cmp	r3, #0
 800c296:	d157      	bne.n	800c348 <__ssprint_r+0xc4>
 800c298:	2000      	movs	r0, #0
 800c29a:	2300      	movs	r3, #0
 800c29c:	607b      	str	r3, [r7, #4]
 800c29e:	b003      	add	sp, #12
 800c2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a4:	e9db a800 	ldrd	sl, r8, [fp]
 800c2a8:	f10b 0b08 	add.w	fp, fp, #8
 800c2ac:	68a6      	ldr	r6, [r4, #8]
 800c2ae:	6820      	ldr	r0, [r4, #0]
 800c2b0:	f1b8 0f00 	cmp.w	r8, #0
 800c2b4:	d0f6      	beq.n	800c2a4 <__ssprint_r+0x20>
 800c2b6:	45b0      	cmp	r8, r6
 800c2b8:	d32e      	bcc.n	800c318 <__ssprint_r+0x94>
 800c2ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2be:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c2c2:	d029      	beq.n	800c318 <__ssprint_r+0x94>
 800c2c4:	6921      	ldr	r1, [r4, #16]
 800c2c6:	6965      	ldr	r5, [r4, #20]
 800c2c8:	eba0 0901 	sub.w	r9, r0, r1
 800c2cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2d4:	f109 0001 	add.w	r0, r9, #1
 800c2d8:	106d      	asrs	r5, r5, #1
 800c2da:	4440      	add	r0, r8
 800c2dc:	4285      	cmp	r5, r0
 800c2de:	bf38      	it	cc
 800c2e0:	4605      	movcc	r5, r0
 800c2e2:	0553      	lsls	r3, r2, #21
 800c2e4:	d534      	bpl.n	800c350 <__ssprint_r+0xcc>
 800c2e6:	9801      	ldr	r0, [sp, #4]
 800c2e8:	4629      	mov	r1, r5
 800c2ea:	f7fa f8bf 	bl	800646c <_malloc_r>
 800c2ee:	4606      	mov	r6, r0
 800c2f0:	2800      	cmp	r0, #0
 800c2f2:	d038      	beq.n	800c366 <__ssprint_r+0xe2>
 800c2f4:	464a      	mov	r2, r9
 800c2f6:	6921      	ldr	r1, [r4, #16]
 800c2f8:	f7fa fe4a 	bl	8006f90 <memcpy>
 800c2fc:	89a2      	ldrh	r2, [r4, #12]
 800c2fe:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800c302:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c306:	81a2      	strh	r2, [r4, #12]
 800c308:	6126      	str	r6, [r4, #16]
 800c30a:	6165      	str	r5, [r4, #20]
 800c30c:	444e      	add	r6, r9
 800c30e:	eba5 0509 	sub.w	r5, r5, r9
 800c312:	6026      	str	r6, [r4, #0]
 800c314:	60a5      	str	r5, [r4, #8]
 800c316:	4646      	mov	r6, r8
 800c318:	4546      	cmp	r6, r8
 800c31a:	bf28      	it	cs
 800c31c:	4646      	movcs	r6, r8
 800c31e:	4632      	mov	r2, r6
 800c320:	4651      	mov	r1, sl
 800c322:	6820      	ldr	r0, [r4, #0]
 800c324:	f7fa fd5e 	bl	8006de4 <memmove>
 800c328:	68a2      	ldr	r2, [r4, #8]
 800c32a:	1b92      	subs	r2, r2, r6
 800c32c:	60a2      	str	r2, [r4, #8]
 800c32e:	6822      	ldr	r2, [r4, #0]
 800c330:	4432      	add	r2, r6
 800c332:	6022      	str	r2, [r4, #0]
 800c334:	68ba      	ldr	r2, [r7, #8]
 800c336:	eba2 0308 	sub.w	r3, r2, r8
 800c33a:	44c2      	add	sl, r8
 800c33c:	60bb      	str	r3, [r7, #8]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d0aa      	beq.n	800c298 <__ssprint_r+0x14>
 800c342:	f04f 0800 	mov.w	r8, #0
 800c346:	e7b1      	b.n	800c2ac <__ssprint_r+0x28>
 800c348:	f04f 0a00 	mov.w	sl, #0
 800c34c:	46d0      	mov	r8, sl
 800c34e:	e7ad      	b.n	800c2ac <__ssprint_r+0x28>
 800c350:	9801      	ldr	r0, [sp, #4]
 800c352:	462a      	mov	r2, r5
 800c354:	f7ff fdca 	bl	800beec <_realloc_r>
 800c358:	4606      	mov	r6, r0
 800c35a:	2800      	cmp	r0, #0
 800c35c:	d1d4      	bne.n	800c308 <__ssprint_r+0x84>
 800c35e:	6921      	ldr	r1, [r4, #16]
 800c360:	9801      	ldr	r0, [sp, #4]
 800c362:	f7fa fe89 	bl	8007078 <_free_r>
 800c366:	9a01      	ldr	r2, [sp, #4]
 800c368:	230c      	movs	r3, #12
 800c36a:	6013      	str	r3, [r2, #0]
 800c36c:	89a3      	ldrh	r3, [r4, #12]
 800c36e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c372:	81a3      	strh	r3, [r4, #12]
 800c374:	2300      	movs	r3, #0
 800c376:	60bb      	str	r3, [r7, #8]
 800c378:	f04f 30ff 	mov.w	r0, #4294967295
 800c37c:	e78d      	b.n	800c29a <__ssprint_r+0x16>

0800c37e <__swhatbuf_r>:
 800c37e:	b570      	push	{r4, r5, r6, lr}
 800c380:	460c      	mov	r4, r1
 800c382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c386:	2900      	cmp	r1, #0
 800c388:	b096      	sub	sp, #88	@ 0x58
 800c38a:	4615      	mov	r5, r2
 800c38c:	461e      	mov	r6, r3
 800c38e:	da07      	bge.n	800c3a0 <__swhatbuf_r+0x22>
 800c390:	89a1      	ldrh	r1, [r4, #12]
 800c392:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 800c396:	d117      	bne.n	800c3c8 <__swhatbuf_r+0x4a>
 800c398:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c39c:	4608      	mov	r0, r1
 800c39e:	e00f      	b.n	800c3c0 <__swhatbuf_r+0x42>
 800c3a0:	466a      	mov	r2, sp
 800c3a2:	f000 f899 	bl	800c4d8 <_fstat_r>
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	dbf2      	blt.n	800c390 <__swhatbuf_r+0x12>
 800c3aa:	9901      	ldr	r1, [sp, #4]
 800c3ac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c3b0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c3b4:	4259      	negs	r1, r3
 800c3b6:	4159      	adcs	r1, r3
 800c3b8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800c3bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3c0:	6031      	str	r1, [r6, #0]
 800c3c2:	602b      	str	r3, [r5, #0]
 800c3c4:	b016      	add	sp, #88	@ 0x58
 800c3c6:	bd70      	pop	{r4, r5, r6, pc}
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	2340      	movs	r3, #64	@ 0x40
 800c3cc:	e7e6      	b.n	800c39c <__swhatbuf_r+0x1e>

0800c3ce <__smakebuf_r>:
 800c3ce:	898b      	ldrh	r3, [r1, #12]
 800c3d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3d2:	079d      	lsls	r5, r3, #30
 800c3d4:	4606      	mov	r6, r0
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	d507      	bpl.n	800c3ea <__smakebuf_r+0x1c>
 800c3da:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 800c3de:	6023      	str	r3, [r4, #0]
 800c3e0:	6123      	str	r3, [r4, #16]
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	6163      	str	r3, [r4, #20]
 800c3e6:	b003      	add	sp, #12
 800c3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3ea:	ab01      	add	r3, sp, #4
 800c3ec:	466a      	mov	r2, sp
 800c3ee:	f7ff ffc6 	bl	800c37e <__swhatbuf_r>
 800c3f2:	9f00      	ldr	r7, [sp, #0]
 800c3f4:	4605      	mov	r5, r0
 800c3f6:	4639      	mov	r1, r7
 800c3f8:	4630      	mov	r0, r6
 800c3fa:	f7fa f837 	bl	800646c <_malloc_r>
 800c3fe:	b948      	cbnz	r0, 800c414 <__smakebuf_r+0x46>
 800c400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c404:	059a      	lsls	r2, r3, #22
 800c406:	d4ee      	bmi.n	800c3e6 <__smakebuf_r+0x18>
 800c408:	f023 0303 	bic.w	r3, r3, #3
 800c40c:	f043 0302 	orr.w	r3, r3, #2
 800c410:	81a3      	strh	r3, [r4, #12]
 800c412:	e7e2      	b.n	800c3da <__smakebuf_r+0xc>
 800c414:	89a3      	ldrh	r3, [r4, #12]
 800c416:	6020      	str	r0, [r4, #0]
 800c418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c41c:	81a3      	strh	r3, [r4, #12]
 800c41e:	9b01      	ldr	r3, [sp, #4]
 800c420:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c424:	b15b      	cbz	r3, 800c43e <__smakebuf_r+0x70>
 800c426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c42a:	4630      	mov	r0, r6
 800c42c:	f000 f866 	bl	800c4fc <_isatty_r>
 800c430:	b128      	cbz	r0, 800c43e <__smakebuf_r+0x70>
 800c432:	89a3      	ldrh	r3, [r4, #12]
 800c434:	f023 0303 	bic.w	r3, r3, #3
 800c438:	f043 0301 	orr.w	r3, r3, #1
 800c43c:	81a3      	strh	r3, [r4, #12]
 800c43e:	89a3      	ldrh	r3, [r4, #12]
 800c440:	431d      	orrs	r5, r3
 800c442:	81a5      	strh	r5, [r4, #12]
 800c444:	e7cf      	b.n	800c3e6 <__smakebuf_r+0x18>

0800c446 <__swbuf_r>:
 800c446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c448:	460e      	mov	r6, r1
 800c44a:	4614      	mov	r4, r2
 800c44c:	4605      	mov	r5, r0
 800c44e:	b118      	cbz	r0, 800c458 <__swbuf_r+0x12>
 800c450:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c452:	b90b      	cbnz	r3, 800c458 <__swbuf_r+0x12>
 800c454:	f7fa fb60 	bl	8006b18 <__sinit>
 800c458:	69a3      	ldr	r3, [r4, #24]
 800c45a:	60a3      	str	r3, [r4, #8]
 800c45c:	89a3      	ldrh	r3, [r4, #12]
 800c45e:	0719      	lsls	r1, r3, #28
 800c460:	d501      	bpl.n	800c466 <__swbuf_r+0x20>
 800c462:	6923      	ldr	r3, [r4, #16]
 800c464:	b943      	cbnz	r3, 800c478 <__swbuf_r+0x32>
 800c466:	4621      	mov	r1, r4
 800c468:	4628      	mov	r0, r5
 800c46a:	f7fe fa5b 	bl	800a924 <__swsetup_r>
 800c46e:	b118      	cbz	r0, 800c478 <__swbuf_r+0x32>
 800c470:	f04f 37ff 	mov.w	r7, #4294967295
 800c474:	4638      	mov	r0, r7
 800c476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c47c:	b2f6      	uxtb	r6, r6
 800c47e:	049a      	lsls	r2, r3, #18
 800c480:	4637      	mov	r7, r6
 800c482:	d406      	bmi.n	800c492 <__swbuf_r+0x4c>
 800c484:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c488:	81a3      	strh	r3, [r4, #12]
 800c48a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c48c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c490:	6663      	str	r3, [r4, #100]	@ 0x64
 800c492:	6823      	ldr	r3, [r4, #0]
 800c494:	6922      	ldr	r2, [r4, #16]
 800c496:	1a98      	subs	r0, r3, r2
 800c498:	6963      	ldr	r3, [r4, #20]
 800c49a:	4283      	cmp	r3, r0
 800c49c:	dc05      	bgt.n	800c4aa <__swbuf_r+0x64>
 800c49e:	4621      	mov	r1, r4
 800c4a0:	4628      	mov	r0, r5
 800c4a2:	f7fe f8cd 	bl	800a640 <_fflush_r>
 800c4a6:	2800      	cmp	r0, #0
 800c4a8:	d1e2      	bne.n	800c470 <__swbuf_r+0x2a>
 800c4aa:	68a3      	ldr	r3, [r4, #8]
 800c4ac:	3b01      	subs	r3, #1
 800c4ae:	60a3      	str	r3, [r4, #8]
 800c4b0:	6823      	ldr	r3, [r4, #0]
 800c4b2:	1c5a      	adds	r2, r3, #1
 800c4b4:	6022      	str	r2, [r4, #0]
 800c4b6:	701e      	strb	r6, [r3, #0]
 800c4b8:	6962      	ldr	r2, [r4, #20]
 800c4ba:	1c43      	adds	r3, r0, #1
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d004      	beq.n	800c4ca <__swbuf_r+0x84>
 800c4c0:	89a3      	ldrh	r3, [r4, #12]
 800c4c2:	07db      	lsls	r3, r3, #31
 800c4c4:	d5d6      	bpl.n	800c474 <__swbuf_r+0x2e>
 800c4c6:	2e0a      	cmp	r6, #10
 800c4c8:	d1d4      	bne.n	800c474 <__swbuf_r+0x2e>
 800c4ca:	4621      	mov	r1, r4
 800c4cc:	4628      	mov	r0, r5
 800c4ce:	f7fe f8b7 	bl	800a640 <_fflush_r>
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	d0ce      	beq.n	800c474 <__swbuf_r+0x2e>
 800c4d6:	e7cb      	b.n	800c470 <__swbuf_r+0x2a>

0800c4d8 <_fstat_r>:
 800c4d8:	b538      	push	{r3, r4, r5, lr}
 800c4da:	4d07      	ldr	r5, [pc, #28]	@ (800c4f8 <_fstat_r+0x20>)
 800c4dc:	2300      	movs	r3, #0
 800c4de:	4604      	mov	r4, r0
 800c4e0:	4608      	mov	r0, r1
 800c4e2:	4611      	mov	r1, r2
 800c4e4:	602b      	str	r3, [r5, #0]
 800c4e6:	f7f5 f9f1 	bl	80018cc <_fstat>
 800c4ea:	1c43      	adds	r3, r0, #1
 800c4ec:	d102      	bne.n	800c4f4 <_fstat_r+0x1c>
 800c4ee:	682b      	ldr	r3, [r5, #0]
 800c4f0:	b103      	cbz	r3, 800c4f4 <_fstat_r+0x1c>
 800c4f2:	6023      	str	r3, [r4, #0]
 800c4f4:	bd38      	pop	{r3, r4, r5, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20001370 	.word	0x20001370

0800c4fc <_isatty_r>:
 800c4fc:	b538      	push	{r3, r4, r5, lr}
 800c4fe:	4d06      	ldr	r5, [pc, #24]	@ (800c518 <_isatty_r+0x1c>)
 800c500:	2300      	movs	r3, #0
 800c502:	4604      	mov	r4, r0
 800c504:	4608      	mov	r0, r1
 800c506:	602b      	str	r3, [r5, #0]
 800c508:	f7f5 f9f0 	bl	80018ec <_isatty>
 800c50c:	1c43      	adds	r3, r0, #1
 800c50e:	d102      	bne.n	800c516 <_isatty_r+0x1a>
 800c510:	682b      	ldr	r3, [r5, #0]
 800c512:	b103      	cbz	r3, 800c516 <_isatty_r+0x1a>
 800c514:	6023      	str	r3, [r4, #0]
 800c516:	bd38      	pop	{r3, r4, r5, pc}
 800c518:	20001370 	.word	0x20001370

0800c51c <__assert_func>:
 800c51c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c51e:	4614      	mov	r4, r2
 800c520:	461a      	mov	r2, r3
 800c522:	4b09      	ldr	r3, [pc, #36]	@ (800c548 <__assert_func+0x2c>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4605      	mov	r5, r0
 800c528:	68d8      	ldr	r0, [r3, #12]
 800c52a:	b954      	cbnz	r4, 800c542 <__assert_func+0x26>
 800c52c:	4b07      	ldr	r3, [pc, #28]	@ (800c54c <__assert_func+0x30>)
 800c52e:	461c      	mov	r4, r3
 800c530:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c534:	9100      	str	r1, [sp, #0]
 800c536:	462b      	mov	r3, r5
 800c538:	4905      	ldr	r1, [pc, #20]	@ (800c550 <__assert_func+0x34>)
 800c53a:	f000 f843 	bl	800c5c4 <fiprintf>
 800c53e:	f000 f853 	bl	800c5e8 <abort>
 800c542:	4b04      	ldr	r3, [pc, #16]	@ (800c554 <__assert_func+0x38>)
 800c544:	e7f4      	b.n	800c530 <__assert_func+0x14>
 800c546:	bf00      	nop
 800c548:	2000046c 	.word	0x2000046c
 800c54c:	0800d67b 	.word	0x0800d67b
 800c550:	0800d64d 	.word	0x0800d64d
 800c554:	0800d640 	.word	0x0800d640

0800c558 <_calloc_r>:
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	fba1 1502 	umull	r1, r5, r1, r2
 800c55e:	b935      	cbnz	r5, 800c56e <_calloc_r+0x16>
 800c560:	f7f9 ff84 	bl	800646c <_malloc_r>
 800c564:	4604      	mov	r4, r0
 800c566:	b938      	cbnz	r0, 800c578 <_calloc_r+0x20>
 800c568:	2400      	movs	r4, #0
 800c56a:	4620      	mov	r0, r4
 800c56c:	bd38      	pop	{r3, r4, r5, pc}
 800c56e:	f7fa fcd5 	bl	8006f1c <__errno>
 800c572:	230c      	movs	r3, #12
 800c574:	6003      	str	r3, [r0, #0]
 800c576:	e7f7      	b.n	800c568 <_calloc_r+0x10>
 800c578:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c57c:	f022 0203 	bic.w	r2, r2, #3
 800c580:	3a04      	subs	r2, #4
 800c582:	2a24      	cmp	r2, #36	@ 0x24
 800c584:	d819      	bhi.n	800c5ba <_calloc_r+0x62>
 800c586:	2a13      	cmp	r2, #19
 800c588:	d915      	bls.n	800c5b6 <_calloc_r+0x5e>
 800c58a:	2a1b      	cmp	r2, #27
 800c58c:	e9c0 5500 	strd	r5, r5, [r0]
 800c590:	d806      	bhi.n	800c5a0 <_calloc_r+0x48>
 800c592:	f100 0308 	add.w	r3, r0, #8
 800c596:	2200      	movs	r2, #0
 800c598:	e9c3 2200 	strd	r2, r2, [r3]
 800c59c:	609a      	str	r2, [r3, #8]
 800c59e:	e7e4      	b.n	800c56a <_calloc_r+0x12>
 800c5a0:	2a24      	cmp	r2, #36	@ 0x24
 800c5a2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800c5a6:	bf11      	iteee	ne
 800c5a8:	f100 0310 	addne.w	r3, r0, #16
 800c5ac:	6105      	streq	r5, [r0, #16]
 800c5ae:	f100 0318 	addeq.w	r3, r0, #24
 800c5b2:	6145      	streq	r5, [r0, #20]
 800c5b4:	e7ef      	b.n	800c596 <_calloc_r+0x3e>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	e7ed      	b.n	800c596 <_calloc_r+0x3e>
 800c5ba:	4629      	mov	r1, r5
 800c5bc:	f7fa fc2c 	bl	8006e18 <memset>
 800c5c0:	e7d3      	b.n	800c56a <_calloc_r+0x12>
	...

0800c5c4 <fiprintf>:
 800c5c4:	b40e      	push	{r1, r2, r3}
 800c5c6:	b503      	push	{r0, r1, lr}
 800c5c8:	4601      	mov	r1, r0
 800c5ca:	ab03      	add	r3, sp, #12
 800c5cc:	4805      	ldr	r0, [pc, #20]	@ (800c5e4 <fiprintf+0x20>)
 800c5ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5d2:	6800      	ldr	r0, [r0, #0]
 800c5d4:	9301      	str	r3, [sp, #4]
 800c5d6:	f7fd fa8d 	bl	8009af4 <_vfiprintf_r>
 800c5da:	b002      	add	sp, #8
 800c5dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5e0:	b003      	add	sp, #12
 800c5e2:	4770      	bx	lr
 800c5e4:	2000046c 	.word	0x2000046c

0800c5e8 <abort>:
 800c5e8:	b508      	push	{r3, lr}
 800c5ea:	2006      	movs	r0, #6
 800c5ec:	f000 f82c 	bl	800c648 <raise>
 800c5f0:	2001      	movs	r0, #1
 800c5f2:	f7f5 f91b 	bl	800182c <_exit>

0800c5f6 <_raise_r>:
 800c5f6:	291f      	cmp	r1, #31
 800c5f8:	b538      	push	{r3, r4, r5, lr}
 800c5fa:	4605      	mov	r5, r0
 800c5fc:	460c      	mov	r4, r1
 800c5fe:	d904      	bls.n	800c60a <_raise_r+0x14>
 800c600:	2316      	movs	r3, #22
 800c602:	6003      	str	r3, [r0, #0]
 800c604:	f04f 30ff 	mov.w	r0, #4294967295
 800c608:	bd38      	pop	{r3, r4, r5, pc}
 800c60a:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 800c60e:	b112      	cbz	r2, 800c616 <_raise_r+0x20>
 800c610:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c614:	b94b      	cbnz	r3, 800c62a <_raise_r+0x34>
 800c616:	4628      	mov	r0, r5
 800c618:	f000 f830 	bl	800c67c <_getpid_r>
 800c61c:	4622      	mov	r2, r4
 800c61e:	4601      	mov	r1, r0
 800c620:	4628      	mov	r0, r5
 800c622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c626:	f000 b817 	b.w	800c658 <_kill_r>
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d00a      	beq.n	800c644 <_raise_r+0x4e>
 800c62e:	1c59      	adds	r1, r3, #1
 800c630:	d103      	bne.n	800c63a <_raise_r+0x44>
 800c632:	2316      	movs	r3, #22
 800c634:	6003      	str	r3, [r0, #0]
 800c636:	2001      	movs	r0, #1
 800c638:	e7e6      	b.n	800c608 <_raise_r+0x12>
 800c63a:	2100      	movs	r1, #0
 800c63c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c640:	4620      	mov	r0, r4
 800c642:	4798      	blx	r3
 800c644:	2000      	movs	r0, #0
 800c646:	e7df      	b.n	800c608 <_raise_r+0x12>

0800c648 <raise>:
 800c648:	4b02      	ldr	r3, [pc, #8]	@ (800c654 <raise+0xc>)
 800c64a:	4601      	mov	r1, r0
 800c64c:	6818      	ldr	r0, [r3, #0]
 800c64e:	f7ff bfd2 	b.w	800c5f6 <_raise_r>
 800c652:	bf00      	nop
 800c654:	2000046c 	.word	0x2000046c

0800c658 <_kill_r>:
 800c658:	b538      	push	{r3, r4, r5, lr}
 800c65a:	4d07      	ldr	r5, [pc, #28]	@ (800c678 <_kill_r+0x20>)
 800c65c:	2300      	movs	r3, #0
 800c65e:	4604      	mov	r4, r0
 800c660:	4608      	mov	r0, r1
 800c662:	4611      	mov	r1, r2
 800c664:	602b      	str	r3, [r5, #0]
 800c666:	f7f5 f8d1 	bl	800180c <_kill>
 800c66a:	1c43      	adds	r3, r0, #1
 800c66c:	d102      	bne.n	800c674 <_kill_r+0x1c>
 800c66e:	682b      	ldr	r3, [r5, #0]
 800c670:	b103      	cbz	r3, 800c674 <_kill_r+0x1c>
 800c672:	6023      	str	r3, [r4, #0]
 800c674:	bd38      	pop	{r3, r4, r5, pc}
 800c676:	bf00      	nop
 800c678:	20001370 	.word	0x20001370

0800c67c <_getpid_r>:
 800c67c:	f7f5 b8be 	b.w	80017fc <_getpid>

0800c680 <_init>:
 800c680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c682:	bf00      	nop
 800c684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c686:	bc08      	pop	{r3}
 800c688:	469e      	mov	lr, r3
 800c68a:	4770      	bx	lr

0800c68c <_fini>:
 800c68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c68e:	bf00      	nop
 800c690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c692:	bc08      	pop	{r3}
 800c694:	469e      	mov	lr, r3
 800c696:	4770      	bx	lr
